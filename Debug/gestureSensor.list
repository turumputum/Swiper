
gestureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c8  0801adc8  0801adc8  0002adc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bf90  0801bf90  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  0801bf90  0801bf90  0002bf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bf98  0801bf98  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bf98  0801bf98  0002bf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bf9c  0801bf9c  0002bf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  0801bfa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000360c  20000400  0801c3a0  00030400  2**3
                  ALLOC
 10 ._user_heap_stack 00001204  20003a0c  0801c3a0  00033a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aab6  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bf0  00000000  00000000  0005aee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  00061ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea8  00000000  00000000  00063c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021955  00000000  00000000  00065b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031ea4  00000000  00000000  0008745d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c3e8  00000000  00000000  000b9301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001556e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098e8  00000000  00000000  0015573c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000400 	.word	0x20000400
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801adac 	.word	0x0801adac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000404 	.word	0x20000404
 80001dc:	0801adac 	.word	0x0801adac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b974 	b.w	8000f80 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	9d08      	ldr	r5, [sp, #32]
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	468e      	mov	lr, r1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d14d      	bne.n	8000d5a <__udivmoddi4+0xaa>
 8000cbe:	428a      	cmp	r2, r1
 8000cc0:	4694      	mov	ip, r2
 8000cc2:	d969      	bls.n	8000d98 <__udivmoddi4+0xe8>
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	b152      	cbz	r2, 8000ce0 <__udivmoddi4+0x30>
 8000cca:	fa01 f302 	lsl.w	r3, r1, r2
 8000cce:	f1c2 0120 	rsb	r1, r2, #32
 8000cd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cda:	ea41 0e03 	orr.w	lr, r1, r3
 8000cde:	4094      	lsls	r4, r2
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	0c21      	lsrs	r1, r4, #16
 8000ce6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cea:	fa1f f78c 	uxth.w	r7, ip
 8000cee:	fb08 e316 	mls	r3, r8, r6, lr
 8000cf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf6:	fb06 f107 	mul.w	r1, r6, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d90a      	bls.n	8000d14 <__udivmoddi4+0x64>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d06:	f080 811f 	bcs.w	8000f48 <__udivmoddi4+0x298>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 811c 	bls.w	8000f48 <__udivmoddi4+0x298>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb00 f707 	mul.w	r7, r0, r7
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x92>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d34:	f080 810a 	bcs.w	8000f4c <__udivmoddi4+0x29c>
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	f240 8107 	bls.w	8000f4c <__udivmoddi4+0x29c>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	1be4      	subs	r4, r4, r7
 8000d48:	2600      	movs	r6, #0
 8000d4a:	b11d      	cbz	r5, 8000d54 <__udivmoddi4+0xa4>
 8000d4c:	40d4      	lsrs	r4, r2
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e9c5 4300 	strd	r4, r3, [r5]
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d909      	bls.n	8000d72 <__udivmoddi4+0xc2>
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	f000 80ef 	beq.w	8000f42 <__udivmoddi4+0x292>
 8000d64:	2600      	movs	r6, #0
 8000d66:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	fab3 f683 	clz	r6, r3
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d14a      	bne.n	8000e10 <__udivmoddi4+0x160>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xd4>
 8000d7e:	4282      	cmp	r2, r0
 8000d80:	f200 80f9 	bhi.w	8000f76 <__udivmoddi4+0x2c6>
 8000d84:	1a84      	subs	r4, r0, r2
 8000d86:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	469e      	mov	lr, r3
 8000d8e:	2d00      	cmp	r5, #0
 8000d90:	d0e0      	beq.n	8000d54 <__udivmoddi4+0xa4>
 8000d92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d96:	e7dd      	b.n	8000d54 <__udivmoddi4+0xa4>
 8000d98:	b902      	cbnz	r2, 8000d9c <__udivmoddi4+0xec>
 8000d9a:	deff      	udf	#255	; 0xff
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	f040 8092 	bne.w	8000eca <__udivmoddi4+0x21a>
 8000da6:	eba1 010c 	sub.w	r1, r1, ip
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2601      	movs	r6, #1
 8000db4:	0c20      	lsrs	r0, r4, #16
 8000db6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dba:	fb07 1113 	mls	r1, r7, r3, r1
 8000dbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc2:	fb0e f003 	mul.w	r0, lr, r3
 8000dc6:	4288      	cmp	r0, r1
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x12c>
 8000dca:	eb1c 0101 	adds.w	r1, ip, r1
 8000dce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x12a>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2c0>
 8000dda:	4643      	mov	r3, r8
 8000ddc:	1a09      	subs	r1, r1, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de4:	fb07 1110 	mls	r1, r7, r0, r1
 8000de8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x156>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x154>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e04:	4608      	mov	r0, r1
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0e:	e79c      	b.n	8000d4a <__udivmoddi4+0x9a>
 8000e10:	f1c6 0720 	rsb	r7, r6, #32
 8000e14:	40b3      	lsls	r3, r6
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e22:	fa01 f306 	lsl.w	r3, r1, r6
 8000e26:	431c      	orrs	r4, r3
 8000e28:	40f9      	lsrs	r1, r7
 8000e2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e36:	0c20      	lsrs	r0, r4, #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e44:	fb08 f00e 	mul.w	r0, r8, lr
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b8>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2bc>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2bc>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	1a09      	subs	r1, r1, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e70:	fb09 1110 	mls	r1, r9, r0, r1
 8000e74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e7c:	458e      	cmp	lr, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1e2>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2b4>
 8000e8a:	458e      	cmp	lr, r1
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2b4>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e96:	fba0 9402 	umull	r9, r4, r0, r2
 8000e9a:	eba1 010e 	sub.w	r1, r1, lr
 8000e9e:	42a1      	cmp	r1, r4
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46a6      	mov	lr, r4
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x2a4>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x2a0>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x212>
 8000eaa:	ebb3 0208 	subs.w	r2, r3, r8
 8000eae:	eb61 010e 	sbc.w	r1, r1, lr
 8000eb2:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eba:	40f1      	lsrs	r1, r6
 8000ebc:	431f      	orrs	r7, r3
 8000ebe:	e9c5 7100 	strd	r7, r1, [r5]
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	f1c2 0320 	rsb	r3, r2, #32
 8000ece:	40d8      	lsrs	r0, r3
 8000ed0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	4301      	orrs	r1, r0
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee8:	fb07 3610 	mls	r6, r7, r0, r3
 8000eec:	0c0b      	lsrs	r3, r1, #16
 8000eee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ef2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef6:	429e      	cmp	r6, r3
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x260>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b8>
 8000f08:	429e      	cmp	r6, r3
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b8>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	1b9b      	subs	r3, r3, r6
 8000f12:	b289      	uxth	r1, r1
 8000f14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f18:	fb07 3316 	mls	r3, r7, r6, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb06 f30e 	mul.w	r3, r6, lr
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x28a>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2b0>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2b0>
 8000f36:	3e02      	subs	r6, #2
 8000f38:	4461      	add	r1, ip
 8000f3a:	1ac9      	subs	r1, r1, r3
 8000f3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0x104>
 8000f42:	462e      	mov	r6, r5
 8000f44:	4628      	mov	r0, r5
 8000f46:	e705      	b.n	8000d54 <__udivmoddi4+0xa4>
 8000f48:	4606      	mov	r6, r0
 8000f4a:	e6e3      	b.n	8000d14 <__udivmoddi4+0x64>
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	e6f8      	b.n	8000d42 <__udivmoddi4+0x92>
 8000f50:	454b      	cmp	r3, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f8>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f8>
 8000f60:	4646      	mov	r6, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x28a>
 8000f64:	4620      	mov	r0, r4
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1e2>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x260>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b8>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	4461      	add	r1, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x12c>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e709      	b.n	8000d8e <__udivmoddi4+0xde>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x156>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	2039      	movs	r0, #57	; 0x39
 8000fac:	f003 f80b 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fb0:	2039      	movs	r0, #57	; 0x39
 8000fb2:	f003 f824 	bl	8003ffe <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a40      	ldr	r2, [pc, #256]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a39      	ldr	r2, [pc, #228]	; (8001100 <MX_GPIO_Init+0x13c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001050:	482c      	ldr	r0, [pc, #176]	; (8001104 <MX_GPIO_Init+0x140>)
 8001052:	f003 fd13 	bl	8004a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2110      	movs	r1, #16
 800105a:	482b      	ldr	r0, [pc, #172]	; (8001108 <MX_GPIO_Init+0x144>)
 800105c:	f003 fd0e 	bl	8004a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4822      	ldr	r0, [pc, #136]	; (8001104 <MX_GPIO_Init+0x140>)
 800107a:	f003 fb7b 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_Pin|IN1_Pin|IN2_Pin;
 800107e:	2307      	movs	r3, #7
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <MX_GPIO_Init+0x144>)
 8001092:	f003 fb6f 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001096:	2310      	movs	r3, #16
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2302      	movs	r3, #2
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <MX_GPIO_Init+0x144>)
 80010ae:	f003 fb61 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Int_Pin;
 80010b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Int_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <MX_GPIO_Init+0x148>)
 80010ca:	f003 fb53 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ce:	2320      	movs	r3, #32
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <MX_GPIO_Init+0x148>)
 80010e4:	f003 fb46 	bl	8004774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f002 ff6a 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f002 ff83 	bl	8003ffe <HAL_NVIC_EnableIRQ>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400

08001110 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x50>)
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <MX_I2C1_Init+0x54>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x50>)
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_I2C1_Init+0x58>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_I2C1_Init+0x50>)
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_I2C1_Init+0x50>)
 800114e:	f003 fcc7 	bl	8004ae0 <HAL_I2C_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f001 fad8 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000041c 	.word	0x2000041c
 8001164:	40005400 	.word	0x40005400
 8001168:	000186a0 	.word	0x000186a0

0800116c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_I2C_MspInit+0xa4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d13b      	bne.n	8001206 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_I2C_MspInit+0xa8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_I2C_MspInit+0xa8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_I2C_MspInit+0xa8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011aa:	23c0      	movs	r3, #192	; 0xc0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ae:	2312      	movs	r3, #18
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ba:	2304      	movs	r3, #4
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4814      	ldr	r0, [pc, #80]	; (8001218 <HAL_I2C_MspInit+0xac>)
 80011c6:	f003 fad5 	bl	8004774 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_I2C_MspInit+0xa8>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_I2C_MspInit+0xa8>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_I2C_MspInit+0xa8>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	201f      	movs	r0, #31
 80011ec:	f002 feeb 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011f0:	201f      	movs	r0, #31
 80011f2:	f002 ff04 	bl	8003ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2020      	movs	r0, #32
 80011fc:	f002 fee3 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001200:	2020      	movs	r0, #32
 8001202:	f002 fefc 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005400 	.word	0x40005400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <rstrip>:
    size_t num_left;
} ini_parse_string_ctx;

/* Strip whitespace chars off end of given string, in place. Return s. */
static char* rstrip(char* s)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    char* p = s + strlen(s);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff f835 	bl	8000294 <strlen>
 800122a:	4602      	mov	r2, r0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
    while (p > s && isspace((unsigned char)(*--p)))
 8001232:	e002      	b.n	800123a <rstrip+0x1e>
        *p = '\0';
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
    while (p > s && isspace((unsigned char)(*--p)))
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	d90c      	bls.n	800125c <rstrip+0x40>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <rstrip+0x4c>)
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1eb      	bne.n	8001234 <rstrip+0x18>
    return s;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0801bc18 	.word	0x0801bc18

0800126c <lskip>:

/* Return pointer to first non-whitespace char in given string. */
static char* lskip(const char* s)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 8001274:	e002      	b.n	800127c <lskip+0x10>
        s++;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3301      	adds	r3, #1
 800127a:	607b      	str	r3, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <lskip+0x2c>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <lskip+0x3c>)
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ee      	bne.n	8001276 <lskip+0xa>
    return (char*)s;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	0801bc18 	.word	0x0801bc18

080012ac <find_chars_or_comment>:

/* Return pointer to first char (of chars) or inline comment in given string,
   or pointer to NUL at end of string if neither found. Inline comment must
   be prefixed by a whitespace character to register as a comment. */
static char* find_chars_or_comment(const char* s, const char* chars)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
#if INI_ALLOW_INLINE_COMMENTS
    int was_space = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
    while (*s && (!chars || !strchr(chars, *s)) &&
 80012ba:	e00b      	b.n	80012d4 <find_chars_or_comment+0x28>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
        was_space = isspace((unsigned char)(*s));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <find_chars_or_comment+0x6c>)
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60fb      	str	r3, [r7, #12]
        s++;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
    while (*s && (!chars || !strchr(chars, *s)) &&
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d017      	beq.n	800130c <find_chars_or_comment+0x60>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d008      	beq.n	80012f4 <find_chars_or_comment+0x48>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f017 fe58 	bl	8018f9e <strchr>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <find_chars_or_comment+0x60>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0e0      	beq.n	80012bc <find_chars_or_comment+0x10>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <find_chars_or_comment+0x70>)
 8001302:	f017 fe4c 	bl	8018f9e <strchr>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0d7      	beq.n	80012bc <find_chars_or_comment+0x10>
#else
    while (*s && (!chars || !strchr(chars, *s))) {
        s++;
    }
#endif
    return (char*)s;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0801bc18 	.word	0x0801bc18
 800131c:	0801adc8 	.word	0x0801adc8

08001320 <strncpy0>:

/* Similar to strncpy, but ensures dest (size bytes) is
   NUL-terminated, and doesn't pad with NULs. */
static char* strncpy0(char* dest, const char* src, size_t size)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
    /* Could use strncpy internally, but it causes gcc warnings (see issue #91) */
    size_t i;
    for (i = 0; i < size - 1 && src[i]; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <strncpy0+0x28>
        dest[i] = src[i];
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	441a      	add	r2, r3
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	440b      	add	r3, r1
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size - 1 && src[i]; i++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	429a      	cmp	r2, r3
 8001350:	d205      	bcs.n	800135e <strncpy0+0x3e>
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1e9      	bne.n	8001332 <strncpy0+0x12>
    dest[i] = '\0';
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	4413      	add	r3, r2
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
    return dest;
 8001368:	68fb      	ldr	r3, [r7, #12]
}
 800136a:	4618      	mov	r0, r3
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <ini_parse_stream>:

/* See documentation in header file. */
int ini_parse_stream(ini_reader reader, void* stream, ini_handler handler,
                     void* user)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b0d9      	sub	sp, #356	; 0x164
 800137c:	af00      	add	r7, sp, #0
 800137e:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8001382:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 8001386:	6020      	str	r0, [r4, #0]
 8001388:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800138c:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8001390:	6001      	str	r1, [r0, #0]
 8001392:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001396:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 800139a:	600a      	str	r2, [r1, #0]
 800139c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80013a0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80013a4:	6013      	str	r3, [r2, #0]
    /* Uses a fair bit of stack (use heap instead if you need to) */
#if INI_USE_STACK
    char line[INI_MAX_LINE];
    int max_line = INI_MAX_LINE;
 80013a6:	23c8      	movs	r3, #200	; 0xc8
 80013a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
#endif
#if INI_ALLOW_REALLOC && !INI_USE_STACK
    char* new_line;
    size_t offset;
#endif
    char section[MAX_SECTION] = "";
 80013ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	222e      	movs	r2, #46	; 0x2e
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f017 fbd0 	bl	8018b64 <memset>
    char prev_name[MAX_NAME] = "";
 80013c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	3304      	adds	r3, #4
 80013d2:	222e      	movs	r2, #46	; 0x2e
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f017 fbc4 	bl	8018b64 <memset>

    char* start;
    char* end;
    char* name;
    char* value;
    int lineno = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    int error = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#else
#define HANDLER(u, s, n, v) handler(u, s, n, v)
#endif

    /* Scan through stream line by line */
    while (reader(line, (int)max_line, stream) != NULL) {
 80013e8:	e104      	b.n	80015f4 <ini_parse_stream+0x27c>
                break;
            offset += strlen(line + offset);
        }
#endif

        lineno++;
 80013ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013ee:	3301      	adds	r3, #1
 80013f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        start = line;
 80013f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#if INI_ALLOW_BOM
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 80013fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001400:	2b01      	cmp	r3, #1
 8001402:	d115      	bne.n	8001430 <ini_parse_stream+0xb8>
 8001404:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2bef      	cmp	r3, #239	; 0xef
 800140c:	d110      	bne.n	8001430 <ini_parse_stream+0xb8>
                           (unsigned char)start[1] == 0xBB &&
 800140e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001412:	3301      	adds	r3, #1
 8001414:	781b      	ldrb	r3, [r3, #0]
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 8001416:	2bbb      	cmp	r3, #187	; 0xbb
 8001418:	d10a      	bne.n	8001430 <ini_parse_stream+0xb8>
                           (unsigned char)start[2] == 0xBF) {
 800141a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800141e:	3302      	adds	r3, #2
 8001420:	781b      	ldrb	r3, [r3, #0]
                           (unsigned char)start[1] == 0xBB &&
 8001422:	2bbf      	cmp	r3, #191	; 0xbf
 8001424:	d104      	bne.n	8001430 <ini_parse_stream+0xb8>
            start += 3;
 8001426:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800142a:	3303      	adds	r3, #3
 800142c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        }
#endif
        start = lskip(rstrip(start));
 8001430:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001434:	f7ff fef2 	bl	800121c <rstrip>
 8001438:	4603      	mov	r3, r0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff16 	bl	800126c <lskip>
 8001440:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

        if (strchr(INI_START_COMMENT_PREFIXES, *start)) {
 8001444:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4876      	ldr	r0, [pc, #472]	; (8001628 <ini_parse_stream+0x2b0>)
 800144e:	f017 fda6 	bl	8018f9e <strchr>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 80cd 	bne.w	80015f4 <ini_parse_stream+0x27c>
            /* Start-of-line comment */
        }
#if INI_ALLOW_MULTILINE
        else if (*prev_name && *start && start > line) {
 800145a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800145e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d029      	beq.n	80014bc <ini_parse_stream+0x144>
 8001468:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d024      	beq.n	80014bc <ini_parse_stream+0x144>
 8001472:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001476:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800147a:	429a      	cmp	r2, r3
 800147c:	d91e      	bls.n	80014bc <ini_parse_stream+0x144>
            /* Non-blank line with leading whitespace, treat as continuation
               of previous name's value (as per Python configparser). */
            if (!HANDLER(user, section, prev_name, start) && !error)
 800147e:	f107 0214 	add.w	r2, r7, #20
 8001482:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001486:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800148a:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800148e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001492:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001496:	681c      	ldr	r4, [r3, #0]
 8001498:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800149c:	6800      	ldr	r0, [r0, #0]
 800149e:	47a0      	blx	r4
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80a6 	bne.w	80015f4 <ini_parse_stream+0x27c>
 80014a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80a1 	bne.w	80015f4 <ini_parse_stream+0x27c>
                error = lineno;
 80014b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if (!HANDLER(user, section, prev_name, start) && !error)
 80014ba:	e09b      	b.n	80015f4 <ini_parse_stream+0x27c>
        }
#endif
        else if (*start == '[') {
 80014bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b5b      	cmp	r3, #91	; 0x5b
 80014c4:	d12a      	bne.n	800151c <ini_parse_stream+0x1a4>
            /* A "[section]" line */
            end = find_chars_or_comment(start + 1, "]");
 80014c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014ca:	3301      	adds	r3, #1
 80014cc:	4957      	ldr	r1, [pc, #348]	; (800162c <ini_parse_stream+0x2b4>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff feec 	bl	80012ac <find_chars_or_comment>
 80014d4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == ']') {
 80014d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b5d      	cmp	r3, #93	; 0x5d
 80014e0:	d113      	bne.n	800150a <ini_parse_stream+0x192>
                *end = '\0';
 80014e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
                strncpy0(section, start + 1, sizeof(section));
 80014ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f4:	2232      	movs	r2, #50	; 0x32
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff12 	bl	8001320 <strncpy0>
                *prev_name = '\0';
 80014fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001500:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e074      	b.n	80015f4 <ini_parse_stream+0x27c>
#if INI_CALL_HANDLER_ON_NEW_SECTION
                if (!HANDLER(user, section, NULL, NULL) && !error)
                    error = lineno;
#endif
            }
            else if (!error) {
 800150a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800150e:	2b00      	cmp	r3, #0
 8001510:	d170      	bne.n	80015f4 <ini_parse_stream+0x27c>
                /* No ']' found on section line */
                error = lineno;
 8001512:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001516:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800151a:	e06b      	b.n	80015f4 <ini_parse_stream+0x27c>
            }
        }
        else if (*start) {
 800151c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d066      	beq.n	80015f4 <ini_parse_stream+0x27c>
            /* Not a comment, must be a name[=:]value pair */
            end = find_chars_or_comment(start, "=:");
 8001526:	4942      	ldr	r1, [pc, #264]	; (8001630 <ini_parse_stream+0x2b8>)
 8001528:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800152c:	f7ff febe 	bl	80012ac <find_chars_or_comment>
 8001530:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == '=' || *end == ':') {
 8001534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b3d      	cmp	r3, #61	; 0x3d
 800153c:	d004      	beq.n	8001548 <ini_parse_stream+0x1d0>
 800153e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b3a      	cmp	r3, #58	; 0x3a
 8001546:	d14d      	bne.n	80015e4 <ini_parse_stream+0x26c>
                *end = '\0';
 8001548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
                name = rstrip(start);
 8001550:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001554:	f7ff fe62 	bl	800121c <rstrip>
 8001558:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
                value = end + 1;
 800155c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001560:	3301      	adds	r3, #1
 8001562:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
#if INI_ALLOW_INLINE_COMMENTS
                end = find_chars_or_comment(value, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800156c:	f7ff fe9e 	bl	80012ac <find_chars_or_comment>
 8001570:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                if (*end)
 8001574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <ini_parse_stream+0x20e>
                    *end = '\0';
 800157e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
#endif
                value = lskip(value);
 8001586:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800158a:	f7ff fe6f 	bl	800126c <lskip>
 800158e:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
                rstrip(value);
 8001592:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8001596:	f7ff fe41 	bl	800121c <rstrip>

                /* Valid name[=:]value pair found, call handler */
                strncpy0(prev_name, name, sizeof(prev_name));
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2232      	movs	r2, #50	; 0x32
 80015a0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff febb 	bl	8001320 <strncpy0>
                if (!HANDLER(user, section, name, value) && !error)
 80015aa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80015ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015b2:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 80015b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015ba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015be:	681c      	ldr	r4, [r3, #0]
 80015c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80015c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015c8:	6800      	ldr	r0, [r0, #0]
 80015ca:	47a0      	blx	r4
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d110      	bne.n	80015f4 <ini_parse_stream+0x27c>
 80015d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <ini_parse_stream+0x27c>
                    error = lineno;
 80015da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                if (!HANDLER(user, section, name, value) && !error)
 80015e2:	e007      	b.n	80015f4 <ini_parse_stream+0x27c>
            }
            else if (!error) {
 80015e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d103      	bne.n	80015f4 <ini_parse_stream+0x27c>
                *end = '\0';
                name = rstrip(start);
                if (!HANDLER(user, section, name, NULL) && !error)
                    error = lineno;
#else
                error = lineno;
 80015ec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015f0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    while (reader(line, (int)max_line, stream) != NULL) {
 80015f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015f8:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80015fc:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001600:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001604:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001610:	4798      	blx	r3
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	f47f aee8 	bne.w	80013ea <ini_parse_stream+0x72>

#if !INI_USE_STACK
    ini_free(line);
#endif

    return error;
 800161a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 800161e:	4618      	mov	r0, r3
 8001620:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}
 8001628:	0801adcc 	.word	0x0801adcc
 800162c:	0801add0 	.word	0x0801add0
 8001630:	0801add4 	.word	0x0801add4

08001634 <ini_parse_fatfs>:
    return ini_parse_stream((ini_reader)fgets, file, handler, user);
}

/* See documentation in header file. */
int ini_parse_fatfs(const char* filename, ini_handler handler, void* user)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001642:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800164a:	f843 1c40 	str.w	r1, [r3, #-64]
 800164e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001652:	f843 2c44 	str.w	r2, [r3, #-68]
    FRESULT result;
    FIL file;
    int error;

    result = f_open(&file, filename, FA_OPEN_EXISTING | FA_READ);
 8001656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800165a:	4619      	mov	r1, r3
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	3b18      	subs	r3, #24
 8001662:	2201      	movs	r2, #1
 8001664:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001668:	4618      	mov	r0, r3
 800166a:	f015 f9bf 	bl	80169ec <f_open>
 800166e:	4603      	mov	r3, r0
 8001670:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001674:	f102 0207 	add.w	r2, r2, #7
 8001678:	7013      	strb	r3, [r2, #0]
    if (result != FR_OK)
 800167a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800167e:	f103 0307 	add.w	r3, r3, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <ini_parse_fatfs+0x5a>
        return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	e019      	b.n	80016c2 <ini_parse_fatfs+0x8e>
    error = ini_parse_stream((ini_reader)f_gets, &file, handler, user);
 800168e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001692:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001696:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800169a:	3918      	subs	r1, #24
 800169c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80016a0:	f852 2c40 	ldr.w	r2, [r2, #-64]
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <ini_parse_fatfs+0x9c>)
 80016a6:	f7ff fe67 	bl	8001378 <ini_parse_stream>
 80016aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80016ae:	6018      	str	r0, [r3, #0]
    f_close(&file);
 80016b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b4:	3b18      	subs	r3, #24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f015 ffd1 	bl	801765e <f_close>
    return error;
 80016bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80016c0:	681b      	ldr	r3, [r3, #0]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	080183cd 	.word	0x080183cd

080016d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016fc:	e000      	b.n	8001700 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001700:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f9      	beq.n	80016fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800170a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	0000      	movs	r0, r0
 8001724:	0000      	movs	r0, r0
	...

08001728 <calcSin>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
int calcSin(int tick, int lenght) {
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	float phase = tick * M_PI / lenght;
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_i2d>
 8001738:	a328      	add	r3, pc, #160	; (adr r3, 80017dc <calcSin+0xb4>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff6d 	bl	800061c <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_i2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7ff f88a 	bl	8000870 <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff fa3c 	bl	8000be0 <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	613b      	str	r3, [r7, #16]
	int delta = config.brightMax - config.brightMin;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <calcSin+0xb0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <calcSin+0xb0>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	60fb      	str	r3, [r7, #12]
	//int value = sin(3.14 - phase) * delta / 2 + delta / 2;
	int value = sin(phase) * delta;
 8001778:	6938      	ldr	r0, [r7, #16]
 800177a:	f7fe fef7 	bl	800056c <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	ec43 2b10 	vmov	d0, r2, r3
 8001786:	f018 fac7 	bl	8019d18 <sin>
 800178a:	ec55 4b10 	vmov	r4, r5, d0
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7fe feda 	bl	8000548 <__aeabi_i2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe ff3e 	bl	800061c <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9d2 	bl	8000b50 <__aeabi_d2iz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	617b      	str	r3, [r7, #20]
	value = value + config.brightMin;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <calcSin+0xb0>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
	if (value > config.brightMax)
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <calcSin+0xb0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dd02      	ble.n	80017ca <calcSin+0xa2>
		value = config.brightMax;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <calcSin+0xb0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	617b      	str	r3, [r7, #20]
	return value;
 80017ca:	697b      	ldr	r3, [r7, #20]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bdb0      	pop	{r4, r5, r7, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	20002d38 	.word	0x20002d38
 80017dc:	54442d18 	.word	0x54442d18
 80017e0:	400921fb 	.word	0x400921fb

080017e4 <_write>:

//--------------------------------------------------------------------------------------------------
int _write(int file, char *ptr, int len) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e009      	b.n	800180e <_write+0x2a>
		ITM_SendChar((*ptr++));
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff66 	bl	80016d4 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbf1      	blt.n	80017fa <_write+0x16>
	return len;
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if ((GPIO_Pin == Int_Pin) && (gestureSensorReady == 1)) {
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001830:	d106      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0x20>
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0x20>
		gestureInteruptFlag = 1;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_GPIO_EXTI_Callback+0x30>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
	}
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20000494 	.word	0x20000494
 8001850:	20000495 	.word	0x20000495

08001854 <HAL_TIM_PWM_PulseFinishedCallback>:
//--------------------------------------------------------------------------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d107      	bne.n	8001876 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7f1b      	ldrb	r3, [r3, #28]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d103      	bne.n	8001876 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f008 fe45 	bl	800a500 <HAL_TIM_PWM_Stop_DMA>
		}
	}
	if (htim->Instance == TIM3) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d107      	bne.n	8001890 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7f1b      	ldrb	r3, [r3, #28]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d103      	bne.n	8001890 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f008 fe38 	bl	800a500 <HAL_TIM_PWM_Stop_DMA>
		}
	}
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010000 	.word	0x40010000
 800189c:	40000400 	.word	0x40000400

080018a0 <setMinBright>:
//--------------------------------------------------------------------------------------------------
void setMinBright(ledRing_HandleTypeDef *ledRing) {
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
	ledRing->HSV.v = config.brightMin;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <setMinBright+0x80>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ledRing->RGB = HsvToRgb(ledRing->HSV);
 80018b4:	687c      	ldr	r4, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80018ba:	f002 f8bf 	bl	8003a3c <HsvToRgb>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 80018c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80018ca:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 80018ce:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80018d2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	for (int i = 0; i < ledRing->num_led; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e013      	b.n	8001904 <setMinBright+0x64>
		PwmLed_setPixel_gammaCorrection(ledRing->pwmLed, ledRing->RGB.r, ledRing->RGB.g, ledRing->RGB.b, i);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4623      	mov	r3, r4
 80018fa:	f002 f863 	bl	80039c4 <PwmLed_setPixel_gammaCorrection>
	for (int i = 0; i < ledRing->num_led; i++) {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	429a      	cmp	r2, r3
 800190c:	d8e6      	bhi.n	80018dc <setMinBright+0x3c>
	}
	PwmLed_light(ledRing->pwmLed);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f002 f878 	bl	8003a08 <PwmLed_light>

}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	20002d38 	.word	0x20002d38

08001924 <setLedEffect>:
		PwmLed_setPixel_gammaCorrection(pwmLed, 0, 0, 0, i);
	}
	PwmLed_light(pwmLed);
}
//--------------------------------------------------------------------------------------------------
uint8_t setLedEffect(ledRing_HandleTypeDef *ledRing, uint8_t effect, uint16_t lenght) {
 8001924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001928:	b08c      	sub	sp, #48	; 0x30
 800192a:	af00      	add	r7, sp, #0
 800192c:	6178      	str	r0, [r7, #20]
 800192e:	460b      	mov	r3, r1
 8001930:	74fb      	strb	r3, [r7, #19]
 8001932:	4613      	mov	r3, r2
 8001934:	823b      	strh	r3, [r7, #16]
	if ((effect == FADE_UP) || (effect == FADE_DOWN)) {
 8001936:	7cfb      	ldrb	r3, [r7, #19]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <setLedEffect+0x1e>
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12b      	bne.n	800199a <setLedEffect+0x76>
		ledRing->state = LED_RUN;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ledRing->tick = 0;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2200      	movs	r2, #0
 800194e:	841a      	strh	r2, [r3, #32]
		ledRing->effect = effect;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	7cfa      	ldrb	r2, [r7, #19]
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ledRing->tickLenght = lenght;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	8a3a      	ldrh	r2, [r7, #16]
 800195c:	845a      	strh	r2, [r3, #34]	; 0x22
		ledRing->HSV = RgbToHsv(ledRing->RGB);
 800195e:	697c      	ldr	r4, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001966:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 800196a:	0209      	lsls	r1, r1, #8
 800196c:	430a      	orrs	r2, r1
 800196e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	431a      	orrs	r2, r3
 8001976:	2300      	movs	r3, #0
 8001978:	f362 0317 	bfi	r3, r2, #0, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f002 f907 	bl	8003b90 <RgbToHsv>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 800198a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800198e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8001992:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001996:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	}

	if ((effect == SWIPE_DOWN) || (effect == SWIPE_UP) || (effect == SWIPE_LEFT) || (effect == SWIPE_RIGHT)) {
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d009      	beq.n	80019b4 <setLedEffect+0x90>
 80019a0:	7cfb      	ldrb	r3, [r7, #19]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d006      	beq.n	80019b4 <setLedEffect+0x90>
 80019a6:	7cfb      	ldrb	r3, [r7, #19]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d003      	beq.n	80019b4 <setLedEffect+0x90>
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	f040 811c 	bne.w	8001bec <setLedEffect+0x2c8>
		ledRing->state = LED_RUN;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ledRing->effect = effect;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	7cfa      	ldrb	r2, [r7, #19]
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ledRing->tick = 0;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2200      	movs	r2, #0
 80019c8:	841a      	strh	r2, [r3, #32]
		ledRing->tickLenght = lenght;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	8a3a      	ldrh	r2, [r7, #16]
 80019ce:	845a      	strh	r2, [r3, #34]	; 0x22
		ledRing->HSV = RgbToHsv(ledRing->RGB);
 80019d0:	697c      	ldr	r4, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80019d8:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 80019dc:	0209      	lsls	r1, r1, #8
 80019de:	430a      	orrs	r2, r1
 80019e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	f362 0317 	bfi	r3, r2, #0, #24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 f8ce 	bl	8003b90 <RgbToHsv>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80019fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001a00:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8001a04:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001a08:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		ledRing->frontLen = lenght / 2;
 8001a0c:	8a3b      	ldrh	r3, [r7, #16]
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	811a      	strh	r2, [r3, #8]
		ledRing->diameter = lenght - ledRing->frontLen;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	891b      	ldrh	r3, [r3, #8]
 8001a1a:	8a3a      	ldrh	r2, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	815a      	strh	r2, [r3, #10]
		ledRing->effectBufLen = lenght + ledRing->frontLen;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	891a      	ldrh	r2, [r3, #8]
 8001a28:	8a3b      	ldrh	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	821a      	strh	r2, [r3, #16]

		free(ledRing->effectBuf);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f017 f87e 	bl	8018b38 <free>
		ledRing->effectBuf = (uint8_t*) malloc(ledRing->effectBufLen * sizeof(uint8_t));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	8a1b      	ldrh	r3, [r3, #16]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f017 f871 	bl	8018b28 <malloc>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	615a      	str	r2, [r3, #20]
		memset(ledRing->effectBuf, config.brightMin, ledRing->effectBufLen);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	6958      	ldr	r0, [r3, #20]
 8001a52:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <setLedEffect+0x2d4>)
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	8a1b      	ldrh	r3, [r3, #16]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f017 f882 	bl	8018b64 <memset>

		//printf("Front:");
		for (int i = 0; i < ledRing->frontLen; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a64:	e00f      	b.n	8001a86 <setLedEffect+0x162>
			ledRing->effectBuf[i] = calcSin(i, ledRing->frontLen);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	891b      	ldrh	r3, [r3, #8]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a6e:	f7ff fe5b 	bl	8001728 <calcSin>
 8001a72:	4601      	mov	r1, r0
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ledRing->frontLen; i++) {
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	3301      	adds	r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	891b      	ldrh	r3, [r3, #8]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	dbe9      	blt.n	8001a66 <setLedEffect+0x142>
			//printf("%d-", ledRing->effectBuf[i]);
		}
		//printf("\r\n");

		//calc first quarter
		uint16_t quarterNum = ledRing->num_led / 4;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	83fb      	strh	r3, [r7, #30]
		for (int t = 0; t < quarterNum; t++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9e:	e064      	b.n	8001b6a <setLedEffect+0x246>
			ledRing->ledsCoordinate[t] = ledRing->frontLen + (ledRing->diameter / 2 - ledRing->diameter / 2 * cos(ledRing->ledAngleRadian / 2 + ledRing->ledAngleRadian * t));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	891b      	ldrh	r3, [r3, #8]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd4f 	bl	8000548 <__aeabi_i2d>
 8001aaa:	4680      	mov	r8, r0
 8001aac:	4689      	mov	r9, r1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	895b      	ldrh	r3, [r3, #10]
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd46 	bl	8000548 <__aeabi_i2d>
 8001abc:	4682      	mov	sl, r0
 8001abe:	468b      	mov	fp, r1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	895b      	ldrh	r3, [r3, #10]
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd3d 	bl	8000548 <__aeabi_i2d>
 8001ace:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae0:	f7fe fec6 	bl	8000870 <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2300 	strd	r2, r3, [r7]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001af4:	f7fe fd28 	bl	8000548 <__aeabi_i2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fd8c 	bl	800061c <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0c:	f7fe fbd0 	bl	80002b0 <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ec43 2b17 	vmov	d7, r2, r3
 8001b18:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1c:	eef0 0a67 	vmov.f32	s1, s15
 8001b20:	f018 f8a6 	bl	8019c70 <cos>
 8001b24:	ec53 2b10 	vmov	r2, r3, d0
 8001b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2c:	f7fe fd76 	bl	800061c <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4650      	mov	r0, sl
 8001b36:	4659      	mov	r1, fp
 8001b38:	f7fe fbb8 	bl	80002ac <__aeabi_dsub>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4640      	mov	r0, r8
 8001b42:	4649      	mov	r1, r9
 8001b44:	f7fe fbb4 	bl	80002b0 <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	18d4      	adds	r4, r2, r3
 8001b5a:	f7ff f821 	bl	8000ba0 <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	8023      	strh	r3, [r4, #0]
		for (int t = 0; t < quarterNum; t++) {
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	3301      	adds	r3, #1
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6a:	8bfb      	ldrh	r3, [r7, #30]
 8001b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	db96      	blt.n	8001aa0 <setLedEffect+0x17c>

		}
		//mirror to second quarter
		for (int t = 0; t < quarterNum; t++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e029      	b.n	8001bcc <setLedEffect+0x2a8>
			ledRing->ledsCoordinate[quarterNum + t] = ledRing->frontLen + ledRing->diameter / 2 + (ledRing->frontLen + ledRing->diameter / 2 - ledRing->ledsCoordinate[quarterNum - t - 1]);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	891a      	ldrh	r2, [r3, #8]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	895b      	ldrh	r3, [r3, #10]
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	b299      	uxth	r1, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	891a      	ldrh	r2, [r3, #8]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	895b      	ldrh	r3, [r3, #10]
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	68d8      	ldr	r0, [r3, #12]
 8001b9c:	8bfc      	ldrh	r4, [r7, #30]
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ae3      	subs	r3, r4, r3
 8001ba2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4403      	add	r3, r0
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	68d8      	ldr	r0, [r3, #12]
 8001bb6:	8bfc      	ldrh	r4, [r7, #30]
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	4423      	add	r3, r4
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4403      	add	r3, r0
 8001bc0:	440a      	add	r2, r1
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	801a      	strh	r2, [r3, #0]
		for (int t = 0; t < quarterNum; t++) {
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	3301      	adds	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dbd1      	blt.n	8001b78 <setLedEffect+0x254>

		}

		//printf("ledsCoordinate:");
		for (int t = 0; t < ledRing->num_led / 2; t++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	e002      	b.n	8001be0 <setLedEffect+0x2bc>
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	085a      	lsrs	r2, r3, #1
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f6      	bhi.n	8001bda <setLedEffect+0x2b6>
		}
		//printf("\r\n");

	}

	return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3730      	adds	r7, #48	; 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf8:	20002d38 	.word	0x20002d38

08001bfc <processLedEffect>:
//--------------------------------------------------------------------------------------------------
uint8_t processLedEffect(ledRing_HandleTypeDef *ledRing) {
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b091      	sub	sp, #68	; 0x44
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	6078      	str	r0, [r7, #4]

	ledRing->tick++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	8c1b      	ldrh	r3, [r3, #32]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	841a      	strh	r2, [r3, #32]
	if (ledRing->tick >= ledRing->tickLenght) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	8c1a      	ldrh	r2, [r3, #32]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d30c      	bcc.n	8001c36 <processLedEffect+0x3a>
		ledRing->state = LED_STOP;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ledRing->effect = WAITING;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2207      	movs	r2, #7
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		setMinBright(ledRing);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fe37 	bl	80018a0 <setMinBright>
		return LED_STOP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e186      	b.n	8001f44 <processLedEffect+0x348>
	}

	if ((ledRing->effect == FADE_UP) || (ledRing->effect == FADE_DOWN)) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <processLedEffect+0x4e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d17e      	bne.n	8001d48 <processLedEffect+0x14c>

		float progres = (float) ledRing->tick / ledRing->tickLenght;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	8c1b      	ldrh	r3, [r3, #32]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c66:	edc7 7a06 	vstr	s15, [r7, #24]
		if (ledRing->effect == FADE_UP) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d11e      	bne.n	8001cb2 <processLedEffect+0xb6>
			ledRing->HSV.v = config.brightMin + progres * (config.brightMax - config.brightMin);
 8001c74:	4b9b      	ldr	r3, [pc, #620]	; (8001ee4 <processLedEffect+0x2e8>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c80:	4b98      	ldr	r3, [pc, #608]	; (8001ee4 <processLedEffect+0x2e8>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b97      	ldr	r3, [pc, #604]	; (8001ee4 <processLedEffect+0x2e8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c92:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca2:	edc7 7a00 	vstr	s15, [r7]
 8001ca6:	783b      	ldrb	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001cb0:	e022      	b.n	8001cf8 <processLedEffect+0xfc>
		} else if (ledRing->effect == FADE_DOWN) {
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11d      	bne.n	8001cf8 <processLedEffect+0xfc>
			ledRing->HSV.v = config.brightMax - (progres * (config.brightMax - config.brightMin));
 8001cbc:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <processLedEffect+0x2e8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <processLedEffect+0x2e8>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <processLedEffect+0x2e8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cea:	edc7 7a00 	vstr	s15, [r7]
 8001cee:	783b      	ldrb	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		}
		RgbColor tmpRGB = HsvToRgb(ledRing->HSV);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001cfc:	f001 fe9e 	bl	8003a3c <HsvToRgb>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	743a      	strb	r2, [r7, #16]
 8001d06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d0a:	747a      	strb	r2, [r7, #17]
 8001d0c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d10:	74bb      	strb	r3, [r7, #18]
		for (int i = 0; i < ledRing->num_led; i++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
 8001d16:	e00d      	b.n	8001d34 <processLedEffect+0x138>
			PwmLed_setPixel_gammaCorrection(ledRing->pwmLed, tmpRGB.r, tmpRGB.g, tmpRGB.b, i);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	7c39      	ldrb	r1, [r7, #16]
 8001d1e:	7c7a      	ldrb	r2, [r7, #17]
 8001d20:	7cbc      	ldrb	r4, [r7, #18]
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4623      	mov	r3, r4
 8001d2a:	f001 fe4b 	bl	80039c4 <PwmLed_setPixel_gammaCorrection>
		for (int i = 0; i < ledRing->num_led; i++) {
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	3301      	adds	r3, #1
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8ec      	bhi.n	8001d18 <processLedEffect+0x11c>
		}
		PwmLed_light(ledRing->pwmLed);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 fe60 	bl	8003a08 <PwmLed_light>
	}

	if ((ledRing->effect == SWIPE_DOWN) || (ledRing->effect == SWIPE_UP) || (ledRing->effect == SWIPE_LEFT) || (ledRing->effect == SWIPE_RIGHT)) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00f      	beq.n	8001d72 <processLedEffect+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d00a      	beq.n	8001d72 <processLedEffect+0x176>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d005      	beq.n	8001d72 <processLedEffect+0x176>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d6c:	2b06      	cmp	r3, #6
 8001d6e:	f040 80e8 	bne.w	8001f42 <processLedEffect+0x346>

		int tmp = ledRing->effectBuf[ledRing->effectBufLen - 1];
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8a1b      	ldrh	r3, [r3, #16]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < ledRing->effectBufLen - 1; i++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
 8001d86:	e016      	b.n	8001db6 <processLedEffect+0x1ba>
			ledRing->effectBuf[ledRing->effectBufLen - i - 1] = ledRing->effectBuf[ledRing->effectBufLen - i - 2];
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8a1b      	ldrh	r3, [r3, #16]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	1acb      	subs	r3, r1, r3
 8001d96:	3b02      	subs	r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6959      	ldr	r1, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	8a1b      	ldrh	r3, [r3, #16]
 8001da2:	4618      	mov	r0, r3
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	1ac3      	subs	r3, r0, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	440b      	add	r3, r1
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ledRing->effectBufLen - 1; i++) {
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	3301      	adds	r3, #1
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8a1b      	ldrh	r3, [r3, #16]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbe2      	blt.n	8001d88 <processLedEffect+0x18c>
		}
		ledRing->effectBuf[0] = tmp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
		 printf("%d-", ledRing->effectBuf[i]);
		 }
		 printf("\r\n");
		 */

		for (int i = 0; i < ledRing->num_led / 2; i++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd0:	e024      	b.n	8001e1c <processLedEffect+0x220>
			ledRing->ledBrightMass[i] = ledRing->effectBuf[ledRing->ledsCoordinate[i]];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68d1      	ldr	r1, [r2, #12]
 8001dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ddc:	0052      	lsls	r2, r2, #1
 8001dde:	440a      	add	r2, r1
 8001de0:	8812      	ldrh	r2, [r2, #0]
 8001de2:	441a      	add	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	440b      	add	r3, r1
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	701a      	strb	r2, [r3, #0]
			ledRing->ledBrightMass[ledRing->num_led - 1 - i] = ledRing->effectBuf[ledRing->ledsCoordinate[i]];
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68d1      	ldr	r1, [r2, #12]
 8001df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfa:	0052      	lsls	r2, r2, #1
 8001dfc:	440a      	add	r2, r1
 8001dfe:	8812      	ldrh	r2, [r2, #0]
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6858      	ldr	r0, [r3, #4]
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	1ac3      	subs	r3, r0, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ledRing->num_led / 2; i++) {
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	3301      	adds	r3, #1
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	085a      	lsrs	r2, r3, #1
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8d4      	bhi.n	8001dd2 <processLedEffect+0x1d6>
		}

		int rotateNum;
		if (ledRing->effect == SWIPE_DOWN) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d102      	bne.n	8001e38 <processLedEffect+0x23c>
			rotateNum = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e36:	e01f      	b.n	8001e78 <processLedEffect+0x27c>
		} else if (ledRing->effect == SWIPE_LEFT) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d104      	bne.n	8001e4c <processLedEffect+0x250>
			rotateNum = ledRing->num_led / 4;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4a:	e015      	b.n	8001e78 <processLedEffect+0x27c>
		} else if (ledRing->effect == SWIPE_UP) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d104      	bne.n	8001e60 <processLedEffect+0x264>
			rotateNum = ledRing->num_led / 2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	e00b      	b.n	8001e78 <processLedEffect+0x27c>
		} else if (ledRing->effect == SWIPE_RIGHT) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d106      	bne.n	8001e78 <processLedEffect+0x27c>
			rotateNum = ledRing->num_led * 3 / 4;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for (int y = 0; y < rotateNum; y++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7c:	e02b      	b.n	8001ed6 <processLedEffect+0x2da>
			uint8_t tmp = ledRing->ledBrightMass[ledRing->num_led - 1];
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	74fb      	strb	r3, [r7, #19]
			for (int i = 1; i < ledRing->num_led + 1; i++) {
 8001e8e:	2301      	movs	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	e013      	b.n	8001ebc <processLedEffect+0x2c0>
				ledRing->ledBrightMass[ledRing->num_led - i] = ledRing->ledBrightMass[ledRing->num_led - 1 - i];
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	1acb      	subs	r3, r1, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	441a      	add	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6858      	ldr	r0, [r3, #4]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	1ac3      	subs	r3, r0, r3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < ledRing->num_led + 1; i++) {
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8e5      	bhi.n	8001e94 <processLedEffect+0x298>
			}
			ledRing->ledBrightMass[0] = tmp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	7cfa      	ldrb	r2, [r7, #19]
 8001ece:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < rotateNum; y++) {
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbcf      	blt.n	8001e7e <processLedEffect+0x282>
		}

		//printf("Tick:%d LedBrigtMass-", ledRing->tick);
		for (int i = 0; i < ledRing->num_led; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e024      	b.n	8001f2e <processLedEffect+0x332>
 8001ee4:	20002d38 	.word	0x20002d38
			ledRing->HSV.v = ledRing->ledBrightMass[i];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			RgbColor tmpRGB = HsvToRgb(ledRing->HSV);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001efc:	f001 fd9e 	bl	8003a3c <HsvToRgb>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	733a      	strb	r2, [r7, #12]
 8001f06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001f0a:	737a      	strb	r2, [r7, #13]
 8001f0c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001f10:	73bb      	strb	r3, [r7, #14]
			//printf("%d-", ledRing->ledBrightMass[i]);
			PwmLed_setPixel_gammaCorrection(ledRing->pwmLed, tmpRGB.r, tmpRGB.g, tmpRGB.b, i);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	7b39      	ldrb	r1, [r7, #12]
 8001f18:	7b7a      	ldrb	r2, [r7, #13]
 8001f1a:	7bbc      	ldrb	r4, [r7, #14]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4623      	mov	r3, r4
 8001f24:	f001 fd4e 	bl	80039c4 <PwmLed_setPixel_gammaCorrection>
		for (int i = 0; i < ledRing->num_led; i++) {
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8d7      	bhi.n	8001ee8 <processLedEffect+0x2ec>
		}
		//printf("\r\n");

		PwmLed_light(ledRing->pwmLed);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 fd63 	bl	8003a08 <PwmLed_light>

	}

	return 1;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	373c      	adds	r7, #60	; 0x3c
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}

08001f4c <HAL_TIM_PeriodElapsedCallback>:
//--------------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	//printf("period: %ld",HAL_GetTick()- prevTick);
	if (htim->Instance == TIM4) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d129      	bne.n	8001fb2 <HAL_TIM_PeriodElapsedCallback+0x66>

		ledRefreshFlag = 1;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]

		waTick++;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f6e:	801a      	strh	r2, [r3, #0]
		if (waTick > 60) {
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2b3c      	cmp	r3, #60	; 0x3c
 8001f76:	d905      	bls.n	8001f84 <HAL_TIM_PeriodElapsedCallback+0x38>
			waTick = 0;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	801a      	strh	r2, [r3, #0]
			waFlag = 1;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		}

		if (((HAL_GetTick() - HID_release_tick) > 20) && (HID_release_tick != 0)) {
 8001f84:	f001 ff14 	bl	8003db0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b14      	cmp	r3, #20
 8001f92:	d90e      	bls.n	8001fb2 <HAL_TIM_PeriodElapsedCallback+0x66>
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_TIM_PeriodElapsedCallback+0x66>
			HID_release_tick = 0;
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
			keyboardhid[2] = 0x00;
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
			//USBD_HID_SendReport(&hUsbDevice, keyboardhid, sizeof(keyboardhid));
			USBD_HID_Keybaord_SendReport(&hUsbDevice, keyboardhid, sizeof(keyboardhid));
 8001fa8:	2208      	movs	r2, #8
 8001faa:	490b      	ldr	r1, [pc, #44]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001fae:	f00e fc9d 	bl	80108ec <USBD_HID_Keybaord_SendReport>
		}

	}
	prevTick = HAL_GetTick();
 8001fb2:	f001 fefd 	bl	8003db0 <HAL_GetTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	20000496 	.word	0x20000496
 8001fcc:	200004ec 	.word	0x200004ec
 8001fd0:	200004f4 	.word	0x200004f4
 8001fd4:	200004f0 	.word	0x200004f0
 8001fd8:	2000049c 	.word	0x2000049c
 8001fdc:	20002e24 	.word	0x20002e24
 8001fe0:	20000498 	.word	0x20000498

08001fe4 <CDC_report>:
//--------------------------------------------------------------------------------------------------
void CDC_report(uint8_t in) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	if (in == LEFT_ARROW) {
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b50      	cmp	r3, #80	; 0x50
 8001ff2:	d105      	bne.n	8002000 <CDC_report+0x1c>
		CDC_Transmit(0, (uint8_t*) ("left\n"), strlen("left\n"));
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	4916      	ldr	r1, [pc, #88]	; (8002050 <CDC_report+0x6c>)
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f00d f815 	bl	800f028 <CDC_Transmit>
	} else if (in == DOWN_ARROW) {
		CDC_Transmit(0, (uint8_t*) ("down\n"), strlen("down\n"));
	} else if (in == CDC_REQUEST) {
			CDC_Transmit(0, (uint8_t*) ("Request\n"), strlen("Request\n"));
		}
}
 8001ffe:	e022      	b.n	8002046 <CDC_report+0x62>
	} else if (in == RIGHT_ARROW) {
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2b4f      	cmp	r3, #79	; 0x4f
 8002004:	d105      	bne.n	8002012 <CDC_report+0x2e>
		CDC_Transmit(0, (uint8_t*) ("right\n"), strlen("right\n"));
 8002006:	2206      	movs	r2, #6
 8002008:	4912      	ldr	r1, [pc, #72]	; (8002054 <CDC_report+0x70>)
 800200a:	2000      	movs	r0, #0
 800200c:	f00d f80c 	bl	800f028 <CDC_Transmit>
}
 8002010:	e019      	b.n	8002046 <CDC_report+0x62>
	} else if (in == UP_ARROW) {
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b52      	cmp	r3, #82	; 0x52
 8002016:	d105      	bne.n	8002024 <CDC_report+0x40>
		CDC_Transmit(0, (uint8_t*) ("up\n"), strlen("up\n"));
 8002018:	2203      	movs	r2, #3
 800201a:	490f      	ldr	r1, [pc, #60]	; (8002058 <CDC_report+0x74>)
 800201c:	2000      	movs	r0, #0
 800201e:	f00d f803 	bl	800f028 <CDC_Transmit>
}
 8002022:	e010      	b.n	8002046 <CDC_report+0x62>
	} else if (in == DOWN_ARROW) {
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2b51      	cmp	r3, #81	; 0x51
 8002028:	d105      	bne.n	8002036 <CDC_report+0x52>
		CDC_Transmit(0, (uint8_t*) ("down\n"), strlen("down\n"));
 800202a:	2205      	movs	r2, #5
 800202c:	490b      	ldr	r1, [pc, #44]	; (800205c <CDC_report+0x78>)
 800202e:	2000      	movs	r0, #0
 8002030:	f00c fffa 	bl	800f028 <CDC_Transmit>
}
 8002034:	e007      	b.n	8002046 <CDC_report+0x62>
	} else if (in == CDC_REQUEST) {
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b99      	cmp	r3, #153	; 0x99
 800203a:	d104      	bne.n	8002046 <CDC_report+0x62>
			CDC_Transmit(0, (uint8_t*) ("Request\n"), strlen("Request\n"));
 800203c:	2208      	movs	r2, #8
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <CDC_report+0x7c>)
 8002040:	2000      	movs	r0, #0
 8002042:	f00c fff1 	bl	800f028 <CDC_Transmit>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	0801addc 	.word	0x0801addc
 8002054:	0801ade4 	.word	0x0801ade4
 8002058:	0801adec 	.word	0x0801adec
 800205c:	0801adf0 	.word	0x0801adf0
 8002060:	0801adf8 	.word	0x0801adf8

08002064 <CDC_checkRecive>:
//--------------------------------------------------------------------------------------------------
void CDC_checkRecive() {
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	if (CDC_reciveFlag) {
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <CDC_checkRecive+0x24>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <CDC_checkRecive+0x1a>
		printf("recive some: %s \n", usb_buff_rx);
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <CDC_checkRecive+0x28>)
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <CDC_checkRecive+0x2c>)
 8002074:	f016 fe5e 	bl	8018d34 <iprintf>
		CDC_report(CDC_REQUEST);
 8002078:	2099      	movs	r0, #153	; 0x99
 800207a:	f7ff ffb3 	bl	8001fe4 <CDC_report>
	}
	CDC_reciveFlag = 0;
 800207e:	4b02      	ldr	r3, [pc, #8]	; (8002088 <CDC_checkRecive+0x24>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000050c 	.word	0x2000050c
 800208c:	200004f8 	.word	0x200004f8
 8002090:	0801ae04 	.word	0x0801ae04

08002094 <HID_keyboard_report>:
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, temp, 2, 100);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
}
//--------------------------------------------------------------------------------------------------
void HID_keyboard_report(uint8_t in) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
	if (config.HID_keyboard_enable == 1) {
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HID_keyboard_report+0x64>)
 80020a0:	7b1b      	ldrb	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d124      	bne.n	80020f0 <HID_keyboard_report+0x5c>
		HID_release_tick = HAL_GetTick();
 80020a6:	f001 fe83 	bl	8003db0 <HAL_GetTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HID_keyboard_report+0x68>)
 80020ae:	6013      	str	r3, [r2, #0]

		if (in == RIGHT_ARROW) {
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	2b4f      	cmp	r3, #79	; 0x4f
 80020b4:	d103      	bne.n	80020be <HID_keyboard_report+0x2a>
			keyboardhid[2] = RIGHT_ARROW;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HID_keyboard_report+0x6c>)
 80020b8:	224f      	movs	r2, #79	; 0x4f
 80020ba:	709a      	strb	r2, [r3, #2]
 80020bc:	e013      	b.n	80020e6 <HID_keyboard_report+0x52>
		} else if (in == DOWN_ARROW) {
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b51      	cmp	r3, #81	; 0x51
 80020c2:	d103      	bne.n	80020cc <HID_keyboard_report+0x38>
			keyboardhid[2] = DOWN_ARROW;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HID_keyboard_report+0x6c>)
 80020c6:	2251      	movs	r2, #81	; 0x51
 80020c8:	709a      	strb	r2, [r3, #2]
 80020ca:	e00c      	b.n	80020e6 <HID_keyboard_report+0x52>
		} else if (in == LEFT_ARROW) {
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	2b50      	cmp	r3, #80	; 0x50
 80020d0:	d103      	bne.n	80020da <HID_keyboard_report+0x46>
			keyboardhid[2] = LEFT_ARROW;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HID_keyboard_report+0x6c>)
 80020d4:	2250      	movs	r2, #80	; 0x50
 80020d6:	709a      	strb	r2, [r3, #2]
 80020d8:	e005      	b.n	80020e6 <HID_keyboard_report+0x52>
		} else if (in == UP_ARROW) {
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b52      	cmp	r3, #82	; 0x52
 80020de:	d102      	bne.n	80020e6 <HID_keyboard_report+0x52>
			keyboardhid[2] = UP_ARROW;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HID_keyboard_report+0x6c>)
 80020e2:	2252      	movs	r2, #82	; 0x52
 80020e4:	709a      	strb	r2, [r3, #2]
		}
		//USBD_HID_SendReport(&hUsbDevice, keyboardhid, sizeof(keyboardhid));
		USBD_HID_Keybaord_SendReport(&hUsbDevice, keyboardhid, sizeof(keyboardhid));
 80020e6:	2208      	movs	r2, #8
 80020e8:	4905      	ldr	r1, [pc, #20]	; (8002100 <HID_keyboard_report+0x6c>)
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <HID_keyboard_report+0x70>)
 80020ec:	f00e fbfe 	bl	80108ec <USBD_HID_Keybaord_SendReport>
	}
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20002d38 	.word	0x20002d38
 80020fc:	200004f0 	.word	0x200004f0
 8002100:	2000049c 	.word	0x2000049c
 8002104:	20002e24 	.word	0x20002e24

08002108 <testModeColor>:

void testModeColor(int dir) {
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	if (config.testMode) {
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <testModeColor+0x4c>)
 8002112:	7adb      	ldrb	r3, [r3, #11]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d016      	beq.n	8002146 <testModeColor+0x3e>
		if (dir > 0) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	dd08      	ble.n	8002130 <testModeColor+0x28>
			ledRing.HSV.h += 20;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <testModeColor+0x50>)
 8002120:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002124:	3314      	adds	r3, #20
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <testModeColor+0x50>)
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		} else if (dir < 0) {
			ledRing.HSV.h -= 20;
		}

	}
}
 800212e:	e00a      	b.n	8002146 <testModeColor+0x3e>
		} else if (dir < 0) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da07      	bge.n	8002146 <testModeColor+0x3e>
			ledRing.HSV.h -= 20;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <testModeColor+0x50>)
 8002138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800213c:	3b14      	subs	r3, #20
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <testModeColor+0x50>)
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20002d38 	.word	0x20002d38
 8002158:	200004a8 	.word	0x200004a8

0800215c <testModeBright>:

void testModeBright(int dir) {
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	if (config.testMode) {
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <testModeBright+0x8c>)
 8002166:	7adb      	ldrb	r3, [r3, #11]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d036      	beq.n	80021da <testModeBright+0x7e>
		if (dir > 0) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	dd18      	ble.n	80021a4 <testModeBright+0x48>
			config.brightMax += 20;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <testModeBright+0x8c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3314      	adds	r3, #20
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <testModeBright+0x8c>)
 800217a:	6013      	str	r3, [r2, #0]
			if (config.brightMax > 255)
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <testModeBright+0x8c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2bff      	cmp	r3, #255	; 0xff
 8002182:	dd02      	ble.n	800218a <testModeBright+0x2e>
				config.brightMax = 255;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <testModeBright+0x8c>)
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	601a      	str	r2, [r3, #0]
			config.brightMin += 20;
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <testModeBright+0x8c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	3314      	adds	r3, #20
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <testModeBright+0x8c>)
 8002192:	6053      	str	r3, [r2, #4]
			if (config.brightMin > 150)
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <testModeBright+0x8c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b96      	cmp	r3, #150	; 0x96
 800219a:	dd1e      	ble.n	80021da <testModeBright+0x7e>
				config.brightMin = 150;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <testModeBright+0x8c>)
 800219e:	2296      	movs	r2, #150	; 0x96
 80021a0:	605a      	str	r2, [r3, #4]
			config.brightMin -= 20;
			if (config.brightMin <10)
				config.brightMin = 10;
		}
	}
}
 80021a2:	e01a      	b.n	80021da <testModeBright+0x7e>
		} else if(dir<0){
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da17      	bge.n	80021da <testModeBright+0x7e>
			config.brightMax -= 20;
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <testModeBright+0x8c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3b14      	subs	r3, #20
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <testModeBright+0x8c>)
 80021b2:	6013      	str	r3, [r2, #0]
			if (config.brightMax <100)
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <testModeBright+0x8c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b63      	cmp	r3, #99	; 0x63
 80021ba:	dc02      	bgt.n	80021c2 <testModeBright+0x66>
				config.brightMax = 100;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <testModeBright+0x8c>)
 80021be:	2264      	movs	r2, #100	; 0x64
 80021c0:	601a      	str	r2, [r3, #0]
			config.brightMin -= 20;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <testModeBright+0x8c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	3b14      	subs	r3, #20
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <testModeBright+0x8c>)
 80021ca:	6053      	str	r3, [r2, #4]
			if (config.brightMin <10)
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <testModeBright+0x8c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	dc02      	bgt.n	80021da <testModeBright+0x7e>
				config.brightMin = 10;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <testModeBright+0x8c>)
 80021d6:	220a      	movs	r2, #10
 80021d8:	605a      	str	r2, [r3, #4]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20002d38 	.word	0x20002d38
 80021ec:	00000000 	.word	0x00000000

080021f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b09d      	sub	sp, #116	; 0x74
 80021f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f6:	f001 fd75 	bl	8003ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fa:	f000 fa1f 	bl	800263c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021fe:	f7fe fee1 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002202:	f7fe febf 	bl	8000f84 <MX_DMA_Init>
  MX_TIM1_Init();
 8002206:	f000 fc35 	bl	8002a74 <MX_TIM1_Init>
  MX_SPI1_Init();
 800220a:	f000 fa85 	bl	8002718 <MX_SPI1_Init>
  MX_TIM2_Init();
 800220e:	f000 fcb3 	bl	8002b78 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002212:	f7fe ff7d 	bl	8001110 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002216:	f000 fcfb 	bl	8002c10 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800221a:	f000 fe19 	bl	8002e50 <MX_USB_OTG_FS_PCD_Init>
  MX_FATFS_Init();
 800221e:	f00c fce9 	bl	800ebf4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//--------------------------------------------------------------------------------------------------
	printf("Hello\r\n");
 8002222:	484e      	ldr	r0, [pc, #312]	; (800235c <main+0x16c>)
 8002224:	f016 fe0c 	bl	8018e40 <puts>
	W25qxx_Init();
 8002228:	f00c f8fc 	bl	800e424 <W25qxx_Init>
	//W25qxx_EraseChip();
	//res = f_mkfs("", FM_FAT, 4096, bb, _MAX_SS);

	res = f_mount(&fs, "", 1);
 800222c:	2201      	movs	r2, #1
 800222e:	494c      	ldr	r1, [pc, #304]	; (8002360 <main+0x170>)
 8002230:	484c      	ldr	r0, [pc, #304]	; (8002364 <main+0x174>)
 8002232:	f014 fb95 	bl	8016960 <f_mount>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <main+0x178>)
 800223c:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <main+0x178>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <main+0x5e>
		printf("mount FS OK\r\n");
 8002246:	4849      	ldr	r0, [pc, #292]	; (800236c <main+0x17c>)
 8002248:	f016 fdfa 	bl	8018e40 <puts>
 800224c:	e01e      	b.n	800228c <main+0x9c>
	} else if (res == 13) {
 800224e:	4b46      	ldr	r3, [pc, #280]	; (8002368 <main+0x178>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b0d      	cmp	r3, #13
 8002254:	d114      	bne.n	8002280 <main+0x90>
		res = f_mkfs("", FM_FAT, 4096, bb, _MAX_SS);
 8002256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4b44      	ldr	r3, [pc, #272]	; (8002370 <main+0x180>)
 800225e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002262:	2101      	movs	r1, #1
 8002264:	483e      	ldr	r0, [pc, #248]	; (8002360 <main+0x170>)
 8002266:	f015 fc61 	bl	8017b2c <f_mkfs>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <main+0x178>)
 8002270:	701a      	strb	r2, [r3, #0]
		printf("Formst disk:  %d \r\n", res);
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <main+0x178>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	483e      	ldr	r0, [pc, #248]	; (8002374 <main+0x184>)
 800227a:	f016 fd5b 	bl	8018d34 <iprintf>
 800227e:	e005      	b.n	800228c <main+0x9c>
	} else {
		printf("mount Fail:  %d \r\n", res);
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <main+0x178>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	483c      	ldr	r0, [pc, #240]	; (8002378 <main+0x188>)
 8002288:	f016 fd54 	bl	8018d34 <iprintf>
	}

	set_default_config();
 800228c:	f000 ff78 	bl	8003180 <set_default_config>

	res = f_opendir(&dir, "/");
 8002290:	493a      	ldr	r1, [pc, #232]	; (800237c <main+0x18c>)
 8002292:	483b      	ldr	r0, [pc, #236]	; (8002380 <main+0x190>)
 8002294:	f015 fa0d 	bl	80176b2 <f_opendir>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <main+0x178>)
 800229e:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <main+0x178>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d118      	bne.n	80022da <main+0xea>
		res = f_findfirst(&dir, &fno, fno.fname, "*.ini");
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <main+0x194>)
 80022aa:	4a37      	ldr	r2, [pc, #220]	; (8002388 <main+0x198>)
 80022ac:	4937      	ldr	r1, [pc, #220]	; (800238c <main+0x19c>)
 80022ae:	4834      	ldr	r0, [pc, #208]	; (8002380 <main+0x190>)
 80022b0:	f015 fb57 	bl	8017962 <f_findfirst>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <main+0x178>)
 80022ba:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && fno.fname[0]) {
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <main+0x178>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <main+0xe6>
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <main+0x19c>)
 80022c6:	7d9b      	ldrb	r3, [r3, #22]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <main+0xe6>
			printf("found file  %s \r\n", fno.fname);
 80022cc:	492e      	ldr	r1, [pc, #184]	; (8002388 <main+0x198>)
 80022ce:	4830      	ldr	r0, [pc, #192]	; (8002390 <main+0x1a0>)
 80022d0:	f016 fd30 	bl	8018d34 <iprintf>
 80022d4:	e001      	b.n	80022da <main+0xea>
		} else {
			write_default_config();
 80022d6:	f000 ff77 	bl	80031c8 <write_default_config>
		}
	}

	res = ini_parse_fatfs("config.ini", configReader, &config);
 80022da:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <main+0x1a4>)
 80022dc:	492e      	ldr	r1, [pc, #184]	; (8002398 <main+0x1a8>)
 80022de:	482f      	ldr	r0, [pc, #188]	; (800239c <main+0x1ac>)
 80022e0:	f7ff f9a8 	bl	8001634 <ini_parse_fatfs>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <main+0x178>)
 80022ea:	701a      	strb	r2, [r3, #0]
		char error_string[100];
		sprintf(error_string, "Fail read Config.ini, chek line %d", res);
		writeErrorTxt(error_string);
	}

	res = f_mount(NULL, "", 1);
 80022ec:	2201      	movs	r2, #1
 80022ee:	491c      	ldr	r1, [pc, #112]	; (8002360 <main+0x170>)
 80022f0:	2000      	movs	r0, #0
 80022f2:	f014 fb35 	bl	8016960 <f_mount>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <main+0x178>)
 80022fc:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <main+0x178>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <main+0x122>
		printf("unMount FS fail: %d\r\n", res);
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <main+0x178>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	4824      	ldr	r0, [pc, #144]	; (80023a0 <main+0x1b0>)
 800230e:	f016 fd11 	bl	8018d34 <iprintf>
	}
	//--------------------------------------------------------------------------------------------------

	MX_USB_DEVICE_Init();
 8002312:	f00c fd27 	bl	800ed64 <MX_USB_DEVICE_Init>

	//--------------------------------------------------------------------------------------------------

	if (apds9960init()) {
 8002316:	f00a fda7 	bl	800ce68 <apds9960init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <main+0x138>
		printf("APDS-9960 initialization complete\r\n");
 8002320:	4820      	ldr	r0, [pc, #128]	; (80023a4 <main+0x1b4>)
 8002322:	f016 fd8d 	bl	8018e40 <puts>
 8002326:	e00c      	b.n	8002342 <main+0x152>
	} else {
		printf("Something went wrong during APDS-9960 init!\r\n");
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <main+0x1b8>)
 800232a:	f016 fd89 	bl	8018e40 <puts>
		printf("Error!!! Re-Start Board\r\n");
 800232e:	481f      	ldr	r0, [pc, #124]	; (80023ac <main+0x1bc>)
 8002330:	f016 fd86 	bl	8018e40 <puts>
		gestureSensorReady = 0;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <main+0x1c0>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 800233a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233e:	f001 fd43 	bl	8003dc8 <HAL_Delay>
		//NVIC_SystemReset();
	}
	// Start running the APDS-9960 gesture sensor engine
	if (enableGestureSensor(1)) {
 8002342:	2001      	movs	r0, #1
 8002344:	f00b f92d 	bl	800d5a2 <enableGestureSensor>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d034      	beq.n	80023b8 <main+0x1c8>
		printf("Gesture sensor is now running\r\n");
 800234e:	4819      	ldr	r0, [pc, #100]	; (80023b4 <main+0x1c4>)
 8002350:	f016 fd76 	bl	8018e40 <puts>
		gestureSensorReady = 1;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <main+0x1c0>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e03a      	b.n	80023d2 <main+0x1e2>
 800235c:	0801ae18 	.word	0x0801ae18
 8002360:	0801ae20 	.word	0x0801ae20
 8002364:	20000510 	.word	0x20000510
 8002368:	2000050d 	.word	0x2000050d
 800236c:	0801ae24 	.word	0x0801ae24
 8002370:	20001698 	.word	0x20001698
 8002374:	0801ae34 	.word	0x0801ae34
 8002378:	0801ae48 	.word	0x0801ae48
 800237c:	0801ae5c 	.word	0x0801ae5c
 8002380:	20001548 	.word	0x20001548
 8002384:	0801ae60 	.word	0x0801ae60
 8002388:	20001596 	.word	0x20001596
 800238c:	20001580 	.word	0x20001580
 8002390:	0801ae68 	.word	0x0801ae68
 8002394:	20002d38 	.word	0x20002d38
 8002398:	08002fa9 	.word	0x08002fa9
 800239c:	0801ae7c 	.word	0x0801ae7c
 80023a0:	0801ae88 	.word	0x0801ae88
 80023a4:	0801aea0 	.word	0x0801aea0
 80023a8:	0801aec4 	.word	0x0801aec4
 80023ac:	0801aef4 	.word	0x0801aef4
 80023b0:	20000494 	.word	0x20000494
 80023b4:	0801af10 	.word	0x0801af10
	} else {
		printf("Something went wrong during gesture sensor init!\r\n");
 80023b8:	4891      	ldr	r0, [pc, #580]	; (8002600 <main+0x410>)
 80023ba:	f016 fd41 	bl	8018e40 <puts>
		printf("Error!!! Re-Start Board\r\n");
 80023be:	4891      	ldr	r0, [pc, #580]	; (8002604 <main+0x414>)
 80023c0:	f016 fd3e 	bl	8018e40 <puts>
		gestureSensorReady = 0;
 80023c4:	4b90      	ldr	r3, [pc, #576]	; (8002608 <main+0x418>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80023ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ce:	f001 fcfb 	bl	8003dc8 <HAL_Delay>
	//--------------------------------------------------------------------------------------------------
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	PwmLed_init(&Led_1, &htim1, TIM_CHANNEL_1, 16, WS2815);
 80023d2:	2302      	movs	r3, #2
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2310      	movs	r3, #16
 80023d8:	2200      	movs	r2, #0
 80023da:	498c      	ldr	r1, [pc, #560]	; (800260c <main+0x41c>)
 80023dc:	488c      	ldr	r0, [pc, #560]	; (8002610 <main+0x420>)
 80023de:	f001 f94d 	bl	800367c <PwmLed_init>
	ledRing.pwmLed = &Led_1;
 80023e2:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <main+0x424>)
 80023e4:	4a8a      	ldr	r2, [pc, #552]	; (8002610 <main+0x420>)
 80023e6:	601a      	str	r2, [r3, #0]
	ledRing.num_led = 16;
 80023e8:	4b8a      	ldr	r3, [pc, #552]	; (8002614 <main+0x424>)
 80023ea:	2210      	movs	r2, #16
 80023ec:	605a      	str	r2, [r3, #4]
	ledRing.ledBrightMass = (uint8_t*) malloc(ledRing.num_led * sizeof(uint8_t));
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <main+0x424>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f016 fb98 	bl	8018b28 <malloc>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b85      	ldr	r3, [pc, #532]	; (8002614 <main+0x424>)
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
	ledRing.ledAngleRadian = 2 * M_PI / ledRing.num_led;
 8002400:	4b84      	ldr	r3, [pc, #528]	; (8002614 <main+0x424>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f88f 	bl	8000528 <__aeabi_ui2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	a17a      	add	r1, pc, #488	; (adr r1, 80025f8 <main+0x408>)
 8002410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002414:	f7fe fa2c 	bl	8000870 <__aeabi_ddiv>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	497d      	ldr	r1, [pc, #500]	; (8002614 <main+0x424>)
 800241e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ledRing.ledsCoordinate = (uint16_t*) malloc(ledRing.num_led / 2 * sizeof(uint16_t));
 8002422:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <main+0x424>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f016 fb7c 	bl	8018b28 <malloc>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	4b77      	ldr	r3, [pc, #476]	; (8002614 <main+0x424>)
 8002436:	60da      	str	r2, [r3, #12]
	ledRing.state = LED_STOP;
 8002438:	4b76      	ldr	r3, [pc, #472]	; (8002614 <main+0x424>)
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ledRing.RGB.r = config.RGB.r;
 8002440:	4b75      	ldr	r3, [pc, #468]	; (8002618 <main+0x428>)
 8002442:	7a1a      	ldrb	r2, [r3, #8]
 8002444:	4b73      	ldr	r3, [pc, #460]	; (8002614 <main+0x424>)
 8002446:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	ledRing.RGB.g = config.RGB.g;
 800244a:	4b73      	ldr	r3, [pc, #460]	; (8002618 <main+0x428>)
 800244c:	7a5a      	ldrb	r2, [r3, #9]
 800244e:	4b71      	ldr	r3, [pc, #452]	; (8002614 <main+0x424>)
 8002450:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	ledRing.RGB.b = config.RGB.b;
 8002454:	4b70      	ldr	r3, [pc, #448]	; (8002618 <main+0x428>)
 8002456:	7a9a      	ldrb	r2, [r3, #10]
 8002458:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <main+0x424>)
 800245a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	ledRing.HSV = RgbToHsv(ledRing.RGB);
 800245e:	4c6d      	ldr	r4, [pc, #436]	; (8002614 <main+0x424>)
 8002460:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <main+0x424>)
 8002462:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002466:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 800246a:	0209      	lsls	r1, r1, #8
 800246c:	430a      	orrs	r2, r1
 800246e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	431a      	orrs	r2, r3
 8002476:	2300      	movs	r3, #0
 8002478:	f362 0317 	bfi	r3, r2, #0, #24
 800247c:	4618      	mov	r0, r3
 800247e:	f001 fb87 	bl	8003b90 <RgbToHsv>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 800248a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800248e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8002492:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002496:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

	setLedEffect(&ledRing, SWIPE_DOWN, 90);
 800249a:	225a      	movs	r2, #90	; 0x5a
 800249c:	2104      	movs	r1, #4
 800249e:	485d      	ldr	r0, [pc, #372]	; (8002614 <main+0x424>)
 80024a0:	f7ff fa40 	bl	8001924 <setLedEffect>

	HAL_TIM_Base_Start_IT(&htim4);
 80024a4:	485d      	ldr	r0, [pc, #372]	; (800261c <main+0x42c>)
 80024a6:	f007 fdc9 	bl	800a03c <HAL_TIM_Base_Start_IT>
	int effectLen = 90;
 80024aa:	235a      	movs	r3, #90	; 0x5a
 80024ac:	667b      	str	r3, [r7, #100]	; 0x64
	//--------------------------------------------------------------------------------------------------
	while (1) {

		if (((gestureInteruptFlag == 1) ) && (ledRefreshFlag != 1)) {
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <main+0x430>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f040 808f 	bne.w	80025d6 <main+0x3e6>
 80024b8:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <main+0x434>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	f000 808a 	beq.w	80025d6 <main+0x3e6>
			gestureInteruptFlag = 0;
 80024c2:	4b57      	ldr	r3, [pc, #348]	; (8002620 <main+0x430>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]

			if (waFlag) {
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <main+0x438>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <main+0x2e6>
				waFlag = 0;
 80024d0:	4b55      	ldr	r3, [pc, #340]	; (8002628 <main+0x438>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
			}

			gestureTik = HAL_GetTick();
 80024d6:	f001 fc6b 	bl	8003db0 <HAL_GetTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <main+0x43c>)
 80024de:	6013      	str	r3, [r2, #0]

			prevGesture = gesture;
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <main+0x440>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a53      	ldr	r2, [pc, #332]	; (8002634 <main+0x444>)
 80024e6:	6013      	str	r3, [r2, #0]
			gesture = apds9960ReadSensor(); /* Read Gesture */
 80024e8:	f00b fe88 	bl	800e1fc <apds9960ReadSensor>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a50      	ldr	r2, [pc, #320]	; (8002630 <main+0x440>)
 80024f0:	6013      	str	r3, [r2, #0]
			if (gesture != 0) {
 80024f2:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <main+0x440>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <main+0x31c>
				printf("%ld: gesture is^ %d \r\n",HAL_GetTick(), gesture); /* Report to Serial Port(Debug Port) */
 80024fa:	f001 fc59 	bl	8003db0 <HAL_GetTick>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <main+0x440>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	484c      	ldr	r0, [pc, #304]	; (8002638 <main+0x448>)
 8002508:	f016 fc14 	bl	8018d34 <iprintf>
			}
			if (gesture == 4) {
 800250c:	4b48      	ldr	r3, [pc, #288]	; (8002630 <main+0x440>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d115      	bne.n	8002540 <main+0x350>
				if (config.vertical_swipe_enable == 1) {
 8002514:	4b40      	ldr	r3, [pc, #256]	; (8002618 <main+0x428>)
 8002516:	7b5b      	ldrb	r3, [r3, #13]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d15c      	bne.n	80025d6 <main+0x3e6>
					testModeBright(-1);
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff fe1c 	bl	800215c <testModeBright>
					setLedEffect(&ledRing, SWIPE_DOWN, effectLen);
 8002524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	2104      	movs	r1, #4
 800252c:	4839      	ldr	r0, [pc, #228]	; (8002614 <main+0x424>)
 800252e:	f7ff f9f9 	bl	8001924 <setLedEffect>
					CDC_report(DOWN_ARROW);
 8002532:	2051      	movs	r0, #81	; 0x51
 8002534:	f7ff fd56 	bl	8001fe4 <CDC_report>
					HID_keyboard_report(DOWN_ARROW);
 8002538:	2051      	movs	r0, #81	; 0x51
 800253a:	f7ff fdab 	bl	8002094 <HID_keyboard_report>
 800253e:	e04a      	b.n	80025d6 <main+0x3e6>

				}
			} else if (gesture == 2) {
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <main+0x440>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d114      	bne.n	8002572 <main+0x382>
				if (config.horizontal_swipe_enable == 1) {
 8002548:	4b33      	ldr	r3, [pc, #204]	; (8002618 <main+0x428>)
 800254a:	7b9b      	ldrb	r3, [r3, #14]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d142      	bne.n	80025d6 <main+0x3e6>
					setLedEffect(&ledRing, SWIPE_RIGHT, effectLen);
 8002550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	2106      	movs	r1, #6
 8002558:	482e      	ldr	r0, [pc, #184]	; (8002614 <main+0x424>)
 800255a:	f7ff f9e3 	bl	8001924 <setLedEffect>
					CDC_report(RIGHT_ARROW);
 800255e:	204f      	movs	r0, #79	; 0x4f
 8002560:	f7ff fd40 	bl	8001fe4 <CDC_report>
					HID_keyboard_report(RIGHT_ARROW);
 8002564:	204f      	movs	r0, #79	; 0x4f
 8002566:	f7ff fd95 	bl	8002094 <HID_keyboard_report>
					testModeColor(1);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fdcc 	bl	8002108 <testModeColor>
 8002570:	e031      	b.n	80025d6 <main+0x3e6>
				}
			} else if (gesture == 1) {
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <main+0x440>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d115      	bne.n	80025a6 <main+0x3b6>

				if (config.horizontal_swipe_enable == 1) {
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <main+0x428>)
 800257c:	7b9b      	ldrb	r3, [r3, #14]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d129      	bne.n	80025d6 <main+0x3e6>
					setLedEffect(&ledRing, SWIPE_LEFT, effectLen);
 8002582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002584:	b29b      	uxth	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	2105      	movs	r1, #5
 800258a:	4822      	ldr	r0, [pc, #136]	; (8002614 <main+0x424>)
 800258c:	f7ff f9ca 	bl	8001924 <setLedEffect>
					CDC_report(LEFT_ARROW);
 8002590:	2050      	movs	r0, #80	; 0x50
 8002592:	f7ff fd27 	bl	8001fe4 <CDC_report>
					HID_keyboard_report(LEFT_ARROW);
 8002596:	2050      	movs	r0, #80	; 0x50
 8002598:	f7ff fd7c 	bl	8002094 <HID_keyboard_report>
					testModeColor(-1);
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff fdb2 	bl	8002108 <testModeColor>
 80025a4:	e017      	b.n	80025d6 <main+0x3e6>
				}
			} else if (gesture == 3) {
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <main+0x440>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d113      	bne.n	80025d6 <main+0x3e6>

				if (config.vertical_swipe_enable == 1) {
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <main+0x428>)
 80025b0:	7b5b      	ldrb	r3, [r3, #13]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10f      	bne.n	80025d6 <main+0x3e6>
					testModeBright(1);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff fdd0 	bl	800215c <testModeBright>
					setLedEffect(&ledRing, SWIPE_UP, effectLen);
 80025bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	2103      	movs	r1, #3
 80025c4:	4813      	ldr	r0, [pc, #76]	; (8002614 <main+0x424>)
 80025c6:	f7ff f9ad 	bl	8001924 <setLedEffect>
					CDC_report(UP_ARROW);
 80025ca:	2052      	movs	r0, #82	; 0x52
 80025cc:	f7ff fd0a 	bl	8001fe4 <CDC_report>
					HID_keyboard_report(UP_ARROW);
 80025d0:	2052      	movs	r0, #82	; 0x52
 80025d2:	f7ff fd5f 	bl	8002094 <HID_keyboard_report>

				}
			}
		}

		if (ledRefreshFlag == 1) {
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <main+0x434>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <main+0x3fa>
			ledRefreshFlag = 0;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <main+0x434>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
			processLedEffect(&ledRing);
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <main+0x424>)
 80025e6:	f7ff fb09 	bl	8001bfc <processLedEffect>
		}

		CDC_checkRecive();
 80025ea:	f7ff fd3b 	bl	8002064 <CDC_checkRecive>
		HAL_Delay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f001 fbea 	bl	8003dc8 <HAL_Delay>
		if (((gestureInteruptFlag == 1) ) && (ledRefreshFlag != 1)) {
 80025f4:	e75b      	b.n	80024ae <main+0x2be>
 80025f6:	bf00      	nop
 80025f8:	54442d18 	.word	0x54442d18
 80025fc:	401921fb 	.word	0x401921fb
 8002600:	0801af30 	.word	0x0801af30
 8002604:	0801aef4 	.word	0x0801aef4
 8002608:	20000494 	.word	0x20000494
 800260c:	200026f4 	.word	0x200026f4
 8002610:	20000478 	.word	0x20000478
 8002614:	200004a8 	.word	0x200004a8
 8002618:	20002d38 	.word	0x20002d38
 800261c:	20002784 	.word	0x20002784
 8002620:	20000495 	.word	0x20000495
 8002624:	20000496 	.word	0x20000496
 8002628:	200004f4 	.word	0x200004f4
 800262c:	200004e8 	.word	0x200004e8
 8002630:	200004e0 	.word	0x200004e0
 8002634:	200004e4 	.word	0x200004e4
 8002638:	0801af64 	.word	0x0801af64

0800263c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b094      	sub	sp, #80	; 0x50
 8002640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	2230      	movs	r2, #48	; 0x30
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f016 fa8a 	bl	8018b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <SystemClock_Config+0xc8>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <SystemClock_Config+0xc8>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <SystemClock_Config+0xc8>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <SystemClock_Config+0xcc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <SystemClock_Config+0xcc>)
 8002686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <SystemClock_Config+0xcc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002698:	2301      	movs	r3, #1
 800269a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800269c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a2:	2302      	movs	r3, #2
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80026ac:	2319      	movs	r3, #25
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026b8:	2304      	movs	r3, #4
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	4618      	mov	r0, r3
 80026c2:	f006 fa7f 	bl	8008bc4 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026cc:	f000 f81e 	bl	800270c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f006 fce1 	bl	80090b4 <HAL_RCC_ClockConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026f8:	f000 f808 	bl	800270c <Error_Handler>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3750      	adds	r7, #80	; 0x50
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <MX_SPI1_Init+0x64>)
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <MX_SPI1_Init+0x68>)
 8002720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <MX_SPI1_Init+0x64>)
 8002724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_SPI1_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <MX_SPI1_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_SPI1_Init+0x64>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_SPI1_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_SPI1_Init+0x64>)
 8002744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002748:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_SPI1_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <MX_SPI1_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_SPI1_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <MX_SPI1_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_SPI1_Init+0x64>)
 8002764:	220a      	movs	r2, #10
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002768:	4804      	ldr	r0, [pc, #16]	; (800277c <MX_SPI1_Init+0x64>)
 800276a:	f006 fe6f 	bl	800944c <HAL_SPI_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002774:	f7ff ffca 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20002698 	.word	0x20002698
 8002780:	40013000 	.word	0x40013000

08002784 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_SPI_MspInit+0x84>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12b      	bne.n	80027fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_SPI_MspInit+0x88>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_SPI_MspInit+0x88>)
 80027b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_SPI_MspInit+0x88>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_SPI_MspInit+0x88>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_SPI_MspInit+0x88>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_SPI_MspInit+0x88>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = W_SCK_Pin|W_MISO_Pin|W_MOSI_Pin;
 80027de:	23e0      	movs	r3, #224	; 0xe0
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027ee:	2305      	movs	r3, #5
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <HAL_SPI_MspInit+0x8c>)
 80027fa:	f001 ffbb 	bl	8004774 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40013000 	.word	0x40013000
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000

08002814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_MspInit+0x4c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_MspInit+0x4c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_MspInit+0x4c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_MspInit+0x4c>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f001 fa6a 	bl	8003d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM2_IRQHandler+0x10>)
 80028be:	f007 fee5 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2000273c 	.word	0x2000273c

080028cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM4_IRQHandler+0x10>)
 80028d2:	f007 fedb 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20002784 	.word	0x20002784

080028e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <I2C1_EV_IRQHandler+0x10>)
 80028e6:	f002 fe8d 	bl	8005604 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000041c 	.word	0x2000041c

080028f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <I2C1_ER_IRQHandler+0x10>)
 80028fa:	f002 fff4 	bl	80058e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000041c 	.word	0x2000041c

08002908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Int_Pin);
 800290c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002910:	f002 f8ce 	bl	8004ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA2_Stream1_IRQHandler+0x10>)
 800291e:	f001 fcb1 	bl	8004284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  //HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_1);
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200027cc 	.word	0x200027cc

0800292c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <OTG_FS_IRQHandler+0x10>)
 8002932:	f004 ffed 	bl	8007910 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000282c 	.word	0x2000282c

08002940 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e00a      	b.n	8002968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002952:	f3af 8000 	nop.w
 8002956:	4601      	mov	r1, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	b2ca      	uxtb	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf0      	blt.n	8002952 <_read+0x12>
	}

return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:
	}
	return len;
}

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f015 fe3e 	bl	8018694 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20020000 	.word	0x20020000
 8002a44:	00001000 	.word	0x00001000
 8002a48:	200026f0 	.word	0x200026f0
 8002a4c:	20003a10 	.word	0x20003a10

08002a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b092      	sub	sp, #72	; 0x48
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
 8002a94:	615a      	str	r2, [r3, #20]
 8002a96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f016 f860 	bl	8018b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002aa6:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <MX_TIM1_Init+0x100>)
 8002aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 119;
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002ab8:	2277      	movs	r2, #119	; 0x77
 8002aba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ace:	4828      	ldr	r0, [pc, #160]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002ad0:	f007 fb16 	bl	800a100 <HAL_TIM_PWM_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002ada:	f7ff fe17 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aea:	4619      	mov	r1, r3
 8002aec:	4820      	ldr	r0, [pc, #128]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002aee:	f008 fc2d 	bl	800b34c <HAL_TIMEx_MasterConfigSynchronization>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002af8:	f7ff fe08 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afc:	2360      	movs	r3, #96	; 0x60
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4813      	ldr	r0, [pc, #76]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002b22:	f007 febb 	bl	800a89c <HAL_TIM_PWM_ConfigChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002b2c:	f7ff fdee 	bl	800270c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002b54:	f008 fc68 	bl	800b428 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002b5e:	f7ff fdd5 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b62:	4803      	ldr	r0, [pc, #12]	; (8002b70 <MX_TIM1_Init+0xfc>)
 8002b64:	f000 f93a 	bl	8002ddc <HAL_TIM_MspPostInit>

}
 8002b68:	bf00      	nop
 8002b6a:	3748      	adds	r7, #72	; 0x48
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200026f4 	.word	0x200026f4
 8002b74:	40010000 	.word	0x40010000

08002b78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002b9e:	2263      	movs	r2, #99	; 0x63
 8002ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002baa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bbc:	4813      	ldr	r0, [pc, #76]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002bbe:	f007 f9ed 	bl	8009f9c <HAL_TIM_Base_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bc8:	f7ff fda0 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480c      	ldr	r0, [pc, #48]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002bda:	f007 ff21 	bl	800aa20 <HAL_TIM_ConfigClockSource>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002be4:	f7ff fd92 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be8:	2300      	movs	r3, #0
 8002bea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_TIM2_Init+0x94>)
 8002bf6:	f008 fba9 	bl	800b34c <HAL_TIMEx_MasterConfigSynchronization>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c00:	f7ff fd84 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	2000273c 	.word	0x2000273c

08002c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	463b      	mov	r3, r7
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <MX_TIM4_Init+0x98>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c42:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002c46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c56:	f007 f9a1 	bl	8009f9c <HAL_TIM_Base_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002c60:	f7ff fd54 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4619      	mov	r1, r3
 8002c70:	480c      	ldr	r0, [pc, #48]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c72:	f007 fed5 	bl	800aa20 <HAL_TIM_ConfigClockSource>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002c7c:	f7ff fd46 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_TIM4_Init+0x94>)
 8002c8e:	f008 fb5d 	bl	800b34c <HAL_TIMEx_MasterConfigSynchronization>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002c98:	f7ff fd38 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20002784 	.word	0x20002784
 8002ca8:	40000800 	.word	0x40000800

08002cac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_TIM_PWM_MspInit+0x98>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d13d      	bne.n	8002d3a <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_TIM_PWM_MspInit+0xa4>)
 8002cde:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002ce2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002ce6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d0a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002d1e:	480b      	ldr	r0, [pc, #44]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d20:	f001 f988 	bl	8004034 <HAL_DMA_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002d2a:	f7ff fcef 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_TIM_PWM_MspInit+0xa0>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	200027cc 	.word	0x200027cc
 8002d50:	40026428 	.word	0x40026428

08002d54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d116      	bne.n	8002d94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_TIM_Base_MspInit+0x80>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Base_MspInit+0x80>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <HAL_TIM_Base_MspInit+0x80>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	201c      	movs	r0, #28
 8002d88:	f001 f91d 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d8c:	201c      	movs	r0, #28
 8002d8e:	f001 f936 	bl	8003ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d92:	e01a      	b.n	8002dca <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <HAL_TIM_Base_MspInit+0x84>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d115      	bne.n	8002dca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_TIM_Base_MspInit+0x80>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <HAL_TIM_Base_MspInit+0x80>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_TIM_Base_MspInit+0x80>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	201e      	movs	r0, #30
 8002dc0:	f001 f901 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dc4:	201e      	movs	r0, #30
 8002dc6:	f001 f91a 	bl	8003ffe <HAL_NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40000800 	.word	0x40000800

08002ddc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <HAL_TIM_MspPostInit+0x68>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d11e      	bne.n	8002e3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_TIM_MspPostInit+0x6c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_TIM_MspPostInit+0x6c>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_TIM_MspPostInit+0x6c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <HAL_TIM_MspPostInit+0x70>)
 8002e38:	f001 fc9c 	bl	8004774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020000 	.word	0x40020000

08002e50 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e5e:	2204      	movs	r2, #4
 8002e60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e64:	2202      	movs	r2, #2
 8002e66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e70:	2202      	movs	r2, #2
 8002e72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002e94:	f004 fbec 	bl	8007670 <HAL_PCD_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002e9e:	f7ff fc35 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000282c 	.word	0x2000282c

08002eac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d13a      	bne.n	8002f44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002eea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002efc:	230a      	movs	r3, #10
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	4812      	ldr	r0, [pc, #72]	; (8002f50 <HAL_PCD_MspInit+0xa4>)
 8002f08:	f001 fc34 	bl	8004774 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	6353      	str	r3, [r2, #52]	; 0x34
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f26:	6453      	str	r3, [r2, #68]	; 0x44
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_PCD_MspInit+0xa0>)
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	2043      	movs	r0, #67	; 0x43
 8002f3a:	f001 f844 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002f3e:	2043      	movs	r0, #67	; 0x43
 8002f40:	f001 f85d 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	; 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020000 	.word	0x40020000

08002f54 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f70:	4c0b      	ldr	r4, [pc, #44]	; (8002fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f7e:	f7ff fd67 	bl	8002a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f015 fd45 	bl	8018a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f86:	f7ff f933 	bl	80021f0 <main>
  bx  lr    
 8002f8a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8002f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8002f98:	0801bfa0 	.word	0x0801bfa0
  ldr r2, =_sbss
 8002f9c:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8002fa0:	20003a0c 	.word	0x20003a0c

08002fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC_IRQHandler>
	...

08002fa8 <configReader>:
#include "stdlib.h"
#include "fatfs.h"

configuration config;

int configReader(void *user, const char *section, const char *name, const char *value) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
	configuration *pconfig = (configuration*) user;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	617b      	str	r3, [r7, #20]

#define MATCH(s, n) strcmp(section, s) == 0 && strcmp(name, n) == 0
	if (MATCH("led", "r")) {
 8002fba:	4965      	ldr	r1, [pc, #404]	; (8003150 <configReader+0x1a8>)
 8002fbc:	68b8      	ldr	r0, [r7, #8]
 8002fbe:	f7fd f95f 	bl	8000280 <strcmp>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10e      	bne.n	8002fe6 <configReader+0x3e>
 8002fc8:	4962      	ldr	r1, [pc, #392]	; (8003154 <configReader+0x1ac>)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd f958 	bl	8000280 <strcmp>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d107      	bne.n	8002fe6 <configReader+0x3e>
		pconfig->RGB.r = atoi(value);
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f015 fb58 	bl	801868c <atoi>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	721a      	strb	r2, [r3, #8]
 8002fe4:	e0af      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("led", "g")) {
 8002fe6:	495a      	ldr	r1, [pc, #360]	; (8003150 <configReader+0x1a8>)
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f7fd f949 	bl	8000280 <strcmp>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10e      	bne.n	8003012 <configReader+0x6a>
 8002ff4:	4958      	ldr	r1, [pc, #352]	; (8003158 <configReader+0x1b0>)
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd f942 	bl	8000280 <strcmp>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <configReader+0x6a>
		pconfig->RGB.g = atoi(value);
 8003002:	6838      	ldr	r0, [r7, #0]
 8003004:	f015 fb42 	bl	801868c <atoi>
 8003008:	4603      	mov	r3, r0
 800300a:	b2da      	uxtb	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	725a      	strb	r2, [r3, #9]
 8003010:	e099      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("led", "b")) {
 8003012:	494f      	ldr	r1, [pc, #316]	; (8003150 <configReader+0x1a8>)
 8003014:	68b8      	ldr	r0, [r7, #8]
 8003016:	f7fd f933 	bl	8000280 <strcmp>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10e      	bne.n	800303e <configReader+0x96>
 8003020:	494e      	ldr	r1, [pc, #312]	; (800315c <configReader+0x1b4>)
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd f92c 	bl	8000280 <strcmp>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <configReader+0x96>
		pconfig->RGB.b = atoi(value);
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f015 fb2c 	bl	801868c <atoi>
 8003034:	4603      	mov	r3, r0
 8003036:	b2da      	uxtb	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	729a      	strb	r2, [r3, #10]
 800303c:	e083      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("led", "brightMax")) {
 800303e:	4944      	ldr	r1, [pc, #272]	; (8003150 <configReader+0x1a8>)
 8003040:	68b8      	ldr	r0, [r7, #8]
 8003042:	f7fd f91d 	bl	8000280 <strcmp>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <configReader+0xc0>
 800304c:	4944      	ldr	r1, [pc, #272]	; (8003160 <configReader+0x1b8>)
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd f916 	bl	8000280 <strcmp>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <configReader+0xc0>
		pconfig->brightMax = atoi(value);
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f015 fb16 	bl	801868c <atoi>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e06e      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("led", "brightMin")) {
 8003068:	4939      	ldr	r1, [pc, #228]	; (8003150 <configReader+0x1a8>)
 800306a:	68b8      	ldr	r0, [r7, #8]
 800306c:	f7fd f908 	bl	8000280 <strcmp>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <configReader+0xea>
 8003076:	493b      	ldr	r1, [pc, #236]	; (8003164 <configReader+0x1bc>)
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fd f901 	bl	8000280 <strcmp>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <configReader+0xea>
		pconfig->brightMin = atoi(value);
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	f015 fb01 	bl	801868c <atoi>
 800308a:	4602      	mov	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	e059      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("led", "testMode")) {
 8003092:	492f      	ldr	r1, [pc, #188]	; (8003150 <configReader+0x1a8>)
 8003094:	68b8      	ldr	r0, [r7, #8]
 8003096:	f7fd f8f3 	bl	8000280 <strcmp>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10e      	bne.n	80030be <configReader+0x116>
 80030a0:	4931      	ldr	r1, [pc, #196]	; (8003168 <configReader+0x1c0>)
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd f8ec 	bl	8000280 <strcmp>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <configReader+0x116>
		pconfig->testMode = atoi(value);
 80030ae:	6838      	ldr	r0, [r7, #0]
 80030b0:	f015 faec 	bl	801868c <atoi>
 80030b4:	4603      	mov	r3, r0
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	72da      	strb	r2, [r3, #11]
 80030bc:	e043      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("gesture", "vertical_swipe_enable")) {
 80030be:	492b      	ldr	r1, [pc, #172]	; (800316c <configReader+0x1c4>)
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f7fd f8dd 	bl	8000280 <strcmp>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10e      	bne.n	80030ea <configReader+0x142>
 80030cc:	4928      	ldr	r1, [pc, #160]	; (8003170 <configReader+0x1c8>)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd f8d6 	bl	8000280 <strcmp>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <configReader+0x142>
		pconfig->vertical_swipe_enable = atoi(value);
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f015 fad6 	bl	801868c <atoi>
 80030e0:	4603      	mov	r3, r0
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	735a      	strb	r2, [r3, #13]
 80030e8:	e02d      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("gesture", "horizontal_swipe_enable")) {
 80030ea:	4920      	ldr	r1, [pc, #128]	; (800316c <configReader+0x1c4>)
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f7fd f8c7 	bl	8000280 <strcmp>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <configReader+0x16e>
 80030f8:	491e      	ldr	r1, [pc, #120]	; (8003174 <configReader+0x1cc>)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd f8c0 	bl	8000280 <strcmp>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <configReader+0x16e>
		pconfig->horizontal_swipe_enable = atoi(value);
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	f015 fac0 	bl	801868c <atoi>
 800310c:	4603      	mov	r3, r0
 800310e:	b2da      	uxtb	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	739a      	strb	r2, [r3, #14]
 8003114:	e017      	b.n	8003146 <configReader+0x19e>
	} else if (MATCH("system", "HID_keyboard_enable")) {
 8003116:	4918      	ldr	r1, [pc, #96]	; (8003178 <configReader+0x1d0>)
 8003118:	68b8      	ldr	r0, [r7, #8]
 800311a:	f7fd f8b1 	bl	8000280 <strcmp>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10e      	bne.n	8003142 <configReader+0x19a>
 8003124:	4915      	ldr	r1, [pc, #84]	; (800317c <configReader+0x1d4>)
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd f8aa 	bl	8000280 <strcmp>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <configReader+0x19a>
		pconfig->HID_keyboard_enable = atoi(value);
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	f015 faaa 	bl	801868c <atoi>
 8003138:	4603      	mov	r3, r0
 800313a:	b2da      	uxtb	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	731a      	strb	r2, [r3, #12]
 8003140:	e001      	b.n	8003146 <configReader+0x19e>
	} else {
		return 0; /* unknown section/name, error */
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <configReader+0x1a0>
	}
	return 1;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0801af7c 	.word	0x0801af7c
 8003154:	0801af80 	.word	0x0801af80
 8003158:	0801af84 	.word	0x0801af84
 800315c:	0801af88 	.word	0x0801af88
 8003160:	0801af8c 	.word	0x0801af8c
 8003164:	0801af98 	.word	0x0801af98
 8003168:	0801afa4 	.word	0x0801afa4
 800316c:	0801afb0 	.word	0x0801afb0
 8003170:	0801afb8 	.word	0x0801afb8
 8003174:	0801afd0 	.word	0x0801afd0
 8003178:	0801afe8 	.word	0x0801afe8
 800317c:	0801aff0 	.word	0x0801aff0

08003180 <set_default_config>:
//--------------------------------------------------------------------------------------------------
void set_default_config(void) {
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
	config.RGB.r = 255;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <set_default_config+0x44>)
 8003186:	22ff      	movs	r2, #255	; 0xff
 8003188:	721a      	strb	r2, [r3, #8]
	config.RGB.g = 0;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <set_default_config+0x44>)
 800318c:	2200      	movs	r2, #0
 800318e:	725a      	strb	r2, [r3, #9]
	config.RGB.b = 0;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <set_default_config+0x44>)
 8003192:	2200      	movs	r2, #0
 8003194:	729a      	strb	r2, [r3, #10]
	config.brightMax = 200;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <set_default_config+0x44>)
 8003198:	22c8      	movs	r2, #200	; 0xc8
 800319a:	601a      	str	r2, [r3, #0]
	config.brightMin = 50;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <set_default_config+0x44>)
 800319e:	2232      	movs	r2, #50	; 0x32
 80031a0:	605a      	str	r2, [r3, #4]

	config.testMode = 1;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <set_default_config+0x44>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	72da      	strb	r2, [r3, #11]

	config.vertical_swipe_enable = 1;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <set_default_config+0x44>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	735a      	strb	r2, [r3, #13]
	config.horizontal_swipe_enable = 1;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <set_default_config+0x44>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	739a      	strb	r2, [r3, #14]

	config.HID_keyboard_enable = 1;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <set_default_config+0x44>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	731a      	strb	r2, [r3, #12]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	20002d38 	.word	0x20002d38

080031c8 <write_default_config>:
//--------------------------------------------------------------------------------------------------
void write_default_config(void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
	f_unlink("config.ini"); // delelet error file
 80031d2:	4811      	ldr	r0, [pc, #68]	; (8003218 <write_default_config+0x50>)
 80031d4:	f014 fbe3 	bl	801799e <f_unlink>

	FRESULT fr;
	FIL errFile;
	unsigned int bytesWritten;
	char buff[50];
	fr = f_open(&errFile, "config.ini", FA_CREATE_ALWAYS | FA_WRITE);
 80031d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031dc:	3b14      	subs	r3, #20
 80031de:	220a      	movs	r2, #10
 80031e0:	490d      	ldr	r1, [pc, #52]	; (8003218 <write_default_config+0x50>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f013 fc02 	bl	80169ec <f_open>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80031ee:	f102 020f 	add.w	r2, r2, #15
 80031f2:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK) {
 80031f4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80031f8:	f103 030f 	add.w	r3, r3, #15
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00e      	beq.n	8003220 <write_default_config+0x58>
		printf("f_open() failed, res = %d\r\n", fr);
 8003202:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003206:	f103 030f 	add.w	r3, r3, #15
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4803      	ldr	r0, [pc, #12]	; (800321c <write_default_config+0x54>)
 8003210:	f015 fd90 	bl	8018d34 <iprintf>
		return;
 8003214:	e22a      	b.n	800366c <write_default_config+0x4a4>
 8003216:	bf00      	nop
 8003218:	0801b004 	.word	0x0801b004
 800321c:	0801b010 	.word	0x0801b010
	}
	memset(buff, 0, sizeof(buff));
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	3b0c      	subs	r3, #12
 8003226:	2232      	movs	r2, #50	; 0x32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f015 fc9a 	bl	8018b64 <memset>
	sprintf(buff, "[led]\n");
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	3b0c      	subs	r3, #12
 8003236:	49ef      	ldr	r1, [pc, #956]	; (80035f4 <write_default_config+0x42c>)
 8003238:	4618      	mov	r0, r3
 800323a:	f015 fe4d 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	3b0c      	subs	r3, #12
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f825 	bl	8000294 <strlen>
 800324a:	4602      	mov	r2, r0
 800324c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003250:	3b18      	subs	r3, #24
 8003252:	f107 0110 	add.w	r1, r7, #16
 8003256:	390c      	subs	r1, #12
 8003258:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800325c:	3814      	subs	r0, #20
 800325e:	f013 ffec 	bl	801723a <f_write>
 8003262:	4603      	mov	r3, r0
 8003264:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003268:	f102 020f 	add.w	r2, r2, #15
 800326c:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 800326e:	f107 0310 	add.w	r3, r7, #16
 8003272:	3b0c      	subs	r3, #12
 8003274:	2232      	movs	r2, #50	; 0x32
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f015 fc73 	bl	8018b64 <memset>
	sprintf(buff, "r = %d \n", config.RGB.r);
 800327e:	4bde      	ldr	r3, [pc, #888]	; (80035f8 <write_default_config+0x430>)
 8003280:	7a1b      	ldrb	r3, [r3, #8]
 8003282:	461a      	mov	r2, r3
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	3b0c      	subs	r3, #12
 800328a:	49dc      	ldr	r1, [pc, #880]	; (80035fc <write_default_config+0x434>)
 800328c:	4618      	mov	r0, r3
 800328e:	f015 fe23 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	3b0c      	subs	r3, #12
 8003298:	4618      	mov	r0, r3
 800329a:	f7fc fffb 	bl	8000294 <strlen>
 800329e:	4602      	mov	r2, r0
 80032a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032a4:	3b18      	subs	r3, #24
 80032a6:	f107 0110 	add.w	r1, r7, #16
 80032aa:	390c      	subs	r1, #12
 80032ac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80032b0:	3814      	subs	r0, #20
 80032b2:	f013 ffc2 	bl	801723a <f_write>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80032bc:	f102 020f 	add.w	r2, r2, #15
 80032c0:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	3b0c      	subs	r3, #12
 80032c8:	2232      	movs	r2, #50	; 0x32
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f015 fc49 	bl	8018b64 <memset>
	sprintf(buff, "g = %d \n", config.RGB.g);
 80032d2:	4bc9      	ldr	r3, [pc, #804]	; (80035f8 <write_default_config+0x430>)
 80032d4:	7a5b      	ldrb	r3, [r3, #9]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	3b0c      	subs	r3, #12
 80032de:	49c8      	ldr	r1, [pc, #800]	; (8003600 <write_default_config+0x438>)
 80032e0:	4618      	mov	r0, r3
 80032e2:	f015 fdf9 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 80032e6:	f107 0310 	add.w	r3, r7, #16
 80032ea:	3b0c      	subs	r3, #12
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fc ffd1 	bl	8000294 <strlen>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032f8:	3b18      	subs	r3, #24
 80032fa:	f107 0110 	add.w	r1, r7, #16
 80032fe:	390c      	subs	r1, #12
 8003300:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003304:	3814      	subs	r0, #20
 8003306:	f013 ff98 	bl	801723a <f_write>
 800330a:	4603      	mov	r3, r0
 800330c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003310:	f102 020f 	add.w	r2, r2, #15
 8003314:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	3b0c      	subs	r3, #12
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f015 fc1f 	bl	8018b64 <memset>
	sprintf(buff, "b = %d \n", config.RGB.b);
 8003326:	4bb4      	ldr	r3, [pc, #720]	; (80035f8 <write_default_config+0x430>)
 8003328:	7a9b      	ldrb	r3, [r3, #10]
 800332a:	461a      	mov	r2, r3
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	3b0c      	subs	r3, #12
 8003332:	49b4      	ldr	r1, [pc, #720]	; (8003604 <write_default_config+0x43c>)
 8003334:	4618      	mov	r0, r3
 8003336:	f015 fdcf 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	3b0c      	subs	r3, #12
 8003340:	4618      	mov	r0, r3
 8003342:	f7fc ffa7 	bl	8000294 <strlen>
 8003346:	4602      	mov	r2, r0
 8003348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800334c:	3b18      	subs	r3, #24
 800334e:	f107 0110 	add.w	r1, r7, #16
 8003352:	390c      	subs	r1, #12
 8003354:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003358:	3814      	subs	r0, #20
 800335a:	f013 ff6e 	bl	801723a <f_write>
 800335e:	4603      	mov	r3, r0
 8003360:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003364:	f102 020f 	add.w	r2, r2, #15
 8003368:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 800336a:	f107 0310 	add.w	r3, r7, #16
 800336e:	3b0c      	subs	r3, #12
 8003370:	2232      	movs	r2, #50	; 0x32
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f015 fbf5 	bl	8018b64 <memset>
	sprintf(buff, "brightMax = %d \n", config.brightMax);
 800337a:	4b9f      	ldr	r3, [pc, #636]	; (80035f8 <write_default_config+0x430>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	3b0c      	subs	r3, #12
 8003384:	49a0      	ldr	r1, [pc, #640]	; (8003608 <write_default_config+0x440>)
 8003386:	4618      	mov	r0, r3
 8003388:	f015 fda6 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	3b0c      	subs	r3, #12
 8003392:	4618      	mov	r0, r3
 8003394:	f7fc ff7e 	bl	8000294 <strlen>
 8003398:	4602      	mov	r2, r0
 800339a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800339e:	3b18      	subs	r3, #24
 80033a0:	f107 0110 	add.w	r1, r7, #16
 80033a4:	390c      	subs	r1, #12
 80033a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80033aa:	3814      	subs	r0, #20
 80033ac:	f013 ff45 	bl	801723a <f_write>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80033b6:	f102 020f 	add.w	r2, r2, #15
 80033ba:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	3b0c      	subs	r3, #12
 80033c2:	2232      	movs	r2, #50	; 0x32
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f015 fbcc 	bl	8018b64 <memset>
	sprintf(buff, "brightMin = %d \n", config.brightMin);
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <write_default_config+0x430>)
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	f107 0310 	add.w	r3, r7, #16
 80033d4:	3b0c      	subs	r3, #12
 80033d6:	498d      	ldr	r1, [pc, #564]	; (800360c <write_default_config+0x444>)
 80033d8:	4618      	mov	r0, r3
 80033da:	f015 fd7d 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	3b0c      	subs	r3, #12
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fc ff55 	bl	8000294 <strlen>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033f0:	3b18      	subs	r3, #24
 80033f2:	f107 0110 	add.w	r1, r7, #16
 80033f6:	390c      	subs	r1, #12
 80033f8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80033fc:	3814      	subs	r0, #20
 80033fe:	f013 ff1c 	bl	801723a <f_write>
 8003402:	4603      	mov	r3, r0
 8003404:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003408:	f102 020f 	add.w	r2, r2, #15
 800340c:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	3b0c      	subs	r3, #12
 8003414:	2232      	movs	r2, #50	; 0x32
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f015 fba3 	bl	8018b64 <memset>
	sprintf(buff, "testMode = %d \n", config.testMode);
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <write_default_config+0x430>)
 8003420:	7adb      	ldrb	r3, [r3, #11]
 8003422:	461a      	mov	r2, r3
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	3b0c      	subs	r3, #12
 800342a:	4979      	ldr	r1, [pc, #484]	; (8003610 <write_default_config+0x448>)
 800342c:	4618      	mov	r0, r3
 800342e:	f015 fd53 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	3b0c      	subs	r3, #12
 8003438:	4618      	mov	r0, r3
 800343a:	f7fc ff2b 	bl	8000294 <strlen>
 800343e:	4602      	mov	r2, r0
 8003440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003444:	3b18      	subs	r3, #24
 8003446:	f107 0110 	add.w	r1, r7, #16
 800344a:	390c      	subs	r1, #12
 800344c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003450:	3814      	subs	r0, #20
 8003452:	f013 fef2 	bl	801723a <f_write>
 8003456:	4603      	mov	r3, r0
 8003458:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800345c:	f102 020f 	add.w	r2, r2, #15
 8003460:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	3b0c      	subs	r3, #12
 8003468:	2232      	movs	r2, #50	; 0x32
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f015 fb79 	bl	8018b64 <memset>
	sprintf(buff, "\n[gesture]\n");
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	3b0c      	subs	r3, #12
 8003478:	4966      	ldr	r1, [pc, #408]	; (8003614 <write_default_config+0x44c>)
 800347a:	4618      	mov	r0, r3
 800347c:	f015 fd2c 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	3b0c      	subs	r3, #12
 8003486:	4618      	mov	r0, r3
 8003488:	f7fc ff04 	bl	8000294 <strlen>
 800348c:	4602      	mov	r2, r0
 800348e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003492:	3b18      	subs	r3, #24
 8003494:	f107 0110 	add.w	r1, r7, #16
 8003498:	390c      	subs	r1, #12
 800349a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800349e:	3814      	subs	r0, #20
 80034a0:	f013 fecb 	bl	801723a <f_write>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80034aa:	f102 020f 	add.w	r2, r2, #15
 80034ae:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	3b0c      	subs	r3, #12
 80034b6:	2232      	movs	r2, #50	; 0x32
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f015 fb52 	bl	8018b64 <memset>
	sprintf(buff, "vertical_swipe_enable = %d \n", config.vertical_swipe_enable);
 80034c0:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <write_default_config+0x430>)
 80034c2:	7b5b      	ldrb	r3, [r3, #13]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f107 0310 	add.w	r3, r7, #16
 80034ca:	3b0c      	subs	r3, #12
 80034cc:	4952      	ldr	r1, [pc, #328]	; (8003618 <write_default_config+0x450>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f015 fd02 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 80034d4:	f107 0310 	add.w	r3, r7, #16
 80034d8:	3b0c      	subs	r3, #12
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc feda 	bl	8000294 <strlen>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034e6:	3b18      	subs	r3, #24
 80034e8:	f107 0110 	add.w	r1, r7, #16
 80034ec:	390c      	subs	r1, #12
 80034ee:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80034f2:	3814      	subs	r0, #20
 80034f4:	f013 fea1 	bl	801723a <f_write>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80034fe:	f102 020f 	add.w	r2, r2, #15
 8003502:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	3b0c      	subs	r3, #12
 800350a:	2232      	movs	r2, #50	; 0x32
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f015 fb28 	bl	8018b64 <memset>
	sprintf(buff, "horizontal_swipe_enable = %d \n", config.horizontal_swipe_enable);
 8003514:	4b38      	ldr	r3, [pc, #224]	; (80035f8 <write_default_config+0x430>)
 8003516:	7b9b      	ldrb	r3, [r3, #14]
 8003518:	461a      	mov	r2, r3
 800351a:	f107 0310 	add.w	r3, r7, #16
 800351e:	3b0c      	subs	r3, #12
 8003520:	493e      	ldr	r1, [pc, #248]	; (800361c <write_default_config+0x454>)
 8003522:	4618      	mov	r0, r3
 8003524:	f015 fcd8 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	3b0c      	subs	r3, #12
 800352e:	4618      	mov	r0, r3
 8003530:	f7fc feb0 	bl	8000294 <strlen>
 8003534:	4602      	mov	r2, r0
 8003536:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800353a:	3b18      	subs	r3, #24
 800353c:	f107 0110 	add.w	r1, r7, #16
 8003540:	390c      	subs	r1, #12
 8003542:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003546:	3814      	subs	r0, #20
 8003548:	f013 fe77 	bl	801723a <f_write>
 800354c:	4603      	mov	r3, r0
 800354e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003552:	f102 020f 	add.w	r2, r2, #15
 8003556:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 8003558:	f107 0310 	add.w	r3, r7, #16
 800355c:	3b0c      	subs	r3, #12
 800355e:	2232      	movs	r2, #50	; 0x32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f015 fafe 	bl	8018b64 <memset>
	sprintf(buff, "\n[system]\n");
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	3b0c      	subs	r3, #12
 800356e:	492c      	ldr	r1, [pc, #176]	; (8003620 <write_default_config+0x458>)
 8003570:	4618      	mov	r0, r3
 8003572:	f015 fcb1 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	3b0c      	subs	r3, #12
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc fe89 	bl	8000294 <strlen>
 8003582:	4602      	mov	r2, r0
 8003584:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003588:	3b18      	subs	r3, #24
 800358a:	f107 0110 	add.w	r1, r7, #16
 800358e:	390c      	subs	r1, #12
 8003590:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003594:	3814      	subs	r0, #20
 8003596:	f013 fe50 	bl	801723a <f_write>
 800359a:	4603      	mov	r3, r0
 800359c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80035a0:	f102 020f 	add.w	r2, r2, #15
 80035a4:	7013      	strb	r3, [r2, #0]
	memset(buff, 0, sizeof(buff));
 80035a6:	f107 0310 	add.w	r3, r7, #16
 80035aa:	3b0c      	subs	r3, #12
 80035ac:	2232      	movs	r2, #50	; 0x32
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f015 fad7 	bl	8018b64 <memset>
	sprintf(buff, "HID_keyboard_enable = %d \n", config.HID_keyboard_enable);
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <write_default_config+0x430>)
 80035b8:	7b1b      	ldrb	r3, [r3, #12]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	3b0c      	subs	r3, #12
 80035c2:	4918      	ldr	r1, [pc, #96]	; (8003624 <write_default_config+0x45c>)
 80035c4:	4618      	mov	r0, r3
 80035c6:	f015 fc87 	bl	8018ed8 <siprintf>
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	3b0c      	subs	r3, #12
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc fe5f 	bl	8000294 <strlen>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035dc:	3b18      	subs	r3, #24
 80035de:	f107 0110 	add.w	r1, r7, #16
 80035e2:	390c      	subs	r1, #12
 80035e4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80035e8:	3814      	subs	r0, #20
 80035ea:	f013 fe26 	bl	801723a <f_write>
 80035ee:	4603      	mov	r3, r0
 80035f0:	e01a      	b.n	8003628 <write_default_config+0x460>
 80035f2:	bf00      	nop
 80035f4:	0801b02c 	.word	0x0801b02c
 80035f8:	20002d38 	.word	0x20002d38
 80035fc:	0801b034 	.word	0x0801b034
 8003600:	0801b040 	.word	0x0801b040
 8003604:	0801b04c 	.word	0x0801b04c
 8003608:	0801b058 	.word	0x0801b058
 800360c:	0801b06c 	.word	0x0801b06c
 8003610:	0801b080 	.word	0x0801b080
 8003614:	0801b090 	.word	0x0801b090
 8003618:	0801b09c 	.word	0x0801b09c
 800361c:	0801b0bc 	.word	0x0801b0bc
 8003620:	0801b0dc 	.word	0x0801b0dc
 8003624:	0801b0e8 	.word	0x0801b0e8
 8003628:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800362c:	f102 020f 	add.w	r2, r2, #15
 8003630:	7013      	strb	r3, [r2, #0]

	fr = f_close(&errFile);
 8003632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003636:	3b14      	subs	r3, #20
 8003638:	4618      	mov	r0, r3
 800363a:	f014 f810 	bl	801765e <f_close>
 800363e:	4603      	mov	r3, r0
 8003640:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003644:	f102 020f 	add.w	r2, r2, #15
 8003648:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK) {
 800364a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800364e:	f103 030f 	add.w	r3, r3, #15
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <write_default_config+0x4a4>
		printf("f_close() failed, res = %d\r\n", fr);
 8003658:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800365c:	f103 030f 	add.w	r3, r3, #15
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <write_default_config+0x4b0>)
 8003666:	f015 fb65 	bl	8018d34 <iprintf>
		return;
 800366a:	bf00      	nop
	}

}
 800366c:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	0801b104 	.word	0x0801b104

0800367c <PwmLed_init>:
		249, 252, 255 };
//------------------------------------------------------------------

extern TIM_HandleTypeDef htim1;

void PwmLed_init(PwmLed_HandleTypeDef *pwmLed, TIM_HandleTypeDef *htim, uint32_t chennel, uint16_t led_count, uint8_t type) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	807b      	strh	r3, [r7, #2]
	pwmLed->htim = htim;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	601a      	str	r2, [r3, #0]
	pwmLed->CHANNEL = chennel;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]
	pwmLed->LED_COUNT = led_count;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	887a      	ldrh	r2, [r7, #2]
 800369a:	825a      	strh	r2, [r3, #18]
	pwmLed->TYPE = type;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036a2:	721a      	strb	r2, [r3, #8]
	if (pwmLed->TYPE == SK6812_RGB) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	7a1b      	ldrb	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d132      	bne.n	8003712 <PwmLed_init+0x96>
		pwmLed->DELAY_LEN = 65;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2241      	movs	r2, #65	; 0x41
 80036b0:	821a      	strh	r2, [r3, #16]
		pwmLed->BITS_PER_PIXEL = 24;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2218      	movs	r2, #24
 80036b6:	815a      	strh	r2, [r3, #10]
		pwmLed->HIGH_LENGHT = (uint16_t)(pwmLed->htim->Init.Period)*0.5;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff41 	bl	8000548 <__aeabi_i2d>
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <PwmLed_init+0x17c>)
 80036cc:	f7fc ffa6 	bl	800061c <__aeabi_dmul>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f7fd fa62 	bl	8000ba0 <__aeabi_d2uiz>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	81da      	strh	r2, [r3, #14]
		pwmLed->LOW_LENGHT = (uint16_t)(pwmLed->htim->Init.Period)*0.25;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc ff2b 	bl	8000548 <__aeabi_i2d>
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <PwmLed_init+0x180>)
 80036f8:	f7fc ff90 	bl	800061c <__aeabi_dmul>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f7fd fa4c 	bl	8000ba0 <__aeabi_d2uiz>
 8003708:	4603      	mov	r3, r0
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	819a      	strh	r2, [r3, #12]
 8003710:	e036      	b.n	8003780 <PwmLed_init+0x104>
	} else if (pwmLed->TYPE == WS2815) {
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	7a1b      	ldrb	r3, [r3, #8]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d132      	bne.n	8003780 <PwmLed_init+0x104>
		pwmLed->DELAY_LEN = 280;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003720:	821a      	strh	r2, [r3, #16]
		pwmLed->BITS_PER_PIXEL = 24;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2218      	movs	r2, #24
 8003726:	815a      	strh	r2, [r3, #10]
		pwmLed->HIGH_LENGHT = (uint16_t)(pwmLed->htim->Init.Period)*0.5;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	b29b      	uxth	r3, r3
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc ff09 	bl	8000548 <__aeabi_i2d>
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <PwmLed_init+0x17c>)
 800373c:	f7fc ff6e 	bl	800061c <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	f7fd fa2a 	bl	8000ba0 <__aeabi_d2uiz>
 800374c:	4603      	mov	r3, r0
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	81da      	strh	r2, [r3, #14]
		pwmLed->LOW_LENGHT = (uint16_t)(pwmLed->htim->Init.Period)*0.25;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	b29b      	uxth	r3, r3
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fef3 	bl	8000548 <__aeabi_i2d>
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	4b25      	ldr	r3, [pc, #148]	; (80037fc <PwmLed_init+0x180>)
 8003768:	f7fc ff58 	bl	800061c <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd fa14 	bl	8000ba0 <__aeabi_d2uiz>
 8003778:	4603      	mov	r3, r0
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	819a      	strh	r2, [r3, #12]

	}

	pwmLed->ARRAY_LEN = pwmLed->DELAY_LEN + pwmLed->LED_COUNT * 24+50;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8a1a      	ldrh	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8a5b      	ldrh	r3, [r3, #18]
 8003788:	4619      	mov	r1, r3
 800378a:	0049      	lsls	r1, r1, #1
 800378c:	440b      	add	r3, r1
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	b29b      	uxth	r3, r3
 8003792:	4413      	add	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	3332      	adds	r3, #50	; 0x32
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	829a      	strh	r2, [r3, #20]
	pwmLed->BUF_DMA = (uint16_t*) malloc(pwmLed->ARRAY_LEN * sizeof(uint16_t));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8a9b      	ldrh	r3, [r3, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f015 f9bf 	bl	8018b28 <malloc>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	619a      	str	r2, [r3, #24]
	memset(pwmLed->BUF_DMA, 0, pwmLed->ARRAY_LEN * sizeof(uint16_t));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6998      	ldr	r0, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8a9b      	ldrh	r3, [r3, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	461a      	mov	r2, r3
 80037be:	2100      	movs	r1, #0
 80037c0:	f015 f9d0 	bl	8018b64 <memset>

	for (int i = pwmLed->DELAY_LEN; i < pwmLed->ARRAY_LEN; i++) {
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8a1b      	ldrh	r3, [r3, #16]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e00a      	b.n	80037e2 <PwmLed_init+0x166>
		pwmLed->BUF_DMA[i] = pwmLed->LOW_LENGHT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	8992      	ldrh	r2, [r2, #12]
 80037da:	801a      	strh	r2, [r3, #0]
	for (int i = pwmLed->DELAY_LEN; i < pwmLed->ARRAY_LEN; i++) {
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3301      	adds	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8a9b      	ldrh	r3, [r3, #20]
 80037e6:	461a      	mov	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	4293      	cmp	r3, r2
 80037ec:	dbee      	blt.n	80037cc <PwmLed_init+0x150>

	}
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	3fe00000 	.word	0x3fe00000
 80037fc:	3fd00000 	.word	0x3fd00000

08003800 <PwmLed_pixel_rgb_to_buf_dma>:

void PwmLed_pixel_rgb_to_buf_dma(PwmLed_HandleTypeDef *pwmLed, uint8_t Rpixel, uint8_t Gpixel, uint8_t Bpixel, uint16_t posX) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	70fb      	strb	r3, [r7, #3]
 8003812:	460b      	mov	r3, r1
 8003814:	70bb      	strb	r3, [r7, #2]
 8003816:	4613      	mov	r3, r2
 8003818:	707b      	strb	r3, [r7, #1]
	volatile uint16_t i;
	volatile uint16_t pot;

	//printf("Set pixel %d: ", posX);

	for (i = 0; i < 8; i++) {
 800381a:	2300      	movs	r3, #0
 800381c:	81fb      	strh	r3, [r7, #14]
 800381e:	e0c0      	b.n	80039a2 <PwmLed_pixel_rgb_to_buf_dma+0x1a2>
		if (BitIsSet(Rpixel,(7-i)) == 1) {
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	89fb      	ldrh	r3, [r7, #14]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f1c3 0307 	rsb	r3, r3, #7
 800382a:	fa42 f303 	asr.w	r3, r2, r3
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01a      	beq.n	800386c <PwmLed_pixel_rgb_to_buf_dma+0x6c>
			pot = pwmLed->DELAY_LEN + posX * pwmLed->BITS_PER_PIXEL + i + 8;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8a1a      	ldrh	r2, [r3, #16]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	895b      	ldrh	r3, [r3, #10]
 800383e:	8b39      	ldrh	r1, [r7, #24]
 8003840:	fb11 f303 	smulbb	r3, r1, r3
 8003844:	b29b      	uxth	r3, r3
 8003846:	4413      	add	r3, r2
 8003848:	b29a      	uxth	r2, r3
 800384a:	89fb      	ldrh	r3, [r7, #14]
 800384c:	b29b      	uxth	r3, r3
 800384e:	4413      	add	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	3308      	adds	r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	81bb      	strh	r3, [r7, #12]
			pwmLed->BUF_DMA[pot] = pwmLed->HIGH_LENGHT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	89bb      	ldrh	r3, [r7, #12]
 800385e:	b29b      	uxth	r3, r3
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	89d2      	ldrh	r2, [r2, #14]
 8003868:	801a      	strh	r2, [r3, #0]
 800386a:	e019      	b.n	80038a0 <PwmLed_pixel_rgb_to_buf_dma+0xa0>
			//printf("%d ", pwmLed->BUF_DMA[pot]);
		} else {
			pot = pwmLed->DELAY_LEN + posX * pwmLed->BITS_PER_PIXEL + i + 8;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8a1a      	ldrh	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	895b      	ldrh	r3, [r3, #10]
 8003874:	8b39      	ldrh	r1, [r7, #24]
 8003876:	fb11 f303 	smulbb	r3, r1, r3
 800387a:	b29b      	uxth	r3, r3
 800387c:	4413      	add	r3, r2
 800387e:	b29a      	uxth	r2, r3
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	b29b      	uxth	r3, r3
 8003884:	4413      	add	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	3308      	adds	r3, #8
 800388a:	b29b      	uxth	r3, r3
 800388c:	81bb      	strh	r3, [r7, #12]
			pwmLed->BUF_DMA[pot] = pwmLed->LOW_LENGHT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	b29b      	uxth	r3, r3
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	8992      	ldrh	r2, [r2, #12]
 800389e:	801a      	strh	r2, [r3, #0]
			//printf("%d ", pwmLed->BUF_DMA[pot]);
		}
		if (BitIsSet(Gpixel,(7-i)) == 1) {
 80038a0:	78ba      	ldrb	r2, [r7, #2]
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	fa42 f303 	asr.w	r3, r2, r3
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <PwmLed_pixel_rgb_to_buf_dma+0xe8>
			pot = pwmLed->DELAY_LEN + posX * pwmLed->BITS_PER_PIXEL + i + 0;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8a1a      	ldrh	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	895b      	ldrh	r3, [r3, #10]
 80038be:	8b39      	ldrh	r1, [r7, #24]
 80038c0:	fb11 f303 	smulbb	r3, r1, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	81bb      	strh	r3, [r7, #12]
			pwmLed->BUF_DMA[pot] = pwmLed->HIGH_LENGHT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	89bb      	ldrh	r3, [r7, #12]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	89d2      	ldrh	r2, [r2, #14]
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	e017      	b.n	8003918 <PwmLed_pixel_rgb_to_buf_dma+0x118>
			//printf("%d ", pwmLed->BUF_DMA[pot]);
		} else {
			pot = pwmLed->DELAY_LEN + posX * pwmLed->BITS_PER_PIXEL + i + 0;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8a1a      	ldrh	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	895b      	ldrh	r3, [r3, #10]
 80038f0:	8b39      	ldrh	r1, [r7, #24]
 80038f2:	fb11 f303 	smulbb	r3, r1, r3
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4413      	add	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	81bb      	strh	r3, [r7, #12]
			pwmLed->BUF_DMA[pot] = pwmLed->LOW_LENGHT;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	89bb      	ldrh	r3, [r7, #12]
 800390c:	b29b      	uxth	r3, r3
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	8992      	ldrh	r2, [r2, #12]
 8003916:	801a      	strh	r2, [r3, #0]
			//printf("%d ", pwmLed->BUF_DMA[pot]);
		}
		if (BitIsSet(Bpixel,(7-i)) == 1) {
 8003918:	787a      	ldrb	r2, [r7, #1]
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	fa42 f303 	asr.w	r3, r2, r3
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01a      	beq.n	8003964 <PwmLed_pixel_rgb_to_buf_dma+0x164>
			pot = pwmLed->DELAY_LEN + posX * pwmLed->BITS_PER_PIXEL + i + 16;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8a1a      	ldrh	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	895b      	ldrh	r3, [r3, #10]
 8003936:	8b39      	ldrh	r1, [r7, #24]
 8003938:	fb11 f303 	smulbb	r3, r1, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	4413      	add	r3, r2
 8003940:	b29a      	uxth	r2, r3
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4413      	add	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	3310      	adds	r3, #16
 800394c:	b29b      	uxth	r3, r3
 800394e:	81bb      	strh	r3, [r7, #12]
			pwmLed->BUF_DMA[pot] = pwmLed->HIGH_LENGHT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	89bb      	ldrh	r3, [r7, #12]
 8003956:	b29b      	uxth	r3, r3
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	89d2      	ldrh	r2, [r2, #14]
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	e019      	b.n	8003998 <PwmLed_pixel_rgb_to_buf_dma+0x198>
			//printf("%d ", pwmLed->BUF_DMA[pot]);
		} else {
			pot = pwmLed->DELAY_LEN + posX * pwmLed->BITS_PER_PIXEL + i + 16;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8a1a      	ldrh	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	895b      	ldrh	r3, [r3, #10]
 800396c:	8b39      	ldrh	r1, [r7, #24]
 800396e:	fb11 f303 	smulbb	r3, r1, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	4413      	add	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	89fb      	ldrh	r3, [r7, #14]
 800397a:	b29b      	uxth	r3, r3
 800397c:	4413      	add	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	3310      	adds	r3, #16
 8003982:	b29b      	uxth	r3, r3
 8003984:	81bb      	strh	r3, [r7, #12]
			pwmLed->BUF_DMA[pot] = pwmLed->LOW_LENGHT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	89bb      	ldrh	r3, [r7, #12]
 800398c:	b29b      	uxth	r3, r3
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	8992      	ldrh	r2, [r2, #12]
 8003996:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003998:	89fb      	ldrh	r3, [r7, #14]
 800399a:	b29b      	uxth	r3, r3
 800399c:	3301      	adds	r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	81fb      	strh	r3, [r7, #14]
 80039a2:	89fb      	ldrh	r3, [r7, #14]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	f67f af3a 	bls.w	8003820 <PwmLed_pixel_rgb_to_buf_dma+0x20>
			//printf("%d ", pwmLed->BUF_DMA[pot]);
		}
	}

	if(pwmLed->BUF_DMA==0){
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <PwmLed_pixel_rgb_to_buf_dma+0x1ba>
				  HAL_Delay(10);
 80039b4:	200a      	movs	r0, #10
 80039b6:	f000 fa07 	bl	8003dc8 <HAL_Delay>
			  }
	//printf("\n");
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <PwmLed_setPixel_gammaCorrection>:

void PwmLed_setPixel_gammaCorrection(PwmLed_HandleTypeDef *pwmLed, uint8_t Rpixel, uint8_t Gpixel, uint8_t Bpixel, uint16_t pos) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	70fb      	strb	r3, [r7, #3]
 80039d6:	460b      	mov	r3, r1
 80039d8:	70bb      	strb	r3, [r7, #2]
 80039da:	4613      	mov	r3, r2
 80039dc:	707b      	strb	r3, [r7, #1]
	PwmLed_pixel_rgb_to_buf_dma(pwmLed, gamma8[Rpixel], gamma8[Gpixel], gamma8[Bpixel], pos);
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <PwmLed_setPixel_gammaCorrection+0x40>)
 80039e2:	5cd1      	ldrb	r1, [r2, r3]
 80039e4:	78bb      	ldrb	r3, [r7, #2]
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <PwmLed_setPixel_gammaCorrection+0x40>)
 80039e8:	5cd2      	ldrb	r2, [r2, r3]
 80039ea:	787b      	ldrb	r3, [r7, #1]
 80039ec:	4805      	ldr	r0, [pc, #20]	; (8003a04 <PwmLed_setPixel_gammaCorrection+0x40>)
 80039ee:	5cc0      	ldrb	r0, [r0, r3]
 80039f0:	8a3b      	ldrh	r3, [r7, #16]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4603      	mov	r3, r0
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ff02 	bl	8003800 <PwmLed_pixel_rgb_to_buf_dma>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0801b68c 	.word	0x0801b68c

08003a08 <PwmLed_light>:

void PwmLed_light(PwmLed_HandleTypeDef *pwmLed) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

	if (HAL_TIM_PWM_Start_DMA(pwmLed->htim, pwmLed->CHANNEL, (uint32_t*) pwmLed->BUF_DMA, pwmLed->ARRAY_LEN) != HAL_OK) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8a9b      	ldrh	r3, [r3, #20]
 8003a20:	f006 fbbe 	bl	800a1a0 <HAL_TIM_PWM_Start_DMA>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <PwmLed_light+0x28>
		//if(HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t*)pwmLed->BUF_DMA,pwmLed->ARRAY_LEN+10)!=HAL_OK){
		printf("HAL_TIM_PWM_Start_DMA FAILED \n");
 8003a2a:	4803      	ldr	r0, [pc, #12]	; (8003a38 <PwmLed_light+0x30>)
 8003a2c:	f015 fa08 	bl	8018e40 <puts>
	}

}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	0801b150 	.word	0x0801b150

08003a3c <HsvToRgb>:
#include "hsv.h"

 RgbColor HsvToRgb( HsvColor hsv) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	 RgbColor rgb;
	unsigned char region, remainder, p, q, t;

	if (hsv.s == 0) {
 8003a44:	797b      	ldrb	r3, [r7, #5]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d110      	bne.n	8003a6c <HsvToRgb+0x30>
		rgb.r = hsv.v;
 8003a4a:	79bb      	ldrb	r3, [r7, #6]
 8003a4c:	733b      	strb	r3, [r7, #12]
		rgb.g = hsv.v;
 8003a4e:	79bb      	ldrb	r3, [r7, #6]
 8003a50:	737b      	strb	r3, [r7, #13]
		rgb.b = hsv.v;
 8003a52:	79bb      	ldrb	r3, [r7, #6]
 8003a54:	73bb      	strb	r3, [r7, #14]
		return rgb;
 8003a56:	f107 0310 	add.w	r3, r7, #16
 8003a5a:	f107 020c 	add.w	r2, r7, #12
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	4611      	mov	r1, r2
 8003a62:	8019      	strh	r1, [r3, #0]
 8003a64:	3302      	adds	r3, #2
 8003a66:	0c12      	lsrs	r2, r2, #16
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e07f      	b.n	8003b6c <HsvToRgb+0x130>
	}

	region = hsv.h / 43;
 8003a6c:	793b      	ldrb	r3, [r7, #4]
 8003a6e:	4a47      	ldr	r2, [pc, #284]	; (8003b8c <HsvToRgb+0x150>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	75fb      	strb	r3, [r7, #23]
	remainder = (hsv.h - (region * 43)) * 6;
 8003a78:	793b      	ldrb	r3, [r7, #4]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	f06f 022a 	mvn.w	r2, #42	; 0x2a
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	440b      	add	r3, r1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	0052      	lsls	r2, r2, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	75bb      	strb	r3, [r7, #22]

	p = (hsv.v * (255 - hsv.s)) >> 8;
 8003a94:	79bb      	ldrb	r3, [r7, #6]
 8003a96:	461a      	mov	r2, r3
 8003a98:	797b      	ldrb	r3, [r7, #5]
 8003a9a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	121b      	asrs	r3, r3, #8
 8003aa4:	757b      	strb	r3, [r7, #21]
	q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;
 8003aa6:	79bb      	ldrb	r3, [r7, #6]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	797b      	ldrb	r3, [r7, #5]
 8003aac:	4619      	mov	r1, r3
 8003aae:	7dbb      	ldrb	r3, [r7, #22]
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	121b      	asrs	r3, r3, #8
 8003ab6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	121b      	asrs	r3, r3, #8
 8003ac0:	753b      	strb	r3, [r7, #20]
	t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;
 8003ac2:	79bb      	ldrb	r3, [r7, #6]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	797b      	ldrb	r3, [r7, #5]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	7dbb      	ldrb	r3, [r7, #22]
 8003acc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	121b      	asrs	r3, r3, #8
 8003ad6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	121b      	asrs	r3, r3, #8
 8003ae0:	74fb      	strb	r3, [r7, #19]

	switch (region) {
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d830      	bhi.n	8003b4a <HsvToRgb+0x10e>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HsvToRgb+0xb4>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b05 	.word	0x08003b05
 8003af4:	08003b13 	.word	0x08003b13
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b3d 	.word	0x08003b3d
	case 0:
		rgb.r = hsv.v;
 8003b04:	79bb      	ldrb	r3, [r7, #6]
 8003b06:	733b      	strb	r3, [r7, #12]
		rgb.g = t;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	737b      	strb	r3, [r7, #13]
		rgb.b = p;
 8003b0c:	7d7b      	ldrb	r3, [r7, #21]
 8003b0e:	73bb      	strb	r3, [r7, #14]
		break;
 8003b10:	e022      	b.n	8003b58 <HsvToRgb+0x11c>
	case 1:
		rgb.r = q;
 8003b12:	7d3b      	ldrb	r3, [r7, #20]
 8003b14:	733b      	strb	r3, [r7, #12]
		rgb.g = hsv.v;
 8003b16:	79bb      	ldrb	r3, [r7, #6]
 8003b18:	737b      	strb	r3, [r7, #13]
		rgb.b = p;
 8003b1a:	7d7b      	ldrb	r3, [r7, #21]
 8003b1c:	73bb      	strb	r3, [r7, #14]
		break;
 8003b1e:	e01b      	b.n	8003b58 <HsvToRgb+0x11c>
	case 2:
		rgb.r = p;
 8003b20:	7d7b      	ldrb	r3, [r7, #21]
 8003b22:	733b      	strb	r3, [r7, #12]
		rgb.g = hsv.v;
 8003b24:	79bb      	ldrb	r3, [r7, #6]
 8003b26:	737b      	strb	r3, [r7, #13]
		rgb.b = t;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	73bb      	strb	r3, [r7, #14]
		break;
 8003b2c:	e014      	b.n	8003b58 <HsvToRgb+0x11c>
	case 3:
		rgb.r = p;
 8003b2e:	7d7b      	ldrb	r3, [r7, #21]
 8003b30:	733b      	strb	r3, [r7, #12]
		rgb.g = q;
 8003b32:	7d3b      	ldrb	r3, [r7, #20]
 8003b34:	737b      	strb	r3, [r7, #13]
		rgb.b = hsv.v;
 8003b36:	79bb      	ldrb	r3, [r7, #6]
 8003b38:	73bb      	strb	r3, [r7, #14]
		break;
 8003b3a:	e00d      	b.n	8003b58 <HsvToRgb+0x11c>
	case 4:
		rgb.r = t;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	733b      	strb	r3, [r7, #12]
		rgb.g = p;
 8003b40:	7d7b      	ldrb	r3, [r7, #21]
 8003b42:	737b      	strb	r3, [r7, #13]
		rgb.b = hsv.v;
 8003b44:	79bb      	ldrb	r3, [r7, #6]
 8003b46:	73bb      	strb	r3, [r7, #14]
		break;
 8003b48:	e006      	b.n	8003b58 <HsvToRgb+0x11c>
	default:
		rgb.r = hsv.v;
 8003b4a:	79bb      	ldrb	r3, [r7, #6]
 8003b4c:	733b      	strb	r3, [r7, #12]
		rgb.g = p;
 8003b4e:	7d7b      	ldrb	r3, [r7, #21]
 8003b50:	737b      	strb	r3, [r7, #13]
		rgb.b = q;
 8003b52:	7d3b      	ldrb	r3, [r7, #20]
 8003b54:	73bb      	strb	r3, [r7, #14]
		break;
 8003b56:	bf00      	nop
	}

	return rgb;
 8003b58:	f107 0310 	add.w	r3, r7, #16
 8003b5c:	f107 020c 	add.w	r2, r7, #12
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4611      	mov	r1, r2
 8003b64:	8019      	strh	r1, [r3, #0]
 8003b66:	3302      	adds	r3, #2
 8003b68:	0c12      	lsrs	r2, r2, #16
 8003b6a:	701a      	strb	r2, [r3, #0]
}
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	7c3a      	ldrb	r2, [r7, #16]
 8003b70:	f362 0307 	bfi	r3, r2, #0, #8
 8003b74:	7c7a      	ldrb	r2, [r7, #17]
 8003b76:	f362 230f 	bfi	r3, r2, #8, #8
 8003b7a:	7cba      	ldrb	r2, [r7, #18]
 8003b7c:	f362 4317 	bfi	r3, r2, #16, #8
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	2fa0be83 	.word	0x2fa0be83

08003b90 <RgbToHsv>:

 HsvColor RgbToHsv( RgbColor rgb) {
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	 HsvColor hsv;
	unsigned char rgbMin, rgbMax;

	rgbMin =
			rgb.r < rgb.g ?
 8003b98:	793a      	ldrb	r2, [r7, #4]
 8003b9a:	797b      	ldrb	r3, [r7, #5]
	rgbMin =
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d206      	bcs.n	8003bae <RgbToHsv+0x1e>
					(rgb.r < rgb.b ? rgb.r : rgb.b) :
 8003ba0:	79ba      	ldrb	r2, [r7, #6]
 8003ba2:	793b      	ldrb	r3, [r7, #4]
	rgbMin =
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf28      	it	cs
 8003ba8:	4613      	movcs	r3, r2
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	e005      	b.n	8003bba <RgbToHsv+0x2a>
					(rgb.g < rgb.b ? rgb.g : rgb.b);
 8003bae:	79ba      	ldrb	r2, [r7, #6]
 8003bb0:	797b      	ldrb	r3, [r7, #5]
	rgbMin =
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	bf28      	it	cs
 8003bb6:	4613      	movcs	r3, r2
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	75fb      	strb	r3, [r7, #23]
	rgbMax =
			rgb.r > rgb.g ?
 8003bbc:	793a      	ldrb	r2, [r7, #4]
 8003bbe:	797b      	ldrb	r3, [r7, #5]
	rgbMax =
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d906      	bls.n	8003bd2 <RgbToHsv+0x42>
					(rgb.r > rgb.b ? rgb.r : rgb.b) :
 8003bc4:	79ba      	ldrb	r2, [r7, #6]
 8003bc6:	793b      	ldrb	r3, [r7, #4]
	rgbMax =
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf38      	it	cc
 8003bcc:	4613      	movcc	r3, r2
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e005      	b.n	8003bde <RgbToHsv+0x4e>
					(rgb.g > rgb.b ? rgb.g : rgb.b);
 8003bd2:	79ba      	ldrb	r2, [r7, #6]
 8003bd4:	797b      	ldrb	r3, [r7, #5]
	rgbMax =
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	bf38      	it	cc
 8003bda:	4613      	movcc	r3, r2
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	75bb      	strb	r3, [r7, #22]

	hsv.v = rgbMax;
 8003be0:	7dbb      	ldrb	r3, [r7, #22]
 8003be2:	73bb      	strb	r3, [r7, #14]
	if (hsv.v == 0) {
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <RgbToHsv+0x78>
		hsv.h = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	733b      	strb	r3, [r7, #12]
		hsv.s = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	737b      	strb	r3, [r7, #13]
		return hsv;
 8003bf2:	f107 0310 	add.w	r3, r7, #16
 8003bf6:	f107 020c 	add.w	r2, r7, #12
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	8019      	strh	r1, [r3, #0]
 8003c00:	3302      	adds	r3, #2
 8003c02:	0c12      	lsrs	r2, r2, #16
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e05c      	b.n	8003cc2 <RgbToHsv+0x132>
	}

	hsv.s = 255 * (rgbMax - rgbMin) / hsv.v;
 8003c08:	7dba      	ldrb	r2, [r7, #22]
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	1ad2      	subs	r2, r2, r3
 8003c0e:	4613      	mov	r3, r2
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	7bba      	ldrb	r2, [r7, #14]
 8003c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	737b      	strb	r3, [r7, #13]
	if (hsv.s == 0) {
 8003c1e:	7b7b      	ldrb	r3, [r7, #13]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10c      	bne.n	8003c3e <RgbToHsv+0xae>
		hsv.h = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	733b      	strb	r3, [r7, #12]
		return hsv;
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	f107 020c 	add.w	r2, r7, #12
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	4611      	mov	r1, r2
 8003c34:	8019      	strh	r1, [r3, #0]
 8003c36:	3302      	adds	r3, #2
 8003c38:	0c12      	lsrs	r2, r2, #16
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e041      	b.n	8003cc2 <RgbToHsv+0x132>
	}

	if (rgbMax == rgb.r)
 8003c3e:	793b      	ldrb	r3, [r7, #4]
 8003c40:	7dba      	ldrb	r2, [r7, #22]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d10e      	bne.n	8003c64 <RgbToHsv+0xd4>
		hsv.h = 0 + 43 * (rgb.g - rgb.b) / (rgbMax - rgbMin);
 8003c46:	797b      	ldrb	r3, [r7, #5]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79bb      	ldrb	r3, [r7, #6]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	222b      	movs	r2, #43	; 0x2b
 8003c50:	fb03 f202 	mul.w	r2, r3, r2
 8003c54:	7db9      	ldrb	r1, [r7, #22]
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	1acb      	subs	r3, r1, r3
 8003c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	733b      	strb	r3, [r7, #12]
 8003c62:	e024      	b.n	8003cae <RgbToHsv+0x11e>
	else if (rgbMax == rgb.g)
 8003c64:	797b      	ldrb	r3, [r7, #5]
 8003c66:	7dba      	ldrb	r2, [r7, #22]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d110      	bne.n	8003c8e <RgbToHsv+0xfe>
		hsv.h = 85 + 43 * (rgb.b - rgb.r) / (rgbMax - rgbMin);
 8003c6c:	79bb      	ldrb	r3, [r7, #6]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	793b      	ldrb	r3, [r7, #4]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	222b      	movs	r2, #43	; 0x2b
 8003c76:	fb03 f202 	mul.w	r2, r3, r2
 8003c7a:	7db9      	ldrb	r1, [r7, #22]
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	1acb      	subs	r3, r1, r3
 8003c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3355      	adds	r3, #85	; 0x55
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	733b      	strb	r3, [r7, #12]
 8003c8c:	e00f      	b.n	8003cae <RgbToHsv+0x11e>
	else
		hsv.h = 171 + 43 * (rgb.r - rgb.g) / (rgbMax - rgbMin);
 8003c8e:	793b      	ldrb	r3, [r7, #4]
 8003c90:	461a      	mov	r2, r3
 8003c92:	797b      	ldrb	r3, [r7, #5]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	222b      	movs	r2, #43	; 0x2b
 8003c98:	fb03 f202 	mul.w	r2, r3, r2
 8003c9c:	7db9      	ldrb	r1, [r7, #22]
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	1acb      	subs	r3, r1, r3
 8003ca2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3b55      	subs	r3, #85	; 0x55
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	733b      	strb	r3, [r7, #12]

	return hsv;
 8003cae:	f107 0310 	add.w	r3, r7, #16
 8003cb2:	f107 020c 	add.w	r2, r7, #12
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	8019      	strh	r1, [r3, #0]
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	0c12      	lsrs	r2, r2, #16
 8003cc0:	701a      	strb	r2, [r3, #0]
}
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	7c3a      	ldrb	r2, [r7, #16]
 8003cc6:	f362 0307 	bfi	r3, r2, #0, #8
 8003cca:	7c7a      	ldrb	r2, [r7, #17]
 8003ccc:	f362 230f 	bfi	r3, r2, #8, #8
 8003cd0:	7cba      	ldrb	r2, [r7, #18]
 8003cd2:	f362 4317 	bfi	r3, r2, #16, #8
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <HAL_Init+0x40>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <HAL_Init+0x40>)
 8003cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_Init+0x40>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_Init+0x40>)
 8003cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_Init+0x40>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <HAL_Init+0x40>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d0c:	2003      	movs	r0, #3
 8003d0e:	f000 f94f 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d12:	200f      	movs	r0, #15
 8003d14:	f000 f808 	bl	8003d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d18:	f7fe fd7c 	bl	8002814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00

08003d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_InitTick+0x54>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_InitTick+0x58>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f967 	bl	800401a <HAL_SYSTICK_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00e      	b.n	8003d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b0f      	cmp	r3, #15
 8003d5a:	d80a      	bhi.n	8003d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f000 f92f 	bl	8003fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d68:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <HAL_InitTick+0x5c>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e000      	b.n	8003d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	20000008 	.word	0x20000008
 8003d84:	20000004 	.word	0x20000004

08003d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_IncTick+0x20>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_IncTick+0x24>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <HAL_IncTick+0x24>)
 8003d9a:	6013      	str	r3, [r2, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000008 	.word	0x20000008
 8003dac:	20002d48 	.word	0x20002d48

08003db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return uwTick;
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_GetTick+0x14>)
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20002d48 	.word	0x20002d48

08003dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff ffee 	bl	8003db0 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d005      	beq.n	8003dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_Delay+0x44>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dee:	bf00      	nop
 8003df0:	f7ff ffde 	bl	8003db0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d8f7      	bhi.n	8003df0 <HAL_Delay+0x28>
  {
  }
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000008 	.word	0x20000008

08003e10 <__NVIC_SetPriorityGrouping>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e42:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	60d3      	str	r3, [r2, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <__NVIC_GetPriorityGrouping>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <__NVIC_GetPriorityGrouping+0x18>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	f003 0307 	and.w	r3, r3, #7
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_EnableIRQ>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db0b      	blt.n	8003e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	4907      	ldr	r1, [pc, #28]	; (8003eac <__NVIC_EnableIRQ+0x38>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2001      	movs	r0, #1
 8003e96:	fa00 f202 	lsl.w	r2, r0, r2
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPriority>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	db0a      	blt.n	8003eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	490c      	ldr	r1, [pc, #48]	; (8003efc <__NVIC_SetPriority+0x4c>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ed8:	e00a      	b.n	8003ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <__NVIC_SetPriority+0x50>)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	440b      	add	r3, r1
 8003eee:	761a      	strb	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e100 	.word	0xe000e100
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <NVIC_EncodePriority>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f1c3 0307 	rsb	r3, r3, #7
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	bf28      	it	cs
 8003f22:	2304      	movcs	r3, #4
 8003f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d902      	bls.n	8003f34 <NVIC_EncodePriority+0x30>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3b03      	subs	r3, #3
 8003f32:	e000      	b.n	8003f36 <NVIC_EncodePriority+0x32>
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	401a      	ands	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43d9      	mvns	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	4313      	orrs	r3, r2
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	; 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <SysTick_Config>:
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f7c:	d301      	bcc.n	8003f82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00f      	b.n	8003fa2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <SysTick_Config+0x40>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f7ff ff8e 	bl	8003eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <SysTick_Config+0x40>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <SysTick_Config+0x40>)
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000e010 	.word	0xe000e010

08003fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff29 	bl	8003e10 <__NVIC_SetPriorityGrouping>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd8:	f7ff ff3e 	bl	8003e58 <__NVIC_GetPriorityGrouping>
 8003fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff ff8e 	bl	8003f04 <NVIC_EncodePriority>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff5d 	bl	8003eb0 <__NVIC_SetPriority>
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff31 	bl	8003e74 <__NVIC_EnableIRQ>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffa2 	bl	8003f6c <SysTick_Config>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7ff feb6 	bl	8003db0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e099      	b.n	8004184 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004070:	e00f      	b.n	8004092 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004072:	f7ff fe9d 	bl	8003db0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b05      	cmp	r3, #5
 800407e:	d908      	bls.n	8004092 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e078      	b.n	8004184 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e8      	bne.n	8004072 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_DMA_Init+0x158>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	4313      	orrs	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b04      	cmp	r3, #4
 8004124:	d117      	bne.n	8004156 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fa9f 	bl	800467c <DMA_CheckFifoParam>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2240      	movs	r2, #64	; 0x40
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004152:	2301      	movs	r3, #1
 8004154:	e016      	b.n	8004184 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa56 	bl	8004610 <DMA_CalcBaseAndBitshift>
 8004164:	4603      	mov	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	223f      	movs	r2, #63	; 0x3f
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	f010803f 	.word	0xf010803f

08004190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_DMA_Start_IT+0x26>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e040      	b.n	8004238 <HAL_DMA_Start_IT+0xa8>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d12f      	bne.n	800422a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f9e8 	bl	80045b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	223f      	movs	r2, #63	; 0x3f
 80041ea:	409a      	lsls	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0216 	orr.w	r2, r2, #22
 80041fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e005      	b.n	8004236 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d004      	beq.n	800425e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e00c      	b.n	8004278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2205      	movs	r2, #5
 8004262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004290:	4b8e      	ldr	r3, [pc, #568]	; (80044cc <HAL_DMA_IRQHandler+0x248>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a8e      	ldr	r2, [pc, #568]	; (80044d0 <HAL_DMA_IRQHandler+0x24c>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ae:	2208      	movs	r2, #8
 80042b0:	409a      	lsls	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01a      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d013      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2208      	movs	r2, #8
 80042de:	409a      	lsls	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2201      	movs	r2, #1
 80042f6:	409a      	lsls	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	2201      	movs	r2, #1
 8004314:	409a      	lsls	r2, r3
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0202 	orr.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2204      	movs	r2, #4
 800432c:	409a      	lsls	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d012      	beq.n	800435c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2204      	movs	r2, #4
 800434a:	409a      	lsls	r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	f043 0204 	orr.w	r2, r3, #4
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2210      	movs	r2, #16
 8004362:	409a      	lsls	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d043      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d03c      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	2210      	movs	r2, #16
 8004380:	409a      	lsls	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d024      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
 80043b2:	e01f      	b.n	80043f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01b      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
 80043c4:	e016      	b.n	80043f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d107      	bne.n	80043e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0208 	bic.w	r2, r2, #8
 80043e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2220      	movs	r2, #32
 80043fa:	409a      	lsls	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 808f 	beq.w	8004524 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8087 	beq.w	8004524 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	2220      	movs	r2, #32
 800441c:	409a      	lsls	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b05      	cmp	r3, #5
 800442c:	d136      	bne.n	800449c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0216 	bic.w	r2, r2, #22
 800443c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <HAL_DMA_IRQHandler+0x1da>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0208 	bic.w	r2, r2, #8
 800446c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	223f      	movs	r2, #63	; 0x3f
 8004474:	409a      	lsls	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448e:	2b00      	cmp	r3, #0
 8004490:	d07e      	beq.n	8004590 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
        }
        return;
 800449a:	e079      	b.n	8004590 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01d      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10d      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d031      	beq.n	8004524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	e02c      	b.n	8004524 <HAL_DMA_IRQHandler+0x2a0>
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000
 80044d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d023      	beq.n	8004524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
 80044e4:	e01e      	b.n	8004524 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0210 	bic.w	r2, r2, #16
 8004502:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	2b00      	cmp	r3, #0
 800452a:	d032      	beq.n	8004592 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d022      	beq.n	800457e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2205      	movs	r2, #5
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3301      	adds	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	d307      	bcc.n	800456c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f2      	bne.n	8004550 <HAL_DMA_IRQHandler+0x2cc>
 800456a:	e000      	b.n	800456e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800456c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
 800458e:	e000      	b.n	8004592 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004590:	bf00      	nop
    }
  }
}
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a6:	b2db      	uxtb	r3, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d108      	bne.n	80045f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045f2:	e007      	b.n	8004604 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	3b10      	subs	r3, #16
 8004620:	4a14      	ldr	r2, [pc, #80]	; (8004674 <DMA_CalcBaseAndBitshift+0x64>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800462a:	4a13      	ldr	r2, [pc, #76]	; (8004678 <DMA_CalcBaseAndBitshift+0x68>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d909      	bls.n	8004652 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	659a      	str	r2, [r3, #88]	; 0x58
 8004650:	e007      	b.n	8004662 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	aaaaaaab 	.word	0xaaaaaaab
 8004678:	0801b78c 	.word	0x0801b78c

0800467c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d11f      	bne.n	80046d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d856      	bhi.n	800474a <DMA_CheckFifoParam+0xce>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <DMA_CheckFifoParam+0x28>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046c7 	.word	0x080046c7
 80046ac:	080046b5 	.word	0x080046b5
 80046b0:	0800474b 	.word	0x0800474b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d046      	beq.n	800474e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c4:	e043      	b.n	800474e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ce:	d140      	bne.n	8004752 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d4:	e03d      	b.n	8004752 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046de:	d121      	bne.n	8004724 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d837      	bhi.n	8004756 <DMA_CheckFifoParam+0xda>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <DMA_CheckFifoParam+0x70>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004703 	.word	0x08004703
 80046f4:	080046fd 	.word	0x080046fd
 80046f8:	08004715 	.word	0x08004715
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004700:	e030      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d025      	beq.n	800475a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004712:	e022      	b.n	800475a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800471c:	d11f      	bne.n	800475e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004722:	e01c      	b.n	800475e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d903      	bls.n	8004732 <DMA_CheckFifoParam+0xb6>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d003      	beq.n	8004738 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004730:	e018      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
      break;
 8004736:	e015      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      break;
 8004748:	e00b      	b.n	8004762 <DMA_CheckFifoParam+0xe6>
      break;
 800474a:	bf00      	nop
 800474c:	e00a      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e008      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      break;
 8004752:	bf00      	nop
 8004754:	e006      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
 8004758:	e004      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      break;   
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <DMA_CheckFifoParam+0xe8>
      break;
 8004762:	bf00      	nop
    }
  } 
  
  return status; 
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	e159      	b.n	8004a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004790:	2201      	movs	r2, #1
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	f040 8148 	bne.w	8004a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d005      	beq.n	80047c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d130      	bne.n	8004828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	2203      	movs	r2, #3
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047fc:	2201      	movs	r2, #1
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 0201 	and.w	r2, r3, #1
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b03      	cmp	r3, #3
 8004832:	d017      	beq.n	8004864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	2203      	movs	r2, #3
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d123      	bne.n	80048b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	08da      	lsrs	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3208      	adds	r2, #8
 8004878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	220f      	movs	r2, #15
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	69b9      	ldr	r1, [r7, #24]
 80048b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2203      	movs	r2, #3
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0203 	and.w	r2, r3, #3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80a2 	beq.w	8004a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_GPIO_Init+0x2e8>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	4a56      	ldr	r2, [pc, #344]	; (8004a5c <HAL_GPIO_Init+0x2e8>)
 8004904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004908:	6453      	str	r3, [r2, #68]	; 0x44
 800490a:	4b54      	ldr	r3, [pc, #336]	; (8004a5c <HAL_GPIO_Init+0x2e8>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004916:	4a52      	ldr	r2, [pc, #328]	; (8004a60 <HAL_GPIO_Init+0x2ec>)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	3302      	adds	r3, #2
 800491e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	220f      	movs	r2, #15
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a49      	ldr	r2, [pc, #292]	; (8004a64 <HAL_GPIO_Init+0x2f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d019      	beq.n	8004976 <HAL_GPIO_Init+0x202>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a48      	ldr	r2, [pc, #288]	; (8004a68 <HAL_GPIO_Init+0x2f4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_GPIO_Init+0x1fe>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a47      	ldr	r2, [pc, #284]	; (8004a6c <HAL_GPIO_Init+0x2f8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00d      	beq.n	800496e <HAL_GPIO_Init+0x1fa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a46      	ldr	r2, [pc, #280]	; (8004a70 <HAL_GPIO_Init+0x2fc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <HAL_GPIO_Init+0x1f6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a45      	ldr	r2, [pc, #276]	; (8004a74 <HAL_GPIO_Init+0x300>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_GPIO_Init+0x1f2>
 8004962:	2304      	movs	r3, #4
 8004964:	e008      	b.n	8004978 <HAL_GPIO_Init+0x204>
 8004966:	2307      	movs	r3, #7
 8004968:	e006      	b.n	8004978 <HAL_GPIO_Init+0x204>
 800496a:	2303      	movs	r3, #3
 800496c:	e004      	b.n	8004978 <HAL_GPIO_Init+0x204>
 800496e:	2302      	movs	r3, #2
 8004970:	e002      	b.n	8004978 <HAL_GPIO_Init+0x204>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_GPIO_Init+0x204>
 8004976:	2300      	movs	r3, #0
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	f002 0203 	and.w	r2, r2, #3
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	4093      	lsls	r3, r2
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004988:	4935      	ldr	r1, [pc, #212]	; (8004a60 <HAL_GPIO_Init+0x2ec>)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	089b      	lsrs	r3, r3, #2
 800498e:	3302      	adds	r3, #2
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004996:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_GPIO_Init+0x304>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ba:	4a2f      	ldr	r2, [pc, #188]	; (8004a78 <HAL_GPIO_Init+0x304>)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <HAL_GPIO_Init+0x304>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049e4:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <HAL_GPIO_Init+0x304>)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_GPIO_Init+0x304>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a0e:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <HAL_GPIO_Init+0x304>)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_GPIO_Init+0x304>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a38:	4a0f      	ldr	r2, [pc, #60]	; (8004a78 <HAL_GPIO_Init+0x304>)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3301      	adds	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	f67f aea2 	bls.w	8004790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40013800 	.word	0x40013800
 8004a64:	40020000 	.word	0x40020000
 8004a68:	40020400 	.word	0x40020400
 8004a6c:	40020800 	.word	0x40020800
 8004a70:	40020c00 	.word	0x40020c00
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40013c00 	.word	0x40013c00

08004a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a8c:	787b      	ldrb	r3, [r7, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a98:	e003      	b.n	8004aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	041a      	lsls	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	619a      	str	r2, [r3, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d006      	beq.n	8004ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc fea6 	bl	8001820 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40013c00 	.word	0x40013c00

08004ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e12b      	b.n	8004d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc fb30 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b44:	f004 fc6e 	bl	8009424 <HAL_RCC_GetPCLK1Freq>
 8004b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4a81      	ldr	r2, [pc, #516]	; (8004d54 <HAL_I2C_Init+0x274>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d807      	bhi.n	8004b64 <HAL_I2C_Init+0x84>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a80      	ldr	r2, [pc, #512]	; (8004d58 <HAL_I2C_Init+0x278>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bf94      	ite	ls
 8004b5c:	2301      	movls	r3, #1
 8004b5e:	2300      	movhi	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e006      	b.n	8004b72 <HAL_I2C_Init+0x92>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a7d      	ldr	r2, [pc, #500]	; (8004d5c <HAL_I2C_Init+0x27c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	bf94      	ite	ls
 8004b6c:	2301      	movls	r3, #1
 8004b6e:	2300      	movhi	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0e7      	b.n	8004d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4a78      	ldr	r2, [pc, #480]	; (8004d60 <HAL_I2C_Init+0x280>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	0c9b      	lsrs	r3, r3, #18
 8004b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4a6a      	ldr	r2, [pc, #424]	; (8004d54 <HAL_I2C_Init+0x274>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d802      	bhi.n	8004bb4 <HAL_I2C_Init+0xd4>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	e009      	b.n	8004bc8 <HAL_I2C_Init+0xe8>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	4a69      	ldr	r2, [pc, #420]	; (8004d64 <HAL_I2C_Init+0x284>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	495c      	ldr	r1, [pc, #368]	; (8004d54 <HAL_I2C_Init+0x274>)
 8004be4:	428b      	cmp	r3, r1
 8004be6:	d819      	bhi.n	8004c1c <HAL_I2C_Init+0x13c>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1e59      	subs	r1, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf6:	1c59      	adds	r1, r3, #1
 8004bf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bfc:	400b      	ands	r3, r1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_I2C_Init+0x138>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1e59      	subs	r1, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c16:	e051      	b.n	8004cbc <HAL_I2C_Init+0x1dc>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	e04f      	b.n	8004cbc <HAL_I2C_Init+0x1dc>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d111      	bne.n	8004c48 <HAL_I2C_Init+0x168>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1e58      	subs	r0, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6859      	ldr	r1, [r3, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	440b      	add	r3, r1
 8004c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e012      	b.n	8004c6e <HAL_I2C_Init+0x18e>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1e58      	subs	r0, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	0099      	lsls	r1, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Init+0x196>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e022      	b.n	8004cbc <HAL_I2C_Init+0x1dc>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10e      	bne.n	8004c9c <HAL_I2C_Init+0x1bc>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1e58      	subs	r0, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	440b      	add	r3, r1
 8004c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9a:	e00f      	b.n	8004cbc <HAL_I2C_Init+0x1dc>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e58      	subs	r0, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	0099      	lsls	r1, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	6809      	ldr	r1, [r1, #0]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6911      	ldr	r1, [r2, #16]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68d2      	ldr	r2, [r2, #12]
 8004cf6:	4311      	orrs	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	000186a0 	.word	0x000186a0
 8004d58:	001e847f 	.word	0x001e847f
 8004d5c:	003d08ff 	.word	0x003d08ff
 8004d60:	431bde83 	.word	0x431bde83
 8004d64:	10624dd3 	.word	0x10624dd3

08004d68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	817b      	strh	r3, [r7, #10]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	813b      	strh	r3, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d82:	f7ff f815 	bl	8003db0 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	f040 80d9 	bne.w	8004f48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2319      	movs	r3, #25
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	496d      	ldr	r1, [pc, #436]	; (8004f54 <HAL_I2C_Mem_Write+0x1ec>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f002 fa3b 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0cc      	b.n	8004f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_I2C_Mem_Write+0x56>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e0c5      	b.n	8004f4a <HAL_I2C_Mem_Write+0x1e2>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d007      	beq.n	8004de4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2221      	movs	r2, #33	; 0x21
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a4d      	ldr	r2, [pc, #308]	; (8004f58 <HAL_I2C_Mem_Write+0x1f0>)
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e26:	88f8      	ldrh	r0, [r7, #6]
 8004e28:	893a      	ldrh	r2, [r7, #8]
 8004e2a:	8979      	ldrh	r1, [r7, #10]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	4603      	mov	r3, r0
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f001 ffca 	bl	8006dd0 <I2C_RequestMemoryWrite>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d052      	beq.n	8004ee8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e081      	b.n	8004f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f002 fabc 	bl	80073c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d107      	bne.n	8004e6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06b      	b.n	8004f4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d11b      	bne.n	8004ee8 <HAL_I2C_Mem_Write+0x180>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d017      	beq.n	8004ee8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1aa      	bne.n	8004e46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f002 faa8 	bl	800744a <I2C_WaitOnBTFFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00d      	beq.n	8004f1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d107      	bne.n	8004f18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e016      	b.n	8004f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	00100002 	.word	0x00100002
 8004f58:	ffff0000 	.word	0xffff0000

08004f5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	; 0x30
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f76:	f7fe ff1b 	bl	8003db0 <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	f040 8208 	bne.w	800539a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2319      	movs	r3, #25
 8004f90:	2201      	movs	r2, #1
 8004f92:	497b      	ldr	r1, [pc, #492]	; (8005180 <HAL_I2C_Mem_Read+0x224>)
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f002 f941 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e1fb      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2C_Mem_Read+0x56>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e1f4      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d007      	beq.n	8004fd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2222      	movs	r2, #34	; 0x22
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2240      	movs	r2, #64	; 0x40
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a5b      	ldr	r2, [pc, #364]	; (8005184 <HAL_I2C_Mem_Read+0x228>)
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800501a:	88f8      	ldrh	r0, [r7, #6]
 800501c:	893a      	ldrh	r2, [r7, #8]
 800501e:	8979      	ldrh	r1, [r7, #10]
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	4603      	mov	r3, r0
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f001 ff66 	bl	8006efc <I2C_RequestMemoryRead>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e1b0      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d113      	bne.n	800506a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e184      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b01      	cmp	r3, #1
 8005070:	d11b      	bne.n	80050aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	61fb      	str	r3, [r7, #28]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e164      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d11b      	bne.n	80050ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	e144      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005100:	e138      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	2b03      	cmp	r3, #3
 8005108:	f200 80f1 	bhi.w	80052ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	2b01      	cmp	r3, #1
 8005112:	d123      	bne.n	800515c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f002 fa09 	bl	8007530 <I2C_WaitOnRXNEFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e139      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800515a:	e10b      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005160:	2b02      	cmp	r3, #2
 8005162:	d14e      	bne.n	8005202 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2200      	movs	r2, #0
 800516c:	4906      	ldr	r1, [pc, #24]	; (8005188 <HAL_I2C_Mem_Read+0x22c>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f002 f854 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e10e      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
 800517e:	bf00      	nop
 8005180:	00100002 	.word	0x00100002
 8005184:	ffff0000 	.word	0xffff0000
 8005188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005200:	e0b8      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2200      	movs	r2, #0
 800520a:	4966      	ldr	r1, [pc, #408]	; (80053a4 <HAL_I2C_Mem_Read+0x448>)
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f002 f805 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0bf      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2200      	movs	r2, #0
 8005266:	494f      	ldr	r1, [pc, #316]	; (80053a4 <HAL_I2C_Mem_Read+0x448>)
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f001 ffd7 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e091      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ec:	e042      	b.n	8005374 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f002 f91c 	bl	8007530 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e04c      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b04      	cmp	r3, #4
 8005340:	d118      	bne.n	8005374 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	f47f aec2 	bne.w	8005102 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800539a:	2302      	movs	r3, #2
  }
}
 800539c:	4618      	mov	r0, r3
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	00010004 	.word	0x00010004

080053a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	460b      	mov	r3, r1
 80053b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80053b8:	f7fe fcfa 	bl	8003db0 <HAL_GetTick>
 80053bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	f040 8111 	bne.w	80055f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	2319      	movs	r3, #25
 80053d6:	2201      	movs	r2, #1
 80053d8:	4988      	ldr	r1, [pc, #544]	; (80055fc <HAL_I2C_IsDeviceReady+0x254>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 ff1e 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
 80053e8:	e104      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_I2C_IsDeviceReady+0x50>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0fd      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d007      	beq.n	800541e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0201 	orr.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2224      	movs	r2, #36	; 0x24
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a70      	ldr	r2, [pc, #448]	; (8005600 <HAL_I2C_IsDeviceReady+0x258>)
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f001 fedc 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005478:	d103      	bne.n	8005482 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0b6      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005494:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005496:	f7fe fc8b 	bl	8003db0 <HAL_GetTick>
 800549a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054ca:	e025      	b.n	8005518 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054cc:	f7fe fc70 	bl	8003db0 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <HAL_I2C_IsDeviceReady+0x13a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	22a0      	movs	r2, #160	; 0xa0
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2ba0      	cmp	r3, #160	; 0xa0
 8005522:	d005      	beq.n	8005530 <HAL_I2C_IsDeviceReady+0x188>
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <HAL_I2C_IsDeviceReady+0x188>
 800552a:	7dbb      	ldrb	r3, [r7, #22]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0cd      	beq.n	80054cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d129      	bne.n	800559a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2319      	movs	r3, #25
 8005572:	2201      	movs	r2, #1
 8005574:	4921      	ldr	r1, [pc, #132]	; (80055fc <HAL_I2C_IsDeviceReady+0x254>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f001 fe50 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e036      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e02c      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2319      	movs	r3, #25
 80055ba:	2201      	movs	r2, #1
 80055bc:	490f      	ldr	r1, [pc, #60]	; (80055fc <HAL_I2C_IsDeviceReady+0x254>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f001 fe2c 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e012      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	3301      	adds	r3, #1
 80055d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	f4ff af32 	bcc.w	8005442 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	00100002 	.word	0x00100002
 8005600:	ffff0000 	.word	0xffff0000

08005604 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d003      	beq.n	800563c <HAL_I2C_EV_IRQHandler+0x38>
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	f040 80c1 	bne.w	80057be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <HAL_I2C_EV_IRQHandler+0x6e>
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800565c:	d003      	beq.n	8005666 <HAL_I2C_EV_IRQHandler+0x62>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005664:	d101      	bne.n	800566a <HAL_I2C_EV_IRQHandler+0x66>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <HAL_I2C_EV_IRQHandler+0x68>
 800566a:	2300      	movs	r3, #0
 800566c:	2b01      	cmp	r3, #1
 800566e:	f000 8132 	beq.w	80058d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <HAL_I2C_EV_IRQHandler+0x92>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	0a5b      	lsrs	r3, r3, #9
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 ffd6 	bl	800763a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fd83 	bl	800619a <I2C_Master_SB>
 8005694:	e092      	b.n	80057bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	08db      	lsrs	r3, r3, #3
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	0a5b      	lsrs	r3, r3, #9
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fdf9 	bl	80062a6 <I2C_Master_ADD10>
 80056b4:	e082      	b.n	80057bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	0a5b      	lsrs	r3, r3, #9
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fe13 	bl	80062fa <I2C_Master_ADDR>
 80056d4:	e072      	b.n	80057bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03b      	beq.n	800575a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	f000 80f3 	beq.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	09db      	lsrs	r3, r3, #7
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00f      	beq.n	8005720 <HAL_I2C_EV_IRQHandler+0x11c>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	0a9b      	lsrs	r3, r3, #10
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_I2C_EV_IRQHandler+0x11c>
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d103      	bne.n	8005720 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9f3 	bl	8005b04 <I2C_MasterTransmit_TXE>
 800571e:	e04d      	b.n	80057bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80d6 	beq.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	0a5b      	lsrs	r3, r3, #9
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80cf 	beq.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800573c:	7bbb      	ldrb	r3, [r7, #14]
 800573e:	2b21      	cmp	r3, #33	; 0x21
 8005740:	d103      	bne.n	800574a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa7a 	bl	8005c3c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005748:	e0c7      	b.n	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	f040 80c4 	bne.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fae8 	bl	8005d28 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005758:	e0bf      	b.n	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005768:	f000 80b7 	beq.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	099b      	lsrs	r3, r3, #6
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00f      	beq.n	8005798 <HAL_I2C_EV_IRQHandler+0x194>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	0a9b      	lsrs	r3, r3, #10
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <HAL_I2C_EV_IRQHandler+0x194>
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb5d 	bl	8005e50 <I2C_MasterReceive_RXNE>
 8005796:	e011      	b.n	80057bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 809a 	beq.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	0a5b      	lsrs	r3, r3, #9
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8093 	beq.w	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc06 	bl	8005fc6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ba:	e08e      	b.n	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
 80057bc:	e08d      	b.n	80058da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e007      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d012      	beq.n	8005812 <HAL_I2C_EV_IRQHandler+0x20e>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	0a5b      	lsrs	r3, r3, #9
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00c      	beq.n	8005812 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 ffc4 	bl	8006798 <I2C_Slave_ADDR>
 8005810:	e066      	b.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_I2C_EV_IRQHandler+0x22e>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	0a5b      	lsrs	r3, r3, #9
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fffe 	bl	800682c <I2C_Slave_STOPF>
 8005830:	e056      	b.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b21      	cmp	r3, #33	; 0x21
 8005836:	d002      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x23a>
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b29      	cmp	r3, #41	; 0x29
 800583c:	d125      	bne.n	800588a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	09db      	lsrs	r3, r3, #7
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00f      	beq.n	800586a <HAL_I2C_EV_IRQHandler+0x266>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	0a9b      	lsrs	r3, r3, #10
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_I2C_EV_IRQHandler+0x266>
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 feda 	bl	800661c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005868:	e039      	b.n	80058de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d033      	beq.n	80058de <HAL_I2C_EV_IRQHandler+0x2da>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	0a5b      	lsrs	r3, r3, #9
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02d      	beq.n	80058de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 ff07 	bl	8006696 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005888:	e029      	b.n	80058de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00f      	beq.n	80058b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	0a9b      	lsrs	r3, r3, #10
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 ff12 	bl	80066d8 <I2C_SlaveReceive_RXNE>
 80058b4:	e014      	b.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00e      	beq.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	0a5b      	lsrs	r3, r3, #9
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 ff40 	bl	8006754 <I2C_SlaveReceive_BTF>
 80058d4:	e004      	b.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80058d6:	bf00      	nop
 80058d8:	e002      	b.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b08a      	sub	sp, #40	; 0x28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80058fe:	2300      	movs	r3, #0
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005908:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <HAL_I2C_ER_IRQHandler+0x4e>
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005932:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	0a5b      	lsrs	r3, r3, #9
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <HAL_I2C_ER_IRQHandler+0x78>
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	f043 0302 	orr.w	r3, r3, #2
 8005952:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800595c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	0a9b      	lsrs	r3, r3, #10
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d03f      	beq.n	80059ea <HAL_I2C_ER_IRQHandler+0x104>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d039      	beq.n	80059ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005976:	7efb      	ldrb	r3, [r7, #27]
 8005978:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005990:	7ebb      	ldrb	r3, [r7, #26]
 8005992:	2b20      	cmp	r3, #32
 8005994:	d112      	bne.n	80059bc <HAL_I2C_ER_IRQHandler+0xd6>
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <HAL_I2C_ER_IRQHandler+0xd6>
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	2b21      	cmp	r3, #33	; 0x21
 80059a0:	d008      	beq.n	80059b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	2b29      	cmp	r3, #41	; 0x29
 80059a6:	d005      	beq.n	80059b4 <HAL_I2C_ER_IRQHandler+0xce>
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b28      	cmp	r3, #40	; 0x28
 80059ac:	d106      	bne.n	80059bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b21      	cmp	r3, #33	; 0x21
 80059b2:	d103      	bne.n	80059bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f869 	bl	8006a8c <I2C_Slave_AF>
 80059ba:	e016      	b.n	80059ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059ce:	7efb      	ldrb	r3, [r7, #27]
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d002      	beq.n	80059da <HAL_I2C_ER_IRQHandler+0xf4>
 80059d4:	7efb      	ldrb	r3, [r7, #27]
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d107      	bne.n	80059ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	0adb      	lsrs	r3, r3, #11
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <HAL_I2C_ER_IRQHandler+0x12e>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	0a1b      	lsrs	r3, r3, #8
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f043 0308 	orr.w	r3, r3, #8
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a12:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 f8a0 	bl	8006b6c <I2C_ITError>
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
 8005a90:	4613      	mov	r3, r2
 8005a92:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d150      	bne.n	8005bcc <I2C_MasterTransmit_TXE+0xc8>
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b21      	cmp	r3, #33	; 0x21
 8005b2e:	d14d      	bne.n	8005bcc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d01d      	beq.n	8005b72 <I2C_MasterTransmit_TXE+0x6e>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d01a      	beq.n	8005b72 <I2C_MasterTransmit_TXE+0x6e>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b42:	d016      	beq.n	8005b72 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b52:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2211      	movs	r2, #17
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff ff62 	bl	8005a34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b70:	e060      	b.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b80:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d107      	bne.n	8005bbc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff7d 	bl	8005ab4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bba:	e03b      	b.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff35 	bl	8005a34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bca:	e033      	b.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b21      	cmp	r3, #33	; 0x21
 8005bd0:	d005      	beq.n	8005bde <I2C_MasterTransmit_TXE+0xda>
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d12d      	bne.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b22      	cmp	r3, #34	; 0x22
 8005bdc:	d12a      	bne.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d108      	bne.n	8005bfa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005bf8:	e01c      	b.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d103      	bne.n	8005c0e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f88e 	bl	8005d28 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c0c:	e012      	b.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c32:	e7ff      	b.n	8005c34 <I2C_MasterTransmit_TXE+0x130>
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b21      	cmp	r3, #33	; 0x21
 8005c54:	d164      	bne.n	8005d20 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d012      	beq.n	8005c86 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005c84:	e04c      	b.n	8005d20 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d01d      	beq.n	8005cc8 <I2C_MasterTransmit_BTF+0x8c>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d01a      	beq.n	8005cc8 <I2C_MasterTransmit_BTF+0x8c>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c98:	d016      	beq.n	8005cc8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ca8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2211      	movs	r2, #17
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff feb7 	bl	8005a34 <HAL_I2C_MasterTxCpltCallback>
}
 8005cc6:	e02b      	b.n	8005d20 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cd6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d107      	bne.n	8005d12 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fed2 	bl	8005ab4 <HAL_I2C_MemTxCpltCallback>
}
 8005d10:	e006      	b.n	8005d20 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fe8a 	bl	8005a34 <HAL_I2C_MasterTxCpltCallback>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11d      	bne.n	8005d7c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10b      	bne.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	1c9a      	adds	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005d5e:	e073      	b.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	121b      	asrs	r3, r3, #8
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005d7a:	e065      	b.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10b      	bne.n	8005d9c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005d9a:	e055      	b.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d151      	bne.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b22      	cmp	r3, #34	; 0x22
 8005da8:	d10d      	bne.n	8005dc6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005dc4:	e040      	b.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b21      	cmp	r3, #33	; 0x21
 8005dd4:	d112      	bne.n	8005dfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005dfa:	e025      	b.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d120      	bne.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b21      	cmp	r3, #33	; 0x21
 8005e0a:	d11d      	bne.n	8005e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fe36 	bl	8005ab4 <HAL_I2C_MemTxCpltCallback>
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b22      	cmp	r3, #34	; 0x22
 8005e62:	f040 80ac 	bne.w	8005fbe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d921      	bls.n	8005eb8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	f040 808c 	bne.w	8005fbe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005eb6:	e082      	b.n	8005fbe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d075      	beq.n	8005fac <I2C_MasterReceive_RXNE+0x15c>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d002      	beq.n	8005ecc <I2C_MasterReceive_RXNE+0x7c>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d16f      	bne.n	8005fac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fafd 	bl	80074cc <I2C_WaitOnSTOPRequestThroughIT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d142      	bne.n	8005f5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ef6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d10a      	bne.n	8005f48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fdc1 	bl	8005ac8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f46:	e03a      	b.n	8005fbe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2212      	movs	r2, #18
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fd76 	bl	8005a48 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f5c:	e02f      	b.n	8005fbe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fd99 	bl	8005adc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005faa:	e008      	b.n	8005fbe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fba:	605a      	str	r2, [r3, #4]
}
 8005fbc:	e7ff      	b.n	8005fbe <I2C_MasterReceive_RXNE+0x16e>
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d11b      	bne.n	8006016 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006014:	e0bd      	b.n	8006192 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b03      	cmp	r3, #3
 800601e:	d129      	bne.n	8006074 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b04      	cmp	r3, #4
 8006034:	d00a      	beq.n	800604c <I2C_MasterReceive_BTF+0x86>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d007      	beq.n	800604c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006072:	e08e      	b.n	8006192 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d176      	bne.n	800616c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d002      	beq.n	800608a <I2C_MasterReceive_BTF+0xc4>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b10      	cmp	r3, #16
 8006088:	d108      	bne.n	800609c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e019      	b.n	80060d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d002      	beq.n	80060a8 <I2C_MasterReceive_BTF+0xe2>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d108      	bne.n	80060ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e00a      	b.n	80060d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d007      	beq.n	80060d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800612a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b40      	cmp	r3, #64	; 0x40
 800613e:	d10a      	bne.n	8006156 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fcba 	bl	8005ac8 <HAL_I2C_MemRxCpltCallback>
}
 8006154:	e01d      	b.n	8006192 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2212      	movs	r2, #18
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fc6f 	bl	8005a48 <HAL_I2C_MasterRxCpltCallback>
}
 800616a:	e012      	b.n	8006192 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d117      	bne.n	80061de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80061c8:	e067      	b.n	800629a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]
}
 80061dc:	e05d      	b.n	800629a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e6:	d133      	bne.n	8006250 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b21      	cmp	r3, #33	; 0x21
 80061f2:	d109      	bne.n	8006208 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	e008      	b.n	800621a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	b2da      	uxtb	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <I2C_Master_SB+0x92>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d032      	beq.n	800629a <I2C_Master_SB+0x100>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02d      	beq.n	800629a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624c:	605a      	str	r2, [r3, #4]
}
 800624e:	e024      	b.n	800629a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10e      	bne.n	8006276 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625c:	b29b      	uxth	r3, r3
 800625e:	11db      	asrs	r3, r3, #7
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 0306 	and.w	r3, r3, #6
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f063 030f 	orn	r3, r3, #15
 800626c:	b2da      	uxtb	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	611a      	str	r2, [r3, #16]
}
 8006274:	e011      	b.n	800629a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627a:	2b01      	cmp	r3, #1
 800627c:	d10d      	bne.n	800629a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	b29b      	uxth	r3, r3
 8006284:	11db      	asrs	r3, r3, #7
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0306 	and.w	r3, r3, #6
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f063 030e 	orn	r3, r3, #14
 8006292:	b2da      	uxtb	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	611a      	str	r2, [r3, #16]
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <I2C_Master_ADD10+0x26>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00c      	beq.n	80062ee <I2C_Master_ADD10+0x48>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ec:	605a      	str	r2, [r3, #4]
  }
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b091      	sub	sp, #68	; 0x44
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b22      	cmp	r3, #34	; 0x22
 8006322:	f040 8169 	bne.w	80065f8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10f      	bne.n	800634e <I2C_Master_ADDR+0x54>
 800632e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d10b      	bne.n	800634e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006336:	2300      	movs	r3, #0
 8006338:	633b      	str	r3, [r7, #48]	; 0x30
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	633b      	str	r3, [r7, #48]	; 0x30
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	633b      	str	r3, [r7, #48]	; 0x30
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	e160      	b.n	8006610 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	2b00      	cmp	r3, #0
 8006354:	d11d      	bne.n	8006392 <I2C_Master_ADDR+0x98>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800635e:	d118      	bne.n	8006392 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006360:	2300      	movs	r3, #0
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006384:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	651a      	str	r2, [r3, #80]	; 0x50
 8006390:	e13e      	b.n	8006610 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d113      	bne.n	80063c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639c:	2300      	movs	r3, #0
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e115      	b.n	80065f0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	f040 808a 	bne.w	80064e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063d6:	d137      	bne.n	8006448 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f6:	d113      	bne.n	8006420 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006406:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006408:	2300      	movs	r3, #0
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	e0e7      	b.n	80065f0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006420:	2300      	movs	r3, #0
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	623b      	str	r3, [r7, #32]
 8006434:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e0d3      	b.n	80065f0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	2b08      	cmp	r3, #8
 800644c:	d02e      	beq.n	80064ac <I2C_Master_ADDR+0x1b2>
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b20      	cmp	r3, #32
 8006452:	d02b      	beq.n	80064ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	2b12      	cmp	r3, #18
 8006458:	d102      	bne.n	8006460 <I2C_Master_ADDR+0x166>
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	2b01      	cmp	r3, #1
 800645e:	d125      	bne.n	80064ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2b04      	cmp	r3, #4
 8006464:	d00e      	beq.n	8006484 <I2C_Master_ADDR+0x18a>
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b02      	cmp	r3, #2
 800646a:	d00b      	beq.n	8006484 <I2C_Master_ADDR+0x18a>
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	2b10      	cmp	r3, #16
 8006470:	d008      	beq.n	8006484 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e007      	b.n	8006494 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006492:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006494:	2300      	movs	r3, #0
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	e0a1      	b.n	80065f0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	e085      	b.n	80065f0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d14d      	bne.n	800658a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d016      	beq.n	8006522 <I2C_Master_ADDR+0x228>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d013      	beq.n	8006522 <I2C_Master_ADDR+0x228>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d010      	beq.n	8006522 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e007      	b.n	8006532 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006530:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006540:	d117      	bne.n	8006572 <I2C_Master_ADDR+0x278>
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006548:	d00b      	beq.n	8006562 <I2C_Master_ADDR+0x268>
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	2b01      	cmp	r3, #1
 800654e:	d008      	beq.n	8006562 <I2C_Master_ADDR+0x268>
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	2b08      	cmp	r3, #8
 8006554:	d005      	beq.n	8006562 <I2C_Master_ADDR+0x268>
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	2b10      	cmp	r3, #16
 800655a:	d002      	beq.n	8006562 <I2C_Master_ADDR+0x268>
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	2b20      	cmp	r3, #32
 8006560:	d107      	bne.n	8006572 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006570:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	e032      	b.n	80065f0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006598:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a8:	d117      	bne.n	80065da <I2C_Master_ADDR+0x2e0>
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065b0:	d00b      	beq.n	80065ca <I2C_Master_ADDR+0x2d0>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d008      	beq.n	80065ca <I2C_Master_ADDR+0x2d0>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d005      	beq.n	80065ca <I2C_Master_ADDR+0x2d0>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d002      	beq.n	80065ca <I2C_Master_ADDR+0x2d0>
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d107      	bne.n	80065da <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80065f6:	e00b      	b.n	8006610 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
}
 800660e:	e7ff      	b.n	8006610 <I2C_Master_ADDR+0x316>
 8006610:	bf00      	nop
 8006612:	3744      	adds	r7, #68	; 0x44
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d02b      	beq.n	800668e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d114      	bne.n	800668e <I2C_SlaveTransmit_TXE+0x72>
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b29      	cmp	r3, #41	; 0x29
 8006668:	d111      	bne.n	800668e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006678:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2221      	movs	r2, #33	; 0x21
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2228      	movs	r2, #40	; 0x28
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff f9e7 	bl	8005a5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d011      	beq.n	80066cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02c      	beq.n	800674c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d114      	bne.n	800674c <I2C_SlaveReceive_RXNE+0x74>
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b2a      	cmp	r3, #42	; 0x2a
 8006726:	d111      	bne.n	800674c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2222      	movs	r2, #34	; 0x22
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2228      	movs	r2, #40	; 0x28
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff f992 	bl	8005a70 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d012      	beq.n	800678c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067b2:	2b28      	cmp	r3, #40	; 0x28
 80067b4:	d127      	bne.n	8006806 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	089b      	lsrs	r3, r3, #2
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80067d2:	2301      	movs	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	09db      	lsrs	r3, r3, #7
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	81bb      	strh	r3, [r7, #12]
 80067e8:	e002      	b.n	80067f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80067f8:	89ba      	ldrh	r2, [r7, #12]
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff f940 	bl	8005a84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006804:	e00e      	b.n	8006824 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800684a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800684c:	2300      	movs	r3, #0
 800684e:	60bb      	str	r3, [r7, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	60bb      	str	r3, [r7, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006878:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006888:	d172      	bne.n	8006970 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b22      	cmp	r3, #34	; 0x22
 800688e:	d002      	beq.n	8006896 <I2C_Slave_STOPF+0x6a>
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b2a      	cmp	r3, #42	; 0x2a
 8006894:	d135      	bne.n	8006902 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	b29a      	uxth	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f043 0204 	orr.w	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fd fe62 	bl	8004598 <HAL_DMA_GetState>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d049      	beq.n	800696e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	4a69      	ldr	r2, [pc, #420]	; (8006a84 <I2C_Slave_STOPF+0x258>)
 80068e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd fcaa 	bl	8004240 <HAL_DMA_Abort_IT>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d03d      	beq.n	800696e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006900:	e035      	b.n	800696e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	b29a      	uxth	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f043 0204 	orr.w	r2, r3, #4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006934:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd fe2c 	bl	8004598 <HAL_DMA_GetState>
 8006940:	4603      	mov	r3, r0
 8006942:	2b01      	cmp	r3, #1
 8006944:	d014      	beq.n	8006970 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	4a4e      	ldr	r2, [pc, #312]	; (8006a84 <I2C_Slave_STOPF+0x258>)
 800694c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	4618      	mov	r0, r3
 8006954:	f7fd fc74 	bl	8004240 <HAL_DMA_Abort_IT>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	e000      	b.n	8006970 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800696e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d03e      	beq.n	80069f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b04      	cmp	r3, #4
 8006986:	d112      	bne.n	80069ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b40      	cmp	r3, #64	; 0x40
 80069ba:	d112      	bne.n	80069e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	f043 0204 	orr.w	r2, r3, #4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f8b3 	bl	8006b6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a06:	e039      	b.n	8006a7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0c:	d109      	bne.n	8006a22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2228      	movs	r2, #40	; 0x28
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff f827 	bl	8005a70 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b28      	cmp	r3, #40	; 0x28
 8006a2c:	d111      	bne.n	8006a52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a15      	ldr	r2, [pc, #84]	; (8006a88 <I2C_Slave_STOPF+0x25c>)
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff f828 	bl	8005aa0 <HAL_I2C_ListenCpltCallback>
}
 8006a50:	e014      	b.n	8006a7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	2b22      	cmp	r3, #34	; 0x22
 8006a58:	d002      	beq.n	8006a60 <I2C_Slave_STOPF+0x234>
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b22      	cmp	r3, #34	; 0x22
 8006a5e:	d10d      	bne.n	8006a7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fe fffa 	bl	8005a70 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	080070cd 	.word	0x080070cd
 8006a88:	ffff0000 	.word	0xffff0000

08006a8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d002      	beq.n	8006aae <I2C_Slave_AF+0x22>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d129      	bne.n	8006b02 <I2C_Slave_AF+0x76>
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b28      	cmp	r3, #40	; 0x28
 8006ab2:	d126      	bne.n	8006b02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a2c      	ldr	r2, [pc, #176]	; (8006b68 <I2C_Slave_AF+0xdc>)
 8006ab8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ac8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ad2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe ffd0 	bl	8005aa0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b00:	e02e      	b.n	8006b60 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	2b21      	cmp	r3, #33	; 0x21
 8006b06:	d126      	bne.n	8006b56 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a17      	ldr	r2, [pc, #92]	; (8006b68 <I2C_Slave_AF+0xdc>)
 8006b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2221      	movs	r2, #33	; 0x21
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe ff84 	bl	8005a5c <HAL_I2C_SlaveTxCpltCallback>
}
 8006b54:	e004      	b.n	8006b60 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b5e:	615a      	str	r2, [r3, #20]
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	ffff0000 	.word	0xffff0000

08006b6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d002      	beq.n	8006b90 <I2C_ITError+0x24>
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d10a      	bne.n	8006ba6 <I2C_ITError+0x3a>
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b22      	cmp	r3, #34	; 0x22
 8006b94:	d107      	bne.n	8006ba6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bac:	2b28      	cmp	r3, #40	; 0x28
 8006bae:	d107      	bne.n	8006bc0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2228      	movs	r2, #40	; 0x28
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bbe:	e015      	b.n	8006bec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bce:	d00a      	beq.n	8006be6 <I2C_ITError+0x7a>
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b60      	cmp	r3, #96	; 0x60
 8006bd4:	d007      	beq.n	8006be6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfa:	d162      	bne.n	8006cc2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d020      	beq.n	8006c5c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1e:	4a6a      	ldr	r2, [pc, #424]	; (8006dc8 <I2C_ITError+0x25c>)
 8006c20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fd fb0a 	bl	8004240 <HAL_DMA_Abort_IT>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8089 	beq.w	8006d46 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c56:	4610      	mov	r0, r2
 8006c58:	4798      	blx	r3
 8006c5a:	e074      	b.n	8006d46 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	4a59      	ldr	r2, [pc, #356]	; (8006dc8 <I2C_ITError+0x25c>)
 8006c62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fd fae9 	bl	8004240 <HAL_DMA_Abort_IT>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d068      	beq.n	8006d46 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d10b      	bne.n	8006c9a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	e041      	b.n	8006d46 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b60      	cmp	r3, #96	; 0x60
 8006ccc:	d125      	bne.n	8006d1a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d10b      	bne.n	8006d02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe feec 	bl	8005af0 <HAL_I2C_AbortCpltCallback>
 8006d18:	e015      	b.n	8006d46 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d10b      	bne.n	8006d40 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fe fecb 	bl	8005adc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10e      	bne.n	8006d74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d113      	bne.n	8006dc0 <I2C_ITError+0x254>
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b28      	cmp	r3, #40	; 0x28
 8006d9c:	d110      	bne.n	8006dc0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <I2C_ITError+0x260>)
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fe fe70 	bl	8005aa0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	080070cd 	.word	0x080070cd
 8006dcc:	ffff0000 	.word	0xffff0000

08006dd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	4608      	mov	r0, r1
 8006dda:	4611      	mov	r1, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	817b      	strh	r3, [r7, #10]
 8006de2:	460b      	mov	r3, r1
 8006de4:	813b      	strh	r3, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fa08 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00d      	beq.n	8006e2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e20:	d103      	bne.n	8006e2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e05f      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e2e:	897b      	ldrh	r3, [r7, #10]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	492d      	ldr	r1, [pc, #180]	; (8006ef8 <I2C_RequestMemoryWrite+0x128>)
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fa40 	bl	80072ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e04c      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6c:	6a39      	ldr	r1, [r7, #32]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 faaa 	bl	80073c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d107      	bne.n	8006e92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e02b      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	611a      	str	r2, [r3, #16]
 8006ea6:	e021      	b.n	8006eec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb8:	6a39      	ldr	r1, [r7, #32]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa84 	bl	80073c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00d      	beq.n	8006ee2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d107      	bne.n	8006ede <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e005      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee2:	893b      	ldrh	r3, [r7, #8]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	00010002 	.word	0x00010002

08006efc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	4608      	mov	r0, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	817b      	strh	r3, [r7, #10]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	813b      	strh	r3, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f96a 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d103      	bne.n	8006f66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e0aa      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f6a:	897b      	ldrh	r3, [r7, #10]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	4952      	ldr	r1, [pc, #328]	; (80070c8 <I2C_RequestMemoryRead+0x1cc>)
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f9a2 	bl	80072ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e097      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	6a39      	ldr	r1, [r7, #32]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fa0c 	bl	80073c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d107      	bne.n	8006fce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e076      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d105      	bne.n	8006fe4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	611a      	str	r2, [r3, #16]
 8006fe2:	e021      	b.n	8007028 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fe4:	893b      	ldrh	r3, [r7, #8]
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	6a39      	ldr	r1, [r7, #32]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f9e6 	bl	80073c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2b04      	cmp	r3, #4
 8007008:	d107      	bne.n	800701a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e050      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800701e:	893b      	ldrh	r3, [r7, #8]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	6a39      	ldr	r1, [r7, #32]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f9cb 	bl	80073c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00d      	beq.n	8007054 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	2b04      	cmp	r3, #4
 800703e:	d107      	bne.n	8007050 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e035      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007062:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	2200      	movs	r2, #0
 800706c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f8d3 	bl	800721c <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708a:	d103      	bne.n	8007094 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e013      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007098:	897b      	ldrh	r3, [r7, #10]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	6a3a      	ldr	r2, [r7, #32]
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <I2C_RequestMemoryRead+0x1cc>)
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f90b 	bl	80072ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	00010002 	.word	0x00010002

080070cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80070e6:	4b4b      	ldr	r3, [pc, #300]	; (8007214 <I2C_DMAAbort+0x148>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	4a4a      	ldr	r2, [pc, #296]	; (8007218 <I2C_DMAAbort+0x14c>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0a1a      	lsrs	r2, r3, #8
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	00da      	lsls	r2, r3, #3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007112:	e00a      	b.n	800712a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3b01      	subs	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007128:	d0ea      	beq.n	8007100 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007136:	2200      	movs	r2, #0
 8007138:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	2200      	movs	r2, #0
 8007148:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007158:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2200      	movs	r2, #0
 800715e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	2200      	movs	r2, #0
 800716e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	2200      	movs	r2, #0
 800717e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b60      	cmp	r3, #96	; 0x60
 800719a:	d10e      	bne.n	80071ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2200      	movs	r2, #0
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071b2:	6978      	ldr	r0, [r7, #20]
 80071b4:	f7fe fc9c 	bl	8005af0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071b8:	e027      	b.n	800720a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ba:	7cfb      	ldrb	r3, [r7, #19]
 80071bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071c0:	2b28      	cmp	r3, #40	; 0x28
 80071c2:	d117      	bne.n	80071f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2228      	movs	r2, #40	; 0x28
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071f2:	e007      	b.n	8007204 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007204:	6978      	ldr	r0, [r7, #20]
 8007206:	f7fe fc69 	bl	8005adc <HAL_I2C_ErrorCallback>
}
 800720a:	bf00      	nop
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000000 	.word	0x20000000
 8007218:	14f8b589 	.word	0x14f8b589

0800721c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800722c:	e025      	b.n	800727a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d021      	beq.n	800727a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fc fdbb 	bl	8003db0 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d116      	bne.n	800727a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f043 0220 	orr.w	r2, r3, #32
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e023      	b.n	80072c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10d      	bne.n	80072a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	43da      	mvns	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4013      	ands	r3, r2
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	bf0c      	ite	eq
 8007296:	2301      	moveq	r3, #1
 8007298:	2300      	movne	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	e00c      	b.n	80072ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	43da      	mvns	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4013      	ands	r3, r2
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf0c      	ite	eq
 80072b2:	2301      	moveq	r3, #1
 80072b4:	2300      	movne	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d0b6      	beq.n	800722e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072d8:	e051      	b.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e8:	d123      	bne.n	8007332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007302:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f043 0204 	orr.w	r2, r3, #4
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e046      	b.n	80073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d021      	beq.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fc fd39 	bl	8003db0 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d116      	bne.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f043 0220 	orr.w	r2, r3, #32
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e020      	b.n	80073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10c      	bne.n	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	43da      	mvns	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	bf14      	ite	ne
 800739a:	2301      	movne	r3, #1
 800739c:	2300      	moveq	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	e00b      	b.n	80073ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	43da      	mvns	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	4013      	ands	r3, r2
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bf14      	ite	ne
 80073b4:	2301      	movne	r3, #1
 80073b6:	2300      	moveq	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d18d      	bne.n	80072da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073d4:	e02d      	b.n	8007432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f900 	bl	80075dc <I2C_IsAcknowledgeFailed>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e02d      	b.n	8007442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d021      	beq.n	8007432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ee:	f7fc fcdf 	bl	8003db0 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d116      	bne.n	8007432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0220 	orr.w	r2, r3, #32
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e007      	b.n	8007442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743c:	2b80      	cmp	r3, #128	; 0x80
 800743e:	d1ca      	bne.n	80073d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007456:	e02d      	b.n	80074b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f8bf 	bl	80075dc <I2C_IsAcknowledgeFailed>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e02d      	b.n	80074c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d021      	beq.n	80074b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007470:	f7fc fc9e 	bl	8003db0 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d116      	bne.n	80074b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	f043 0220 	orr.w	r2, r3, #32
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e007      	b.n	80074c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d1ca      	bne.n	8007458 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	08db      	lsrs	r3, r3, #3
 80074de:	4a13      	ldr	r2, [pc, #76]	; (800752c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80074e0:	fba2 2303 	umull	r2, r3, r2, r3
 80074e4:	0a1a      	lsrs	r2, r3, #8
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d107      	bne.n	800750a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0220 	orr.w	r2, r3, #32
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e008      	b.n	800751c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	d0e9      	beq.n	80074ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	20000000 	.word	0x20000000
 800752c:	14f8b589 	.word	0x14f8b589

08007530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800753c:	e042      	b.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b10      	cmp	r3, #16
 800754a:	d119      	bne.n	8007580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0210 	mvn.w	r2, #16
 8007554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e029      	b.n	80075d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007580:	f7fc fc16 	bl	8003db0 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	429a      	cmp	r2, r3
 800758e:	d302      	bcc.n	8007596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d116      	bne.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	f043 0220 	orr.w	r2, r3, #32
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e007      	b.n	80075d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d1b5      	bne.n	800753e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f2:	d11b      	bne.n	800762c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0204 	orr.w	r2, r3, #4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800764a:	d103      	bne.n	8007654 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007652:	e007      	b.n	8007664 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800765c:	d102      	bne.n	8007664 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2208      	movs	r2, #8
 8007662:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007672:	b08f      	sub	sp, #60	; 0x3c
 8007674:	af0a      	add	r7, sp, #40	; 0x28
 8007676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e10f      	b.n	80078a2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7fb fc05 	bl	8002eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2203      	movs	r2, #3
 80076a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d102      	bne.n	80076bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f004 f82c 	bl	800b71e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	687e      	ldr	r6, [r7, #4]
 80076ce:	466d      	mov	r5, sp
 80076d0:	f106 0410 	add.w	r4, r6, #16
 80076d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80076e4:	1d33      	adds	r3, r6, #4
 80076e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e8:	6838      	ldr	r0, [r7, #0]
 80076ea:	f003 ff03 	bl	800b4f4 <USB_CoreInit>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0d0      	b.n	80078a2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f004 f81a 	bl	800b740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e04a      	b.n	80077a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007712:	7bfa      	ldrb	r2, [r7, #15]
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	4613      	mov	r3, r2
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	333d      	adds	r3, #61	; 0x3d
 8007722:	2201      	movs	r2, #1
 8007724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007726:	7bfa      	ldrb	r2, [r7, #15]
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	333c      	adds	r3, #60	; 0x3c
 8007736:	7bfa      	ldrb	r2, [r7, #15]
 8007738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800773a:	7bfa      	ldrb	r2, [r7, #15]
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	b298      	uxth	r0, r3
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	3344      	adds	r3, #68	; 0x44
 800774e:	4602      	mov	r2, r0
 8007750:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007752:	7bfa      	ldrb	r2, [r7, #15]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	3340      	adds	r3, #64	; 0x40
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007766:	7bfa      	ldrb	r2, [r7, #15]
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	4613      	mov	r3, r2
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	3348      	adds	r3, #72	; 0x48
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800777a:	7bfa      	ldrb	r2, [r7, #15]
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	334c      	adds	r3, #76	; 0x4c
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800778e:	7bfa      	ldrb	r2, [r7, #15]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	3354      	adds	r3, #84	; 0x54
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	3301      	adds	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]
 80077a8:	7bfa      	ldrb	r2, [r7, #15]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d3af      	bcc.n	8007712 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
 80077b6:	e044      	b.n	8007842 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80077b8:	7bfa      	ldrb	r2, [r7, #15]
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80077ce:	7bfa      	ldrb	r2, [r7, #15]
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80077e0:	7bfa      	ldrb	r2, [r7, #15]
 80077e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077e4:	7bfa      	ldrb	r2, [r7, #15]
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077fa:	7bfa      	ldrb	r2, [r7, #15]
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007810:	7bfa      	ldrb	r2, [r7, #15]
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	3301      	adds	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	7bfa      	ldrb	r2, [r7, #15]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d3b5      	bcc.n	80077b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	687e      	ldr	r6, [r7, #4]
 8007854:	466d      	mov	r5, sp
 8007856:	f106 0410 	add.w	r4, r6, #16
 800785a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800785c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800785e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007866:	e885 0003 	stmia.w	r5, {r0, r1}
 800786a:	1d33      	adds	r3, r6, #4
 800786c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800786e:	6838      	ldr	r0, [r7, #0]
 8007870:	f003 ffb2 	bl	800b7d8 <USB_DevInit>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e00d      	b.n	80078a2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f005 f901 	bl	800caa2 <USB_DevDisconnect>

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_PCD_Start+0x1c>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e020      	b.n	8007908 <HAL_PCD_Start+0x5e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d109      	bne.n	80078ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d005      	beq.n	80078ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f003 ff04 	bl	800b6fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f005 f8b1 	bl	800ca60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007910:	b590      	push	{r4, r7, lr}
 8007912:	b08d      	sub	sp, #52	; 0x34
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f005 f96f 	bl	800cc0a <USB_GetMode>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	f040 848a 	bne.w	8008248 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f005 f8d3 	bl	800cae4 <USB_ReadInterrupts>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8480 	beq.w	8008246 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f005 f8c0 	bl	800cae4 <USB_ReadInterrupts>
 8007964:	4603      	mov	r3, r0
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d107      	bne.n	800797e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695a      	ldr	r2, [r3, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f002 0202 	and.w	r2, r2, #2
 800797c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f005 f8ae 	bl	800cae4 <USB_ReadInterrupts>
 8007988:	4603      	mov	r3, r0
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	2b10      	cmp	r3, #16
 8007990:	d161      	bne.n	8007a56 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0210 	bic.w	r2, r2, #16
 80079a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	3304      	adds	r3, #4
 80079c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	0c5b      	lsrs	r3, r3, #17
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d124      	bne.n	8007a18 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80079d4:	4013      	ands	r3, r2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d035      	beq.n	8007a46 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	6a38      	ldr	r0, [r7, #32]
 80079ee:	f004 fee5 	bl	800c7bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079fe:	441a      	add	r2, r3
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6a1a      	ldr	r2, [r3, #32]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a10:	441a      	add	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	621a      	str	r2, [r3, #32]
 8007a16:	e016      	b.n	8007a46 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	0c5b      	lsrs	r3, r3, #17
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	d110      	bne.n	8007a46 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a2a:	2208      	movs	r2, #8
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6a38      	ldr	r0, [r7, #32]
 8007a30:	f004 fec4 	bl	800c7bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	091b      	lsrs	r3, r3, #4
 8007a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a40:	441a      	add	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0210 	orr.w	r2, r2, #16
 8007a54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f005 f842 	bl	800cae4 <USB_ReadInterrupts>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a6a:	f040 80a7 	bne.w	8007bbc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f005 f847 	bl	800cb0a <USB_ReadDevAllOutEpInterrupt>
 8007a7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007a7e:	e099      	b.n	8007bb4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 808e 	beq.w	8007ba8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f005 f86b 	bl	800cb72 <USB_ReadDevOutEPInterrupt>
 8007a9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 feef 	bl	80088a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00c      	beq.n	8007ae6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2308      	movs	r3, #8
 8007adc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ffc5 	bl	8008a70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afc:	461a      	mov	r2, r3
 8007afe:	2310      	movs	r3, #16
 8007b00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d030      	beq.n	8007b6e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d109      	bne.n	8007b2c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b2a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2e:	4613      	mov	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3304      	adds	r3, #4
 8007b40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d108      	bne.n	8007b5c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f00c f824 	bl	8013ba4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	461a      	mov	r2, r3
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	461a      	mov	r2, r3
 8007b86:	2320      	movs	r3, #32
 8007b88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ba6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	3301      	adds	r3, #1
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f47f af62 	bne.w	8007a80 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f004 ff8f 	bl	800cae4 <USB_ReadInterrupts>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bd0:	f040 80db 	bne.w	8007d8a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f004 ffb0 	bl	800cb3e <USB_ReadDevAllInEpInterrupt>
 8007bde:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007be4:	e0cd      	b.n	8007d82 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80c2 	beq.w	8007d76 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f004 ffd6 	bl	800cbae <USB_ReadDevInEPInterrupt>
 8007c02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d057      	beq.n	8007cbe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	f003 030f 	and.w	r3, r3, #15
 8007c14:	2201      	movs	r2, #1
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	43db      	mvns	r3, r3
 8007c28:	69f9      	ldr	r1, [r7, #28]
 8007c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c2e:	4013      	ands	r3, r2
 8007c30:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2301      	movs	r3, #1
 8007c42:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d132      	bne.n	8007cb2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	334c      	adds	r3, #76	; 0x4c
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	4613      	mov	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4403      	add	r3, r0
 8007c6c:	3348      	adds	r3, #72	; 0x48
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4419      	add	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c76:	4613      	mov	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4403      	add	r3, r0
 8007c80:	334c      	adds	r3, #76	; 0x4c
 8007c82:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d113      	bne.n	8007cb2 <HAL_PCD_IRQHandler+0x3a2>
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8e:	4613      	mov	r3, r2
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	3354      	adds	r3, #84	; 0x54
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d108      	bne.n	8007cb2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007caa:	461a      	mov	r2, r3
 8007cac:	2101      	movs	r1, #1
 8007cae:	f004 ffdd 	bl	800cc6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f00b feee 	bl	8013a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	2340      	movs	r3, #64	; 0x40
 8007d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d023      	beq.n	8007d64 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d1e:	6a38      	ldr	r0, [r7, #32]
 8007d20:	f003 febe 	bl	800baa0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d26:	4613      	mov	r3, r2
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	3338      	adds	r3, #56	; 0x38
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	3304      	adds	r3, #4
 8007d36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	78db      	ldrb	r3, [r3, #3]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d108      	bne.n	8007d52 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2200      	movs	r2, #0
 8007d44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f00b ff3b 	bl	8013bc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2302      	movs	r3, #2
 8007d62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fd08 	bl	8008786 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	3301      	adds	r3, #1
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	085b      	lsrs	r3, r3, #1
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f47f af2e 	bne.w	8007be6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f004 fea8 	bl	800cae4 <USB_ReadInterrupts>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d9e:	d122      	bne.n	8007de6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dae:	f023 0301 	bic.w	r3, r3, #1
 8007db2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d108      	bne.n	8007dd0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 feef 	bl	8008bac <HAL_PCDEx_LPM_Callback>
 8007dce:	e002      	b.n	8007dd6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f00b fed9 	bl	8013b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695a      	ldr	r2, [r3, #20]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f004 fe7a 	bl	800cae4 <USB_ReadInterrupts>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfa:	d112      	bne.n	8007e22 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d102      	bne.n	8007e12 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f00b fe95 	bl	8013b3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e20:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f004 fe5c 	bl	800cae4 <USB_ReadInterrupts>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e36:	f040 80b7 	bne.w	8007fa8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2110      	movs	r1, #16
 8007e54:	4618      	mov	r0, r3
 8007e56:	f003 fe23 	bl	800baa0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5e:	e046      	b.n	8007eee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ea6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ec6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ee6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	3301      	adds	r3, #1
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d3b3      	bcc.n	8007e60 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d016      	beq.n	8007f42 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f24:	f043 030b 	orr.w	r3, r3, #11
 8007f28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f3a:	f043 030b 	orr.w	r3, r3, #11
 8007f3e:	6453      	str	r3, [r2, #68]	; 0x44
 8007f40:	e015      	b.n	8007f6e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007f58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f68:	f043 030b 	orr.w	r3, r3, #11
 8007f6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f004 fe6a 	bl	800cc6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695a      	ldr	r2, [r3, #20]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f004 fd99 	bl	800cae4 <USB_ReadInterrupts>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fbc:	d124      	bne.n	8008008 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f004 fe2f 	bl	800cc26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f003 fde4 	bl	800bb9a <USB_GetDevSpeed>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681c      	ldr	r4, [r3, #0]
 8007fde:	f001 fa15 	bl	800940c <HAL_RCC_GetHCLKFreq>
 8007fe2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	4620      	mov	r0, r4
 8007fee:	f003 fae3 	bl	800b5b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f00b fd79 	bl	8013aea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695a      	ldr	r2, [r3, #20]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008006:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f004 fd69 	bl	800cae4 <USB_ReadInterrupts>
 8008012:	4603      	mov	r3, r0
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b08      	cmp	r3, #8
 800801a:	d10a      	bne.n	8008032 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f00b fd56 	bl	8013ace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f002 0208 	and.w	r2, r2, #8
 8008030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f004 fd54 	bl	800cae4 <USB_ReadInterrupts>
 800803c:	4603      	mov	r3, r0
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b80      	cmp	r3, #128	; 0x80
 8008044:	d122      	bne.n	800808c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008052:	2301      	movs	r3, #1
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
 8008056:	e014      	b.n	8008082 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d105      	bne.n	800807c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	b2db      	uxtb	r3, r3
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fb27 	bl	80086ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	3301      	adds	r3, #1
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008088:	429a      	cmp	r2, r3
 800808a:	d3e5      	bcc.n	8008058 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f004 fd27 	bl	800cae4 <USB_ReadInterrupts>
 8008096:	4603      	mov	r3, r0
 8008098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800809c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a0:	d13b      	bne.n	800811a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080a2:	2301      	movs	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
 80080a6:	e02b      	b.n	8008100 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	3340      	adds	r3, #64	; 0x40
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d115      	bne.n	80080fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80080ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da12      	bge.n	80080fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d8:	4613      	mov	r3, r2
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	333f      	adds	r3, #63	; 0x3f
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fae8 	bl	80086ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	3301      	adds	r3, #1
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008106:	429a      	cmp	r2, r3
 8008108:	d3ce      	bcc.n	80080a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695a      	ldr	r2, [r3, #20]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f004 fce0 	bl	800cae4 <USB_ReadInterrupts>
 8008124:	4603      	mov	r3, r0
 8008126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800812a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800812e:	d155      	bne.n	80081dc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008130:	2301      	movs	r3, #1
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
 8008134:	e045      	b.n	80081c2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814a:	4613      	mov	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d12e      	bne.n	80081bc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800815e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008160:	2b00      	cmp	r3, #0
 8008162:	da2b      	bge.n	80081bc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008170:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008174:	429a      	cmp	r2, r3
 8008176:	d121      	bne.n	80081bc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817c:	4613      	mov	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800818a:	2201      	movs	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081b8:	6053      	str	r3, [r2, #4]
            break;
 80081ba:	e007      	b.n	80081cc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	3301      	adds	r3, #1
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d3b4      	bcc.n	8008136 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80081da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f004 fc7f 	bl	800cae4 <USB_ReadInterrupts>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f0:	d10a      	bne.n	8008208 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f00b fcfa 	bl	8013bec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f004 fc69 	bl	800cae4 <USB_ReadInterrupts>
 8008212:	4603      	mov	r3, r0
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b04      	cmp	r3, #4
 800821a:	d115      	bne.n	8008248 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f00b fcea 	bl	8013c08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6859      	ldr	r1, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	430a      	orrs	r2, r1
 8008242:	605a      	str	r2, [r3, #4]
 8008244:	e000      	b.n	8008248 <HAL_PCD_IRQHandler+0x938>
      return;
 8008246:	bf00      	nop
    }
  }
}
 8008248:	3734      	adds	r7, #52	; 0x34
 800824a:	46bd      	mov	sp, r7
 800824c:	bd90      	pop	{r4, r7, pc}

0800824e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_PCD_SetAddress+0x1a>
 8008264:	2302      	movs	r3, #2
 8008266:	e013      	b.n	8008290 <HAL_PCD_SetAddress+0x42>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	78fa      	ldrb	r2, [r7, #3]
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f004 fbc7 	bl	800ca14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	70fb      	strb	r3, [r7, #3]
 80082aa:	460b      	mov	r3, r1
 80082ac:	803b      	strh	r3, [r7, #0]
 80082ae:	4613      	mov	r3, r2
 80082b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da0f      	bge.n	80082de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	3338      	adds	r3, #56	; 0x38
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	3304      	adds	r3, #4
 80082d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	705a      	strb	r2, [r3, #1]
 80082dc:	e00f      	b.n	80082fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	f003 020f 	and.w	r2, r3, #15
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	3304      	adds	r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	b2da      	uxtb	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800830a:	883a      	ldrh	r2, [r7, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	78ba      	ldrb	r2, [r7, #2]
 8008314:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008328:	78bb      	ldrb	r3, [r7, #2]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d102      	bne.n	8008334 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <HAL_PCD_EP_Open+0xaa>
 800833e:	2302      	movs	r3, #2
 8008340:	e00e      	b.n	8008360 <HAL_PCD_EP_Open+0xc8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	4618      	mov	r0, r3
 8008352:	f003 fc47 	bl	800bbe4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800835e:	7afb      	ldrb	r3, [r7, #11]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da0f      	bge.n	800839c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	f003 020f 	and.w	r2, r3, #15
 8008382:	4613      	mov	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	3338      	adds	r3, #56	; 0x38
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	3304      	adds	r3, #4
 8008392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	705a      	strb	r2, [r3, #1]
 800839a:	e00f      	b.n	80083bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 020f 	and.w	r2, r3, #15
 80083a2:	4613      	mov	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4413      	add	r3, r2
 80083b2:	3304      	adds	r3, #4
 80083b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_PCD_EP_Close+0x6e>
 80083d2:	2302      	movs	r3, #2
 80083d4:	e00e      	b.n	80083f4 <HAL_PCD_EP_Close+0x8c>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f003 fc85 	bl	800bcf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	460b      	mov	r3, r1
 800840a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	f003 020f 	and.w	r2, r3, #15
 8008412:	4613      	mov	r3, r2
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	3304      	adds	r3, #4
 8008424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2200      	movs	r2, #0
 8008436:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	b2da      	uxtb	r2, r3
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d102      	bne.n	8008458 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	6979      	ldr	r1, [r7, #20]
 8008470:	f003 ff64 	bl	800c33c <USB_EP0StartXfer>
 8008474:	e008      	b.n	8008488 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	6979      	ldr	r1, [r7, #20]
 8008484:	f003 fd12 	bl	800beac <USB_EPStartXfer>
  }

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	440b      	add	r3, r1
 80084b0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80084b4:	681b      	ldr	r3, [r3, #0]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	460b      	mov	r3, r1
 80084d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084d2:	7afb      	ldrb	r3, [r7, #11]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	4613      	mov	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	3338      	adds	r3, #56	; 0x38
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	3304      	adds	r3, #4
 80084e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2201      	movs	r2, #1
 8008500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	b2da      	uxtb	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d102      	bne.n	800851c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	f003 030f 	and.w	r3, r3, #15
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6979      	ldr	r1, [r7, #20]
 8008534:	f003 ff02 	bl	800c33c <USB_EP0StartXfer>
 8008538:	e008      	b.n	800854c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	6979      	ldr	r1, [r7, #20]
 8008548:	f003 fcb0 	bl	800beac <USB_EPStartXfer>
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d901      	bls.n	8008574 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e050      	b.n	8008616 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008578:	2b00      	cmp	r3, #0
 800857a:	da0f      	bge.n	800859c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	f003 020f 	and.w	r2, r3, #15
 8008582:	4613      	mov	r3, r2
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	3338      	adds	r3, #56	; 0x38
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	3304      	adds	r3, #4
 8008592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	705a      	strb	r2, [r3, #1]
 800859a:	e00d      	b.n	80085b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	4613      	mov	r3, r2
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_PCD_EP_SetStall+0x82>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e01e      	b.n	8008616 <HAL_PCD_EP_SetStall+0xc0>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68f9      	ldr	r1, [r7, #12]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f004 f940 	bl	800c86c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	f003 030f 	and.w	r3, r3, #15
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	b2d9      	uxtb	r1, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008606:	461a      	mov	r2, r3
 8008608:	f004 fb30 	bl	800cc6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	f003 020f 	and.w	r2, r3, #15
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d901      	bls.n	800863c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e042      	b.n	80086c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800863c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da0f      	bge.n	8008664 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	4613      	mov	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	3338      	adds	r3, #56	; 0x38
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4413      	add	r3, r2
 8008658:	3304      	adds	r3, #4
 800865a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	705a      	strb	r2, [r3, #1]
 8008662:	e00f      	b.n	8008684 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	4613      	mov	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	3304      	adds	r3, #4
 800867c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	b2da      	uxtb	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800869c:	2b01      	cmp	r3, #1
 800869e:	d101      	bne.n	80086a4 <HAL_PCD_EP_ClrStall+0x86>
 80086a0:	2302      	movs	r3, #2
 80086a2:	e00e      	b.n	80086c2 <HAL_PCD_EP_ClrStall+0xa4>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68f9      	ldr	r1, [r7, #12]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f004 f948 	bl	800c948 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80086d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da0c      	bge.n	80086f8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	4613      	mov	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	3338      	adds	r3, #56	; 0x38
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4413      	add	r3, r2
 80086f2:	3304      	adds	r3, #4
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e00c      	b.n	8008712 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	f003 020f 	and.w	r2, r3, #15
 80086fe:	4613      	mov	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	3304      	adds	r3, #4
 8008710:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	4618      	mov	r0, r3
 800871a:	f003 ff67 	bl	800c5ec <USB_EPStopXfer>
 800871e:	4603      	mov	r3, r0
 8008720:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008722:	7afb      	ldrb	r3, [r7, #11]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_PCD_EP_Flush+0x1a>
 8008742:	2302      	movs	r3, #2
 8008744:	e01b      	b.n	800877e <HAL_PCD_EP_Flush+0x52>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800874e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008752:	2b00      	cmp	r3, #0
 8008754:	da09      	bge.n	800876a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	78fb      	ldrb	r3, [r7, #3]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f003 f99c 	bl	800baa0 <USB_FlushTxFifo>
 8008768:	e004      	b.n	8008774 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f003 f9ca 	bl	800bb08 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b08a      	sub	sp, #40	; 0x28
 800878a:	af02      	add	r7, sp, #8
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	3338      	adds	r3, #56	; 0x38
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	3304      	adds	r3, #4
 80087ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a1a      	ldr	r2, [r3, #32]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d901      	bls.n	80087be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e06c      	b.n	8008898 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d902      	bls.n	80087da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3303      	adds	r3, #3
 80087de:	089b      	lsrs	r3, r3, #2
 80087e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087e2:	e02b      	b.n	800883c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d902      	bls.n	8008800 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3303      	adds	r3, #3
 8008804:	089b      	lsrs	r3, r3, #2
 8008806:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6919      	ldr	r1, [r3, #16]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008818:	b2db      	uxtb	r3, r3
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4603      	mov	r3, r0
 800881e:	6978      	ldr	r0, [r7, #20]
 8008820:	f003 ff8e 	bl	800c740 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	441a      	add	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	b29b      	uxth	r3, r3
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	429a      	cmp	r2, r3
 8008850:	d809      	bhi.n	8008866 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800885a:	429a      	cmp	r2, r3
 800885c:	d203      	bcs.n	8008866 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1be      	bne.n	80087e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	429a      	cmp	r2, r3
 8008870:	d811      	bhi.n	8008896 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	2201      	movs	r2, #1
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	43db      	mvns	r3, r3
 800888c:	6939      	ldr	r1, [r7, #16]
 800888e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008892:	4013      	ands	r3, r2
 8008894:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	333c      	adds	r3, #60	; 0x3c
 80088b8:	3304      	adds	r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d17b      	bne.n	80089ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4a61      	ldr	r2, [pc, #388]	; (8008a68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	f240 80b9 	bls.w	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80b3 	beq.w	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008902:	461a      	mov	r2, r3
 8008904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008908:	6093      	str	r3, [r2, #8]
 800890a:	e0a7      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	2320      	movs	r3, #32
 8008926:	6093      	str	r3, [r2, #8]
 8008928:	e098      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8093 	bne.w	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4a4b      	ldr	r2, [pc, #300]	; (8008a68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d90f      	bls.n	800895e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008954:	461a      	mov	r2, r3
 8008956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800895a:	6093      	str	r3, [r2, #8]
 800895c:	e07e      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	3304      	adds	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	69da      	ldr	r2, [r3, #28]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	0159      	lsls	r1, r3, #5
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	440b      	add	r3, r1
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d114      	bne.n	80089c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d109      	bne.n	80089b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089a8:	461a      	mov	r2, r3
 80089aa:	2101      	movs	r1, #1
 80089ac:	f004 f95e 	bl	800cc6c <USB_EP0_OutStart>
 80089b0:	e006      	b.n	80089c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	441a      	add	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f00b f84c 	bl	8013a64 <HAL_PCD_DataOutStageCallback>
 80089cc:	e046      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	4a26      	ldr	r2, [pc, #152]	; (8008a6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d124      	bne.n	8008a20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	461a      	mov	r2, r3
 80089ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f2:	6093      	str	r3, [r2, #8]
 80089f4:	e032      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d008      	beq.n	8008a12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2320      	movs	r3, #32
 8008a10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f00b f823 	bl	8013a64 <HAL_PCD_DataOutStageCallback>
 8008a1e:	e01d      	b.n	8008a5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d114      	bne.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d108      	bne.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	f004 f90e 	bl	800cc6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f00b f804 	bl	8013a64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	4f54300a 	.word	0x4f54300a
 8008a6c:	4f54310a 	.word	0x4f54310a

08008a70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	333c      	adds	r3, #60	; 0x3c
 8008a88:	3304      	adds	r3, #4
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d90e      	bls.n	8008ac4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	461a      	mov	r2, r3
 8008abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f00a ffbb 	bl	8013a40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d90c      	bls.n	8008aec <PCD_EP_OutSetupPacket_int+0x7c>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d108      	bne.n	8008aec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	f004 f8c0 	bl	800cc6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	4f54300a 	.word	0x4f54300a

08008afc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d107      	bne.n	8008b2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b1a:	883b      	ldrh	r3, [r7, #0]
 8008b1c:	0419      	lsls	r1, r3, #16
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28
 8008b28:	e028      	b.n	8008b7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	0c1b      	lsrs	r3, r3, #16
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
 8008b3c:	e00d      	b.n	8008b5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	3340      	adds	r3, #64	; 0x40
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	0c1b      	lsrs	r3, r3, #16
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	3301      	adds	r3, #1
 8008b58:	73fb      	strb	r3, [r7, #15]
 8008b5a:	7bfa      	ldrb	r2, [r7, #15]
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d3ec      	bcc.n	8008b3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b64:	883b      	ldrh	r3, [r7, #0]
 8008b66:	0418      	lsls	r0, r3, #16
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6819      	ldr	r1, [r3, #0]
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	4302      	orrs	r2, r0
 8008b74:	3340      	adds	r3, #64	; 0x40
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	887a      	ldrh	r2, [r7, #2]
 8008b9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e267      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d075      	beq.n	8008cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008be2:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 030c 	and.w	r3, r3, #12
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d00c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bee:	4b85      	ldr	r3, [pc, #532]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d112      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bfa:	4b82      	ldr	r3, [pc, #520]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c06:	d10b      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c08:	4b7e      	ldr	r3, [pc, #504]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05b      	beq.n	8008ccc <HAL_RCC_OscConfig+0x108>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d157      	bne.n	8008ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e242      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c28:	d106      	bne.n	8008c38 <HAL_RCC_OscConfig+0x74>
 8008c2a:	4b76      	ldr	r3, [pc, #472]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a75      	ldr	r2, [pc, #468]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e01d      	b.n	8008c74 <HAL_RCC_OscConfig+0xb0>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c40:	d10c      	bne.n	8008c5c <HAL_RCC_OscConfig+0x98>
 8008c42:	4b70      	ldr	r3, [pc, #448]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a6f      	ldr	r2, [pc, #444]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	4b6d      	ldr	r3, [pc, #436]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a6c      	ldr	r2, [pc, #432]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e00b      	b.n	8008c74 <HAL_RCC_OscConfig+0xb0>
 8008c5c:	4b69      	ldr	r3, [pc, #420]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a68      	ldr	r2, [pc, #416]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b66      	ldr	r3, [pc, #408]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d013      	beq.n	8008ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c7c:	f7fb f898 	bl	8003db0 <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c84:	f7fb f894 	bl	8003db0 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b64      	cmp	r3, #100	; 0x64
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e207      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c96:	4b5b      	ldr	r3, [pc, #364]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0xc0>
 8008ca2:	e014      	b.n	8008cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca4:	f7fb f884 	bl	8003db0 <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cac:	f7fb f880 	bl	8003db0 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b64      	cmp	r3, #100	; 0x64
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e1f3      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cbe:	4b51      	ldr	r3, [pc, #324]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0xe8>
 8008cca:	e000      	b.n	8008cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d063      	beq.n	8008da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cda:	4b4a      	ldr	r3, [pc, #296]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 030c 	and.w	r3, r3, #12
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ce6:	4b47      	ldr	r3, [pc, #284]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	d11c      	bne.n	8008d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cf2:	4b44      	ldr	r3, [pc, #272]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d116      	bne.n	8008d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cfe:	4b41      	ldr	r3, [pc, #260]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_RCC_OscConfig+0x152>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d001      	beq.n	8008d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e1c7      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d16:	4b3b      	ldr	r3, [pc, #236]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	4937      	ldr	r1, [pc, #220]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d2a:	e03a      	b.n	8008da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d020      	beq.n	8008d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d34:	4b34      	ldr	r3, [pc, #208]	; (8008e08 <HAL_RCC_OscConfig+0x244>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3a:	f7fb f839 	bl	8003db0 <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d40:	e008      	b.n	8008d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d42:	f7fb f835 	bl	8003db0 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e1a8      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d54:	4b2b      	ldr	r3, [pc, #172]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f0      	beq.n	8008d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	4925      	ldr	r1, [pc, #148]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	600b      	str	r3, [r1, #0]
 8008d74:	e015      	b.n	8008da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <HAL_RCC_OscConfig+0x244>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7c:	f7fb f818 	bl	8003db0 <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d84:	f7fb f814 	bl	8003db0 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e187      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d96:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1f0      	bne.n	8008d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d036      	beq.n	8008e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d016      	beq.n	8008de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008db6:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <HAL_RCC_OscConfig+0x248>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dbc:	f7fa fff8 	bl	8003db0 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc4:	f7fa fff4 	bl	8003db0 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e167      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCC_OscConfig+0x240>)
 8008dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f0      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x200>
 8008de2:	e01b      	b.n	8008e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_RCC_OscConfig+0x248>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dea:	f7fa ffe1 	bl	8003db0 <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008df0:	e00e      	b.n	8008e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008df2:	f7fa ffdd 	bl	8003db0 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d907      	bls.n	8008e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e150      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8008e04:	40023800 	.word	0x40023800
 8008e08:	42470000 	.word	0x42470000
 8008e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e10:	4b88      	ldr	r3, [pc, #544]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1ea      	bne.n	8008df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8097 	beq.w	8008f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e2e:	4b81      	ldr	r3, [pc, #516]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10f      	bne.n	8008e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	4b7d      	ldr	r3, [pc, #500]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	4a7c      	ldr	r2, [pc, #496]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e48:	6413      	str	r3, [r2, #64]	; 0x40
 8008e4a:	4b7a      	ldr	r3, [pc, #488]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e52:	60bb      	str	r3, [r7, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e5a:	4b77      	ldr	r3, [pc, #476]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d118      	bne.n	8008e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e66:	4b74      	ldr	r3, [pc, #464]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a73      	ldr	r2, [pc, #460]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e72:	f7fa ff9d 	bl	8003db0 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e78:	e008      	b.n	8008e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e7a:	f7fa ff99 	bl	8003db0 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e10c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e8c:	4b6a      	ldr	r3, [pc, #424]	; (8009038 <HAL_RCC_OscConfig+0x474>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <HAL_RCC_OscConfig+0x2ea>
 8008ea0:	4b64      	ldr	r3, [pc, #400]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea4:	4a63      	ldr	r2, [pc, #396]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	f043 0301 	orr.w	r3, r3, #1
 8008eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8008eac:	e01c      	b.n	8008ee8 <HAL_RCC_OscConfig+0x324>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x30c>
 8008eb6:	4b5f      	ldr	r3, [pc, #380]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	4a5e      	ldr	r2, [pc, #376]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ebc:	f043 0304 	orr.w	r3, r3, #4
 8008ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ec2:	4b5c      	ldr	r3, [pc, #368]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	4a5b      	ldr	r2, [pc, #364]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ece:	e00b      	b.n	8008ee8 <HAL_RCC_OscConfig+0x324>
 8008ed0:	4b58      	ldr	r3, [pc, #352]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	4a57      	ldr	r2, [pc, #348]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	6713      	str	r3, [r2, #112]	; 0x70
 8008edc:	4b55      	ldr	r3, [pc, #340]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	4a54      	ldr	r2, [pc, #336]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	f023 0304 	bic.w	r3, r3, #4
 8008ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d015      	beq.n	8008f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ef0:	f7fa ff5e 	bl	8003db0 <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ef6:	e00a      	b.n	8008f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ef8:	f7fa ff5a 	bl	8003db0 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e0cb      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f0e:	4b49      	ldr	r3, [pc, #292]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0ee      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x334>
 8008f1a:	e014      	b.n	8008f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f1c:	f7fa ff48 	bl	8003db0 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f22:	e00a      	b.n	8008f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f24:	f7fa ff44 	bl	8003db0 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e0b5      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f3a:	4b3e      	ldr	r3, [pc, #248]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1ee      	bne.n	8008f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d105      	bne.n	8008f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f4c:	4b39      	ldr	r3, [pc, #228]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	4a38      	ldr	r2, [pc, #224]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80a1 	beq.w	80090a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f62:	4b34      	ldr	r3, [pc, #208]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d05c      	beq.n	8009028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d141      	bne.n	8008ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f76:	4b31      	ldr	r3, [pc, #196]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f7c:	f7fa ff18 	bl	8003db0 <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f84:	f7fa ff14 	bl	8003db0 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e087      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69da      	ldr	r2, [r3, #28]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	019b      	lsls	r3, r3, #6
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	491b      	ldr	r1, [pc, #108]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fcc:	4b1b      	ldr	r3, [pc, #108]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd2:	f7fa feed 	bl	8003db0 <HAL_GetTick>
 8008fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fd8:	e008      	b.n	8008fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fda:	f7fa fee9 	bl	8003db0 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e05c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fec:	4b11      	ldr	r3, [pc, #68]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0f0      	beq.n	8008fda <HAL_RCC_OscConfig+0x416>
 8008ff8:	e054      	b.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <HAL_RCC_OscConfig+0x478>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009000:	f7fa fed6 	bl	8003db0 <HAL_GetTick>
 8009004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009008:	f7fa fed2 	bl	8003db0 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e045      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <HAL_RCC_OscConfig+0x470>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f0      	bne.n	8009008 <HAL_RCC_OscConfig+0x444>
 8009026:	e03d      	b.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d107      	bne.n	8009040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e038      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
 8009034:	40023800 	.word	0x40023800
 8009038:	40007000 	.word	0x40007000
 800903c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009040:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d028      	beq.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009058:	429a      	cmp	r2, r3
 800905a:	d121      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009066:	429a      	cmp	r2, r3
 8009068:	d11a      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009070:	4013      	ands	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009078:	4293      	cmp	r3, r2
 800907a:	d111      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	3b01      	subs	r3, #1
 800908a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800908c:	429a      	cmp	r2, r3
 800908e:	d107      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40023800 	.word	0x40023800

080090b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e0cc      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090c8:	4b68      	ldr	r3, [pc, #416]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d90c      	bls.n	80090f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d6:	4b65      	ldr	r3, [pc, #404]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090de:	4b63      	ldr	r3, [pc, #396]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0b8      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009108:	4b59      	ldr	r3, [pc, #356]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	4a58      	ldr	r2, [pc, #352]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009120:	4b53      	ldr	r3, [pc, #332]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4a52      	ldr	r2, [pc, #328]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800912a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800912c:	4b50      	ldr	r3, [pc, #320]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	494d      	ldr	r1, [pc, #308]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800913a:	4313      	orrs	r3, r2
 800913c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d044      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d107      	bne.n	8009162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009152:	4b47      	ldr	r3, [pc, #284]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d119      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e07f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d003      	beq.n	8009172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800916e:	2b03      	cmp	r3, #3
 8009170:	d107      	bne.n	8009182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009172:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d109      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e06f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009182:	4b3b      	ldr	r3, [pc, #236]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e067      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009192:	4b37      	ldr	r3, [pc, #220]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f023 0203 	bic.w	r2, r3, #3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4934      	ldr	r1, [pc, #208]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091a4:	f7fa fe04 	bl	8003db0 <HAL_GetTick>
 80091a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091aa:	e00a      	b.n	80091c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091ac:	f7fa fe00 	bl	8003db0 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e04f      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091c2:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 020c 	and.w	r2, r3, #12
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d1eb      	bne.n	80091ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d20c      	bcs.n	80091fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	b2d2      	uxtb	r2, r2
 80091e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ea:	4b20      	ldr	r3, [pc, #128]	; (800926c <HAL_RCC_ClockConfig+0x1b8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e032      	b.n	8009262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009208:	4b19      	ldr	r3, [pc, #100]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	4916      	ldr	r1, [pc, #88]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	4313      	orrs	r3, r2
 8009218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	490e      	ldr	r1, [pc, #56]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009236:	4313      	orrs	r3, r2
 8009238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800923a:	f000 f821 	bl	8009280 <HAL_RCC_GetSysClockFreq>
 800923e:	4602      	mov	r2, r0
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	490a      	ldr	r1, [pc, #40]	; (8009274 <HAL_RCC_ClockConfig+0x1c0>)
 800924c:	5ccb      	ldrb	r3, [r1, r3]
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	4a09      	ldr	r2, [pc, #36]	; (8009278 <HAL_RCC_ClockConfig+0x1c4>)
 8009254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <HAL_RCC_ClockConfig+0x1c8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f7fa fd64 	bl	8003d28 <HAL_InitTick>

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40023c00 	.word	0x40023c00
 8009270:	40023800 	.word	0x40023800
 8009274:	0801b674 	.word	0x0801b674
 8009278:	20000000 	.word	0x20000000
 800927c:	20000004 	.word	0x20000004

08009280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009284:	b090      	sub	sp, #64	; 0x40
 8009286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	637b      	str	r3, [r7, #52]	; 0x34
 800928c:	2300      	movs	r3, #0
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009290:	2300      	movs	r3, #0
 8009292:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009298:	4b59      	ldr	r3, [pc, #356]	; (8009400 <HAL_RCC_GetSysClockFreq+0x180>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 030c 	and.w	r3, r3, #12
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d00d      	beq.n	80092c0 <HAL_RCC_GetSysClockFreq+0x40>
 80092a4:	2b08      	cmp	r3, #8
 80092a6:	f200 80a1 	bhi.w	80093ec <HAL_RCC_GetSysClockFreq+0x16c>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <HAL_RCC_GetSysClockFreq+0x34>
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d003      	beq.n	80092ba <HAL_RCC_GetSysClockFreq+0x3a>
 80092b2:	e09b      	b.n	80093ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092b4:	4b53      	ldr	r3, [pc, #332]	; (8009404 <HAL_RCC_GetSysClockFreq+0x184>)
 80092b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80092b8:	e09b      	b.n	80093f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092ba:	4b53      	ldr	r3, [pc, #332]	; (8009408 <HAL_RCC_GetSysClockFreq+0x188>)
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092be:	e098      	b.n	80093f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092c0:	4b4f      	ldr	r3, [pc, #316]	; (8009400 <HAL_RCC_GetSysClockFreq+0x180>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092ca:	4b4d      	ldr	r3, [pc, #308]	; (8009400 <HAL_RCC_GetSysClockFreq+0x180>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d028      	beq.n	8009328 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092d6:	4b4a      	ldr	r3, [pc, #296]	; (8009400 <HAL_RCC_GetSysClockFreq+0x180>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	2200      	movs	r2, #0
 80092de:	623b      	str	r3, [r7, #32]
 80092e0:	627a      	str	r2, [r7, #36]	; 0x24
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80092e8:	2100      	movs	r1, #0
 80092ea:	4b47      	ldr	r3, [pc, #284]	; (8009408 <HAL_RCC_GetSysClockFreq+0x188>)
 80092ec:	fb03 f201 	mul.w	r2, r3, r1
 80092f0:	2300      	movs	r3, #0
 80092f2:	fb00 f303 	mul.w	r3, r0, r3
 80092f6:	4413      	add	r3, r2
 80092f8:	4a43      	ldr	r2, [pc, #268]	; (8009408 <HAL_RCC_GetSysClockFreq+0x188>)
 80092fa:	fba0 1202 	umull	r1, r2, r0, r2
 80092fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009300:	460a      	mov	r2, r1
 8009302:	62ba      	str	r2, [r7, #40]	; 0x28
 8009304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009306:	4413      	add	r3, r2
 8009308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	2200      	movs	r2, #0
 800930e:	61bb      	str	r3, [r7, #24]
 8009310:	61fa      	str	r2, [r7, #28]
 8009312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800931a:	f7f7 fcb1 	bl	8000c80 <__aeabi_uldivmod>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4613      	mov	r3, r2
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009326:	e053      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009328:	4b35      	ldr	r3, [pc, #212]	; (8009400 <HAL_RCC_GetSysClockFreq+0x180>)
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	099b      	lsrs	r3, r3, #6
 800932e:	2200      	movs	r2, #0
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	617a      	str	r2, [r7, #20]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800933a:	f04f 0b00 	mov.w	fp, #0
 800933e:	4652      	mov	r2, sl
 8009340:	465b      	mov	r3, fp
 8009342:	f04f 0000 	mov.w	r0, #0
 8009346:	f04f 0100 	mov.w	r1, #0
 800934a:	0159      	lsls	r1, r3, #5
 800934c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009350:	0150      	lsls	r0, r2, #5
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	ebb2 080a 	subs.w	r8, r2, sl
 800935a:	eb63 090b 	sbc.w	r9, r3, fp
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800936a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800936e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009372:	ebb2 0408 	subs.w	r4, r2, r8
 8009376:	eb63 0509 	sbc.w	r5, r3, r9
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	00eb      	lsls	r3, r5, #3
 8009384:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009388:	00e2      	lsls	r2, r4, #3
 800938a:	4614      	mov	r4, r2
 800938c:	461d      	mov	r5, r3
 800938e:	eb14 030a 	adds.w	r3, r4, sl
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	eb45 030b 	adc.w	r3, r5, fp
 8009398:	607b      	str	r3, [r7, #4]
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093a6:	4629      	mov	r1, r5
 80093a8:	028b      	lsls	r3, r1, #10
 80093aa:	4621      	mov	r1, r4
 80093ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093b0:	4621      	mov	r1, r4
 80093b2:	028a      	lsls	r2, r1, #10
 80093b4:	4610      	mov	r0, r2
 80093b6:	4619      	mov	r1, r3
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	2200      	movs	r2, #0
 80093bc:	60bb      	str	r3, [r7, #8]
 80093be:	60fa      	str	r2, [r7, #12]
 80093c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093c4:	f7f7 fc5c 	bl	8000c80 <__aeabi_uldivmod>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4613      	mov	r3, r2
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <HAL_RCC_GetSysClockFreq+0x180>)
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	0c1b      	lsrs	r3, r3, #16
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	3301      	adds	r3, #1
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80093e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80093ea:	e002      	b.n	80093f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_RCC_GetSysClockFreq+0x184>)
 80093ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80093f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3740      	adds	r7, #64	; 0x40
 80093f8:	46bd      	mov	sp, r7
 80093fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093fe:	bf00      	nop
 8009400:	40023800 	.word	0x40023800
 8009404:	00f42400 	.word	0x00f42400
 8009408:	017d7840 	.word	0x017d7840

0800940c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009410:	4b03      	ldr	r3, [pc, #12]	; (8009420 <HAL_RCC_GetHCLKFreq+0x14>)
 8009412:	681b      	ldr	r3, [r3, #0]
}
 8009414:	4618      	mov	r0, r3
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20000000 	.word	0x20000000

08009424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009428:	f7ff fff0 	bl	800940c <HAL_RCC_GetHCLKFreq>
 800942c:	4602      	mov	r2, r0
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	0a9b      	lsrs	r3, r3, #10
 8009434:	f003 0307 	and.w	r3, r3, #7
 8009438:	4903      	ldr	r1, [pc, #12]	; (8009448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800943a:	5ccb      	ldrb	r3, [r1, r3]
 800943c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009440:	4618      	mov	r0, r3
 8009442:	bd80      	pop	{r7, pc}
 8009444:	40023800 	.word	0x40023800
 8009448:	0801b684 	.word	0x0801b684

0800944c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e07b      	b.n	8009556 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	2b00      	cmp	r3, #0
 8009464:	d108      	bne.n	8009478 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800946e:	d009      	beq.n	8009484 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	61da      	str	r2, [r3, #28]
 8009476:	e005      	b.n	8009484 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7f9 f970 	bl	8002784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094cc:	431a      	orrs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f4:	431a      	orrs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009508:	ea42 0103 	orr.w	r1, r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	f003 0104 	and.w	r1, r3, #4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	f003 0210 	and.w	r2, r3, #16
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69da      	ldr	r2, [r3, #28]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009544:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b088      	sub	sp, #32
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_SPI_Transmit+0x22>
 800957c:	2302      	movs	r3, #2
 800957e:	e126      	b.n	80097ce <HAL_SPI_Transmit+0x270>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009588:	f7fa fc12 	bl	8003db0 <HAL_GetTick>
 800958c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800958e:	88fb      	ldrh	r3, [r7, #6]
 8009590:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b01      	cmp	r3, #1
 800959c:	d002      	beq.n	80095a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800959e:	2302      	movs	r3, #2
 80095a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095a2:	e10b      	b.n	80097bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <HAL_SPI_Transmit+0x52>
 80095aa:	88fb      	ldrh	r3, [r7, #6]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095b4:	e102      	b.n	80097bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2203      	movs	r2, #3
 80095ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	88fa      	ldrh	r2, [r7, #6]
 80095ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	88fa      	ldrh	r2, [r7, #6]
 80095d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095fc:	d10f      	bne.n	800961e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800960c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800961c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009628:	2b40      	cmp	r3, #64	; 0x40
 800962a:	d007      	beq.n	800963c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800963a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009644:	d14b      	bne.n	80096de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <HAL_SPI_Transmit+0xf6>
 800964e:	8afb      	ldrh	r3, [r7, #22]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d13e      	bne.n	80096d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	881a      	ldrh	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	1c9a      	adds	r2, r3, #2
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009678:	e02b      	b.n	80096d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b02      	cmp	r3, #2
 8009686:	d112      	bne.n	80096ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	881a      	ldrh	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	1c9a      	adds	r2, r3, #2
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80096ac:	e011      	b.n	80096d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ae:	f7fa fb7f 	bl	8003db0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d803      	bhi.n	80096c6 <HAL_SPI_Transmit+0x168>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d102      	bne.n	80096cc <HAL_SPI_Transmit+0x16e>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096d0:	e074      	b.n	80097bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1ce      	bne.n	800967a <HAL_SPI_Transmit+0x11c>
 80096dc:	e04c      	b.n	8009778 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <HAL_SPI_Transmit+0x18e>
 80096e6:	8afb      	ldrh	r3, [r7, #22]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d140      	bne.n	800976e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	330c      	adds	r3, #12
 80096f6:	7812      	ldrb	r2, [r2, #0]
 80096f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009712:	e02c      	b.n	800976e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d113      	bne.n	800974a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	330c      	adds	r3, #12
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800973e:	b29b      	uxth	r3, r3
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	86da      	strh	r2, [r3, #54]	; 0x36
 8009748:	e011      	b.n	800976e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800974a:	f7fa fb31 	bl	8003db0 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d803      	bhi.n	8009762 <HAL_SPI_Transmit+0x204>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009760:	d102      	bne.n	8009768 <HAL_SPI_Transmit+0x20a>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800976c:	e026      	b.n	80097bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1cd      	bne.n	8009714 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fbcb 	bl	8009f18 <SPI_EndRxTxTransaction>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2220      	movs	r2, #32
 800978c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009796:	2300      	movs	r3, #0
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	77fb      	strb	r3, [r7, #31]
 80097b8:	e000      	b.n	80097bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80097ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3720      	adds	r7, #32
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b088      	sub	sp, #32
 80097da:	af02      	add	r7, sp, #8
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	4613      	mov	r3, r2
 80097e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097f2:	d112      	bne.n	800981a <HAL_SPI_Receive+0x44>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10e      	bne.n	800981a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2204      	movs	r2, #4
 8009800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009804:	88fa      	ldrh	r2, [r7, #6]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	4613      	mov	r3, r2
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 f8f1 	bl	80099f8 <HAL_SPI_TransmitReceive>
 8009816:	4603      	mov	r3, r0
 8009818:	e0ea      	b.n	80099f0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <HAL_SPI_Receive+0x52>
 8009824:	2302      	movs	r3, #2
 8009826:	e0e3      	b.n	80099f0 <HAL_SPI_Receive+0x21a>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009830:	f7fa fabe 	bl	8003db0 <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b01      	cmp	r3, #1
 8009840:	d002      	beq.n	8009848 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009842:	2302      	movs	r3, #2
 8009844:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009846:	e0ca      	b.n	80099de <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <HAL_SPI_Receive+0x7e>
 800984e:	88fb      	ldrh	r3, [r7, #6]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009858:	e0c1      	b.n	80099de <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2204      	movs	r2, #4
 800985e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	88fa      	ldrh	r2, [r7, #6]
 8009872:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	88fa      	ldrh	r2, [r7, #6]
 8009878:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a0:	d10f      	bne.n	80098c2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d007      	beq.n	80098e0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d162      	bne.n	80099ae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80098e8:	e02e      	b.n	8009948 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d115      	bne.n	8009924 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f103 020c 	add.w	r2, r3, #12
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009904:	7812      	ldrb	r2, [r2, #0]
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009918:	b29b      	uxth	r3, r3
 800991a:	3b01      	subs	r3, #1
 800991c:	b29a      	uxth	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009922:	e011      	b.n	8009948 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009924:	f7fa fa44 	bl	8003db0 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d803      	bhi.n	800993c <HAL_SPI_Receive+0x166>
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d102      	bne.n	8009942 <HAL_SPI_Receive+0x16c>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009946:	e04a      	b.n	80099de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800994c:	b29b      	uxth	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1cb      	bne.n	80098ea <HAL_SPI_Receive+0x114>
 8009952:	e031      	b.n	80099b8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b01      	cmp	r3, #1
 8009960:	d113      	bne.n	800998a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68da      	ldr	r2, [r3, #12]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	b292      	uxth	r2, r2
 800996e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	1c9a      	adds	r2, r3, #2
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800997e:	b29b      	uxth	r3, r3
 8009980:	3b01      	subs	r3, #1
 8009982:	b29a      	uxth	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009988:	e011      	b.n	80099ae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800998a:	f7fa fa11 	bl	8003db0 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d803      	bhi.n	80099a2 <HAL_SPI_Receive+0x1cc>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d102      	bne.n	80099a8 <HAL_SPI_Receive+0x1d2>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80099ac:	e017      	b.n	80099de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1cd      	bne.n	8009954 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fa45 	bl	8009e4c <SPI_EndRxTransaction>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2220      	movs	r2, #32
 80099cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
 80099da:	e000      	b.n	80099de <HAL_SPI_Receive+0x208>
  }

error :
 80099dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08c      	sub	sp, #48	; 0x30
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a06:	2301      	movs	r3, #1
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d101      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x26>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e18a      	b.n	8009d34 <HAL_SPI_TransmitReceive+0x33c>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a26:	f7fa f9c3 	bl	8003db0 <HAL_GetTick>
 8009a2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a3c:	887b      	ldrh	r3, [r7, #2]
 8009a3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d00f      	beq.n	8009a68 <HAL_SPI_TransmitReceive+0x70>
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a4e:	d107      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x68>
 8009a58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d003      	beq.n	8009a68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a60:	2302      	movs	r3, #2
 8009a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a66:	e15b      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <HAL_SPI_TransmitReceive+0x82>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <HAL_SPI_TransmitReceive+0x82>
 8009a74:	887b      	ldrh	r3, [r7, #2]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d103      	bne.n	8009a82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a80:	e14e      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d003      	beq.n	8009a96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2205      	movs	r2, #5
 8009a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	887a      	ldrh	r2, [r7, #2]
 8009aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	887a      	ldrh	r2, [r7, #2]
 8009aac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	887a      	ldrh	r2, [r7, #2]
 8009ab8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	887a      	ldrh	r2, [r7, #2]
 8009abe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad6:	2b40      	cmp	r3, #64	; 0x40
 8009ad8:	d007      	beq.n	8009aea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009af2:	d178      	bne.n	8009be6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <HAL_SPI_TransmitReceive+0x10a>
 8009afc:	8b7b      	ldrh	r3, [r7, #26]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d166      	bne.n	8009bd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	881a      	ldrh	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	1c9a      	adds	r2, r3, #2
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b26:	e053      	b.n	8009bd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d11b      	bne.n	8009b6e <HAL_SPI_TransmitReceive+0x176>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d016      	beq.n	8009b6e <HAL_SPI_TransmitReceive+0x176>
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d113      	bne.n	8009b6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	881a      	ldrh	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b56:	1c9a      	adds	r2, r3, #2
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d119      	bne.n	8009bb0 <HAL_SPI_TransmitReceive+0x1b8>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d014      	beq.n	8009bb0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	b292      	uxth	r2, r2
 8009b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	1c9a      	adds	r2, r3, #2
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bac:	2301      	movs	r3, #1
 8009bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009bb0:	f7fa f8fe 	bl	8003db0 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d807      	bhi.n	8009bd0 <HAL_SPI_TransmitReceive+0x1d8>
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc6:	d003      	beq.n	8009bd0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009bce:	e0a7      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1a6      	bne.n	8009b28 <HAL_SPI_TransmitReceive+0x130>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1a1      	bne.n	8009b28 <HAL_SPI_TransmitReceive+0x130>
 8009be4:	e07c      	b.n	8009ce0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <HAL_SPI_TransmitReceive+0x1fc>
 8009bee:	8b7b      	ldrh	r3, [r7, #26]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d16b      	bne.n	8009ccc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	330c      	adds	r3, #12
 8009bfe:	7812      	ldrb	r2, [r2, #0]
 8009c00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c1a:	e057      	b.n	8009ccc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d11c      	bne.n	8009c64 <HAL_SPI_TransmitReceive+0x26c>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d017      	beq.n	8009c64 <HAL_SPI_TransmitReceive+0x26c>
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d114      	bne.n	8009c64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	330c      	adds	r3, #12
 8009c44:	7812      	ldrb	r2, [r2, #0]
 8009c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d119      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x2ae>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d014      	beq.n	8009ca6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ca6:	f7fa f883 	bl	8003db0 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d803      	bhi.n	8009cbe <HAL_SPI_TransmitReceive+0x2c6>
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d102      	bne.n	8009cc4 <HAL_SPI_TransmitReceive+0x2cc>
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009cca:	e029      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1a2      	bne.n	8009c1c <HAL_SPI_TransmitReceive+0x224>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d19d      	bne.n	8009c1c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f917 	bl	8009f18 <SPI_EndRxTxTransaction>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d006      	beq.n	8009cfe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009cfc:	e010      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10b      	bne.n	8009d1e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	e000      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009d1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3730      	adds	r7, #48	; 0x30
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d4c:	f7fa f830 	bl	8003db0 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	4413      	add	r3, r2
 8009d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d5c:	f7fa f828 	bl	8003db0 <HAL_GetTick>
 8009d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d62:	4b39      	ldr	r3, [pc, #228]	; (8009e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	015b      	lsls	r3, r3, #5
 8009d68:	0d1b      	lsrs	r3, r3, #20
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
 8009d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d72:	e054      	b.n	8009e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d050      	beq.n	8009e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d7c:	f7fa f818 	bl	8003db0 <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d902      	bls.n	8009d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d13d      	bne.n	8009e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009daa:	d111      	bne.n	8009dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db4:	d004      	beq.n	8009dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dbe:	d107      	bne.n	8009dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd8:	d10f      	bne.n	8009dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e017      	b.n	8009e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	4013      	ands	r3, r2
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	bf0c      	ite	eq
 8009e2e:	2301      	moveq	r3, #1
 8009e30:	2300      	movne	r3, #0
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	461a      	mov	r2, r3
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d19b      	bne.n	8009d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000000 	.word	0x20000000

08009e4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e60:	d111      	bne.n	8009e86 <SPI_EndRxTransaction+0x3a>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6a:	d004      	beq.n	8009e76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e74:	d107      	bne.n	8009e86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e8e:	d12a      	bne.n	8009ee6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e98:	d012      	beq.n	8009ec0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2180      	movs	r1, #128	; 0x80
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff ff49 	bl	8009d3c <SPI_WaitFlagStateUntilTimeout>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d02d      	beq.n	8009f0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb4:	f043 0220 	orr.w	r2, r3, #32
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e026      	b.n	8009f0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2101      	movs	r1, #1
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff ff36 	bl	8009d3c <SPI_WaitFlagStateUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01a      	beq.n	8009f0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eda:	f043 0220 	orr.w	r2, r3, #32
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e013      	b.n	8009f0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2101      	movs	r1, #1
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff ff23 	bl	8009d3c <SPI_WaitFlagStateUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d007      	beq.n	8009f0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f00:	f043 0220 	orr.w	r2, r3, #32
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e000      	b.n	8009f0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f24:	4b1b      	ldr	r3, [pc, #108]	; (8009f94 <SPI_EndRxTxTransaction+0x7c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1b      	ldr	r2, [pc, #108]	; (8009f98 <SPI_EndRxTxTransaction+0x80>)
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2e:	0d5b      	lsrs	r3, r3, #21
 8009f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f34:	fb02 f303 	mul.w	r3, r2, r3
 8009f38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f42:	d112      	bne.n	8009f6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2180      	movs	r1, #128	; 0x80
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff fef4 	bl	8009d3c <SPI_WaitFlagStateUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d016      	beq.n	8009f88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	f043 0220 	orr.w	r2, r3, #32
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e00f      	b.n	8009f8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00a      	beq.n	8009f86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f80:	2b80      	cmp	r3, #128	; 0x80
 8009f82:	d0f2      	beq.n	8009f6a <SPI_EndRxTxTransaction+0x52>
 8009f84:	e000      	b.n	8009f88 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f86:	bf00      	nop
  }

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20000000 	.word	0x20000000
 8009f98:	165e9f81 	.word	0x165e9f81

08009f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e041      	b.n	800a032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7f8 fec6 	bl	8002d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f000 feea 	bl	800adb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d001      	beq.n	800a054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e044      	b.n	800a0de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a1e      	ldr	r2, [pc, #120]	; (800a0ec <HAL_TIM_Base_Start_IT+0xb0>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d018      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07e:	d013      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a1a      	ldr	r2, [pc, #104]	; (800a0f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00e      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a19      	ldr	r2, [pc, #100]	; (800a0f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d009      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a16      	ldr	r2, [pc, #88]	; (800a0fc <HAL_TIM_Base_Start_IT+0xc0>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d111      	bne.n	800a0cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 0307 	and.w	r3, r3, #7
 800a0b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b06      	cmp	r3, #6
 800a0b8:	d010      	beq.n	800a0dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0201 	orr.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ca:	e007      	b.n	800a0dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40014000 	.word	0x40014000

0800a100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e041      	b.n	800a196 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d106      	bne.n	800a12c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7f8 fdc0 	bl	8002cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f000 fe38 	bl	800adb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d109      	bne.n	800a1cc <HAL_TIM_PWM_Start_DMA+0x2c>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	bf0c      	ite	eq
 800a1c4:	2301      	moveq	r3, #1
 800a1c6:	2300      	movne	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	e022      	b.n	800a212 <HAL_TIM_PWM_Start_DMA+0x72>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d109      	bne.n	800a1e6 <HAL_TIM_PWM_Start_DMA+0x46>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	bf0c      	ite	eq
 800a1de:	2301      	moveq	r3, #1
 800a1e0:	2300      	movne	r3, #0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	e015      	b.n	800a212 <HAL_TIM_PWM_Start_DMA+0x72>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b08      	cmp	r3, #8
 800a1ea:	d109      	bne.n	800a200 <HAL_TIM_PWM_Start_DMA+0x60>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	bf0c      	ite	eq
 800a1f8:	2301      	moveq	r3, #1
 800a1fa:	2300      	movne	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	e008      	b.n	800a212 <HAL_TIM_PWM_Start_DMA+0x72>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	bf0c      	ite	eq
 800a20c:	2301      	moveq	r3, #1
 800a20e:	2300      	movne	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800a216:	2302      	movs	r3, #2
 800a218:	e15d      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d109      	bne.n	800a234 <HAL_TIM_PWM_Start_DMA+0x94>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	bf0c      	ite	eq
 800a22c:	2301      	moveq	r3, #1
 800a22e:	2300      	movne	r3, #0
 800a230:	b2db      	uxtb	r3, r3
 800a232:	e022      	b.n	800a27a <HAL_TIM_PWM_Start_DMA+0xda>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b04      	cmp	r3, #4
 800a238:	d109      	bne.n	800a24e <HAL_TIM_PWM_Start_DMA+0xae>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b01      	cmp	r3, #1
 800a244:	bf0c      	ite	eq
 800a246:	2301      	moveq	r3, #1
 800a248:	2300      	movne	r3, #0
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	e015      	b.n	800a27a <HAL_TIM_PWM_Start_DMA+0xda>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b08      	cmp	r3, #8
 800a252:	d109      	bne.n	800a268 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	e008      	b.n	800a27a <HAL_TIM_PWM_Start_DMA+0xda>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b01      	cmp	r3, #1
 800a272:	bf0c      	ite	eq
 800a274:	2301      	moveq	r3, #1
 800a276:	2300      	movne	r3, #0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d024      	beq.n	800a2c8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d104      	bne.n	800a28e <HAL_TIM_PWM_Start_DMA+0xee>
 800a284:	887b      	ldrh	r3, [r7, #2]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e123      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d104      	bne.n	800a29e <HAL_TIM_PWM_Start_DMA+0xfe>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a29c:	e016      	b.n	800a2cc <HAL_TIM_PWM_Start_DMA+0x12c>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d104      	bne.n	800a2ae <HAL_TIM_PWM_Start_DMA+0x10e>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2ac:	e00e      	b.n	800a2cc <HAL_TIM_PWM_Start_DMA+0x12c>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d104      	bne.n	800a2be <HAL_TIM_PWM_Start_DMA+0x11e>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2bc:	e006      	b.n	800a2cc <HAL_TIM_PWM_Start_DMA+0x12c>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2c6:	e001      	b.n	800a2cc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e104      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b0c      	cmp	r3, #12
 800a2d0:	f200 80ae 	bhi.w	800a430 <HAL_TIM_PWM_Start_DMA+0x290>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <HAL_TIM_PWM_Start_DMA+0x13c>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a311 	.word	0x0800a311
 800a2e0:	0800a431 	.word	0x0800a431
 800a2e4:	0800a431 	.word	0x0800a431
 800a2e8:	0800a431 	.word	0x0800a431
 800a2ec:	0800a359 	.word	0x0800a359
 800a2f0:	0800a431 	.word	0x0800a431
 800a2f4:	0800a431 	.word	0x0800a431
 800a2f8:	0800a431 	.word	0x0800a431
 800a2fc:	0800a3a1 	.word	0x0800a3a1
 800a300:	0800a431 	.word	0x0800a431
 800a304:	0800a431 	.word	0x0800a431
 800a308:	0800a431 	.word	0x0800a431
 800a30c:	0800a3e9 	.word	0x0800a3e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	4a72      	ldr	r2, [pc, #456]	; (800a4e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800a316:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	4a71      	ldr	r2, [pc, #452]	; (800a4e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800a31e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	4a70      	ldr	r2, [pc, #448]	; (800a4e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800a326:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3334      	adds	r3, #52	; 0x34
 800a334:	461a      	mov	r2, r3
 800a336:	887b      	ldrh	r3, [r7, #2]
 800a338:	f7f9 ff2a 	bl	8004190 <HAL_DMA_Start_IT>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e0c7      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a354:	60da      	str	r2, [r3, #12]
      break;
 800a356:	e06e      	b.n	800a436 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35c:	4a60      	ldr	r2, [pc, #384]	; (800a4e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800a35e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	4a5f      	ldr	r2, [pc, #380]	; (800a4e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800a366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	4a5e      	ldr	r2, [pc, #376]	; (800a4e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800a36e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3338      	adds	r3, #56	; 0x38
 800a37c:	461a      	mov	r2, r3
 800a37e:	887b      	ldrh	r3, [r7, #2]
 800a380:	f7f9 ff06 	bl	8004190 <HAL_DMA_Start_IT>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e0a3      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a39c:	60da      	str	r2, [r3, #12]
      break;
 800a39e:	e04a      	b.n	800a436 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	4a4e      	ldr	r2, [pc, #312]	; (800a4e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800a3a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	4a4d      	ldr	r2, [pc, #308]	; (800a4e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800a3ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	4a4c      	ldr	r2, [pc, #304]	; (800a4e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800a3b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	333c      	adds	r3, #60	; 0x3c
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	887b      	ldrh	r3, [r7, #2]
 800a3c8:	f7f9 fee2 	bl	8004190 <HAL_DMA_Start_IT>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e07f      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3e4:	60da      	str	r2, [r3, #12]
      break;
 800a3e6:	e026      	b.n	800a436 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ec:	4a3c      	ldr	r2, [pc, #240]	; (800a4e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800a3ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	4a3b      	ldr	r2, [pc, #236]	; (800a4e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800a3f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fc:	4a3a      	ldr	r2, [pc, #232]	; (800a4e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800a3fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a404:	6879      	ldr	r1, [r7, #4]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3340      	adds	r3, #64	; 0x40
 800a40c:	461a      	mov	r2, r3
 800a40e:	887b      	ldrh	r3, [r7, #2]
 800a410:	f7f9 febe 	bl	8004190 <HAL_DMA_Start_IT>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e05b      	b.n	800a4d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68da      	ldr	r2, [r3, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a42c:	60da      	str	r2, [r3, #12]
      break;
 800a42e:	e002      	b.n	800a436 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	75fb      	strb	r3, [r7, #23]
      break;
 800a434:	bf00      	nop
  }

  if (status == HAL_OK)
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d14b      	bne.n	800a4d4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2201      	movs	r2, #1
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 ff5b 	bl	800b300 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a27      	ldr	r2, [pc, #156]	; (800a4ec <HAL_TIM_PWM_Start_DMA+0x34c>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d107      	bne.n	800a464 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a462:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a20      	ldr	r2, [pc, #128]	; (800a4ec <HAL_TIM_PWM_Start_DMA+0x34c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d018      	beq.n	800a4a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a476:	d013      	beq.n	800a4a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00e      	beq.n	800a4a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1b      	ldr	r2, [pc, #108]	; (800a4f4 <HAL_TIM_PWM_Start_DMA+0x354>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d009      	beq.n	800a4a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a19      	ldr	r2, [pc, #100]	; (800a4f8 <HAL_TIM_PWM_Start_DMA+0x358>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d004      	beq.n	800a4a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a18      	ldr	r2, [pc, #96]	; (800a4fc <HAL_TIM_PWM_Start_DMA+0x35c>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d111      	bne.n	800a4c4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2b06      	cmp	r3, #6
 800a4b0:	d010      	beq.n	800a4d4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f042 0201 	orr.w	r2, r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c2:	e007      	b.n	800a4d4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800aca5 	.word	0x0800aca5
 800a4e4:	0800ad4d 	.word	0x0800ad4d
 800a4e8:	0800ac13 	.word	0x0800ac13
 800a4ec:	40010000 	.word	0x40010000
 800a4f0:	40000400 	.word	0x40000400
 800a4f4:	40000800 	.word	0x40000800
 800a4f8:	40000c00 	.word	0x40000c00
 800a4fc:	40014000 	.word	0x40014000

0800a500 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b0c      	cmp	r3, #12
 800a512:	d855      	bhi.n	800a5c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800a514:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a551 	.word	0x0800a551
 800a520:	0800a5c1 	.word	0x0800a5c1
 800a524:	0800a5c1 	.word	0x0800a5c1
 800a528:	0800a5c1 	.word	0x0800a5c1
 800a52c:	0800a56d 	.word	0x0800a56d
 800a530:	0800a5c1 	.word	0x0800a5c1
 800a534:	0800a5c1 	.word	0x0800a5c1
 800a538:	0800a5c1 	.word	0x0800a5c1
 800a53c:	0800a589 	.word	0x0800a589
 800a540:	0800a5c1 	.word	0x0800a5c1
 800a544:	0800a5c1 	.word	0x0800a5c1
 800a548:	0800a5c1 	.word	0x0800a5c1
 800a54c:	0800a5a5 	.word	0x0800a5a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a55e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	4618      	mov	r0, r3
 800a566:	f7f9 fe6b 	bl	8004240 <HAL_DMA_Abort_IT>
      break;
 800a56a:	e02c      	b.n	800a5c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a57a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	4618      	mov	r0, r3
 800a582:	f7f9 fe5d 	bl	8004240 <HAL_DMA_Abort_IT>
      break;
 800a586:	e01e      	b.n	800a5c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a596:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f9 fe4f 	bl	8004240 <HAL_DMA_Abort_IT>
      break;
 800a5a2:	e010      	b.n	800a5c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a5b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7f9 fe41 	bl	8004240 <HAL_DMA_Abort_IT>
      break;
 800a5be:	e002      	b.n	800a5c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c4:	bf00      	nop
  }

  if (status == HAL_OK)
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d157      	bne.n	800a67c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fe93 	bl	800b300 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a2a      	ldr	r2, [pc, #168]	; (800a688 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d117      	bne.n	800a614 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6a1a      	ldr	r2, [r3, #32]
 800a5ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10f      	bne.n	800a614 <HAL_TIM_PWM_Stop_DMA+0x114>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6a1a      	ldr	r2, [r3, #32]
 800a5fa:	f240 4344 	movw	r3, #1092	; 0x444
 800a5fe:	4013      	ands	r3, r2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d107      	bne.n	800a614 <HAL_TIM_PWM_Stop_DMA+0x114>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a612:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6a1a      	ldr	r2, [r3, #32]
 800a61a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10f      	bne.n	800a644 <HAL_TIM_PWM_Stop_DMA+0x144>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	f240 4344 	movw	r3, #1092	; 0x444
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d107      	bne.n	800a644 <HAL_TIM_PWM_Stop_DMA+0x144>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 0201 	bic.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d104      	bne.n	800a654 <HAL_TIM_PWM_Stop_DMA+0x154>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a652:	e013      	b.n	800a67c <HAL_TIM_PWM_Stop_DMA+0x17c>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b04      	cmp	r3, #4
 800a658:	d104      	bne.n	800a664 <HAL_TIM_PWM_Stop_DMA+0x164>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a662:	e00b      	b.n	800a67c <HAL_TIM_PWM_Stop_DMA+0x17c>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b08      	cmp	r3, #8
 800a668:	d104      	bne.n	800a674 <HAL_TIM_PWM_Stop_DMA+0x174>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a672:	e003      	b.n	800a67c <HAL_TIM_PWM_Stop_DMA+0x17c>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	40010000 	.word	0x40010000

0800a68c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d122      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d11b      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0202 	mvn.w	r2, #2
 800a6b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa77 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fa69 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7f7 f8b9 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d122      	bne.n	800a73c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f003 0304 	and.w	r3, r3, #4
 800a700:	2b04      	cmp	r3, #4
 800a702:	d11b      	bne.n	800a73c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0204 	mvn.w	r2, #4
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fa4d 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fa3f 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7f7 f88f 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	2b08      	cmp	r3, #8
 800a748:	d122      	bne.n	800a790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b08      	cmp	r3, #8
 800a756:	d11b      	bne.n	800a790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0208 	mvn.w	r2, #8
 800a760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2204      	movs	r2, #4
 800a766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa23 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800a77c:	e005      	b.n	800a78a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa15 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7f7 f865 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0310 	and.w	r3, r3, #16
 800a79a:	2b10      	cmp	r3, #16
 800a79c:	d122      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0210 	mvn.w	r2, #16
 800a7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9f9 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f9eb 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7f7 f83b 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d10e      	bne.n	800a810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d107      	bne.n	800a810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0201 	mvn.w	r2, #1
 800a808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7f7 fb9e 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81a:	2b80      	cmp	r3, #128	; 0x80
 800a81c:	d10e      	bne.n	800a83c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	d107      	bne.n	800a83c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fe52 	bl	800b4e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a846:	2b40      	cmp	r3, #64	; 0x40
 800a848:	d10e      	bne.n	800a868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a854:	2b40      	cmp	r3, #64	; 0x40
 800a856:	d107      	bne.n	800a868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f9c1 	bl	800abea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b20      	cmp	r3, #32
 800a874:	d10e      	bne.n	800a894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b20      	cmp	r3, #32
 800a882:	d107      	bne.n	800a894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f06f 0220 	mvn.w	r2, #32
 800a88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fe1c 	bl	800b4cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e0ae      	b.n	800aa18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b0c      	cmp	r3, #12
 800a8c6:	f200 809f 	bhi.w	800aa08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a8ca:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a905 	.word	0x0800a905
 800a8d4:	0800aa09 	.word	0x0800aa09
 800a8d8:	0800aa09 	.word	0x0800aa09
 800a8dc:	0800aa09 	.word	0x0800aa09
 800a8e0:	0800a945 	.word	0x0800a945
 800a8e4:	0800aa09 	.word	0x0800aa09
 800a8e8:	0800aa09 	.word	0x0800aa09
 800a8ec:	0800aa09 	.word	0x0800aa09
 800a8f0:	0800a987 	.word	0x0800a987
 800a8f4:	0800aa09 	.word	0x0800aa09
 800a8f8:	0800aa09 	.word	0x0800aa09
 800a8fc:	0800aa09 	.word	0x0800aa09
 800a900:	0800a9c7 	.word	0x0800a9c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fad2 	bl	800aeb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0208 	orr.w	r2, r2, #8
 800a91e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0204 	bic.w	r2, r2, #4
 800a92e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6999      	ldr	r1, [r3, #24]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	691a      	ldr	r2, [r3, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	619a      	str	r2, [r3, #24]
      break;
 800a942:	e064      	b.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fb18 	bl	800af80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6999      	ldr	r1, [r3, #24]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	021a      	lsls	r2, r3, #8
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	619a      	str	r2, [r3, #24]
      break;
 800a984:	e043      	b.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fb63 	bl	800b058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 0208 	orr.w	r2, r2, #8
 800a9a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0204 	bic.w	r2, r2, #4
 800a9b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69d9      	ldr	r1, [r3, #28]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	61da      	str	r2, [r3, #28]
      break;
 800a9c4:	e023      	b.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fbad 	bl	800b12c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69da      	ldr	r2, [r3, #28]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69d9      	ldr	r1, [r3, #28]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	021a      	lsls	r2, r3, #8
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	61da      	str	r2, [r3, #28]
      break;
 800aa06:	e002      	b.n	800aa0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d101      	bne.n	800aa3c <HAL_TIM_ConfigClockSource+0x1c>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e0b4      	b.n	800aba6 <HAL_TIM_ConfigClockSource+0x186>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa74:	d03e      	beq.n	800aaf4 <HAL_TIM_ConfigClockSource+0xd4>
 800aa76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa7a:	f200 8087 	bhi.w	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aa7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa82:	f000 8086 	beq.w	800ab92 <HAL_TIM_ConfigClockSource+0x172>
 800aa86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa8a:	d87f      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aa8c:	2b70      	cmp	r3, #112	; 0x70
 800aa8e:	d01a      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0xa6>
 800aa90:	2b70      	cmp	r3, #112	; 0x70
 800aa92:	d87b      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aa94:	2b60      	cmp	r3, #96	; 0x60
 800aa96:	d050      	beq.n	800ab3a <HAL_TIM_ConfigClockSource+0x11a>
 800aa98:	2b60      	cmp	r3, #96	; 0x60
 800aa9a:	d877      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aa9c:	2b50      	cmp	r3, #80	; 0x50
 800aa9e:	d03c      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0xfa>
 800aaa0:	2b50      	cmp	r3, #80	; 0x50
 800aaa2:	d873      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aaa4:	2b40      	cmp	r3, #64	; 0x40
 800aaa6:	d058      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x13a>
 800aaa8:	2b40      	cmp	r3, #64	; 0x40
 800aaaa:	d86f      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aaac:	2b30      	cmp	r3, #48	; 0x30
 800aaae:	d064      	beq.n	800ab7a <HAL_TIM_ConfigClockSource+0x15a>
 800aab0:	2b30      	cmp	r3, #48	; 0x30
 800aab2:	d86b      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d060      	beq.n	800ab7a <HAL_TIM_ConfigClockSource+0x15a>
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	d867      	bhi.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d05c      	beq.n	800ab7a <HAL_TIM_ConfigClockSource+0x15a>
 800aac0:	2b10      	cmp	r3, #16
 800aac2:	d05a      	beq.n	800ab7a <HAL_TIM_ConfigClockSource+0x15a>
 800aac4:	e062      	b.n	800ab8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	6899      	ldr	r1, [r3, #8]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f000 fbf3 	bl	800b2c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	609a      	str	r2, [r3, #8]
      break;
 800aaf2:	e04f      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6818      	ldr	r0, [r3, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	6899      	ldr	r1, [r3, #8]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f000 fbdc 	bl	800b2c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab16:	609a      	str	r2, [r3, #8]
      break;
 800ab18:	e03c      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	6859      	ldr	r1, [r3, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	461a      	mov	r2, r3
 800ab28:	f000 fb50 	bl	800b1cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2150      	movs	r1, #80	; 0x50
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fba9 	bl	800b28a <TIM_ITRx_SetConfig>
      break;
 800ab38:	e02c      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6818      	ldr	r0, [r3, #0]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	6859      	ldr	r1, [r3, #4]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	461a      	mov	r2, r3
 800ab48:	f000 fb6f 	bl	800b22a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2160      	movs	r1, #96	; 0x60
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fb99 	bl	800b28a <TIM_ITRx_SetConfig>
      break;
 800ab58:	e01c      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	6859      	ldr	r1, [r3, #4]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f000 fb30 	bl	800b1cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2140      	movs	r1, #64	; 0x40
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fb89 	bl	800b28a <TIM_ITRx_SetConfig>
      break;
 800ab78:	e00c      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4619      	mov	r1, r3
 800ab84:	4610      	mov	r0, r2
 800ab86:	f000 fb80 	bl	800b28a <TIM_ITRx_SetConfig>
      break;
 800ab8a:	e003      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab90:	e000      	b.n	800ab94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d107      	bne.n	800ac3a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac38:	e02a      	b.n	800ac90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d107      	bne.n	800ac54 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2202      	movs	r2, #2
 800ac48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac52:	e01d      	b.n	800ac90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d107      	bne.n	800ac6e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2204      	movs	r2, #4
 800ac62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac6c:	e010      	b.n	800ac90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d107      	bne.n	800ac88 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac86:	e003      	b.n	800ac90 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7ff ffb4 	bl	800abfe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	771a      	strb	r2, [r3, #28]
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d10b      	bne.n	800acd4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2201      	movs	r2, #1
 800acc0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d136      	bne.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acd2:	e031      	b.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d10b      	bne.n	800acf6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2202      	movs	r2, #2
 800ace2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d125      	bne.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acf4:	e020      	b.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d10b      	bne.n	800ad18 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2204      	movs	r2, #4
 800ad04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d114      	bne.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad16:	e00f      	b.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d10a      	bne.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2208      	movs	r2, #8
 800ad26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d103      	bne.n	800ad38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f7f6 fd8b 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	771a      	strb	r2, [r3, #28]
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d103      	bne.n	800ad6c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2201      	movs	r2, #1
 800ad68:	771a      	strb	r2, [r3, #28]
 800ad6a:	e019      	b.n	800ada0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d103      	bne.n	800ad7e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2202      	movs	r2, #2
 800ad7a:	771a      	strb	r2, [r3, #28]
 800ad7c:	e010      	b.n	800ada0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d103      	bne.n	800ad90 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2204      	movs	r2, #4
 800ad8c:	771a      	strb	r2, [r3, #28]
 800ad8e:	e007      	b.n	800ada0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d102      	bne.n	800ada0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2208      	movs	r2, #8
 800ad9e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7ff ff18 	bl	800abd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	771a      	strb	r2, [r3, #28]
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a34      	ldr	r2, [pc, #208]	; (800ae98 <TIM_Base_SetConfig+0xe4>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00f      	beq.n	800adec <TIM_Base_SetConfig+0x38>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add2:	d00b      	beq.n	800adec <TIM_Base_SetConfig+0x38>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a31      	ldr	r2, [pc, #196]	; (800ae9c <TIM_Base_SetConfig+0xe8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d007      	beq.n	800adec <TIM_Base_SetConfig+0x38>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a30      	ldr	r2, [pc, #192]	; (800aea0 <TIM_Base_SetConfig+0xec>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d003      	beq.n	800adec <TIM_Base_SetConfig+0x38>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a2f      	ldr	r2, [pc, #188]	; (800aea4 <TIM_Base_SetConfig+0xf0>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d108      	bne.n	800adfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a25      	ldr	r2, [pc, #148]	; (800ae98 <TIM_Base_SetConfig+0xe4>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d01b      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae0c:	d017      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a22      	ldr	r2, [pc, #136]	; (800ae9c <TIM_Base_SetConfig+0xe8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d013      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a21      	ldr	r2, [pc, #132]	; (800aea0 <TIM_Base_SetConfig+0xec>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00f      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a20      	ldr	r2, [pc, #128]	; (800aea4 <TIM_Base_SetConfig+0xf0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d00b      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a1f      	ldr	r2, [pc, #124]	; (800aea8 <TIM_Base_SetConfig+0xf4>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d007      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a1e      	ldr	r2, [pc, #120]	; (800aeac <TIM_Base_SetConfig+0xf8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d003      	beq.n	800ae3e <TIM_Base_SetConfig+0x8a>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a1d      	ldr	r2, [pc, #116]	; (800aeb0 <TIM_Base_SetConfig+0xfc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d108      	bne.n	800ae50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <TIM_Base_SetConfig+0xe4>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d103      	bne.n	800ae84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	691a      	ldr	r2, [r3, #16]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	615a      	str	r2, [r3, #20]
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40000400 	.word	0x40000400
 800aea0:	40000800 	.word	0x40000800
 800aea4:	40000c00 	.word	0x40000c00
 800aea8:	40014000 	.word	0x40014000
 800aeac:	40014400 	.word	0x40014400
 800aeb0:	40014800 	.word	0x40014800

0800aeb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f023 0201 	bic.w	r2, r3, #1
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f023 0302 	bic.w	r3, r3, #2
 800aefc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	4313      	orrs	r3, r2
 800af06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a1c      	ldr	r2, [pc, #112]	; (800af7c <TIM_OC1_SetConfig+0xc8>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d10c      	bne.n	800af2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f023 0308 	bic.w	r3, r3, #8
 800af16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f023 0304 	bic.w	r3, r3, #4
 800af28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a13      	ldr	r2, [pc, #76]	; (800af7c <TIM_OC1_SetConfig+0xc8>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d111      	bne.n	800af56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	4313      	orrs	r3, r2
 800af4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	4313      	orrs	r3, r2
 800af54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	621a      	str	r2, [r3, #32]
}
 800af70:	bf00      	nop
 800af72:	371c      	adds	r7, #28
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	40010000 	.word	0x40010000

0800af80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f023 0210 	bic.w	r2, r3, #16
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f023 0320 	bic.w	r3, r3, #32
 800afca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a1e      	ldr	r2, [pc, #120]	; (800b054 <TIM_OC2_SetConfig+0xd4>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d10d      	bne.n	800affc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	011b      	lsls	r3, r3, #4
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800affa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a15      	ldr	r2, [pc, #84]	; (800b054 <TIM_OC2_SetConfig+0xd4>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d113      	bne.n	800b02c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b00a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4313      	orrs	r3, r2
 800b02a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	621a      	str	r2, [r3, #32]
}
 800b046:	bf00      	nop
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	40010000 	.word	0x40010000

0800b058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f023 0303 	bic.w	r3, r3, #3
 800b08e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a1d      	ldr	r2, [pc, #116]	; (800b128 <TIM_OC3_SetConfig+0xd0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d10d      	bne.n	800b0d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	697a      	ldr	r2, [r7, #20]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a14      	ldr	r2, [pc, #80]	; (800b128 <TIM_OC3_SetConfig+0xd0>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d113      	bne.n	800b102 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	621a      	str	r2, [r3, #32]
}
 800b11c:	bf00      	nop
 800b11e:	371c      	adds	r7, #28
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	40010000 	.word	0x40010000

0800b12c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	021b      	lsls	r3, r3, #8
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	031b      	lsls	r3, r3, #12
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	4313      	orrs	r3, r2
 800b182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a10      	ldr	r2, [pc, #64]	; (800b1c8 <TIM_OC4_SetConfig+0x9c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d109      	bne.n	800b1a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	019b      	lsls	r3, r3, #6
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	621a      	str	r2, [r3, #32]
}
 800b1ba:	bf00      	nop
 800b1bc:	371c      	adds	r7, #28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40010000 	.word	0x40010000

0800b1cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6a1b      	ldr	r3, [r3, #32]
 800b1dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	f023 0201 	bic.w	r2, r3, #1
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f023 030a 	bic.w	r3, r3, #10
 800b208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	621a      	str	r2, [r3, #32]
}
 800b21e:	bf00      	nop
 800b220:	371c      	adds	r7, #28
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b087      	sub	sp, #28
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	f023 0210 	bic.w	r2, r3, #16
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	031b      	lsls	r3, r3, #12
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	4313      	orrs	r3, r2
 800b270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	621a      	str	r2, [r3, #32]
}
 800b27e:	bf00      	nop
 800b280:	371c      	adds	r7, #28
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b085      	sub	sp, #20
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	f043 0307 	orr.w	r3, r3, #7
 800b2ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	609a      	str	r2, [r3, #8]
}
 800b2b4:	bf00      	nop
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	021a      	lsls	r2, r3, #8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	609a      	str	r2, [r3, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	371c      	adds	r7, #28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f003 031f 	and.w	r3, r3, #31
 800b312:	2201      	movs	r2, #1
 800b314:	fa02 f303 	lsl.w	r3, r2, r3
 800b318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1a      	ldr	r2, [r3, #32]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	43db      	mvns	r3, r3
 800b322:	401a      	ands	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a1a      	ldr	r2, [r3, #32]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f003 031f 	and.w	r3, r3, #31
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	fa01 f303 	lsl.w	r3, r1, r3
 800b338:	431a      	orrs	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	621a      	str	r2, [r3, #32]
}
 800b33e:	bf00      	nop
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b360:	2302      	movs	r3, #2
 800b362:	e050      	b.n	800b406 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a1c      	ldr	r2, [pc, #112]	; (800b414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d018      	beq.n	800b3da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b0:	d013      	beq.n	800b3da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a18      	ldr	r2, [pc, #96]	; (800b418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d00e      	beq.n	800b3da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a16      	ldr	r2, [pc, #88]	; (800b41c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d009      	beq.n	800b3da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a15      	ldr	r2, [pc, #84]	; (800b420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d004      	beq.n	800b3da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a13      	ldr	r2, [pc, #76]	; (800b424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d10c      	bne.n	800b3f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	40010000 	.word	0x40010000
 800b418:	40000400 	.word	0x40000400
 800b41c:	40000800 	.word	0x40000800
 800b420:	40000c00 	.word	0x40000c00
 800b424:	40014000 	.word	0x40014000

0800b428 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b440:	2302      	movs	r3, #2
 800b442:	e03d      	b.n	800b4c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	4313      	orrs	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	f107 001c 	add.w	r0, r7, #28
 800b502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d122      	bne.n	800b552 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b536:	2b01      	cmp	r3, #1
 800b538:	d105      	bne.n	800b546 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 fbee 	bl	800cd28 <USB_CoreReset>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73fb      	strb	r3, [r7, #15]
 800b550:	e01a      	b.n	800b588 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 fbe2 	bl	800cd28 <USB_CoreReset>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d106      	bne.n	800b57c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	639a      	str	r2, [r3, #56]	; 0x38
 800b57a:	e005      	b.n	800b588 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d10b      	bne.n	800b5a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f043 0206 	orr.w	r2, r3, #6
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f043 0220 	orr.w	r2, r3, #32
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5b2:	b004      	add	sp, #16
 800b5b4:	4770      	bx	lr
	...

0800b5b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d165      	bne.n	800b698 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	4a41      	ldr	r2, [pc, #260]	; (800b6d4 <USB_SetTurnaroundTime+0x11c>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d906      	bls.n	800b5e2 <USB_SetTurnaroundTime+0x2a>
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4a40      	ldr	r2, [pc, #256]	; (800b6d8 <USB_SetTurnaroundTime+0x120>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d202      	bcs.n	800b5e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b5dc:	230f      	movs	r3, #15
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	e062      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	4a3c      	ldr	r2, [pc, #240]	; (800b6d8 <USB_SetTurnaroundTime+0x120>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d306      	bcc.n	800b5f8 <USB_SetTurnaroundTime+0x40>
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	4a3b      	ldr	r2, [pc, #236]	; (800b6dc <USB_SetTurnaroundTime+0x124>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d202      	bcs.n	800b5f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b5f2:	230e      	movs	r3, #14
 800b5f4:	617b      	str	r3, [r7, #20]
 800b5f6:	e057      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4a38      	ldr	r2, [pc, #224]	; (800b6dc <USB_SetTurnaroundTime+0x124>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d306      	bcc.n	800b60e <USB_SetTurnaroundTime+0x56>
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	4a37      	ldr	r2, [pc, #220]	; (800b6e0 <USB_SetTurnaroundTime+0x128>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d202      	bcs.n	800b60e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b608:	230d      	movs	r3, #13
 800b60a:	617b      	str	r3, [r7, #20]
 800b60c:	e04c      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	4a33      	ldr	r2, [pc, #204]	; (800b6e0 <USB_SetTurnaroundTime+0x128>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d306      	bcc.n	800b624 <USB_SetTurnaroundTime+0x6c>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	4a32      	ldr	r2, [pc, #200]	; (800b6e4 <USB_SetTurnaroundTime+0x12c>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d802      	bhi.n	800b624 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b61e:	230c      	movs	r3, #12
 800b620:	617b      	str	r3, [r7, #20]
 800b622:	e041      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4a2f      	ldr	r2, [pc, #188]	; (800b6e4 <USB_SetTurnaroundTime+0x12c>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d906      	bls.n	800b63a <USB_SetTurnaroundTime+0x82>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	4a2e      	ldr	r2, [pc, #184]	; (800b6e8 <USB_SetTurnaroundTime+0x130>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d802      	bhi.n	800b63a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b634:	230b      	movs	r3, #11
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e036      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	4a2a      	ldr	r2, [pc, #168]	; (800b6e8 <USB_SetTurnaroundTime+0x130>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d906      	bls.n	800b650 <USB_SetTurnaroundTime+0x98>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	4a29      	ldr	r2, [pc, #164]	; (800b6ec <USB_SetTurnaroundTime+0x134>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d802      	bhi.n	800b650 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b64a:	230a      	movs	r3, #10
 800b64c:	617b      	str	r3, [r7, #20]
 800b64e:	e02b      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4a26      	ldr	r2, [pc, #152]	; (800b6ec <USB_SetTurnaroundTime+0x134>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d906      	bls.n	800b666 <USB_SetTurnaroundTime+0xae>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	4a25      	ldr	r2, [pc, #148]	; (800b6f0 <USB_SetTurnaroundTime+0x138>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d202      	bcs.n	800b666 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b660:	2309      	movs	r3, #9
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	e020      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	4a21      	ldr	r2, [pc, #132]	; (800b6f0 <USB_SetTurnaroundTime+0x138>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d306      	bcc.n	800b67c <USB_SetTurnaroundTime+0xc4>
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	4a20      	ldr	r2, [pc, #128]	; (800b6f4 <USB_SetTurnaroundTime+0x13c>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d802      	bhi.n	800b67c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b676:	2308      	movs	r3, #8
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	e015      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	4a1d      	ldr	r2, [pc, #116]	; (800b6f4 <USB_SetTurnaroundTime+0x13c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d906      	bls.n	800b692 <USB_SetTurnaroundTime+0xda>
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	4a1c      	ldr	r2, [pc, #112]	; (800b6f8 <USB_SetTurnaroundTime+0x140>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d202      	bcs.n	800b692 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b68c:	2307      	movs	r3, #7
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	e00a      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b692:	2306      	movs	r3, #6
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e007      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b69e:	2309      	movs	r3, #9
 800b6a0:	617b      	str	r3, [r7, #20]
 800b6a2:	e001      	b.n	800b6a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b6a4:	2309      	movs	r3, #9
 800b6a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68da      	ldr	r2, [r3, #12]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	029b      	lsls	r3, r3, #10
 800b6bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	371c      	adds	r7, #28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	00d8acbf 	.word	0x00d8acbf
 800b6d8:	00e4e1c0 	.word	0x00e4e1c0
 800b6dc:	00f42400 	.word	0x00f42400
 800b6e0:	01067380 	.word	0x01067380
 800b6e4:	011a499f 	.word	0x011a499f
 800b6e8:	01312cff 	.word	0x01312cff
 800b6ec:	014ca43f 	.word	0x014ca43f
 800b6f0:	016e3600 	.word	0x016e3600
 800b6f4:	01a6ab1f 	.word	0x01a6ab1f
 800b6f8:	01e84800 	.word	0x01e84800

0800b6fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f043 0201 	orr.w	r2, r3, #1
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f023 0201 	bic.w	r2, r3, #1
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d115      	bne.n	800b78e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b76e:	2001      	movs	r0, #1
 800b770:	f7f8 fb2a 	bl	8003dc8 <HAL_Delay>
      ms++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 fa45 	bl	800cc0a <USB_GetMode>
 800b780:	4603      	mov	r3, r0
 800b782:	2b01      	cmp	r3, #1
 800b784:	d01e      	beq.n	800b7c4 <USB_SetCurrentMode+0x84>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b31      	cmp	r3, #49	; 0x31
 800b78a:	d9f0      	bls.n	800b76e <USB_SetCurrentMode+0x2e>
 800b78c:	e01a      	b.n	800b7c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d115      	bne.n	800b7c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	f7f8 fb11 	bl	8003dc8 <HAL_Delay>
      ms++;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 fa2c 	bl	800cc0a <USB_GetMode>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d005      	beq.n	800b7c4 <USB_SetCurrentMode+0x84>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b31      	cmp	r3, #49	; 0x31
 800b7bc:	d9f0      	bls.n	800b7a0 <USB_SetCurrentMode+0x60>
 800b7be:	e001      	b.n	800b7c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e005      	b.n	800b7d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2b32      	cmp	r3, #50	; 0x32
 800b7c8:	d101      	bne.n	800b7ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e000      	b.n	800b7d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7d8:	b084      	sub	sp, #16
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b086      	sub	sp, #24
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b7e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	613b      	str	r3, [r7, #16]
 800b7f6:	e009      	b.n	800b80c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	3340      	adds	r3, #64	; 0x40
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	2200      	movs	r2, #0
 800b804:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	3301      	adds	r3, #1
 800b80a:	613b      	str	r3, [r7, #16]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	2b0e      	cmp	r3, #14
 800b810:	d9f2      	bls.n	800b7f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b814:	2b00      	cmp	r3, #0
 800b816:	d11c      	bne.n	800b852 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b826:	f043 0302 	orr.w	r3, r3, #2
 800b82a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	639a      	str	r2, [r3, #56]	; 0x38
 800b850:	e00b      	b.n	800b86a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b856:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b870:	461a      	mov	r2, r3
 800b872:	2300      	movs	r3, #0
 800b874:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87c:	4619      	mov	r1, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b884:	461a      	mov	r2, r3
 800b886:	680b      	ldr	r3, [r1, #0]
 800b888:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d10c      	bne.n	800b8aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	2b00      	cmp	r3, #0
 800b894:	d104      	bne.n	800b8a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b896:	2100      	movs	r1, #0
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f965 	bl	800bb68 <USB_SetDevSpeed>
 800b89e:	e008      	b.n	800b8b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f960 	bl	800bb68 <USB_SetDevSpeed>
 800b8a8:	e003      	b.n	800b8b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b8aa:	2103      	movs	r1, #3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f95b 	bl	800bb68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8b2:	2110      	movs	r1, #16
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f8f3 	bl	800baa0 <USB_FlushTxFifo>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f91f 	bl	800bb08 <USB_FlushRxFifo>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8da:	461a      	mov	r2, r3
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	613b      	str	r3, [r7, #16]
 800b8fc:	e043      	b.n	800b986 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b914:	d118      	bne.n	800b948 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b928:	461a      	mov	r2, r3
 800b92a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	e013      	b.n	800b95a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b93e:	461a      	mov	r2, r3
 800b940:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	e008      	b.n	800b95a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b954:	461a      	mov	r2, r3
 800b956:	2300      	movs	r3, #0
 800b958:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b966:	461a      	mov	r2, r3
 800b968:	2300      	movs	r3, #0
 800b96a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b978:	461a      	mov	r2, r3
 800b97a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b97e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	613b      	str	r3, [r7, #16]
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d3b7      	bcc.n	800b8fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b98e:	2300      	movs	r3, #0
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	e043      	b.n	800ba1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	015a      	lsls	r2, r3, #5
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	4413      	add	r3, r2
 800b99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9aa:	d118      	bne.n	800b9de <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10a      	bne.n	800b9c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	015a      	lsls	r2, r3, #5
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	e013      	b.n	800b9f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	015a      	lsls	r2, r3, #5
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b9da:	6013      	str	r3, [r2, #0]
 800b9dc:	e008      	b.n	800b9f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	613b      	str	r3, [r7, #16]
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d3b7      	bcc.n	800b994 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ba44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d105      	bne.n	800ba58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	f043 0210 	orr.w	r2, r3, #16
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	699a      	ldr	r2, [r3, #24]
 800ba5c:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <USB_DevInit+0x2c4>)
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f043 0208 	orr.w	r2, r3, #8
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d107      	bne.n	800ba8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba84:	f043 0304 	orr.w	r3, r3, #4
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba98:	b004      	add	sp, #16
 800ba9a:	4770      	bx	lr
 800ba9c:	803c3800 	.word	0x803c3800

0800baa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4a13      	ldr	r2, [pc, #76]	; (800bb04 <USB_FlushTxFifo+0x64>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d901      	bls.n	800bac0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e01b      	b.n	800baf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	daf2      	bge.n	800baae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	019b      	lsls	r3, r3, #6
 800bad0:	f043 0220 	orr.w	r2, r3, #32
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3301      	adds	r3, #1
 800badc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	4a08      	ldr	r2, [pc, #32]	; (800bb04 <USB_FlushTxFifo+0x64>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d901      	bls.n	800baea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e006      	b.n	800baf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	f003 0320 	and.w	r3, r3, #32
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d0f0      	beq.n	800bad8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	00030d40 	.word	0x00030d40

0800bb08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3301      	adds	r3, #1
 800bb18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4a11      	ldr	r2, [pc, #68]	; (800bb64 <USB_FlushRxFifo+0x5c>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d901      	bls.n	800bb26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e018      	b.n	800bb58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	daf2      	bge.n	800bb14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2210      	movs	r2, #16
 800bb36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4a08      	ldr	r2, [pc, #32]	; (800bb64 <USB_FlushRxFifo+0x5c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d901      	bls.n	800bb4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e006      	b.n	800bb58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f003 0310 	and.w	r3, r3, #16
 800bb52:	2b10      	cmp	r3, #16
 800bb54:	d0f0      	beq.n	800bb38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	00030d40 	.word	0x00030d40

0800bb68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	68f9      	ldr	r1, [r7, #12]
 800bb84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b087      	sub	sp, #28
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 0306 	and.w	r3, r3, #6
 800bbb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d102      	bne.n	800bbc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]
 800bbbe:	e00a      	b.n	800bbd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d002      	beq.n	800bbcc <USB_GetDevSpeed+0x32>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2b06      	cmp	r3, #6
 800bbca:	d102      	bne.n	800bbd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	75fb      	strb	r3, [r7, #23]
 800bbd0:	e001      	b.n	800bbd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bbd2:	230f      	movs	r3, #15
 800bbd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	785b      	ldrb	r3, [r3, #1]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d13a      	bne.n	800bc76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	2101      	movs	r1, #1
 800bc12:	fa01 f303 	lsl.w	r3, r1, r3
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	68f9      	ldr	r1, [r7, #12]
 800bc1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	015a      	lsls	r2, r3, #5
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4413      	add	r3, r2
 800bc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d155      	bne.n	800bce4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	015a      	lsls	r2, r3, #5
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	791b      	ldrb	r3, [r3, #4]
 800bc52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	059b      	lsls	r3, r3, #22
 800bc5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	e036      	b.n	800bce4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7c:	69da      	ldr	r2, [r3, #28]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 030f 	and.w	r3, r3, #15
 800bc86:	2101      	movs	r1, #1
 800bc88:	fa01 f303 	lsl.w	r3, r1, r3
 800bc8c:	041b      	lsls	r3, r3, #16
 800bc8e:	68f9      	ldr	r1, [r7, #12]
 800bc90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc94:	4313      	orrs	r3, r2
 800bc96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d11a      	bne.n	800bce4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	791b      	ldrb	r3, [r3, #4]
 800bcc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcca:	430b      	orrs	r3, r1
 800bccc:	4313      	orrs	r3, r2
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	0151      	lsls	r1, r2, #5
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	440a      	add	r2, r1
 800bcd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bce2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
	...

0800bcf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	785b      	ldrb	r3, [r3, #1]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d161      	bne.n	800bdd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd26:	d11f      	bne.n	800bd68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	015a      	lsls	r2, r3, #5
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4413      	add	r3, r2
 800bd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	0151      	lsls	r1, r2, #5
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	440a      	add	r2, r1
 800bd3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	015a      	lsls	r2, r3, #5
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4413      	add	r3, r2
 800bd50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	0151      	lsls	r1, r2, #5
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	440a      	add	r2, r1
 800bd5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	f003 030f 	and.w	r3, r3, #15
 800bd78:	2101      	movs	r1, #1
 800bd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	43db      	mvns	r3, r3
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd88:	4013      	ands	r3, r2
 800bd8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd92:	69da      	ldr	r2, [r3, #28]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	f003 030f 	and.w	r3, r3, #15
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	43db      	mvns	r3, r3
 800bda6:	68f9      	ldr	r1, [r7, #12]
 800bda8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdac:	4013      	ands	r3, r2
 800bdae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	0159      	lsls	r1, r3, #5
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	440b      	add	r3, r1
 800bdc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdca:	4619      	mov	r1, r3
 800bdcc:	4b35      	ldr	r3, [pc, #212]	; (800bea4 <USB_DeactivateEndpoint+0x1b0>)
 800bdce:	4013      	ands	r3, r2
 800bdd0:	600b      	str	r3, [r1, #0]
 800bdd2:	e060      	b.n	800be96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bde6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdea:	d11f      	bne.n	800be2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	0151      	lsls	r1, r2, #5
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	440a      	add	r2, r1
 800be02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	0151      	lsls	r1, r2, #5
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	440a      	add	r2, r1
 800be22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	f003 030f 	and.w	r3, r3, #15
 800be3c:	2101      	movs	r1, #1
 800be3e:	fa01 f303 	lsl.w	r3, r1, r3
 800be42:	041b      	lsls	r3, r3, #16
 800be44:	43db      	mvns	r3, r3
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be4c:	4013      	ands	r3, r2
 800be4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be56:	69da      	ldr	r2, [r3, #28]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 030f 	and.w	r3, r3, #15
 800be60:	2101      	movs	r1, #1
 800be62:	fa01 f303 	lsl.w	r3, r1, r3
 800be66:	041b      	lsls	r3, r3, #16
 800be68:	43db      	mvns	r3, r3
 800be6a:	68f9      	ldr	r1, [r7, #12]
 800be6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be70:	4013      	ands	r3, r2
 800be72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	0159      	lsls	r1, r3, #5
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	440b      	add	r3, r1
 800be8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8e:	4619      	mov	r1, r3
 800be90:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <USB_DeactivateEndpoint+0x1b4>)
 800be92:	4013      	ands	r3, r2
 800be94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	ec337800 	.word	0xec337800
 800bea8:	eff37800 	.word	0xeff37800

0800beac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	; 0x28
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	4613      	mov	r3, r2
 800beb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	f040 815c 	bne.w	800c186 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d132      	bne.n	800bf3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	015a      	lsls	r2, r3, #5
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	4413      	add	r3, r2
 800bede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	69ba      	ldr	r2, [r7, #24]
 800bee6:	0151      	lsls	r1, r2, #5
 800bee8:	69fa      	ldr	r2, [r7, #28]
 800beea:	440a      	add	r2, r1
 800beec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bef4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	015a      	lsls	r2, r3, #5
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	4413      	add	r3, r2
 800bf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	0151      	lsls	r1, r2, #5
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	440a      	add	r2, r1
 800bf10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	69ba      	ldr	r2, [r7, #24]
 800bf2a:	0151      	lsls	r1, r2, #5
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	440a      	add	r2, r1
 800bf30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf34:	0cdb      	lsrs	r3, r3, #19
 800bf36:	04db      	lsls	r3, r3, #19
 800bf38:	6113      	str	r3, [r2, #16]
 800bf3a:	e074      	b.n	800c026 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	015a      	lsls	r2, r3, #5
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	0151      	lsls	r1, r2, #5
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	440a      	add	r2, r1
 800bf52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf56:	0cdb      	lsrs	r3, r3, #19
 800bf58:	04db      	lsls	r3, r3, #19
 800bf5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	69ba      	ldr	r2, [r7, #24]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	69fa      	ldr	r2, [r7, #28]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6999      	ldr	r1, [r3, #24]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	440b      	add	r3, r1
 800bf98:	1e59      	subs	r1, r3, #1
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bfa2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bfa4:	4b9d      	ldr	r3, [pc, #628]	; (800c21c <USB_EPStartXfer+0x370>)
 800bfa6:	400b      	ands	r3, r1
 800bfa8:	69b9      	ldr	r1, [r7, #24]
 800bfaa:	0148      	lsls	r0, r1, #5
 800bfac:	69f9      	ldr	r1, [r7, #28]
 800bfae:	4401      	add	r1, r0
 800bfb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc4:	691a      	ldr	r2, [r3, #16]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfce:	69b9      	ldr	r1, [r7, #24]
 800bfd0:	0148      	lsls	r0, r1, #5
 800bfd2:	69f9      	ldr	r1, [r7, #28]
 800bfd4:	4401      	add	r1, r0
 800bfd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	791b      	ldrb	r3, [r3, #4]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d11f      	bne.n	800c026 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	0151      	lsls	r1, r2, #5
 800bff8:	69fa      	ldr	r2, [r7, #28]
 800bffa:	440a      	add	r2, r1
 800bffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c000:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c004:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	015a      	lsls	r2, r3, #5
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	4413      	add	r3, r2
 800c00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	0151      	lsls	r1, r2, #5
 800c018:	69fa      	ldr	r2, [r7, #28]
 800c01a:	440a      	add	r2, r1
 800c01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c024:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d14b      	bne.n	800c0c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d009      	beq.n	800c048 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c040:	461a      	mov	r2, r3
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	791b      	ldrb	r3, [r3, #4]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d128      	bne.n	800c0a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d110      	bne.n	800c082 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	0151      	lsls	r1, r2, #5
 800c072:	69fa      	ldr	r2, [r7, #28]
 800c074:	440a      	add	r2, r1
 800c076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c07a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	e00f      	b.n	800c0a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	015a      	lsls	r2, r3, #5
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	4413      	add	r3, r2
 800c08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	0151      	lsls	r1, r2, #5
 800c094:	69fa      	ldr	r2, [r7, #28]
 800c096:	440a      	add	r2, r1
 800c098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c09c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	015a      	lsls	r2, r3, #5
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	0151      	lsls	r1, r2, #5
 800c0b4:	69fa      	ldr	r2, [r7, #28]
 800c0b6:	440a      	add	r2, r1
 800c0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0c0:	6013      	str	r3, [r2, #0]
 800c0c2:	e133      	b.n	800c32c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	0151      	lsls	r1, r2, #5
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	440a      	add	r2, r1
 800c0da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	791b      	ldrb	r3, [r3, #4]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d015      	beq.n	800c118 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 811b 	beq.w	800c32c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	f003 030f 	and.w	r3, r3, #15
 800c106:	2101      	movs	r1, #1
 800c108:	fa01 f303 	lsl.w	r3, r1, r3
 800c10c:	69f9      	ldr	r1, [r7, #28]
 800c10e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c112:	4313      	orrs	r3, r2
 800c114:	634b      	str	r3, [r1, #52]	; 0x34
 800c116:	e109      	b.n	800c32c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c124:	2b00      	cmp	r3, #0
 800c126:	d110      	bne.n	800c14a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	0151      	lsls	r1, r2, #5
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	440a      	add	r2, r1
 800c13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	e00f      	b.n	800c16a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	0151      	lsls	r1, r2, #5
 800c15c:	69fa      	ldr	r2, [r7, #28]
 800c15e:	440a      	add	r2, r1
 800c160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c168:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6919      	ldr	r1, [r3, #16]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	781a      	ldrb	r2, [r3, #0]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	b298      	uxth	r0, r3
 800c178:	79fb      	ldrb	r3, [r7, #7]
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	4603      	mov	r3, r0
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 fade 	bl	800c740 <USB_WritePacket>
 800c184:	e0d2      	b.n	800c32c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	69ba      	ldr	r2, [r7, #24]
 800c196:	0151      	lsls	r1, r2, #5
 800c198:	69fa      	ldr	r2, [r7, #28]
 800c19a:	440a      	add	r2, r1
 800c19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1a0:	0cdb      	lsrs	r3, r3, #19
 800c1a2:	04db      	lsls	r3, r3, #19
 800c1a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	0151      	lsls	r1, r2, #5
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	440a      	add	r2, r1
 800c1bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d126      	bne.n	800c220 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1de:	691a      	ldr	r2, [r3, #16]
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1e8:	69b9      	ldr	r1, [r7, #24]
 800c1ea:	0148      	lsls	r0, r1, #5
 800c1ec:	69f9      	ldr	r1, [r7, #28]
 800c1ee:	4401      	add	r1, r0
 800c1f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	0151      	lsls	r1, r2, #5
 800c20a:	69fa      	ldr	r2, [r7, #28]
 800c20c:	440a      	add	r2, r1
 800c20e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c216:	6113      	str	r3, [r2, #16]
 800c218:	e03a      	b.n	800c290 <USB_EPStartXfer+0x3e4>
 800c21a:	bf00      	nop
 800c21c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	699a      	ldr	r2, [r3, #24]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	1e5a      	subs	r2, r3, #1
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	fbb2 f3f3 	udiv	r3, r2, r3
 800c234:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	8afa      	ldrh	r2, [r7, #22]
 800c23c:	fb03 f202 	mul.w	r2, r3, r2
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	015a      	lsls	r2, r3, #5
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	4413      	add	r3, r2
 800c24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	8afb      	ldrh	r3, [r7, #22]
 800c254:	04d9      	lsls	r1, r3, #19
 800c256:	4b38      	ldr	r3, [pc, #224]	; (800c338 <USB_EPStartXfer+0x48c>)
 800c258:	400b      	ands	r3, r1
 800c25a:	69b9      	ldr	r1, [r7, #24]
 800c25c:	0148      	lsls	r0, r1, #5
 800c25e:	69f9      	ldr	r1, [r7, #28]
 800c260:	4401      	add	r1, r0
 800c262:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c266:	4313      	orrs	r3, r2
 800c268:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c276:	691a      	ldr	r2, [r3, #16]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	69db      	ldr	r3, [r3, #28]
 800c27c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c280:	69b9      	ldr	r1, [r7, #24]
 800c282:	0148      	lsls	r0, r1, #5
 800c284:	69f9      	ldr	r1, [r7, #28]
 800c286:	4401      	add	r1, r0
 800c288:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c28c:	4313      	orrs	r3, r2
 800c28e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d10d      	bne.n	800c2b2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	6919      	ldr	r1, [r3, #16]
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	015a      	lsls	r2, r3, #5
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ae:	460a      	mov	r2, r1
 800c2b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	791b      	ldrb	r3, [r3, #4]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d128      	bne.n	800c30c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d110      	bne.n	800c2ec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	0151      	lsls	r1, r2, #5
 800c2dc:	69fa      	ldr	r2, [r7, #28]
 800c2de:	440a      	add	r2, r1
 800c2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	e00f      	b.n	800c30c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69ba      	ldr	r2, [r7, #24]
 800c2fc:	0151      	lsls	r1, r2, #5
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	440a      	add	r2, r1
 800c302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c30a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	69ba      	ldr	r2, [r7, #24]
 800c31c:	0151      	lsls	r1, r2, #5
 800c31e:	69fa      	ldr	r2, [r7, #28]
 800c320:	440a      	add	r2, r1
 800c322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c32a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3720      	adds	r7, #32
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	1ff80000 	.word	0x1ff80000

0800c33c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	4613      	mov	r3, r2
 800c348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	785b      	ldrb	r3, [r3, #1]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	f040 80ce 	bne.w	800c4fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d132      	bne.n	800c3cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	0151      	lsls	r1, r2, #5
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	440a      	add	r2, r1
 800c37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	0151      	lsls	r1, r2, #5
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	440a      	add	r2, r1
 800c3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	015a      	lsls	r2, r3, #5
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	0151      	lsls	r1, r2, #5
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	440a      	add	r2, r1
 800c3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c4:	0cdb      	lsrs	r3, r3, #19
 800c3c6:	04db      	lsls	r3, r3, #19
 800c3c8:	6113      	str	r3, [r2, #16]
 800c3ca:	e04e      	b.n	800c46a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	0151      	lsls	r1, r2, #5
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	440a      	add	r2, r1
 800c3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3e6:	0cdb      	lsrs	r3, r3, #19
 800c3e8:	04db      	lsls	r3, r3, #19
 800c3ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c40a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c40e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	699a      	ldr	r2, [r3, #24]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d903      	bls.n	800c424 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	0151      	lsls	r1, r2, #5
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	440a      	add	r2, r1
 800c43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c43e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c450:	691a      	ldr	r2, [r3, #16]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c45a:	6939      	ldr	r1, [r7, #16]
 800c45c:	0148      	lsls	r0, r1, #5
 800c45e:	6979      	ldr	r1, [r7, #20]
 800c460:	4401      	add	r1, r0
 800c462:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c466:	4313      	orrs	r3, r2
 800c468:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c46a:	79fb      	ldrb	r3, [r7, #7]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d11e      	bne.n	800c4ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d009      	beq.n	800c48c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c484:	461a      	mov	r2, r3
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	015a      	lsls	r2, r3, #5
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	4413      	add	r3, r2
 800c494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	0151      	lsls	r1, r2, #5
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	440a      	add	r2, r1
 800c4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	e097      	b.n	800c5de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	015a      	lsls	r2, r3, #5
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	0151      	lsls	r1, r2, #5
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	440a      	add	r2, r1
 800c4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 8083 	beq.w	800c5de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	f003 030f 	and.w	r3, r3, #15
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ee:	6979      	ldr	r1, [r7, #20]
 800c4f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	634b      	str	r3, [r1, #52]	; 0x34
 800c4f8:	e071      	b.n	800c5de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	0151      	lsls	r1, r2, #5
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	440a      	add	r2, r1
 800c510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c514:	0cdb      	lsrs	r3, r3, #19
 800c516:	04db      	lsls	r3, r3, #19
 800c518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	0151      	lsls	r1, r2, #5
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	440a      	add	r2, r1
 800c530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c53c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	699b      	ldr	r3, [r3, #24]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	0151      	lsls	r1, r2, #5
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	440a      	add	r2, r1
 800c56c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	015a      	lsls	r2, r3, #5
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	4413      	add	r3, r2
 800c57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c582:	691a      	ldr	r2, [r3, #16]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	69db      	ldr	r3, [r3, #28]
 800c588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c58c:	6939      	ldr	r1, [r7, #16]
 800c58e:	0148      	lsls	r0, r1, #5
 800c590:	6979      	ldr	r1, [r7, #20]
 800c592:	4401      	add	r1, r0
 800c594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c598:	4313      	orrs	r3, r2
 800c59a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c59c:	79fb      	ldrb	r3, [r7, #7]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d10d      	bne.n	800c5be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d009      	beq.n	800c5be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6919      	ldr	r1, [r3, #16]
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	015a      	lsls	r2, r3, #5
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ba:	460a      	mov	r2, r1
 800c5bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	015a      	lsls	r2, r3, #5
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	0151      	lsls	r1, r2, #5
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	440a      	add	r2, r1
 800c5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	371c      	adds	r7, #28
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d14a      	bne.n	800c6a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c61e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c622:	f040 8086 	bne.w	800c732 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	015a      	lsls	r2, r3, #5
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	4413      	add	r3, r2
 800c630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	7812      	ldrb	r2, [r2, #0]
 800c63a:	0151      	lsls	r1, r2, #5
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	440a      	add	r2, r1
 800c640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c644:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c648:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	4413      	add	r3, r2
 800c654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	7812      	ldrb	r2, [r2, #0]
 800c65e:	0151      	lsls	r1, r2, #5
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	440a      	add	r2, r1
 800c664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c66c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3301      	adds	r3, #1
 800c672:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f242 7210 	movw	r2, #10000	; 0x2710
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d902      	bls.n	800c684 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	75fb      	strb	r3, [r7, #23]
          break;
 800c682:	e056      	b.n	800c732 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c69c:	d0e7      	beq.n	800c66e <USB_EPStopXfer+0x82>
 800c69e:	e048      	b.n	800c732 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	015a      	lsls	r2, r3, #5
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6b8:	d13b      	bne.n	800c732 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	7812      	ldrb	r2, [r2, #0]
 800c6ce:	0151      	lsls	r1, r2, #5
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	440a      	add	r2, r1
 800c6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c6dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	7812      	ldrb	r2, [r2, #0]
 800c6f2:	0151      	lsls	r1, r2, #5
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	440a      	add	r2, r1
 800c6f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3301      	adds	r3, #1
 800c706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c70e:	4293      	cmp	r3, r2
 800c710:	d902      	bls.n	800c718 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	75fb      	strb	r3, [r7, #23]
          break;
 800c716:	e00c      	b.n	800c732 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c72c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c730:	d0e7      	beq.n	800c702 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c732:	7dfb      	ldrb	r3, [r7, #23]
}
 800c734:	4618      	mov	r0, r3
 800c736:	371c      	adds	r7, #28
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c740:	b480      	push	{r7}
 800c742:	b089      	sub	sp, #36	; 0x24
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4611      	mov	r1, r2
 800c74c:	461a      	mov	r2, r3
 800c74e:	460b      	mov	r3, r1
 800c750:	71fb      	strb	r3, [r7, #7]
 800c752:	4613      	mov	r3, r2
 800c754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c75e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	d123      	bne.n	800c7ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c766:	88bb      	ldrh	r3, [r7, #4]
 800c768:	3303      	adds	r3, #3
 800c76a:	089b      	lsrs	r3, r3, #2
 800c76c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c76e:	2300      	movs	r3, #0
 800c770:	61bb      	str	r3, [r7, #24]
 800c772:	e018      	b.n	800c7a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	031a      	lsls	r2, r3, #12
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c780:	461a      	mov	r2, r3
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	3301      	adds	r3, #1
 800c78c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	3301      	adds	r3, #1
 800c792:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	3301      	adds	r3, #1
 800c798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	3301      	adds	r3, #1
 800c79e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	61bb      	str	r3, [r7, #24]
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d3e2      	bcc.n	800c774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3724      	adds	r7, #36	; 0x24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b08b      	sub	sp, #44	; 0x2c
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c7d2:	88fb      	ldrh	r3, [r7, #6]
 800c7d4:	089b      	lsrs	r3, r3, #2
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	f003 0303 	and.w	r3, r3, #3
 800c7e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	623b      	str	r3, [r7, #32]
 800c7e6:	e014      	b.n	800c812 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	3301      	adds	r3, #1
 800c804:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	3301      	adds	r3, #1
 800c80a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	3301      	adds	r3, #1
 800c810:	623b      	str	r3, [r7, #32]
 800c812:	6a3a      	ldr	r2, [r7, #32]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	429a      	cmp	r2, r3
 800c818:	d3e6      	bcc.n	800c7e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c81a:	8bfb      	ldrh	r3, [r7, #30]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01e      	beq.n	800c85e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c82a:	461a      	mov	r2, r3
 800c82c:	f107 0310 	add.w	r3, r7, #16
 800c830:	6812      	ldr	r2, [r2, #0]
 800c832:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	fa22 f303 	lsr.w	r3, r2, r3
 800c840:	b2da      	uxtb	r2, r3
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	701a      	strb	r2, [r3, #0]
      i++;
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	3301      	adds	r3, #1
 800c84a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	3301      	adds	r3, #1
 800c850:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c852:	8bfb      	ldrh	r3, [r7, #30]
 800c854:	3b01      	subs	r3, #1
 800c856:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c858:	8bfb      	ldrh	r3, [r7, #30]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1ea      	bne.n	800c834 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c860:	4618      	mov	r0, r3
 800c862:	372c      	adds	r7, #44	; 0x2c
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d12c      	bne.n	800c8e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	db12      	blt.n	800c8c0 <USB_EPSetStall+0x54>
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00f      	beq.n	800c8c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	015a      	lsls	r2, r3, #5
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	0151      	lsls	r1, r2, #5
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	440a      	add	r2, r1
 800c8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c8be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	0151      	lsls	r1, r2, #5
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	440a      	add	r2, r1
 800c8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	e02b      	b.n	800c93a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	db12      	blt.n	800c91a <USB_EPSetStall+0xae>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00f      	beq.n	800c91a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c914:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c918:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	0151      	lsls	r1, r2, #5
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	440a      	add	r2, r1
 800c930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	785b      	ldrb	r3, [r3, #1]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d128      	bne.n	800c9b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	0151      	lsls	r1, r2, #5
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	440a      	add	r2, r1
 800c97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c97e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c982:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	791b      	ldrb	r3, [r3, #4]
 800c988:	2b03      	cmp	r3, #3
 800c98a:	d003      	beq.n	800c994 <USB_EPClearStall+0x4c>
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	791b      	ldrb	r3, [r3, #4]
 800c990:	2b02      	cmp	r3, #2
 800c992:	d138      	bne.n	800ca06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	0151      	lsls	r1, r2, #5
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	440a      	add	r2, r1
 800c9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	e027      	b.n	800ca06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	015a      	lsls	r2, r3, #5
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	4413      	add	r3, r2
 800c9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	0151      	lsls	r1, r2, #5
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	791b      	ldrb	r3, [r3, #4]
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d003      	beq.n	800c9e6 <USB_EPClearStall+0x9e>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	791b      	ldrb	r3, [r3, #4]
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d10f      	bne.n	800ca06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	015a      	lsls	r2, r3, #5
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	0151      	lsls	r1, r2, #5
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	440a      	add	r2, r1
 800c9fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ca36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	011b      	lsls	r3, r3, #4
 800ca44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ca48:	68f9      	ldr	r1, [r7, #12]
 800ca4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca7a:	f023 0303 	bic.w	r3, r3, #3
 800ca7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca8e:	f023 0302 	bic.w	r3, r3, #2
 800ca92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cabc:	f023 0303 	bic.w	r3, r3, #3
 800cac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cad0:	f043 0302 	orr.w	r3, r3, #2
 800cad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4013      	ands	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cafc:	68fb      	ldr	r3, [r7, #12]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b085      	sub	sp, #20
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb26:	69db      	ldr	r3, [r3, #28]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	0c1b      	lsrs	r3, r3, #16
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b085      	sub	sp, #20
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	b29b      	uxth	r3, r3
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b085      	sub	sp, #20
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cb82:	78fb      	ldrb	r3, [r7, #3]
 800cb84:	015a      	lsls	r2, r3, #5
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	4413      	add	r3, r2
 800cb8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cba0:	68bb      	ldr	r3, [r7, #8]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b087      	sub	sp, #28
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cbd2:	78fb      	ldrb	r3, [r7, #3]
 800cbd4:	f003 030f 	and.w	r3, r3, #15
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	fa22 f303 	lsr.w	r3, r2, r3
 800cbde:	01db      	lsls	r3, r3, #7
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	693a      	ldr	r2, [r7, #16]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cbe8:	78fb      	ldrb	r3, [r7, #3]
 800cbea:	015a      	lsls	r2, r3, #5
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	4413      	add	r3, r2
 800cbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cbfc:	68bb      	ldr	r3, [r7, #8]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	f003 0301 	and.w	r3, r3, #1
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	370c      	adds	r7, #12
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cc26:	b480      	push	{r7}
 800cc28:	b085      	sub	sp, #20
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cc44:	f023 0307 	bic.w	r3, r3, #7
 800cc48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	460b      	mov	r3, r1
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	333c      	adds	r3, #60	; 0x3c
 800cc82:	3304      	adds	r3, #4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	4a26      	ldr	r2, [pc, #152]	; (800cd24 <USB_EP0_OutStart+0xb8>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d90a      	bls.n	800cca6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cca0:	d101      	bne.n	800cca6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	e037      	b.n	800cd16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccac:	461a      	mov	r2, r3
 800ccae:	2300      	movs	r3, #0
 800ccb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccd4:	f043 0318 	orr.w	r3, r3, #24
 800ccd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ccec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ccee:	7afb      	ldrb	r3, [r7, #11]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d10f      	bne.n	800cd14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cd12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	371c      	adds	r7, #28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	4f54300a 	.word	0x4f54300a

0800cd28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	3301      	adds	r3, #1
 800cd38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	4a13      	ldr	r2, [pc, #76]	; (800cd8c <USB_CoreReset+0x64>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d901      	bls.n	800cd46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e01b      	b.n	800cd7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	daf2      	bge.n	800cd34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f043 0201 	orr.w	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	3301      	adds	r3, #1
 800cd62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	4a09      	ldr	r2, [pc, #36]	; (800cd8c <USB_CoreReset+0x64>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d901      	bls.n	800cd70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e006      	b.n	800cd7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d0f0      	beq.n	800cd5e <USB_CoreReset+0x36>

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	00030d40 	.word	0x00030d40

0800cd90 <i2c1_read>:
int gesture_state_;
int gesture_motion_;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

uint8_t i2c1_read(uint8_t memAdr, uint8_t *regData, uint8_t lenght) {
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af04      	add	r7, sp, #16
 800cd96:	4603      	mov	r3, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	71fb      	strb	r3, [r7, #7]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Mem_Read(&hi2c1, sensorAdr, memAdr, 1, regData, lenght, HAL_MAX_DELAY) == HAL_OK) {
 800cda0:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <i2c1_read+0x48>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	b299      	uxth	r1, r3
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	79bb      	ldrb	r3, [r7, #6]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb2:	9002      	str	r0, [sp, #8]
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4807      	ldr	r0, [pc, #28]	; (800cddc <i2c1_read+0x4c>)
 800cdbe:	f7f8 f8cd 	bl	8004f5c <HAL_I2C_Mem_Read>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <i2c1_read+0x3c>
		return lenght;
 800cdc8:	79bb      	ldrb	r3, [r7, #6]
 800cdca:	e000      	b.n	800cdce <i2c1_read+0x3e>
	} else {
		return 0;
 800cdcc:	2300      	movs	r3, #0
	}
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20002d4c 	.word	0x20002d4c
 800cddc:	2000041c 	.word	0x2000041c

0800cde0 <i2c1_write>:

uint8_t i2c1_write(uint8_t memAdr, uint8_t regData) {
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af04      	add	r7, sp, #16
 800cde6:	4603      	mov	r3, r0
 800cde8:	460a      	mov	r2, r1
 800cdea:	71fb      	strb	r3, [r7, #7]
 800cdec:	4613      	mov	r3, r2
 800cdee:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Mem_Write(&hi2c1, sensorAdr, memAdr, 1, &regData, 1, HAL_MAX_DELAY) == HAL_OK) {
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <i2c1_write+0x44>)
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	b299      	uxth	r1, r3
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	2301      	movs	r3, #1
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	1dbb      	adds	r3, r7, #6
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	2301      	movs	r3, #1
 800ce0a:	4807      	ldr	r0, [pc, #28]	; (800ce28 <i2c1_write+0x48>)
 800ce0c:	f7f7 ffac 	bl	8004d68 <HAL_I2C_Mem_Write>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <i2c1_write+0x3a>
		return 1;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e000      	b.n	800ce1c <i2c1_write+0x3c>
	} else {
		return 0;
 800ce1a:	2300      	movs	r3, #0
	}
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20002d4c 	.word	0x20002d4c
 800ce28:	2000041c 	.word	0x2000041c

0800ce2c <debugPutChar>:

void debugPutChar(char ch) {
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4603      	mov	r3, r0
 800ce34:	71fb      	strb	r3, [r7, #7]
	printf("%d", ch);
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	4803      	ldr	r0, [pc, #12]	; (800ce48 <debugPutChar+0x1c>)
 800ce3c:	f00b ff7a 	bl	8018d34 <iprintf>
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	0801b170 	.word	0x0801b170

0800ce4c <debugPutString>:

void debugPutString(char *ch) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
	printf("%s", ch);
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4803      	ldr	r0, [pc, #12]	; (800ce64 <debugPutString+0x18>)
 800ce58:	f00b ff6c 	bl	8018d34 <iprintf>
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	0801b174 	.word	0x0801b174

0800ce68 <apds9960init>:
 *  Return : 1 if initialized successfully. 0 otherwise
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int apds9960init(void) {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	uint8_t id;
	//ledSetLeftLed(LED_ON);

	/* Initialize I2C */

	for (int i = 0; i < 255; i++) {
 800ce6e:	2300      	movs	r3, #0
 800ce70:	607b      	str	r3, [r7, #4]
 800ce72:	e020      	b.n	800ceb6 <apds9960init+0x4e>
		HAL_Delay(1);
 800ce74:	2001      	movs	r0, #1
 800ce76:	f7f6 ffa7 	bl	8003dc8 <HAL_Delay>

		if (HAL_I2C_IsDeviceReady(&hi2c1, i, 3, HAL_MAX_DELAY) == 0) {
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	b299      	uxth	r1, r3
 800ce7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce82:	2203      	movs	r2, #3
 800ce84:	489e      	ldr	r0, [pc, #632]	; (800d100 <apds9960init+0x298>)
 800ce86:	f7f8 fa8f 	bl	80053a8 <HAL_I2C_IsDeviceReady>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10f      	bne.n	800ceb0 <apds9960init+0x48>
			sensorAdr = i;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	4b9b      	ldr	r3, [pc, #620]	; (800d104 <apds9960init+0x29c>)
 800ce96:	701a      	strb	r2, [r3, #0]
			printf("Sensor found on adress^ %d/%x\r\n", sensorAdr, (sensorAdr >> 1));
 800ce98:	4b9a      	ldr	r3, [pc, #616]	; (800d104 <apds9960init+0x29c>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	4b99      	ldr	r3, [pc, #612]	; (800d104 <apds9960init+0x29c>)
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	085b      	lsrs	r3, r3, #1
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	4897      	ldr	r0, [pc, #604]	; (800d108 <apds9960init+0x2a0>)
 800ceaa:	f00b ff43 	bl	8018d34 <iprintf>
			break;
 800ceae:	e005      	b.n	800cebc <apds9960init+0x54>
	for (int i = 0; i < 255; i++) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	607b      	str	r3, [r7, #4]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2bfe      	cmp	r3, #254	; 0xfe
 800ceba:	dddb      	ble.n	800ce74 <apds9960init+0xc>
		}

	}

	/* Read ID register and check against known values for APDS-9960 */
	if (i2c1_read(APDS9960_ID, &id, 1) == 0) {
 800cebc:	1cfb      	adds	r3, r7, #3
 800cebe:	2201      	movs	r2, #1
 800cec0:	4619      	mov	r1, r3
 800cec2:	2092      	movs	r0, #146	; 0x92
 800cec4:	f7ff ff64 	bl	800cd90 <i2c1_read>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d106      	bne.n	800cedc <apds9960init+0x74>
		printf("read sensor ID failed at %d\r\n", id);
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	4619      	mov	r1, r3
 800ced2:	488e      	ldr	r0, [pc, #568]	; (800d10c <apds9960init+0x2a4>)
 800ced4:	f00b ff2e 	bl	8018d34 <iprintf>
		return 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e10d      	b.n	800d0f8 <apds9960init+0x290>

	}

	if (!(id == APDS9960_ID_1 || id == APDS9960_ID_2 || id == APDS9960_ID_3)) {
 800cedc:	78fb      	ldrb	r3, [r7, #3]
 800cede:	2bab      	cmp	r3, #171	; 0xab
 800cee0:	d007      	beq.n	800cef2 <apds9960init+0x8a>
 800cee2:	78fb      	ldrb	r3, [r7, #3]
 800cee4:	2b9c      	cmp	r3, #156	; 0x9c
 800cee6:	d004      	beq.n	800cef2 <apds9960init+0x8a>
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	2ba8      	cmp	r3, #168	; 0xa8
 800ceec:	d001      	beq.n	800cef2 <apds9960init+0x8a>
		return 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e102      	b.n	800d0f8 <apds9960init+0x290>
	}

	/* Set ENABLE register to 0 (disable all features) */
	if (!setMode(ALL, OFF)) {
 800cef2:	2100      	movs	r1, #0
 800cef4:	2007      	movs	r0, #7
 800cef6:	f000 f90b 	bl	800d110 <setMode>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d101      	bne.n	800cf04 <apds9960init+0x9c>
		return 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	e0f9      	b.n	800d0f8 <apds9960init+0x290>
	}

	/* Set default values for ambient light and proximity registers */
	if (!i2c1_write(APDS9960_ATIME, DEFAULT_ATIME)) {
 800cf04:	21fa      	movs	r1, #250	; 0xfa
 800cf06:	2081      	movs	r0, #129	; 0x81
 800cf08:	f7ff ff6a 	bl	800cde0 <i2c1_write>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <apds9960init+0xae>
		return 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	e0f0      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_WTIME, DEFAULT_WTIME)) {
 800cf16:	21ff      	movs	r1, #255	; 0xff
 800cf18:	2083      	movs	r0, #131	; 0x83
 800cf1a:	f7ff ff61 	bl	800cde0 <i2c1_write>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <apds9960init+0xc0>
		return 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e0e7      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_PPULSE, DEFAULT_PROX_PPULSE)) {
 800cf28:	2187      	movs	r1, #135	; 0x87
 800cf2a:	208e      	movs	r0, #142	; 0x8e
 800cf2c:	f7ff ff58 	bl	800cde0 <i2c1_write>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <apds9960init+0xd2>
		return 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e0de      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR)) {
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	209d      	movs	r0, #157	; 0x9d
 800cf3e:	f7ff ff4f 	bl	800cde0 <i2c1_write>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <apds9960init+0xe4>
		return 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e0d5      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL)) {
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	209e      	movs	r0, #158	; 0x9e
 800cf50:	f7ff ff46 	bl	800cde0 <i2c1_write>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <apds9960init+0xf6>
		return 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e0cc      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_CONFIG1, DEFAULT_CONFIG1)) {
 800cf5e:	2160      	movs	r1, #96	; 0x60
 800cf60:	208d      	movs	r0, #141	; 0x8d
 800cf62:	f7ff ff3d 	bl	800cde0 <i2c1_write>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <apds9960init+0x108>
		return 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e0c3      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setLEDDrive(DEFAULT_LDRIVE)) {
 800cf70:	2000      	movs	r0, #0
 800cf72:	f000 f92d 	bl	800d1d0 <setLEDDrive>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <apds9960init+0x118>
		return 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	e0bb      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setProximityGain(DEFAULT_PGAIN)) {
 800cf80:	2002      	movs	r0, #2
 800cf82:	f000 f956 	bl	800d232 <setProximityGain>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <apds9960init+0x128>
		return 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e0b3      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setAmbientLightGain(DEFAULT_AGAIN)) {
 800cf90:	2001      	movs	r0, #1
 800cf92:	f000 f97f 	bl	800d294 <setAmbientLightGain>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <apds9960init+0x138>
		return 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	e0ab      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setProxIntLowThresh(DEFAULT_PILT)) {
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	f000 f9a5 	bl	800d2f0 <setProxIntLowThresh>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <apds9960init+0x148>
		return 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	e0a3      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setProxIntHighThresh(DEFAULT_PIHT)) {
 800cfb0:	2032      	movs	r0, #50	; 0x32
 800cfb2:	f000 f9b1 	bl	800d318 <setProxIntHighThresh>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <apds9960init+0x158>
		return 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e09b      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setLightIntLowThreshold(DEFAULT_AILT)) {
 800cfc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cfc4:	f000 f9bc 	bl	800d340 <setLightIntLowThreshold>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <apds9960init+0x16a>
		return 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e092      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setLightIntHighThreshold(DEFAULT_AIHT)) {
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	f000 f9d8 	bl	800d388 <setLightIntHighThreshold>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <apds9960init+0x17a>
		return 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e08a      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_PERS, DEFAULT_PERS)) {
 800cfe2:	2111      	movs	r1, #17
 800cfe4:	208c      	movs	r0, #140	; 0x8c
 800cfe6:	f7ff fefb 	bl	800cde0 <i2c1_write>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <apds9960init+0x18c>
		return 0;
 800cff0:	2300      	movs	r3, #0
 800cff2:	e081      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_CONFIG2, DEFAULT_CONFIG2)) {
 800cff4:	2101      	movs	r1, #1
 800cff6:	2090      	movs	r0, #144	; 0x90
 800cff8:	f7ff fef2 	bl	800cde0 <i2c1_write>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <apds9960init+0x19e>
		return 0;
 800d002:	2300      	movs	r3, #0
 800d004:	e078      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_CONFIG3, DEFAULT_CONFIG3)) {
 800d006:	2100      	movs	r1, #0
 800d008:	209f      	movs	r0, #159	; 0x9f
 800d00a:	f7ff fee9 	bl	800cde0 <i2c1_write>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d101      	bne.n	800d018 <apds9960init+0x1b0>
		return 0;
 800d014:	2300      	movs	r3, #0
 800d016:	e06f      	b.n	800d0f8 <apds9960init+0x290>
	}

	/* Set default values for gesture sense registers */
	if (!setGestureEnterThresh(DEFAULT_GPENTH)) {
 800d018:	2028      	movs	r0, #40	; 0x28
 800d01a:	f000 faae 	bl	800d57a <setGestureEnterThresh>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <apds9960init+0x1c0>
		return 0;
 800d024:	2300      	movs	r3, #0
 800d026:	e067      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setGestureExitThresh(DEFAULT_GEXTH)) {
 800d028:	201e      	movs	r0, #30
 800d02a:	f000 fa92 	bl	800d552 <setGestureExitThresh>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <apds9960init+0x1d0>
		return 0;
 800d034:	2300      	movs	r3, #0
 800d036:	e05f      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GCONF1, DEFAULT_GCONF1)) {
 800d038:	2140      	movs	r1, #64	; 0x40
 800d03a:	20a2      	movs	r0, #162	; 0xa2
 800d03c:	f7ff fed0 	bl	800cde0 <i2c1_write>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <apds9960init+0x1e2>
		return 0;
 800d046:	2300      	movs	r3, #0
 800d048:	e056      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setGestureGain(DEFAULT_GGAIN)) {
 800d04a:	2000      	movs	r0, #0
 800d04c:	f000 fa50 	bl	800d4f0 <setGestureGain>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <apds9960init+0x1f2>
		return 0;
 800d056:	2300      	movs	r3, #0
 800d058:	e04e      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setGestureLEDDrive(DEFAULT_GLDRIVE)) {
 800d05a:	2002      	movs	r0, #2
 800d05c:	f000 fa17 	bl	800d48e <setGestureLEDDrive>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <apds9960init+0x202>
		return 0;
 800d066:	2300      	movs	r3, #0
 800d068:	e046      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setGestureWaitTime(DEFAULT_GWTIME)) {
 800d06a:	2000      	movs	r0, #0
 800d06c:	f000 f9e1 	bl	800d432 <setGestureWaitTime>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <apds9960init+0x212>
		return 0;
 800d076:	2300      	movs	r3, #0
 800d078:	e03e      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GOFFSET_U, DEFAULT_GOFFSET)) {
 800d07a:	2100      	movs	r1, #0
 800d07c:	20a4      	movs	r0, #164	; 0xa4
 800d07e:	f7ff feaf 	bl	800cde0 <i2c1_write>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <apds9960init+0x224>
		return 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	e035      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GOFFSET_D, DEFAULT_GOFFSET)) {
 800d08c:	2100      	movs	r1, #0
 800d08e:	20a5      	movs	r0, #165	; 0xa5
 800d090:	f7ff fea6 	bl	800cde0 <i2c1_write>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d101      	bne.n	800d09e <apds9960init+0x236>
		return 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	e02c      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GOFFSET_L, DEFAULT_GOFFSET)) {
 800d09e:	2100      	movs	r1, #0
 800d0a0:	20a7      	movs	r0, #167	; 0xa7
 800d0a2:	f7ff fe9d 	bl	800cde0 <i2c1_write>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <apds9960init+0x248>
		return 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	e023      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GOFFSET_R, DEFAULT_GOFFSET)) {
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	20a9      	movs	r0, #169	; 0xa9
 800d0b4:	f7ff fe94 	bl	800cde0 <i2c1_write>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <apds9960init+0x25a>
		return 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e01a      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GPULSE, DEFAULT_GPULSE)) {
 800d0c2:	21c9      	movs	r1, #201	; 0xc9
 800d0c4:	20a6      	movs	r0, #166	; 0xa6
 800d0c6:	f7ff fe8b 	bl	800cde0 <i2c1_write>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <apds9960init+0x26c>
		return 0;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	e011      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!i2c1_write(APDS9960_GCONF3, DEFAULT_GCONF3)) {
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	20aa      	movs	r0, #170	; 0xaa
 800d0d8:	f7ff fe82 	bl	800cde0 <i2c1_write>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <apds9960init+0x27e>
		return 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e008      	b.n	800d0f8 <apds9960init+0x290>
	}
	if (!setGestureIntEnable(DEFAULT_GIEN)) {
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	f000 f972 	bl	800d3d0 <setGestureIntEnable>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <apds9960init+0x28e>
		return 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e000      	b.n	800d0f8 <apds9960init+0x290>
	}

	return 1;
 800d0f6:	2301      	movs	r3, #1
}/* End of this function */
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	2000041c 	.word	0x2000041c
 800d104:	20002d4c 	.word	0x20002d4c
 800d108:	0801b178 	.word	0x0801b178
 800d10c:	0801b198 	.word	0x0801b198

0800d110 <setMode>:
 *  Return : 1 if operation success. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setMode(uint8_t mode, uint8_t enable) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	460a      	mov	r2, r1
 800d11a:	71fb      	strb	r3, [r7, #7]
 800d11c:	4613      	mov	r3, r2
 800d11e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;

	/* Read current ENABLE register */
	reg_val = getMode();
 800d120:	f000 f843 	bl	800d1aa <getMode>
 800d124:	4603      	mov	r3, r0
 800d126:	73fb      	strb	r3, [r7, #15]
	if (reg_val == ERROR) {
 800d128:	7bfb      	ldrb	r3, [r7, #15]
 800d12a:	2bff      	cmp	r3, #255	; 0xff
 800d12c:	d101      	bne.n	800d132 <setMode+0x22>
		return 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	e037      	b.n	800d1a2 <setMode+0x92>
	}

	/* Change bit(s) in ENABLE register */
	enable = enable & 0x01;
 800d132:	79bb      	ldrb	r3, [r7, #6]
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	71bb      	strb	r3, [r7, #6]
	if (mode >= 0 && mode <= 6) {
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	2b06      	cmp	r3, #6
 800d13e:	d81a      	bhi.n	800d176 <setMode+0x66>
		if (enable) {
 800d140:	79bb      	ldrb	r3, [r7, #6]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00a      	beq.n	800d15c <setMode+0x4c>
			reg_val |= (1 << mode);
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	2201      	movs	r2, #1
 800d14a:	fa02 f303 	lsl.w	r3, r2, r3
 800d14e:	b25a      	sxtb	r2, r3
 800d150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d154:	4313      	orrs	r3, r2
 800d156:	b25b      	sxtb	r3, r3
 800d158:	73fb      	strb	r3, [r7, #15]
 800d15a:	e017      	b.n	800d18c <setMode+0x7c>
		} else {
			reg_val &= ~(1 << mode);
 800d15c:	79fb      	ldrb	r3, [r7, #7]
 800d15e:	2201      	movs	r2, #1
 800d160:	fa02 f303 	lsl.w	r3, r2, r3
 800d164:	b25b      	sxtb	r3, r3
 800d166:	43db      	mvns	r3, r3
 800d168:	b25a      	sxtb	r2, r3
 800d16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d16e:	4013      	ands	r3, r2
 800d170:	b25b      	sxtb	r3, r3
 800d172:	73fb      	strb	r3, [r7, #15]
 800d174:	e00a      	b.n	800d18c <setMode+0x7c>
		}
	} else if (mode == ALL) {
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	2b07      	cmp	r3, #7
 800d17a:	d107      	bne.n	800d18c <setMode+0x7c>
		if (enable) {
 800d17c:	79bb      	ldrb	r3, [r7, #6]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <setMode+0x78>
			reg_val = 0x7F;
 800d182:	237f      	movs	r3, #127	; 0x7f
 800d184:	73fb      	strb	r3, [r7, #15]
 800d186:	e001      	b.n	800d18c <setMode+0x7c>
		} else {
			reg_val = 0x00;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
		}
	}

	/* Write value back to ENABLE register */
	if (!i2c1_write(APDS9960_ENABLE, reg_val)) {
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
 800d18e:	4619      	mov	r1, r3
 800d190:	2080      	movs	r0, #128	; 0x80
 800d192:	f7ff fe25 	bl	800cde0 <i2c1_write>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <setMode+0x90>
		return 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	e000      	b.n	800d1a2 <setMode+0x92>
	}

	return 1;
 800d1a0:	2301      	movs	r3, #1
}/* End of this function */
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <getMode>:
 *  Return : Contents of the ENABLE register. 0xFF if error.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
uint8_t getMode(void) {
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b082      	sub	sp, #8
 800d1ae:	af00      	add	r7, sp, #0
	uint8_t enable_value;

	/* Read current ENABLE register */
	if (!i2c1_read(APDS9960_ENABLE, &enable_value, 1)) {
 800d1b0:	1dfb      	adds	r3, r7, #7
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	2080      	movs	r0, #128	; 0x80
 800d1b8:	f7ff fdea 	bl	800cd90 <i2c1_read>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <getMode+0x1c>
		return ERROR;
 800d1c2:	23ff      	movs	r3, #255	; 0xff
 800d1c4:	e000      	b.n	800d1c8 <getMode+0x1e>
	}

	return enable_value;
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
}/* End of this function */
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <setLEDDrive>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLEDDrive(uint8_t drive) {
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from CONTROL register */
	if (!i2c1_read(APDS9960_CONTROL, &val, 1)) {
 800d1da:	f107 030f 	add.w	r3, r7, #15
 800d1de:	2201      	movs	r2, #1
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	208f      	movs	r0, #143	; 0x8f
 800d1e4:	f7ff fdd4 	bl	800cd90 <i2c1_read>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <setLEDDrive+0x22>
		return 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e01b      	b.n	800d22a <setLEDDrive+0x5a>
	}

	/* Set bits in register to given value */
	drive &= 0x03;
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	f003 0303 	and.w	r3, r3, #3
 800d1f8:	71fb      	strb	r3, [r7, #7]
	drive = drive << 6;
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	019b      	lsls	r3, r3, #6
 800d1fe:	71fb      	strb	r3, [r7, #7]
	val &= 0x3F;
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d206:	b2db      	uxtb	r3, r3
 800d208:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 800d20a:	7bfa      	ldrb	r2, [r7, #15]
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	4313      	orrs	r3, r2
 800d210:	b2db      	uxtb	r3, r3
 800d212:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONTROL register */
	if (!i2c1_write(APDS9960_CONTROL, val)) {
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	4619      	mov	r1, r3
 800d218:	208f      	movs	r0, #143	; 0x8f
 800d21a:	f7ff fde1 	bl	800cde0 <i2c1_write>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <setLEDDrive+0x58>
		return 0;
 800d224:	2300      	movs	r3, #0
 800d226:	e000      	b.n	800d22a <setLEDDrive+0x5a>
	}

	return 1;
 800d228:	2301      	movs	r3, #1
}/* End of this function */
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <setProximityGain>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setProximityGain(uint8_t drive) {
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	4603      	mov	r3, r0
 800d23a:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from CONTROL register */
	if (!i2c1_read(APDS9960_CONTROL, &val, 1)) {
 800d23c:	f107 030f 	add.w	r3, r7, #15
 800d240:	2201      	movs	r2, #1
 800d242:	4619      	mov	r1, r3
 800d244:	208f      	movs	r0, #143	; 0x8f
 800d246:	f7ff fda3 	bl	800cd90 <i2c1_read>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <setProximityGain+0x22>
		return 0;
 800d250:	2300      	movs	r3, #0
 800d252:	e01b      	b.n	800d28c <setProximityGain+0x5a>
	}

	/* Set bits in register to given value */
	drive &= 0x03;
 800d254:	79fb      	ldrb	r3, [r7, #7]
 800d256:	f003 0303 	and.w	r3, r3, #3
 800d25a:	71fb      	strb	r3, [r7, #7]
	drive = drive << 2;
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	71fb      	strb	r3, [r7, #7]
	val &= 0xF3;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	f023 030c 	bic.w	r3, r3, #12
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 800d26c:	7bfa      	ldrb	r2, [r7, #15]
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	4313      	orrs	r3, r2
 800d272:	b2db      	uxtb	r3, r3
 800d274:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONTROL register */
	if (!i2c1_write(APDS9960_CONTROL, val)) {
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	4619      	mov	r1, r3
 800d27a:	208f      	movs	r0, #143	; 0x8f
 800d27c:	f7ff fdb0 	bl	800cde0 <i2c1_write>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <setProximityGain+0x58>
		return 0;
 800d286:	2300      	movs	r3, #0
 800d288:	e000      	b.n	800d28c <setProximityGain+0x5a>
	}

	return 1;
 800d28a:	2301      	movs	r3, #1
}/* End of this function */
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <setAmbientLightGain>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setAmbientLightGain(uint8_t drive) {
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from CONTROL register */
	if (!i2c1_read(APDS9960_CONTROL, &val, 1)) {
 800d29e:	f107 030f 	add.w	r3, r7, #15
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	208f      	movs	r0, #143	; 0x8f
 800d2a8:	f7ff fd72 	bl	800cd90 <i2c1_read>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <setAmbientLightGain+0x22>
		return 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	e018      	b.n	800d2e8 <setAmbientLightGain+0x54>
	}

	/* Set bits in register to given value */
	drive &= 0x03;
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	f003 0303 	and.w	r3, r3, #3
 800d2bc:	71fb      	strb	r3, [r7, #7]
	val &= 0xFC;
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
 800d2c0:	f023 0303 	bic.w	r3, r3, #3
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 800d2c8:	7bfa      	ldrb	r2, [r7, #15]
 800d2ca:	79fb      	ldrb	r3, [r7, #7]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONTROL register */
	if (!i2c1_write(APDS9960_CONTROL, val)) {
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	208f      	movs	r0, #143	; 0x8f
 800d2d8:	f7ff fd82 	bl	800cde0 <i2c1_write>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <setAmbientLightGain+0x52>
		return 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	e000      	b.n	800d2e8 <setAmbientLightGain+0x54>
	}

	return 1;
 800d2e6:	2301      	movs	r3, #1
}/* End of this function */
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <setProxIntLowThresh>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/

int setProxIntLowThresh(uint8_t threshold) {
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	71fb      	strb	r3, [r7, #7]
	if (!i2c1_write(APDS9960_PILT, threshold)) {
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	2089      	movs	r0, #137	; 0x89
 800d300:	f7ff fd6e 	bl	800cde0 <i2c1_write>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <setProxIntLowThresh+0x1e>
		return 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	e000      	b.n	800d310 <setProxIntLowThresh+0x20>
	}

	return 1;
 800d30e:	2301      	movs	r3, #1
}/* End of this function */
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <setProxIntHighThresh>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setProxIntHighThresh(uint8_t threshold) {
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	71fb      	strb	r3, [r7, #7]
	if (!i2c1_write(APDS9960_PIHT, threshold)) {
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	4619      	mov	r1, r3
 800d326:	208b      	movs	r0, #139	; 0x8b
 800d328:	f7ff fd5a 	bl	800cde0 <i2c1_write>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <setProxIntHighThresh+0x1e>
		return 0;
 800d332:	2300      	movs	r3, #0
 800d334:	e000      	b.n	800d338 <setProxIntHighThresh+0x20>
	}

	return 1;
 800d336:	2301      	movs	r3, #1
}/* End of this function */
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <setLightIntLowThreshold>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLightIntLowThreshold(uint16_t threshold) {
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	80fb      	strh	r3, [r7, #6]
	uint8_t val_low;
	uint8_t val_high;

	/* Break 16-bit threshold into 2 8-bit values */
	val_low = threshold & 0x00FF;
 800d34a:	88fb      	ldrh	r3, [r7, #6]
 800d34c:	73fb      	strb	r3, [r7, #15]
	val_high = (threshold & 0xFF00) >> 8;
 800d34e:	88fb      	ldrh	r3, [r7, #6]
 800d350:	0a1b      	lsrs	r3, r3, #8
 800d352:	b29b      	uxth	r3, r3
 800d354:	73bb      	strb	r3, [r7, #14]

	/* Write low byte */
	if (!i2c1_write(APDS9960_AILTL, val_low)) {
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	4619      	mov	r1, r3
 800d35a:	2084      	movs	r0, #132	; 0x84
 800d35c:	f7ff fd40 	bl	800cde0 <i2c1_write>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <setLightIntLowThreshold+0x2a>
		return 0;
 800d366:	2300      	movs	r3, #0
 800d368:	e00a      	b.n	800d380 <setLightIntLowThreshold+0x40>
	}

	/* Write high byte */
	if (!i2c1_write(APDS9960_AILTH, val_high)) {
 800d36a:	7bbb      	ldrb	r3, [r7, #14]
 800d36c:	4619      	mov	r1, r3
 800d36e:	2085      	movs	r0, #133	; 0x85
 800d370:	f7ff fd36 	bl	800cde0 <i2c1_write>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <setLightIntLowThreshold+0x3e>
		return 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	e000      	b.n	800d380 <setLightIntLowThreshold+0x40>
	}

	return 1;
 800d37e:	2301      	movs	r3, #1
}/* End of this function */
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <setLightIntHighThreshold>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLightIntHighThreshold(uint16_t threshold) {
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	80fb      	strh	r3, [r7, #6]
	uint8_t val_low;
	uint8_t val_high;

	/* Break 16-bit threshold into 2 8-bit values */
	val_low = threshold & 0x00FF;
 800d392:	88fb      	ldrh	r3, [r7, #6]
 800d394:	73fb      	strb	r3, [r7, #15]
	val_high = (threshold & 0xFF00) >> 8;
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	0a1b      	lsrs	r3, r3, #8
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	73bb      	strb	r3, [r7, #14]

	/* Write low byte */
	if (!i2c1_write(APDS9960_AIHTL, val_low)) {
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	2086      	movs	r0, #134	; 0x86
 800d3a4:	f7ff fd1c 	bl	800cde0 <i2c1_write>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <setLightIntHighThreshold+0x2a>
		return 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e00a      	b.n	800d3c8 <setLightIntHighThreshold+0x40>
	}

	/* Write high byte */
	if (!i2c1_write(APDS9960_AIHTH, val_high)) {
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	2087      	movs	r0, #135	; 0x87
 800d3b8:	f7ff fd12 	bl	800cde0 <i2c1_write>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d101      	bne.n	800d3c6 <setLightIntHighThreshold+0x3e>
		return 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e000      	b.n	800d3c8 <setLightIntHighThreshold+0x40>
	}

	return 1;
 800d3c6:	2301      	movs	r3, #1
}/* End of this function */
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <setGestureIntEnable>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureIntEnable(uint8_t enable) {
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from GCONF4 register */
	if (!i2c1_read(APDS9960_GCONF4, &val, 1)) {
 800d3da:	f107 030f 	add.w	r3, r7, #15
 800d3de:	2201      	movs	r2, #1
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	20ab      	movs	r0, #171	; 0xab
 800d3e4:	f7ff fcd4 	bl	800cd90 <i2c1_read>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <setGestureIntEnable+0x22>
		return 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e01b      	b.n	800d42a <setGestureIntEnable+0x5a>
	}

	/* Set bits in register to given value */
	enable &= 0x01;
 800d3f2:	79fb      	ldrb	r3, [r7, #7]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	71fb      	strb	r3, [r7, #7]
	enable = enable << 1;
 800d3fa:	79fb      	ldrb	r3, [r7, #7]
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	71fb      	strb	r3, [r7, #7]
	val &= 0xFD;
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	f023 0302 	bic.w	r3, r3, #2
 800d406:	b2db      	uxtb	r3, r3
 800d408:	73fb      	strb	r3, [r7, #15]
	val |= enable;
 800d40a:	7bfa      	ldrb	r2, [r7, #15]
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	4313      	orrs	r3, r2
 800d410:	b2db      	uxtb	r3, r3
 800d412:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF4 register */
	if (!i2c1_write(APDS9960_GCONF4, val)) {
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	4619      	mov	r1, r3
 800d418:	20ab      	movs	r0, #171	; 0xab
 800d41a:	f7ff fce1 	bl	800cde0 <i2c1_write>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <setGestureIntEnable+0x58>
		return 0;
 800d424:	2300      	movs	r3, #0
 800d426:	e000      	b.n	800d42a <setGestureIntEnable+0x5a>
	}

	return 1;
 800d428:	2301      	movs	r3, #1
}/* End of this function */
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <setGestureWaitTime>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureWaitTime(uint8_t time) {
 800d432:	b580      	push	{r7, lr}
 800d434:	b084      	sub	sp, #16
 800d436:	af00      	add	r7, sp, #0
 800d438:	4603      	mov	r3, r0
 800d43a:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from GCONF2 register */
	if (!i2c1_read(APDS9960_GCONF2, &val, 1)) {
 800d43c:	f107 030f 	add.w	r3, r7, #15
 800d440:	2201      	movs	r2, #1
 800d442:	4619      	mov	r1, r3
 800d444:	20a3      	movs	r0, #163	; 0xa3
 800d446:	f7ff fca3 	bl	800cd90 <i2c1_read>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <setGestureWaitTime+0x22>
		return 0;
 800d450:	2300      	movs	r3, #0
 800d452:	e018      	b.n	800d486 <setGestureWaitTime+0x54>
	}

	/* Set bits in register to given value */
	time &= 0x07;
 800d454:	79fb      	ldrb	r3, [r7, #7]
 800d456:	f003 0307 	and.w	r3, r3, #7
 800d45a:	71fb      	strb	r3, [r7, #7]
	val &= 0xF8;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
 800d45e:	f023 0307 	bic.w	r3, r3, #7
 800d462:	b2db      	uxtb	r3, r3
 800d464:	73fb      	strb	r3, [r7, #15]
	val |= time;
 800d466:	7bfa      	ldrb	r2, [r7, #15]
 800d468:	79fb      	ldrb	r3, [r7, #7]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF2 register */
	if (!i2c1_write(APDS9960_GCONF2, val)) {
 800d470:	7bfb      	ldrb	r3, [r7, #15]
 800d472:	4619      	mov	r1, r3
 800d474:	20a3      	movs	r0, #163	; 0xa3
 800d476:	f7ff fcb3 	bl	800cde0 <i2c1_write>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <setGestureWaitTime+0x52>
		return 0;
 800d480:	2300      	movs	r3, #0
 800d482:	e000      	b.n	800d486 <setGestureWaitTime+0x54>
	}

	return 1;
 800d484:	2301      	movs	r3, #1
}/* End of this function */
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <setGestureLEDDrive>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureLEDDrive(uint8_t drive) {
 800d48e:	b580      	push	{r7, lr}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	4603      	mov	r3, r0
 800d496:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from GCONF2 register */
	if (!i2c1_read(APDS9960_GCONF2, &val, 1)) {
 800d498:	f107 030f 	add.w	r3, r7, #15
 800d49c:	2201      	movs	r2, #1
 800d49e:	4619      	mov	r1, r3
 800d4a0:	20a3      	movs	r0, #163	; 0xa3
 800d4a2:	f7ff fc75 	bl	800cd90 <i2c1_read>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <setGestureLEDDrive+0x22>
		return 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e01b      	b.n	800d4e8 <setGestureLEDDrive+0x5a>
	}

	/* Set bits in register to given value */
	drive &= 0x03;
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	71fb      	strb	r3, [r7, #7]
	drive = drive << 3;
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	71fb      	strb	r3, [r7, #7]
	val &= 0xE7;
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	f023 0318 	bic.w	r3, r3, #24
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 800d4c8:	7bfa      	ldrb	r2, [r7, #15]
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF2 register */
	if (!i2c1_write(APDS9960_GCONF2, val)) {
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	20a3      	movs	r0, #163	; 0xa3
 800d4d8:	f7ff fc82 	bl	800cde0 <i2c1_write>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <setGestureLEDDrive+0x58>
		return 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e000      	b.n	800d4e8 <setGestureLEDDrive+0x5a>
	}

	return 1;
 800d4e6:	2301      	movs	r3, #1
}/* End of this function */
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <setGestureGain>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureGain(uint8_t gain) {
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from GCONF2 register */
	if (!i2c1_read(APDS9960_GCONF2, &val, 1)) {
 800d4fa:	f107 030f 	add.w	r3, r7, #15
 800d4fe:	2201      	movs	r2, #1
 800d500:	4619      	mov	r1, r3
 800d502:	20a3      	movs	r0, #163	; 0xa3
 800d504:	f7ff fc44 	bl	800cd90 <i2c1_read>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <setGestureGain+0x22>
		return 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	e01b      	b.n	800d54a <setGestureGain+0x5a>
	}

	/* Set bits in register to given value */
	gain &= 0x03;
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	f003 0303 	and.w	r3, r3, #3
 800d518:	71fb      	strb	r3, [r7, #7]
	gain = gain << 5;
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	015b      	lsls	r3, r3, #5
 800d51e:	71fb      	strb	r3, [r7, #7]
	val &= 0x9F;
 800d520:	7bfb      	ldrb	r3, [r7, #15]
 800d522:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d526:	b2db      	uxtb	r3, r3
 800d528:	73fb      	strb	r3, [r7, #15]
	val |= gain;
 800d52a:	7bfa      	ldrb	r2, [r7, #15]
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	4313      	orrs	r3, r2
 800d530:	b2db      	uxtb	r3, r3
 800d532:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF2 register */
	if (!i2c1_write(APDS9960_GCONF2, val)) {
 800d534:	7bfb      	ldrb	r3, [r7, #15]
 800d536:	4619      	mov	r1, r3
 800d538:	20a3      	movs	r0, #163	; 0xa3
 800d53a:	f7ff fc51 	bl	800cde0 <i2c1_write>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <setGestureGain+0x58>
		return 0;
 800d544:	2300      	movs	r3, #0
 800d546:	e000      	b.n	800d54a <setGestureGain+0x5a>
	}

	return 1;
 800d548:	2301      	movs	r3, #1
}/* End of this function */
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <setGestureExitThresh>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureExitThresh(uint8_t threshold) {
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	4603      	mov	r3, r0
 800d55a:	71fb      	strb	r3, [r7, #7]
	if (!i2c1_write(APDS9960_GEXTH, threshold)) {
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	4619      	mov	r1, r3
 800d560:	20a1      	movs	r0, #161	; 0xa1
 800d562:	f7ff fc3d 	bl	800cde0 <i2c1_write>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d101      	bne.n	800d570 <setGestureExitThresh+0x1e>
		return 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	e000      	b.n	800d572 <setGestureExitThresh+0x20>
	}

	return 1;
 800d570:	2301      	movs	r3, #1
}/* End of this function */
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <setGestureEnterThresh>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureEnterThresh(uint8_t threshold) {
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	4603      	mov	r3, r0
 800d582:	71fb      	strb	r3, [r7, #7]
	if (!i2c1_write(APDS9960_GPENTH, threshold)) {
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	4619      	mov	r1, r3
 800d588:	20a0      	movs	r0, #160	; 0xa0
 800d58a:	f7ff fc29 	bl	800cde0 <i2c1_write>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <setGestureEnterThresh+0x1e>
		return 0;
 800d594:	2300      	movs	r3, #0
 800d596:	e000      	b.n	800d59a <setGestureEnterThresh+0x20>
	}

	return 1;
 800d598:	2301      	movs	r3, #1
}/* End of this function */
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <enableGestureSensor>:
 *  Return : 1 if engine enabled correctly. 0 on error.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int enableGestureSensor(int interrupts) {
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
	 Set ENABLE to 0 (power off)
	 Set WTIME to 0xFF
	 Set AUX to LED_BOOST_300
	 Enable PON, WEN, PEN, GEN in ENABLE
	 */
	resetGestureParameters();
 800d5aa:	f000 f85d 	bl	800d668 <resetGestureParameters>
	if (!i2c1_write(APDS9960_WTIME, 0xFF)) {
 800d5ae:	21ff      	movs	r1, #255	; 0xff
 800d5b0:	2083      	movs	r0, #131	; 0x83
 800d5b2:	f7ff fc15 	bl	800cde0 <i2c1_write>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <enableGestureSensor+0x1e>
		return 0;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e04e      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	if (!i2c1_write(APDS9960_PPULSE, DEFAULT_GESTURE_PPULSE)) {
 800d5c0:	2149      	movs	r1, #73	; 0x49
 800d5c2:	208e      	movs	r0, #142	; 0x8e
 800d5c4:	f7ff fc0c 	bl	800cde0 <i2c1_write>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <enableGestureSensor+0x30>
		return 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e045      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	//if (!setLEDBoost(LED_BOOST_300)) {
	if (!setLEDBoost(DEFAULT_LED_BOOST)) {
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	f000 f882 	bl	800d6dc <setLEDBoost>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <enableGestureSensor+0x40>
		return 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e03d      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	if (interrupts) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d007      	beq.n	800d5f8 <enableGestureSensor+0x56>
		if (!setGestureIntEnable(1)) {
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	f7ff fef1 	bl	800d3d0 <setGestureIntEnable>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d109      	bne.n	800d608 <enableGestureSensor+0x66>
			return 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e032      	b.n	800d65e <enableGestureSensor+0xbc>
		}
	} else {
		if (!setGestureIntEnable(0)) {
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	f7ff fee9 	bl	800d3d0 <setGestureIntEnable>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <enableGestureSensor+0x66>
			return 0;
 800d604:	2300      	movs	r3, #0
 800d606:	e02a      	b.n	800d65e <enableGestureSensor+0xbc>
		}
	}
	if (!setGestureMode(1)) {
 800d608:	2001      	movs	r0, #1
 800d60a:	f000 f898 	bl	800d73e <setGestureMode>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d101      	bne.n	800d618 <enableGestureSensor+0x76>
		return 0;
 800d614:	2300      	movs	r3, #0
 800d616:	e022      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	if (!enablePower()) {
 800d618:	f000 f8bf 	bl	800d79a <enablePower>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <enableGestureSensor+0x84>
		return 0;
 800d622:	2300      	movs	r3, #0
 800d624:	e01b      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	if (!setMode(WAIT, 0)) {
 800d626:	2100      	movs	r1, #0
 800d628:	2003      	movs	r0, #3
 800d62a:	f7ff fd71 	bl	800d110 <setMode>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <enableGestureSensor+0x96>
		return 0;
 800d634:	2300      	movs	r3, #0
 800d636:	e012      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	if (!setMode(PROXIMITY, 1)) {
 800d638:	2101      	movs	r1, #1
 800d63a:	2002      	movs	r0, #2
 800d63c:	f7ff fd68 	bl	800d110 <setMode>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d101      	bne.n	800d64a <enableGestureSensor+0xa8>
		return 0;
 800d646:	2300      	movs	r3, #0
 800d648:	e009      	b.n	800d65e <enableGestureSensor+0xbc>
	}
	if (!setMode(GESTURE, 1)) {
 800d64a:	2101      	movs	r1, #1
 800d64c:	2006      	movs	r0, #6
 800d64e:	f7ff fd5f 	bl	800d110 <setMode>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <enableGestureSensor+0xba>
		return 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	e000      	b.n	800d65e <enableGestureSensor+0xbc>
	}

	return 1;
 800d65c:	2301      	movs	r3, #1
}/* End of this function */
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <resetGestureParameters>:
 *  Return : None
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
void resetGestureParameters(void) {
 800d668:	b480      	push	{r7}
 800d66a:	af00      	add	r7, sp, #0
	gesture_data_.index = 0;
 800d66c:	4b12      	ldr	r3, [pc, #72]	; (800d6b8 <resetGestureParameters+0x50>)
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	gesture_data_.total_gestures = 0;
 800d674:	4b10      	ldr	r3, [pc, #64]	; (800d6b8 <resetGestureParameters+0x50>)
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	gesture_ud_delta_ = 0;
 800d67c:	4b0f      	ldr	r3, [pc, #60]	; (800d6bc <resetGestureParameters+0x54>)
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
	gesture_lr_delta_ = 0;
 800d682:	4b0f      	ldr	r3, [pc, #60]	; (800d6c0 <resetGestureParameters+0x58>)
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]

	gesture_ud_count_ = 0;
 800d688:	4b0e      	ldr	r3, [pc, #56]	; (800d6c4 <resetGestureParameters+0x5c>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]
	gesture_lr_count_ = 0;
 800d68e:	4b0e      	ldr	r3, [pc, #56]	; (800d6c8 <resetGestureParameters+0x60>)
 800d690:	2200      	movs	r2, #0
 800d692:	601a      	str	r2, [r3, #0]

	gesture_near_count_ = 0;
 800d694:	4b0d      	ldr	r3, [pc, #52]	; (800d6cc <resetGestureParameters+0x64>)
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]
	gesture_far_count_ = 0;
 800d69a:	4b0d      	ldr	r3, [pc, #52]	; (800d6d0 <resetGestureParameters+0x68>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	601a      	str	r2, [r3, #0]

	gesture_state_ = 0;
 800d6a0:	4b0c      	ldr	r3, [pc, #48]	; (800d6d4 <resetGestureParameters+0x6c>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
	gesture_motion_ = DIR_NONE;
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <resetGestureParameters+0x70>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	601a      	str	r2, [r3, #0]
}/* End of this function */
 800d6ac:	bf00      	nop
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	20002d50 	.word	0x20002d50
 800d6bc:	20002dd4 	.word	0x20002dd4
 800d6c0:	20002dd8 	.word	0x20002dd8
 800d6c4:	20002ddc 	.word	0x20002ddc
 800d6c8:	20002de0 	.word	0x20002de0
 800d6cc:	20002de4 	.word	0x20002de4
 800d6d0:	20002de8 	.word	0x20002de8
 800d6d4:	20002dec 	.word	0x20002dec
 800d6d8:	20002df0 	.word	0x20002df0

0800d6dc <setLEDBoost>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLEDBoost(uint8_t boost) {
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from CONFIG2 register */
	if (!i2c1_read(APDS9960_CONFIG2, &val, 1)) {
 800d6e6:	f107 030f 	add.w	r3, r7, #15
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	2090      	movs	r0, #144	; 0x90
 800d6f0:	f7ff fb4e 	bl	800cd90 <i2c1_read>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <setLEDBoost+0x22>
		return 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e01b      	b.n	800d736 <setLEDBoost+0x5a>
	}

	/* Set bits in register to given value */
	boost &= 0x03;
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	f003 0303 	and.w	r3, r3, #3
 800d704:	71fb      	strb	r3, [r7, #7]
	boost = boost << 4;
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	011b      	lsls	r3, r3, #4
 800d70a:	71fb      	strb	r3, [r7, #7]
	val &= 0xCF;
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d712:	b2db      	uxtb	r3, r3
 800d714:	73fb      	strb	r3, [r7, #15]
	val |= boost;
 800d716:	7bfa      	ldrb	r2, [r7, #15]
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONFIG2 register */
	if (!i2c1_write(APDS9960_CONFIG2, val)) {
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	4619      	mov	r1, r3
 800d724:	2090      	movs	r0, #144	; 0x90
 800d726:	f7ff fb5b 	bl	800cde0 <i2c1_write>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <setLEDBoost+0x58>
		return 0;
 800d730:	2300      	movs	r3, #0
 800d732:	e000      	b.n	800d736 <setLEDBoost+0x5a>
	}

	return 1;
 800d734:	2301      	movs	r3, #1
}/* End of this function */
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <setGestureMode>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureMode(uint8_t mode) {
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	4603      	mov	r3, r0
 800d746:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* Read value from GCONF4 register */
	if (!i2c1_read(APDS9960_GCONF4, &val, 1)) {
 800d748:	f107 030f 	add.w	r3, r7, #15
 800d74c:	2201      	movs	r2, #1
 800d74e:	4619      	mov	r1, r3
 800d750:	20ab      	movs	r0, #171	; 0xab
 800d752:	f7ff fb1d 	bl	800cd90 <i2c1_read>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <setGestureMode+0x22>
		return 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	e018      	b.n	800d792 <setGestureMode+0x54>
	}

	/* Set bits in register to given value */
	mode &= 0x01;
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	f003 0301 	and.w	r3, r3, #1
 800d766:	71fb      	strb	r3, [r7, #7]
	val &= 0xFE;
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	f023 0301 	bic.w	r3, r3, #1
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	73fb      	strb	r3, [r7, #15]
	val |= mode;
 800d772:	7bfa      	ldrb	r2, [r7, #15]
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	4313      	orrs	r3, r2
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF4 register */
	if (!i2c1_write(APDS9960_GCONF4, val)) {
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	4619      	mov	r1, r3
 800d780:	20ab      	movs	r0, #171	; 0xab
 800d782:	f7ff fb2d 	bl	800cde0 <i2c1_write>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <setGestureMode+0x52>
		return 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	e000      	b.n	800d792 <setGestureMode+0x54>
	}

	return 1;
 800d790:	2301      	movs	r3, #1
}/* End of this function */
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <enablePower>:
 *  Return : 1 if operation successful. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int enablePower(void) {
 800d79a:	b580      	push	{r7, lr}
 800d79c:	af00      	add	r7, sp, #0
	if (!setMode(POWER, 1)) {
 800d79e:	2101      	movs	r1, #1
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f7ff fcb5 	bl	800d110 <setMode>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <enablePower+0x16>
		return 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e000      	b.n	800d7b2 <enablePower+0x18>
	}

	return 1;
 800d7b0:	2301      	movs	r3, #1
}/* End of this function */
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <isGestureAvailable>:
 *  Return : 1 if gesture available. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int isGestureAvailable(void) {
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
	uint8_t val;
	/* Read value from GSTATUS register */
	if (!i2c1_read(APDS9960_GSTATUS, &val, 1)) {
 800d7bc:	1dfb      	adds	r3, r7, #7
 800d7be:	2201      	movs	r2, #1
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	20af      	movs	r0, #175	; 0xaf
 800d7c4:	f7ff fae4 	bl	800cd90 <i2c1_read>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <isGestureAvailable+0x1c>
		return ERROR;
 800d7ce:	23ff      	movs	r3, #255	; 0xff
 800d7d0:	e00a      	b.n	800d7e8 <isGestureAvailable+0x32>
	}

	/* Shift and mask out GVALID bit */
	val &= APDS9960_GVALID;
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	f003 0301 	and.w	r3, r3, #1
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	71fb      	strb	r3, [r7, #7]

	/* Return 1/0 based on GVALID bit */
	if (val == 1) {
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d101      	bne.n	800d7e6 <isGestureAvailable+0x30>
		return 1;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e000      	b.n	800d7e8 <isGestureAvailable+0x32>
	} else {
		return 0;
 800d7e6:	2300      	movs	r3, #0
	}
}/* End of this function */
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <readGesture>:
 *  Return : Number corresponding to gesture. -1 on error.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int readGesture(void) {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b0a6      	sub	sp, #152	; 0x98
 800d7f4:	af00      	add	r7, sp, #0
	uint8_t fifo_level = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	int bytes_read = 0;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint8_t gstatus;
	int motion;
	int i;

	/* Make sure that power and gesture is on and data is valid */
	if (!isGestureAvailable() || !(getMode() & 0x41)) {
 800d802:	f7ff ffd8 	bl	800d7b6 <isGestureAvailable>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d006      	beq.n	800d81a <readGesture+0x2a>
 800d80c:	f7ff fccd 	bl	800d1aa <getMode>
 800d810:	4603      	mov	r3, r0
 800d812:	f003 0341 	and.w	r3, r3, #65	; 0x41
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <readGesture+0x2e>
		return DIR_NONE;
 800d81a:	2300      	movs	r3, #0
 800d81c:	e110      	b.n	800da40 <readGesture+0x250>
	}

	uint8_t gTime = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	/* Keep looping as long as gesture data is valid */
	while (1) {

		/* Wait some time to collect next batch of FIFO data */
		HAL_Delay(FIFO_PAUSE_TIME);
 800d824:	201e      	movs	r0, #30
 800d826:	f7f6 facf 	bl	8003dc8 <HAL_Delay>
			return motion;
		}
		*/

		/* Get the contents of the STATUS register. Is data still valid? */
		if (!i2c1_read(APDS9960_GSTATUS, &gstatus, 1)) {
 800d82a:	1cfb      	adds	r3, r7, #3
 800d82c:	2201      	movs	r2, #1
 800d82e:	4619      	mov	r1, r3
 800d830:	20af      	movs	r0, #175	; 0xaf
 800d832:	f7ff faad 	bl	800cd90 <i2c1_read>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d101      	bne.n	800d840 <readGesture+0x50>
			return ERROR;
 800d83c:	23ff      	movs	r3, #255	; 0xff
 800d83e:	e0ff      	b.n	800da40 <readGesture+0x250>
		}

		/* If we have valid data, read in FIFO */
		if ((gstatus & APDS9960_GVALID) == APDS9960_GVALID) {
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 80e4 	beq.w	800da14 <readGesture+0x224>

			/* Read the current FIFO level */
			if (!i2c1_read(APDS9960_GFLVL, &fifo_level, 1)) {
 800d84c:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800d850:	2201      	movs	r2, #1
 800d852:	4619      	mov	r1, r3
 800d854:	20ae      	movs	r0, #174	; 0xae
 800d856:	f7ff fa9b 	bl	800cd90 <i2c1_read>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <readGesture+0x74>
				return ERROR;
 800d860:	23ff      	movs	r3, #255	; 0xff
 800d862:	e0ed      	b.n	800da40 <readGesture+0x250>
			}

#if DEBUGPRINT
            debugPutString("FIFO Level: ");
 800d864:	4878      	ldr	r0, [pc, #480]	; (800da48 <readGesture+0x258>)
 800d866:	f7ff faf1 	bl	800ce4c <debugPutString>
            debugPutChar(fifo_level);
 800d86a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff fadc 	bl	800ce2c <debugPutChar>
#endif

			/* If there's stuff in the FIFO, read it into our data block */
			if (fifo_level > 0) {
 800d874:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d0d3      	beq.n	800d824 <readGesture+0x34>
				bytes_read = i2c1_read(APDS9960_GFIFO_U, fifo_data, (fifo_level * 4));
 800d87c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	b2da      	uxtb	r2, r3
 800d884:	1d3b      	adds	r3, r7, #4
 800d886:	4619      	mov	r1, r3
 800d888:	20fc      	movs	r0, #252	; 0xfc
 800d88a:	f7ff fa81 	bl	800cd90 <i2c1_read>
 800d88e:	4603      	mov	r3, r0
 800d890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				if (bytes_read == -1) {
 800d894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89c:	d101      	bne.n	800d8a2 <readGesture+0xb2>
					return ERROR;
 800d89e:	23ff      	movs	r3, #255	; 0xff
 800d8a0:	e0ce      	b.n	800da40 <readGesture+0x250>
				}
#if DEBUGPRINT
                debugPutString("\r\nFIFO Dump: ");
 800d8a2:	486a      	ldr	r0, [pc, #424]	; (800da4c <readGesture+0x25c>)
 800d8a4:	f7ff fad2 	bl	800ce4c <debugPutString>
                for ( i = 0; i < bytes_read; i++ ) {
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8ae:	e00f      	b.n	800d8d0 <readGesture+0xe0>
                    debugPutChar(fifo_data[i]);
 800d8b0:	1d3a      	adds	r2, r7, #4
 800d8b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8b6:	4413      	add	r3, r2
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7ff fab6 	bl	800ce2c <debugPutChar>
                    debugPutString(" ");
 800d8c0:	4863      	ldr	r0, [pc, #396]	; (800da50 <readGesture+0x260>)
 800d8c2:	f7ff fac3 	bl	800ce4c <debugPutString>
                for ( i = 0; i < bytes_read; i++ ) {
 800d8c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d8d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	dbe9      	blt.n	800d8b0 <readGesture+0xc0>
                }
                debugPutString("\r\n");
 800d8dc:	485d      	ldr	r0, [pc, #372]	; (800da54 <readGesture+0x264>)
 800d8de:	f7ff fab5 	bl	800ce4c <debugPutString>
#endif

				/* If at least 1 set of data, sort the data into U/D/L/R */
				if (bytes_read >= 4) {
 800d8e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8e6:	2b03      	cmp	r3, #3
 800d8e8:	dd9c      	ble.n	800d824 <readGesture+0x34>
					for (i = 0; i < bytes_read; i += 4) {
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8f0:	e04c      	b.n	800d98c <readGesture+0x19c>
						gesture_data_.u_data[gesture_data_.index] = fifo_data[i + 0];
 800d8f2:	4b59      	ldr	r3, [pc, #356]	; (800da58 <readGesture+0x268>)
 800d8f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	1d3a      	adds	r2, r7, #4
 800d8fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d900:	4413      	add	r3, r2
 800d902:	781a      	ldrb	r2, [r3, #0]
 800d904:	4b54      	ldr	r3, [pc, #336]	; (800da58 <readGesture+0x268>)
 800d906:	545a      	strb	r2, [r3, r1]
						gesture_data_.d_data[gesture_data_.index] = fifo_data[i + 1];
 800d908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d90c:	3301      	adds	r3, #1
 800d90e:	4a52      	ldr	r2, [pc, #328]	; (800da58 <readGesture+0x268>)
 800d910:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800d914:	4611      	mov	r1, r2
 800d916:	3398      	adds	r3, #152	; 0x98
 800d918:	443b      	add	r3, r7
 800d91a:	f813 2c94 	ldrb.w	r2, [r3, #-148]
 800d91e:	4b4e      	ldr	r3, [pc, #312]	; (800da58 <readGesture+0x268>)
 800d920:	440b      	add	r3, r1
 800d922:	f883 2020 	strb.w	r2, [r3, #32]
						gesture_data_.l_data[gesture_data_.index] = fifo_data[i + 2];
 800d926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d92a:	3302      	adds	r3, #2
 800d92c:	4a4a      	ldr	r2, [pc, #296]	; (800da58 <readGesture+0x268>)
 800d92e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800d932:	4611      	mov	r1, r2
 800d934:	3398      	adds	r3, #152	; 0x98
 800d936:	443b      	add	r3, r7
 800d938:	f813 2c94 	ldrb.w	r2, [r3, #-148]
 800d93c:	4b46      	ldr	r3, [pc, #280]	; (800da58 <readGesture+0x268>)
 800d93e:	440b      	add	r3, r1
 800d940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
						gesture_data_.r_data[gesture_data_.index] = fifo_data[i + 3];
 800d944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d948:	3303      	adds	r3, #3
 800d94a:	4a43      	ldr	r2, [pc, #268]	; (800da58 <readGesture+0x268>)
 800d94c:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800d950:	4611      	mov	r1, r2
 800d952:	3398      	adds	r3, #152	; 0x98
 800d954:	443b      	add	r3, r7
 800d956:	f813 2c94 	ldrb.w	r2, [r3, #-148]
 800d95a:	4b3f      	ldr	r3, [pc, #252]	; (800da58 <readGesture+0x268>)
 800d95c:	440b      	add	r3, r1
 800d95e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
						gesture_data_.index++;
 800d962:	4b3d      	ldr	r3, [pc, #244]	; (800da58 <readGesture+0x268>)
 800d964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d968:	3301      	adds	r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	4b3a      	ldr	r3, [pc, #232]	; (800da58 <readGesture+0x268>)
 800d96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
						gesture_data_.total_gestures++;
 800d972:	4b39      	ldr	r3, [pc, #228]	; (800da58 <readGesture+0x268>)
 800d974:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d978:	3301      	adds	r3, #1
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	4b36      	ldr	r3, [pc, #216]	; (800da58 <readGesture+0x268>)
 800d97e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
					for (i = 0; i < bytes_read; i += 4) {
 800d982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d986:	3304      	adds	r3, #4
 800d988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d98c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d994:	429a      	cmp	r2, r3
 800d996:	dbac      	blt.n	800d8f2 <readGesture+0x102>
					}

#if DEBUGPRINT
                debugPutString("Up Data: ");
 800d998:	4830      	ldr	r0, [pc, #192]	; (800da5c <readGesture+0x26c>)
 800d99a:	f7ff fa57 	bl	800ce4c <debugPutString>
                for ( i = 0; i < gesture_data_.total_gestures; i++ ) {
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9a4:	e00f      	b.n	800d9c6 <readGesture+0x1d6>
                    debugPutChar(gesture_data_.u_data[i]);
 800d9a6:	4a2c      	ldr	r2, [pc, #176]	; (800da58 <readGesture+0x268>)
 800d9a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9ac:	4413      	add	r3, r2
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff fa3b 	bl	800ce2c <debugPutChar>
                    debugPutString(" ");
 800d9b6:	4826      	ldr	r0, [pc, #152]	; (800da50 <readGesture+0x260>)
 800d9b8:	f7ff fa48 	bl	800ce4c <debugPutString>
                for ( i = 0; i < gesture_data_.total_gestures; i++ ) {
 800d9bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9c6:	4b24      	ldr	r3, [pc, #144]	; (800da58 <readGesture+0x268>)
 800d9c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	dbe7      	blt.n	800d9a6 <readGesture+0x1b6>
                }
                debugPutString("\r\n");
 800d9d6:	481f      	ldr	r0, [pc, #124]	; (800da54 <readGesture+0x264>)
 800d9d8:	f7ff fa38 	bl	800ce4c <debugPutString>
#endif

					/* Filter and process gesture data. Decode near/far state */
					if (processGestureData()) {
 800d9dc:	f000 f844 	bl	800da68 <processGestureData>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00d      	beq.n	800da02 <readGesture+0x212>
						if (decodeGesture()) {
 800d9e6:	f000 fb37 	bl	800e058 <decodeGesture>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d008      	beq.n	800da02 <readGesture+0x212>
							motion = gesture_motion_;
 800d9f0:	4b1b      	ldr	r3, [pc, #108]	; (800da60 <readGesture+0x270>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
							resetGestureParameters();
 800d9f8:	f7ff fe36 	bl	800d668 <resetGestureParameters>
							return motion;
 800d9fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da00:	e01e      	b.n	800da40 <readGesture+0x250>
#endif
						}
					}

					/* Reset data */
					gesture_data_.index = 0;
 800da02:	4b15      	ldr	r3, [pc, #84]	; (800da58 <readGesture+0x268>)
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
					gesture_data_.total_gestures = 0;
 800da0a:	4b13      	ldr	r3, [pc, #76]	; (800da58 <readGesture+0x268>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 800da12:	e707      	b.n	800d824 <readGesture+0x34>
				}
			}
		} else {

			/* Determine best guessed gesture and clean up */
			HAL_Delay(FIFO_PAUSE_TIME);
 800da14:	201e      	movs	r0, #30
 800da16:	f7f6 f9d7 	bl	8003dc8 <HAL_Delay>
			decodeGesture();
 800da1a:	f000 fb1d 	bl	800e058 <decodeGesture>
			motion = gesture_motion_;
 800da1e:	4b10      	ldr	r3, [pc, #64]	; (800da60 <readGesture+0x270>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if DEBUGPRINT
            debugPutString("END: ");
 800da26:	480f      	ldr	r0, [pc, #60]	; (800da64 <readGesture+0x274>)
 800da28:	f7ff fa10 	bl	800ce4c <debugPutString>
            debugPutChar(gesture_motion_);
 800da2c:	4b0c      	ldr	r3, [pc, #48]	; (800da60 <readGesture+0x270>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	b2db      	uxtb	r3, r3
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff f9fa 	bl	800ce2c <debugPutChar>
#endif
			resetGestureParameters();
 800da38:	f7ff fe16 	bl	800d668 <resetGestureParameters>
			return motion;
 800da3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
		}
	}
}
 800da40:	4618      	mov	r0, r3
 800da42:	3798      	adds	r7, #152	; 0x98
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	0801b1b8 	.word	0x0801b1b8
 800da4c:	0801b1c8 	.word	0x0801b1c8
 800da50:	0801b1d8 	.word	0x0801b1d8
 800da54:	0801b1dc 	.word	0x0801b1dc
 800da58:	20002d50 	.word	0x20002d50
 800da5c:	0801b1e0 	.word	0x0801b1e0
 800da60:	20002df0 	.word	0x20002df0
 800da64:	0801b1ec 	.word	0x0801b1ec

0800da68 <processGestureData>:
 *  Return : 1 if near or far state seen. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int processGestureData(void) {
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08a      	sub	sp, #40	; 0x28
 800da6c:	af00      	add	r7, sp, #0
	uint8_t u_first = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t d_first = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t l_first = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t r_first = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t u_last = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t d_last = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t l_last = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t r_last = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	f887 3020 	strb.w	r3, [r7, #32]
	int ud_delta;
	int lr_delta;
	int i;

	/* If we have less than 4 total gestures, that's not enough */
	if (gesture_data_.total_gestures <= 4) {
 800da9e:	4b73      	ldr	r3, [pc, #460]	; (800dc6c <processGestureData+0x204>)
 800daa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	d801      	bhi.n	800daac <processGestureData+0x44>
		return 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	e2be      	b.n	800e02a <processGestureData+0x5c2>
	}

	/* Check to make sure our data isn't out of bounds */
	if ((gesture_data_.total_gestures <= 32) && (gesture_data_.total_gestures > 0)) {
 800daac:	4b6f      	ldr	r3, [pc, #444]	; (800dc6c <processGestureData+0x204>)
 800daae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dab2:	2b20      	cmp	r3, #32
 800dab4:	f200 80f3 	bhi.w	800dc9e <processGestureData+0x236>
 800dab8:	4b6c      	ldr	r3, [pc, #432]	; (800dc6c <processGestureData+0x204>)
 800daba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 80ed 	beq.w	800dc9e <processGestureData+0x236>

		/* Find the first value in U/D/L/R above the threshold */
		for (i = 0; i < gesture_data_.total_gestures; i++) {
 800dac4:	2300      	movs	r3, #0
 800dac6:	61fb      	str	r3, [r7, #28]
 800dac8:	e039      	b.n	800db3e <processGestureData+0xd6>
			if ((gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) && (gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) && (gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT)
 800daca:	4a68      	ldr	r2, [pc, #416]	; (800dc6c <processGestureData+0x204>)
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	4413      	add	r3, r2
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b0a      	cmp	r3, #10
 800dad4:	d930      	bls.n	800db38 <processGestureData+0xd0>
 800dad6:	4a65      	ldr	r2, [pc, #404]	; (800dc6c <processGestureData+0x204>)
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	4413      	add	r3, r2
 800dadc:	3320      	adds	r3, #32
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b0a      	cmp	r3, #10
 800dae2:	d929      	bls.n	800db38 <processGestureData+0xd0>
 800dae4:	4a61      	ldr	r2, [pc, #388]	; (800dc6c <processGestureData+0x204>)
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	4413      	add	r3, r2
 800daea:	3340      	adds	r3, #64	; 0x40
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	2b0a      	cmp	r3, #10
 800daf0:	d922      	bls.n	800db38 <processGestureData+0xd0>
					&& (gesture_data_.r_data[i] > GESTURE_THRESHOLD_OUT)) {
 800daf2:	4a5e      	ldr	r2, [pc, #376]	; (800dc6c <processGestureData+0x204>)
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	4413      	add	r3, r2
 800daf8:	3360      	adds	r3, #96	; 0x60
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	2b0a      	cmp	r3, #10
 800dafe:	d91b      	bls.n	800db38 <processGestureData+0xd0>

				u_first = gesture_data_.u_data[i];
 800db00:	4a5a      	ldr	r2, [pc, #360]	; (800dc6c <processGestureData+0x204>)
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	4413      	add	r3, r2
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				d_first = gesture_data_.d_data[i];
 800db0c:	4a57      	ldr	r2, [pc, #348]	; (800dc6c <processGestureData+0x204>)
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	4413      	add	r3, r2
 800db12:	3320      	adds	r3, #32
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				l_first = gesture_data_.l_data[i];
 800db1a:	4a54      	ldr	r2, [pc, #336]	; (800dc6c <processGestureData+0x204>)
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	4413      	add	r3, r2
 800db20:	3340      	adds	r3, #64	; 0x40
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				r_first = gesture_data_.r_data[i];
 800db28:	4a50      	ldr	r2, [pc, #320]	; (800dc6c <processGestureData+0x204>)
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	4413      	add	r3, r2
 800db2e:	3360      	adds	r3, #96	; 0x60
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				break;
 800db36:	e009      	b.n	800db4c <processGestureData+0xe4>
		for (i = 0; i < gesture_data_.total_gestures; i++) {
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	3301      	adds	r3, #1
 800db3c:	61fb      	str	r3, [r7, #28]
 800db3e:	4b4b      	ldr	r3, [pc, #300]	; (800dc6c <processGestureData+0x204>)
 800db40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db44:	461a      	mov	r2, r3
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	4293      	cmp	r3, r2
 800db4a:	dbbe      	blt.n	800daca <processGestureData+0x62>
			}
		}

		/* If one of the _first values is 0, then there is no good data */
		if ((u_first == 0) || (d_first == 0) || (l_first == 0) || (r_first == 0)) {
 800db4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00b      	beq.n	800db6c <processGestureData+0x104>
 800db54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d007      	beq.n	800db6c <processGestureData+0x104>
 800db5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db60:	2b00      	cmp	r3, #0
 800db62:	d003      	beq.n	800db6c <processGestureData+0x104>
 800db64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <processGestureData+0x108>

			return 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	e25c      	b.n	800e02a <processGestureData+0x5c2>
		}
		/* Find the last value in U/D/L/R above the threshold */
		for (i = gesture_data_.total_gestures - 1; i >= 0; i--) {
 800db70:	4b3e      	ldr	r3, [pc, #248]	; (800dc6c <processGestureData+0x204>)
 800db72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db76:	3b01      	subs	r3, #1
 800db78:	61fb      	str	r3, [r7, #28]
 800db7a:	e08c      	b.n	800dc96 <processGestureData+0x22e>
#if DEBUGPRINT
            debugPutString("Finding last: ");
 800db7c:	483c      	ldr	r0, [pc, #240]	; (800dc70 <processGestureData+0x208>)
 800db7e:	f7ff f965 	bl	800ce4c <debugPutString>
            debugPutString("U:");
 800db82:	483c      	ldr	r0, [pc, #240]	; (800dc74 <processGestureData+0x20c>)
 800db84:	f7ff f962 	bl	800ce4c <debugPutString>
            debugPutChar(gesture_data_.u_data[i]);
 800db88:	4a38      	ldr	r2, [pc, #224]	; (800dc6c <processGestureData+0x204>)
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	4413      	add	r3, r2
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	4618      	mov	r0, r3
 800db92:	f7ff f94b 	bl	800ce2c <debugPutChar>
            debugPutString(" D:");
 800db96:	4838      	ldr	r0, [pc, #224]	; (800dc78 <processGestureData+0x210>)
 800db98:	f7ff f958 	bl	800ce4c <debugPutString>
            debugPutChar(gesture_data_.d_data[i]);
 800db9c:	4a33      	ldr	r2, [pc, #204]	; (800dc6c <processGestureData+0x204>)
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	4413      	add	r3, r2
 800dba2:	3320      	adds	r3, #32
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff f940 	bl	800ce2c <debugPutChar>
            debugPutString(" L:");
 800dbac:	4833      	ldr	r0, [pc, #204]	; (800dc7c <processGestureData+0x214>)
 800dbae:	f7ff f94d 	bl	800ce4c <debugPutString>
            debugPutChar(gesture_data_.l_data[i]);
 800dbb2:	4a2e      	ldr	r2, [pc, #184]	; (800dc6c <processGestureData+0x204>)
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	3340      	adds	r3, #64	; 0x40
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff f935 	bl	800ce2c <debugPutChar>
            debugPutString(" R:");
 800dbc2:	482f      	ldr	r0, [pc, #188]	; (800dc80 <processGestureData+0x218>)
 800dbc4:	f7ff f942 	bl	800ce4c <debugPutString>
            debugPutChar(gesture_data_.r_data[i]);
 800dbc8:	4a28      	ldr	r2, [pc, #160]	; (800dc6c <processGestureData+0x204>)
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	4413      	add	r3, r2
 800dbce:	3360      	adds	r3, #96	; 0x60
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff f92a 	bl	800ce2c <debugPutChar>
            debugPutString("\r\n");
 800dbd8:	482a      	ldr	r0, [pc, #168]	; (800dc84 <processGestureData+0x21c>)
 800dbda:	f7ff f937 	bl	800ce4c <debugPutString>

            tempLeft = gesture_data_.l_data[i];
 800dbde:	4a23      	ldr	r2, [pc, #140]	; (800dc6c <processGestureData+0x204>)
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	3340      	adds	r3, #64	; 0x40
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4b27      	ldr	r3, [pc, #156]	; (800dc88 <processGestureData+0x220>)
 800dbec:	601a      	str	r2, [r3, #0]
            tempRight= gesture_data_.r_data[i];
 800dbee:	4a1f      	ldr	r2, [pc, #124]	; (800dc6c <processGestureData+0x204>)
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	3360      	adds	r3, #96	; 0x60
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4b24      	ldr	r3, [pc, #144]	; (800dc8c <processGestureData+0x224>)
 800dbfc:	601a      	str	r2, [r3, #0]
#endif
			if ((gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) && (gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) && (gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT)
 800dbfe:	4a1b      	ldr	r2, [pc, #108]	; (800dc6c <processGestureData+0x204>)
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	4413      	add	r3, r2
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b0a      	cmp	r3, #10
 800dc08:	d942      	bls.n	800dc90 <processGestureData+0x228>
 800dc0a:	4a18      	ldr	r2, [pc, #96]	; (800dc6c <processGestureData+0x204>)
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	4413      	add	r3, r2
 800dc10:	3320      	adds	r3, #32
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	2b0a      	cmp	r3, #10
 800dc16:	d93b      	bls.n	800dc90 <processGestureData+0x228>
 800dc18:	4a14      	ldr	r2, [pc, #80]	; (800dc6c <processGestureData+0x204>)
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	3340      	adds	r3, #64	; 0x40
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b0a      	cmp	r3, #10
 800dc24:	d934      	bls.n	800dc90 <processGestureData+0x228>
					&& (gesture_data_.r_data[i] > GESTURE_THRESHOLD_OUT)) {
 800dc26:	4a11      	ldr	r2, [pc, #68]	; (800dc6c <processGestureData+0x204>)
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	3360      	adds	r3, #96	; 0x60
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	2b0a      	cmp	r3, #10
 800dc32:	d92d      	bls.n	800dc90 <processGestureData+0x228>

				u_last = gesture_data_.u_data[i];
 800dc34:	4a0d      	ldr	r2, [pc, #52]	; (800dc6c <processGestureData+0x204>)
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	4413      	add	r3, r2
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				d_last = gesture_data_.d_data[i];
 800dc40:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <processGestureData+0x204>)
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	4413      	add	r3, r2
 800dc46:	3320      	adds	r3, #32
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				l_last = gesture_data_.l_data[i];
 800dc4e:	4a07      	ldr	r2, [pc, #28]	; (800dc6c <processGestureData+0x204>)
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	4413      	add	r3, r2
 800dc54:	3340      	adds	r3, #64	; 0x40
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				r_last = gesture_data_.r_data[i];
 800dc5c:	4a03      	ldr	r2, [pc, #12]	; (800dc6c <processGestureData+0x204>)
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	4413      	add	r3, r2
 800dc62:	3360      	adds	r3, #96	; 0x60
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	f887 3020 	strb.w	r3, [r7, #32]
				break;
 800dc6a:	e018      	b.n	800dc9e <processGestureData+0x236>
 800dc6c:	20002d50 	.word	0x20002d50
 800dc70:	0801b1f4 	.word	0x0801b1f4
 800dc74:	0801b204 	.word	0x0801b204
 800dc78:	0801b208 	.word	0x0801b208
 800dc7c:	0801b20c 	.word	0x0801b20c
 800dc80:	0801b210 	.word	0x0801b210
 800dc84:	0801b1dc 	.word	0x0801b1dc
 800dc88:	20000474 	.word	0x20000474
 800dc8c:	20000470 	.word	0x20000470
		for (i = gesture_data_.total_gestures - 1; i >= 0; i--) {
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	3b01      	subs	r3, #1
 800dc94:	61fb      	str	r3, [r7, #28]
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f6bf af6f 	bge.w	800db7c <processGestureData+0x114>
			}
		}
	}

	/* Calculate the first vs. last ratio of up/down and left/right */
	ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first);
 800dc9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	2264      	movs	r2, #100	; 0x64
 800dcaa:	fb03 f202 	mul.w	r2, r3, r2
 800dcae:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800dcb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcb6:	440b      	add	r3, r1
 800dcb8:	fb92 f3f3 	sdiv	r3, r2, r3
 800dcbc:	61bb      	str	r3, [r7, #24]
	lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first);
 800dcbe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800dcc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	2264      	movs	r2, #100	; 0x64
 800dcca:	fb03 f202 	mul.w	r2, r3, r2
 800dcce:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800dcd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcd6:	440b      	add	r3, r1
 800dcd8:	fb92 f3f3 	sdiv	r3, r2, r3
 800dcdc:	617b      	str	r3, [r7, #20]
	ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
 800dcde:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800dce2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	2264      	movs	r2, #100	; 0x64
 800dcea:	fb03 f202 	mul.w	r2, r3, r2
 800dcee:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800dcf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dcf6:	440b      	add	r3, r1
 800dcf8:	fb92 f3f3 	sdiv	r3, r2, r3
 800dcfc:	613b      	str	r3, [r7, #16]
	lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
 800dcfe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dd02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	2264      	movs	r2, #100	; 0x64
 800dd0a:	fb03 f202 	mul.w	r2, r3, r2
 800dd0e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800dd12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd16:	440b      	add	r3, r1
 800dd18:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd1c:	60fb      	str	r3, [r7, #12]

#if DEBUGPRINT
    debugPutString("Last Values: ");
 800dd1e:	4898      	ldr	r0, [pc, #608]	; (800df80 <processGestureData+0x518>)
 800dd20:	f7ff f894 	bl	800ce4c <debugPutString>
    debugPutString("U:");
 800dd24:	4897      	ldr	r0, [pc, #604]	; (800df84 <processGestureData+0x51c>)
 800dd26:	f7ff f891 	bl	800ce4c <debugPutString>
    debugPutChar(u_last);
 800dd2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7ff f87c 	bl	800ce2c <debugPutChar>
    debugPutString(" D:");
 800dd34:	4894      	ldr	r0, [pc, #592]	; (800df88 <processGestureData+0x520>)
 800dd36:	f7ff f889 	bl	800ce4c <debugPutString>
    debugPutChar(d_last);
 800dd3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff f874 	bl	800ce2c <debugPutChar>
    debugPutString(" L:");
 800dd44:	4891      	ldr	r0, [pc, #580]	; (800df8c <processGestureData+0x524>)
 800dd46:	f7ff f881 	bl	800ce4c <debugPutString>
    debugPutChar(l_last);
 800dd4a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff f86c 	bl	800ce2c <debugPutChar>
    debugPutString(" R:");
 800dd54:	488e      	ldr	r0, [pc, #568]	; (800df90 <processGestureData+0x528>)
 800dd56:	f7ff f879 	bl	800ce4c <debugPutString>
    debugPutChar(r_last);
 800dd5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7ff f864 	bl	800ce2c <debugPutChar>
    debugPutString("\r\n");
 800dd64:	488b      	ldr	r0, [pc, #556]	; (800df94 <processGestureData+0x52c>)
 800dd66:	f7ff f871 	bl	800ce4c <debugPutString>

    debugPutString("Ratios: ");
 800dd6a:	488b      	ldr	r0, [pc, #556]	; (800df98 <processGestureData+0x530>)
 800dd6c:	f7ff f86e 	bl	800ce4c <debugPutString>
    debugPutString("UD Fi: ");
 800dd70:	488a      	ldr	r0, [pc, #552]	; (800df9c <processGestureData+0x534>)
 800dd72:	f7ff f86b 	bl	800ce4c <debugPutString>
    debugPutChar(ud_ratio_first);
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7ff f856 	bl	800ce2c <debugPutChar>
    debugPutString(" UD La: ");
 800dd80:	4887      	ldr	r0, [pc, #540]	; (800dfa0 <processGestureData+0x538>)
 800dd82:	f7ff f863 	bl	800ce4c <debugPutString>
    debugPutChar(ud_ratio_last);
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7ff f84e 	bl	800ce2c <debugPutChar>
    debugPutString(" LR Fi: ");
 800dd90:	4884      	ldr	r0, [pc, #528]	; (800dfa4 <processGestureData+0x53c>)
 800dd92:	f7ff f85b 	bl	800ce4c <debugPutString>
    debugPutChar(lr_ratio_first);
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff f846 	bl	800ce2c <debugPutChar>
    debugPutString(" LR La: ");
 800dda0:	4881      	ldr	r0, [pc, #516]	; (800dfa8 <processGestureData+0x540>)
 800dda2:	f7ff f853 	bl	800ce4c <debugPutString>
    debugPutChar(lr_ratio_last);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff f83e 	bl	800ce2c <debugPutChar>
    debugPutString("\r\n");
 800ddb0:	4878      	ldr	r0, [pc, #480]	; (800df94 <processGestureData+0x52c>)
 800ddb2:	f7ff f84b 	bl	800ce4c <debugPutString>

#endif

	/* Determine the difference between the first and last ratios */
	ud_delta = ud_ratio_last - ud_ratio_first;
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	60bb      	str	r3, [r7, #8]
	lr_delta = lr_ratio_last - lr_ratio_first;
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	607b      	str	r3, [r7, #4]

#if DEBUGPRINT
    debugPutString("Deltas: ");
 800ddc6:	4879      	ldr	r0, [pc, #484]	; (800dfac <processGestureData+0x544>)
 800ddc8:	f7ff f840 	bl	800ce4c <debugPutString>
    debugPutString("UD: ");
 800ddcc:	4878      	ldr	r0, [pc, #480]	; (800dfb0 <processGestureData+0x548>)
 800ddce:	f7ff f83d 	bl	800ce4c <debugPutString>
    debugPutChar(ud_delta);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7ff f828 	bl	800ce2c <debugPutChar>
    debugPutString(" LR: ");
 800dddc:	4875      	ldr	r0, [pc, #468]	; (800dfb4 <processGestureData+0x54c>)
 800ddde:	f7ff f835 	bl	800ce4c <debugPutString>
    debugPutChar(lr_delta);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff f820 	bl	800ce2c <debugPutChar>
    debugPutString("\r\n");
 800ddec:	4869      	ldr	r0, [pc, #420]	; (800df94 <processGestureData+0x52c>)
 800ddee:	f7ff f82d 	bl	800ce4c <debugPutString>
#endif

	/* Accumulate the UD and LR delta values */
	gesture_ud_delta_ += ud_delta;
 800ddf2:	4b71      	ldr	r3, [pc, #452]	; (800dfb8 <processGestureData+0x550>)
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	4a6f      	ldr	r2, [pc, #444]	; (800dfb8 <processGestureData+0x550>)
 800ddfc:	6013      	str	r3, [r2, #0]
	gesture_lr_delta_ += lr_delta;
 800ddfe:	4b6f      	ldr	r3, [pc, #444]	; (800dfbc <processGestureData+0x554>)
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4413      	add	r3, r2
 800de06:	4a6d      	ldr	r2, [pc, #436]	; (800dfbc <processGestureData+0x554>)
 800de08:	6013      	str	r3, [r2, #0]

#if DEBUGPRINT
    debugPutString("Accumulations: ");
 800de0a:	486d      	ldr	r0, [pc, #436]	; (800dfc0 <processGestureData+0x558>)
 800de0c:	f7ff f81e 	bl	800ce4c <debugPutString>
    debugPutString("UD: ");
 800de10:	4867      	ldr	r0, [pc, #412]	; (800dfb0 <processGestureData+0x548>)
 800de12:	f7ff f81b 	bl	800ce4c <debugPutString>
    debugPutChar(gesture_ud_delta_);
 800de16:	4b68      	ldr	r3, [pc, #416]	; (800dfb8 <processGestureData+0x550>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff f805 	bl	800ce2c <debugPutChar>
    debugPutString(" LR: ");
 800de22:	4864      	ldr	r0, [pc, #400]	; (800dfb4 <processGestureData+0x54c>)
 800de24:	f7ff f812 	bl	800ce4c <debugPutString>
    debugPutChar(gesture_lr_delta_);
 800de28:	4b64      	ldr	r3, [pc, #400]	; (800dfbc <processGestureData+0x554>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe fffc 	bl	800ce2c <debugPutChar>
    debugPutString("\r\n");
 800de34:	4857      	ldr	r0, [pc, #348]	; (800df94 <processGestureData+0x52c>)
 800de36:	f7ff f809 	bl	800ce4c <debugPutString>
#endif

	/* Determine U/D gesture */
	if (gesture_ud_delta_ >= GESTURE_SENSITIVITY_1) {
 800de3a:	4b5f      	ldr	r3, [pc, #380]	; (800dfb8 <processGestureData+0x550>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b31      	cmp	r3, #49	; 0x31
 800de40:	dd03      	ble.n	800de4a <processGestureData+0x3e2>
		gesture_ud_count_ = 1;
 800de42:	4b60      	ldr	r3, [pc, #384]	; (800dfc4 <processGestureData+0x55c>)
 800de44:	2201      	movs	r2, #1
 800de46:	601a      	str	r2, [r3, #0]
 800de48:	e00c      	b.n	800de64 <processGestureData+0x3fc>
	} else if (gesture_ud_delta_ <= -GESTURE_SENSITIVITY_1) {
 800de4a:	4b5b      	ldr	r3, [pc, #364]	; (800dfb8 <processGestureData+0x550>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800de52:	da04      	bge.n	800de5e <processGestureData+0x3f6>
		gesture_ud_count_ = -1;
 800de54:	4b5b      	ldr	r3, [pc, #364]	; (800dfc4 <processGestureData+0x55c>)
 800de56:	f04f 32ff 	mov.w	r2, #4294967295
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	e002      	b.n	800de64 <processGestureData+0x3fc>
	} else {
		gesture_ud_count_ = 0;
 800de5e:	4b59      	ldr	r3, [pc, #356]	; (800dfc4 <processGestureData+0x55c>)
 800de60:	2200      	movs	r2, #0
 800de62:	601a      	str	r2, [r3, #0]
	}

	/* Determine L/R gesture */
	if (gesture_lr_delta_ >= GESTURE_SENSITIVITY_1) {
 800de64:	4b55      	ldr	r3, [pc, #340]	; (800dfbc <processGestureData+0x554>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b31      	cmp	r3, #49	; 0x31
 800de6a:	dd03      	ble.n	800de74 <processGestureData+0x40c>
		gesture_lr_count_ = 1;
 800de6c:	4b56      	ldr	r3, [pc, #344]	; (800dfc8 <processGestureData+0x560>)
 800de6e:	2201      	movs	r2, #1
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	e00c      	b.n	800de8e <processGestureData+0x426>
	} else if (gesture_lr_delta_ <= -GESTURE_SENSITIVITY_1) {
 800de74:	4b51      	ldr	r3, [pc, #324]	; (800dfbc <processGestureData+0x554>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800de7c:	da04      	bge.n	800de88 <processGestureData+0x420>
		gesture_lr_count_ = -1;
 800de7e:	4b52      	ldr	r3, [pc, #328]	; (800dfc8 <processGestureData+0x560>)
 800de80:	f04f 32ff 	mov.w	r2, #4294967295
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	e002      	b.n	800de8e <processGestureData+0x426>
	} else {
		gesture_lr_count_ = 0;
 800de88:	4b4f      	ldr	r3, [pc, #316]	; (800dfc8 <processGestureData+0x560>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]
	}

	/* Determine Near/Far gesture */
	if ((gesture_ud_count_ == 0) && (gesture_lr_count_ == 0)) {
 800de8e:	4b4d      	ldr	r3, [pc, #308]	; (800dfc4 <processGestureData+0x55c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d149      	bne.n	800df2a <processGestureData+0x4c2>
 800de96:	4b4c      	ldr	r3, [pc, #304]	; (800dfc8 <processGestureData+0x560>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d145      	bne.n	800df2a <processGestureData+0x4c2>
		if ((abs(ud_delta) < GESTURE_SENSITIVITY_2) && (abs(lr_delta) < GESTURE_SENSITIVITY_2)) {
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	f113 0f13 	cmn.w	r3, #19
 800dea4:	f2c0 8098 	blt.w	800dfd8 <processGestureData+0x570>
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b13      	cmp	r3, #19
 800deac:	f300 8094 	bgt.w	800dfd8 <processGestureData+0x570>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f113 0f13 	cmn.w	r3, #19
 800deb6:	f2c0 808f 	blt.w	800dfd8 <processGestureData+0x570>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b13      	cmp	r3, #19
 800debe:	f300 808b 	bgt.w	800dfd8 <processGestureData+0x570>

			if ((ud_delta == 0) && (lr_delta == 0)) {
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d108      	bne.n	800deda <processGestureData+0x472>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d105      	bne.n	800deda <processGestureData+0x472>
				gesture_near_count_++;
 800dece:	4b3f      	ldr	r3, [pc, #252]	; (800dfcc <processGestureData+0x564>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	4a3d      	ldr	r2, [pc, #244]	; (800dfcc <processGestureData+0x564>)
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	e00a      	b.n	800def0 <processGestureData+0x488>
			} else if ((ud_delta != 0) || (lr_delta != 0)) {
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <processGestureData+0x47e>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d004      	beq.n	800def0 <processGestureData+0x488>
				gesture_far_count_++;
 800dee6:	4b3a      	ldr	r3, [pc, #232]	; (800dfd0 <processGestureData+0x568>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3301      	adds	r3, #1
 800deec:	4a38      	ldr	r2, [pc, #224]	; (800dfd0 <processGestureData+0x568>)
 800deee:	6013      	str	r3, [r2, #0]
			}

			if ((gesture_near_count_ >= 10) && (gesture_far_count_ >= 2)) {
 800def0:	4b36      	ldr	r3, [pc, #216]	; (800dfcc <processGestureData+0x564>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b09      	cmp	r3, #9
 800def6:	dd6f      	ble.n	800dfd8 <processGestureData+0x570>
 800def8:	4b35      	ldr	r3, [pc, #212]	; (800dfd0 <processGestureData+0x568>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b01      	cmp	r3, #1
 800defe:	dd6b      	ble.n	800dfd8 <processGestureData+0x570>
				if ((ud_delta == 0) && (lr_delta == 0)) {
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d106      	bne.n	800df14 <processGestureData+0x4ac>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d103      	bne.n	800df14 <processGestureData+0x4ac>
					gesture_state_ = NEAR_STATE;
 800df0c:	4b31      	ldr	r3, [pc, #196]	; (800dfd4 <processGestureData+0x56c>)
 800df0e:	2201      	movs	r2, #1
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	e008      	b.n	800df26 <processGestureData+0x4be>
				} else if ((ud_delta != 0) && (lr_delta != 0)) {
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d005      	beq.n	800df26 <processGestureData+0x4be>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <processGestureData+0x4be>
					gesture_state_ = FAR_STATE;
 800df20:	4b2c      	ldr	r3, [pc, #176]	; (800dfd4 <processGestureData+0x56c>)
 800df22:	2202      	movs	r2, #2
 800df24:	601a      	str	r2, [r3, #0]
				}
				return 1;
 800df26:	2301      	movs	r3, #1
 800df28:	e07f      	b.n	800e02a <processGestureData+0x5c2>
			}
		}
	} else {
		if ((abs(ud_delta) < GESTURE_SENSITIVITY_2) && (abs(lr_delta) < GESTURE_SENSITIVITY_2)) {
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	f113 0f13 	cmn.w	r3, #19
 800df30:	db53      	blt.n	800dfda <processGestureData+0x572>
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	2b13      	cmp	r3, #19
 800df36:	dc50      	bgt.n	800dfda <processGestureData+0x572>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f113 0f13 	cmn.w	r3, #19
 800df3e:	db4c      	blt.n	800dfda <processGestureData+0x572>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b13      	cmp	r3, #19
 800df44:	dc49      	bgt.n	800dfda <processGestureData+0x572>

			if ((ud_delta == 0) && (lr_delta == 0)) {
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d107      	bne.n	800df5c <processGestureData+0x4f4>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d104      	bne.n	800df5c <processGestureData+0x4f4>
				gesture_near_count_++;
 800df52:	4b1e      	ldr	r3, [pc, #120]	; (800dfcc <processGestureData+0x564>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3301      	adds	r3, #1
 800df58:	4a1c      	ldr	r2, [pc, #112]	; (800dfcc <processGestureData+0x564>)
 800df5a:	6013      	str	r3, [r2, #0]
			}

			if (gesture_near_count_ >= 10) {
 800df5c:	4b1b      	ldr	r3, [pc, #108]	; (800dfcc <processGestureData+0x564>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b09      	cmp	r3, #9
 800df62:	dd3a      	ble.n	800dfda <processGestureData+0x572>
				gesture_ud_count_ = 0;
 800df64:	4b17      	ldr	r3, [pc, #92]	; (800dfc4 <processGestureData+0x55c>)
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
				gesture_lr_count_ = 0;
 800df6a:	4b17      	ldr	r3, [pc, #92]	; (800dfc8 <processGestureData+0x560>)
 800df6c:	2200      	movs	r2, #0
 800df6e:	601a      	str	r2, [r3, #0]
				gesture_ud_delta_ = 0;
 800df70:	4b11      	ldr	r3, [pc, #68]	; (800dfb8 <processGestureData+0x550>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
				gesture_lr_delta_ = 0;
 800df76:	4b11      	ldr	r3, [pc, #68]	; (800dfbc <processGestureData+0x554>)
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	e02d      	b.n	800dfda <processGestureData+0x572>
 800df7e:	bf00      	nop
 800df80:	0801b214 	.word	0x0801b214
 800df84:	0801b204 	.word	0x0801b204
 800df88:	0801b208 	.word	0x0801b208
 800df8c:	0801b20c 	.word	0x0801b20c
 800df90:	0801b210 	.word	0x0801b210
 800df94:	0801b1dc 	.word	0x0801b1dc
 800df98:	0801b224 	.word	0x0801b224
 800df9c:	0801b230 	.word	0x0801b230
 800dfa0:	0801b238 	.word	0x0801b238
 800dfa4:	0801b244 	.word	0x0801b244
 800dfa8:	0801b250 	.word	0x0801b250
 800dfac:	0801b25c 	.word	0x0801b25c
 800dfb0:	0801b268 	.word	0x0801b268
 800dfb4:	0801b270 	.word	0x0801b270
 800dfb8:	20002dd4 	.word	0x20002dd4
 800dfbc:	20002dd8 	.word	0x20002dd8
 800dfc0:	0801b278 	.word	0x0801b278
 800dfc4:	20002ddc 	.word	0x20002ddc
 800dfc8:	20002de0 	.word	0x20002de0
 800dfcc:	20002de4 	.word	0x20002de4
 800dfd0:	20002de8 	.word	0x20002de8
 800dfd4:	20002dec 	.word	0x20002dec
		if ((abs(ud_delta) < GESTURE_SENSITIVITY_2) && (abs(lr_delta) < GESTURE_SENSITIVITY_2)) {
 800dfd8:	bf00      	nop
			}
		}
	}

#if DEBUGPRINT
    debugPutString("UD_CT: ");
 800dfda:	4816      	ldr	r0, [pc, #88]	; (800e034 <processGestureData+0x5cc>)
 800dfdc:	f7fe ff36 	bl	800ce4c <debugPutString>
    debugPutChar(gesture_ud_count_);
 800dfe0:	4b15      	ldr	r3, [pc, #84]	; (800e038 <processGestureData+0x5d0>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe ff20 	bl	800ce2c <debugPutChar>
    debugPutString(" LR_CT: ");
 800dfec:	4813      	ldr	r0, [pc, #76]	; (800e03c <processGestureData+0x5d4>)
 800dfee:	f7fe ff2d 	bl	800ce4c <debugPutString>
    debugPutChar(gesture_lr_count_);
 800dff2:	4b13      	ldr	r3, [pc, #76]	; (800e040 <processGestureData+0x5d8>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe ff17 	bl	800ce2c <debugPutChar>
    debugPutString(" NEAR_CT: ");
 800dffe:	4811      	ldr	r0, [pc, #68]	; (800e044 <processGestureData+0x5dc>)
 800e000:	f7fe ff24 	bl	800ce4c <debugPutString>
    debugPutChar(gesture_near_count_);
 800e004:	4b10      	ldr	r3, [pc, #64]	; (800e048 <processGestureData+0x5e0>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe ff0e 	bl	800ce2c <debugPutChar>
    debugPutString(" FAR_CT: ");
 800e010:	480e      	ldr	r0, [pc, #56]	; (800e04c <processGestureData+0x5e4>)
 800e012:	f7fe ff1b 	bl	800ce4c <debugPutString>
    debugPutChar(gesture_far_count_);
 800e016:	4b0e      	ldr	r3, [pc, #56]	; (800e050 <processGestureData+0x5e8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fe ff05 	bl	800ce2c <debugPutChar>
    debugPutString("\r\n");
 800e022:	480c      	ldr	r0, [pc, #48]	; (800e054 <processGestureData+0x5ec>)
 800e024:	f7fe ff12 	bl	800ce4c <debugPutString>
#endif

	return 0;
 800e028:	2300      	movs	r3, #0
}/* End of this function */
 800e02a:	4618      	mov	r0, r3
 800e02c:	3728      	adds	r7, #40	; 0x28
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	0801b288 	.word	0x0801b288
 800e038:	20002ddc 	.word	0x20002ddc
 800e03c:	0801b290 	.word	0x0801b290
 800e040:	20002de0 	.word	0x20002de0
 800e044:	0801b29c 	.word	0x0801b29c
 800e048:	20002de4 	.word	0x20002de4
 800e04c:	0801b2a8 	.word	0x0801b2a8
 800e050:	20002de8 	.word	0x20002de8
 800e054:	0801b1dc 	.word	0x0801b1dc

0800e058 <decodeGesture>:
 *  Return : 1 if near/far event. 0 otherwise.
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int decodeGesture(void) {
 800e058:	b480      	push	{r7}
 800e05a:	af00      	add	r7, sp, #0
	/* Return if near or far event is detected */
	if (gesture_state_ == NEAR_STATE) {
 800e05c:	4b61      	ldr	r3, [pc, #388]	; (800e1e4 <decodeGesture+0x18c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d104      	bne.n	800e06e <decodeGesture+0x16>
		gesture_motion_ = DIR_NEAR;
 800e064:	4b60      	ldr	r3, [pc, #384]	; (800e1e8 <decodeGesture+0x190>)
 800e066:	2205      	movs	r2, #5
 800e068:	601a      	str	r2, [r3, #0]
		return 1;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e0b5      	b.n	800e1da <decodeGesture+0x182>
	} else if (gesture_state_ == FAR_STATE) {
 800e06e:	4b5d      	ldr	r3, [pc, #372]	; (800e1e4 <decodeGesture+0x18c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b02      	cmp	r3, #2
 800e074:	d104      	bne.n	800e080 <decodeGesture+0x28>
		gesture_motion_ = DIR_FAR;
 800e076:	4b5c      	ldr	r3, [pc, #368]	; (800e1e8 <decodeGesture+0x190>)
 800e078:	2206      	movs	r2, #6
 800e07a:	601a      	str	r2, [r3, #0]
		return 1;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e0ac      	b.n	800e1da <decodeGesture+0x182>
	}

	/* Determine swipe direction */
	if ((gesture_ud_count_ == -1) && (gesture_lr_count_ == 0)) {
 800e080:	4b5a      	ldr	r3, [pc, #360]	; (800e1ec <decodeGesture+0x194>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e088:	d107      	bne.n	800e09a <decodeGesture+0x42>
 800e08a:	4b59      	ldr	r3, [pc, #356]	; (800e1f0 <decodeGesture+0x198>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d103      	bne.n	800e09a <decodeGesture+0x42>
		gesture_motion_ = DIR_UP;
 800e092:	4b55      	ldr	r3, [pc, #340]	; (800e1e8 <decodeGesture+0x190>)
 800e094:	2203      	movs	r2, #3
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	e09e      	b.n	800e1d8 <decodeGesture+0x180>
	} else if ((gesture_ud_count_ == 1) && (gesture_lr_count_ == 0)) {
 800e09a:	4b54      	ldr	r3, [pc, #336]	; (800e1ec <decodeGesture+0x194>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d107      	bne.n	800e0b2 <decodeGesture+0x5a>
 800e0a2:	4b53      	ldr	r3, [pc, #332]	; (800e1f0 <decodeGesture+0x198>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d103      	bne.n	800e0b2 <decodeGesture+0x5a>
		gesture_motion_ = DIR_DOWN;
 800e0aa:	4b4f      	ldr	r3, [pc, #316]	; (800e1e8 <decodeGesture+0x190>)
 800e0ac:	2204      	movs	r2, #4
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	e092      	b.n	800e1d8 <decodeGesture+0x180>
	} else if ((gesture_ud_count_ == 0) && (gesture_lr_count_ == 1)) {
 800e0b2:	4b4e      	ldr	r3, [pc, #312]	; (800e1ec <decodeGesture+0x194>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d107      	bne.n	800e0ca <decodeGesture+0x72>
 800e0ba:	4b4d      	ldr	r3, [pc, #308]	; (800e1f0 <decodeGesture+0x198>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d103      	bne.n	800e0ca <decodeGesture+0x72>
		gesture_motion_ = DIR_RIGHT;
 800e0c2:	4b49      	ldr	r3, [pc, #292]	; (800e1e8 <decodeGesture+0x190>)
 800e0c4:	2202      	movs	r2, #2
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	e086      	b.n	800e1d8 <decodeGesture+0x180>
	} else if ((gesture_ud_count_ == 0) && (gesture_lr_count_ == -1)) {
 800e0ca:	4b48      	ldr	r3, [pc, #288]	; (800e1ec <decodeGesture+0x194>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d108      	bne.n	800e0e4 <decodeGesture+0x8c>
 800e0d2:	4b47      	ldr	r3, [pc, #284]	; (800e1f0 <decodeGesture+0x198>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0da:	d103      	bne.n	800e0e4 <decodeGesture+0x8c>
		gesture_motion_ = DIR_LEFT;
 800e0dc:	4b42      	ldr	r3, [pc, #264]	; (800e1e8 <decodeGesture+0x190>)
 800e0de:	2201      	movs	r2, #1
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	e079      	b.n	800e1d8 <decodeGesture+0x180>
	} else if ((gesture_ud_count_ == -1) && (gesture_lr_count_ == 1)) {
 800e0e4:	4b41      	ldr	r3, [pc, #260]	; (800e1ec <decodeGesture+0x194>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ec:	d118      	bne.n	800e120 <decodeGesture+0xc8>
 800e0ee:	4b40      	ldr	r3, [pc, #256]	; (800e1f0 <decodeGesture+0x198>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d114      	bne.n	800e120 <decodeGesture+0xc8>
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e0f6:	4b3f      	ldr	r3, [pc, #252]	; (800e1f4 <decodeGesture+0x19c>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e0fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e102:	4b3d      	ldr	r3, [pc, #244]	; (800e1f8 <decodeGesture+0x1a0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	bfb8      	it	lt
 800e10a:	425b      	neglt	r3, r3
 800e10c:	429a      	cmp	r2, r3
 800e10e:	dd03      	ble.n	800e118 <decodeGesture+0xc0>
			gesture_motion_ = DIR_UP;
 800e110:	4b35      	ldr	r3, [pc, #212]	; (800e1e8 <decodeGesture+0x190>)
 800e112:	2203      	movs	r2, #3
 800e114:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e116:	e05f      	b.n	800e1d8 <decodeGesture+0x180>
		} else {
			gesture_motion_ = DIR_RIGHT;
 800e118:	4b33      	ldr	r3, [pc, #204]	; (800e1e8 <decodeGesture+0x190>)
 800e11a:	2202      	movs	r2, #2
 800e11c:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e11e:	e05b      	b.n	800e1d8 <decodeGesture+0x180>
		}
	} else if ((gesture_ud_count_ == 1) && (gesture_lr_count_ == -1)) {
 800e120:	4b32      	ldr	r3, [pc, #200]	; (800e1ec <decodeGesture+0x194>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d119      	bne.n	800e15c <decodeGesture+0x104>
 800e128:	4b31      	ldr	r3, [pc, #196]	; (800e1f0 <decodeGesture+0x198>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e130:	d114      	bne.n	800e15c <decodeGesture+0x104>
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e132:	4b30      	ldr	r3, [pc, #192]	; (800e1f4 <decodeGesture+0x19c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e13a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e13e:	4b2e      	ldr	r3, [pc, #184]	; (800e1f8 <decodeGesture+0x1a0>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	bfb8      	it	lt
 800e146:	425b      	neglt	r3, r3
 800e148:	429a      	cmp	r2, r3
 800e14a:	dd03      	ble.n	800e154 <decodeGesture+0xfc>
			gesture_motion_ = DIR_DOWN;
 800e14c:	4b26      	ldr	r3, [pc, #152]	; (800e1e8 <decodeGesture+0x190>)
 800e14e:	2204      	movs	r2, #4
 800e150:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e152:	e041      	b.n	800e1d8 <decodeGesture+0x180>
		} else {
			gesture_motion_ = DIR_LEFT;
 800e154:	4b24      	ldr	r3, [pc, #144]	; (800e1e8 <decodeGesture+0x190>)
 800e156:	2201      	movs	r2, #1
 800e158:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e15a:	e03d      	b.n	800e1d8 <decodeGesture+0x180>
		}
	} else if ((gesture_ud_count_ == -1) && (gesture_lr_count_ == -1)) {
 800e15c:	4b23      	ldr	r3, [pc, #140]	; (800e1ec <decodeGesture+0x194>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e164:	d119      	bne.n	800e19a <decodeGesture+0x142>
 800e166:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <decodeGesture+0x198>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16e:	d114      	bne.n	800e19a <decodeGesture+0x142>
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e170:	4b20      	ldr	r3, [pc, #128]	; (800e1f4 <decodeGesture+0x19c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e178:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e17c:	4b1e      	ldr	r3, [pc, #120]	; (800e1f8 <decodeGesture+0x1a0>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfb8      	it	lt
 800e184:	425b      	neglt	r3, r3
 800e186:	429a      	cmp	r2, r3
 800e188:	dd03      	ble.n	800e192 <decodeGesture+0x13a>
			gesture_motion_ = DIR_UP;
 800e18a:	4b17      	ldr	r3, [pc, #92]	; (800e1e8 <decodeGesture+0x190>)
 800e18c:	2203      	movs	r2, #3
 800e18e:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e190:	e022      	b.n	800e1d8 <decodeGesture+0x180>
		} else {
			gesture_motion_ = DIR_LEFT;
 800e192:	4b15      	ldr	r3, [pc, #84]	; (800e1e8 <decodeGesture+0x190>)
 800e194:	2201      	movs	r2, #1
 800e196:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e198:	e01e      	b.n	800e1d8 <decodeGesture+0x180>
		}
	} else if ((gesture_ud_count_ == 1) && (gesture_lr_count_ == 1)) {
 800e19a:	4b14      	ldr	r3, [pc, #80]	; (800e1ec <decodeGesture+0x194>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d118      	bne.n	800e1d4 <decodeGesture+0x17c>
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <decodeGesture+0x198>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d114      	bne.n	800e1d4 <decodeGesture+0x17c>
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e1aa:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <decodeGesture+0x19c>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e1b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e1b6:	4b10      	ldr	r3, [pc, #64]	; (800e1f8 <decodeGesture+0x1a0>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	bfb8      	it	lt
 800e1be:	425b      	neglt	r3, r3
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	dd03      	ble.n	800e1cc <decodeGesture+0x174>
			gesture_motion_ = DIR_DOWN;
 800e1c4:	4b08      	ldr	r3, [pc, #32]	; (800e1e8 <decodeGesture+0x190>)
 800e1c6:	2204      	movs	r2, #4
 800e1c8:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e1ca:	e005      	b.n	800e1d8 <decodeGesture+0x180>
		} else {
			gesture_motion_ = DIR_RIGHT;
 800e1cc:	4b06      	ldr	r3, [pc, #24]	; (800e1e8 <decodeGesture+0x190>)
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	601a      	str	r2, [r3, #0]
		if (abs(gesture_ud_delta_) > abs(gesture_lr_delta_)) {
 800e1d2:	e001      	b.n	800e1d8 <decodeGesture+0x180>
		}
	} else {
		return 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	e000      	b.n	800e1da <decodeGesture+0x182>
	}

	return 1;
 800e1d8:	2301      	movs	r3, #1
}/* End of this function */
 800e1da:	4618      	mov	r0, r3
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr
 800e1e4:	20002dec 	.word	0x20002dec
 800e1e8:	20002df0 	.word	0x20002df0
 800e1ec:	20002ddc 	.word	0x20002ddc
 800e1f0:	20002de0 	.word	0x20002de0
 800e1f4:	20002dd4 	.word	0x20002dd4
 800e1f8:	20002dd8 	.word	0x20002dd8

0800e1fc <apds9960ReadSensor>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/

int apds9960ReadSensor(void) {
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
	int Gesture = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	607b      	str	r3, [r7, #4]
	if (isGestureAvailable()) {
 800e206:	f7ff fad6 	bl	800d7b6 <isGestureAvailable>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d002      	beq.n	800e216 <apds9960ReadSensor+0x1a>
		Gesture = readGesture();
 800e210:	f7ff faee 	bl	800d7f0 <readGesture>
 800e214:	6078      	str	r0, [r7, #4]

	}
	return Gesture;
 800e216:	687b      	ldr	r3, [r7, #4]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <W25qxx_Spi>:
#include "cmsis_os.h"
#else
//#define W25qxx_Delay(1);(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data) {
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af02      	add	r7, sp, #8
 800e226:	4603      	mov	r3, r0
 800e228:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	uint8_t res;
	res = HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800e22a:	f107 020e 	add.w	r2, r7, #14
 800e22e:	1df9      	adds	r1, r7, #7
 800e230:	2364      	movs	r3, #100	; 0x64
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	2301      	movs	r3, #1
 800e236:	4805      	ldr	r0, [pc, #20]	; (800e24c <W25qxx_Spi+0x2c>)
 800e238:	f7fb fbde 	bl	80099f8 <HAL_SPI_TransmitReceive>
 800e23c:	4603      	mov	r3, r0
 800e23e:	73fb      	strb	r3, [r7, #15]
	if ((res != HAL_OK) && (_W25QXX_DEBUG == 1)) {
		printf("transmiteResive fail: %d \r\n", res);
	}
	return ret;
 800e240:	7bbb      	ldrb	r3, [r7, #14]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20002698 	.word	0x20002698

0800e250 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	60fb      	str	r3, [r7, #12]
 800e25a:	2300      	movs	r3, #0
 800e25c:	60bb      	str	r3, [r7, #8]
 800e25e:	2300      	movs	r3, #0
 800e260:	607b      	str	r3, [r7, #4]
 800e262:	2300      	movs	r3, #0
 800e264:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e266:	2200      	movs	r2, #0
 800e268:	2110      	movs	r1, #16
 800e26a:	4813      	ldr	r0, [pc, #76]	; (800e2b8 <W25qxx_ReadID+0x68>)
 800e26c:	f7f6 fc06 	bl	8004a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800e270:	209f      	movs	r0, #159	; 0x9f
 800e272:	f7ff ffd5 	bl	800e220 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e276:	20a5      	movs	r0, #165	; 0xa5
 800e278:	f7ff ffd2 	bl	800e220 <W25qxx_Spi>
 800e27c:	4603      	mov	r3, r0
 800e27e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e280:	20a5      	movs	r0, #165	; 0xa5
 800e282:	f7ff ffcd 	bl	800e220 <W25qxx_Spi>
 800e286:	4603      	mov	r3, r0
 800e288:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e28a:	20a5      	movs	r0, #165	; 0xa5
 800e28c:	f7ff ffc8 	bl	800e220 <W25qxx_Spi>
 800e290:	4603      	mov	r3, r0
 800e292:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e294:	2201      	movs	r2, #1
 800e296:	2110      	movs	r1, #16
 800e298:	4807      	ldr	r0, [pc, #28]	; (800e2b8 <W25qxx_ReadID+0x68>)
 800e29a:	f7f6 fbef 	bl	8004a7c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	041a      	lsls	r2, r3, #16
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	021b      	lsls	r3, r3, #8
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	60fb      	str	r3, [r7, #12]
	return Temp;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	40020000 	.word	0x40020000

0800e2bc <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void) {
 800e2bc:	b590      	push	{r4, r7, lr}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2110      	movs	r1, #16
 800e2c6:	4816      	ldr	r0, [pc, #88]	; (800e320 <W25qxx_ReadUniqID+0x64>)
 800e2c8:	f7f6 fbd8 	bl	8004a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800e2cc:	204b      	movs	r0, #75	; 0x4b
 800e2ce:	f7ff ffa7 	bl	800e220 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	71fb      	strb	r3, [r7, #7]
 800e2d6:	e005      	b.n	800e2e4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e2d8:	20a5      	movs	r0, #165	; 0xa5
 800e2da:	f7ff ffa1 	bl	800e220 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	71fb      	strb	r3, [r7, #7]
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d9f6      	bls.n	800e2d8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	71bb      	strb	r3, [r7, #6]
 800e2ee:	e00b      	b.n	800e308 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e2f0:	79bc      	ldrb	r4, [r7, #6]
 800e2f2:	20a5      	movs	r0, #165	; 0xa5
 800e2f4:	f7ff ff94 	bl	800e220 <W25qxx_Spi>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	4b09      	ldr	r3, [pc, #36]	; (800e324 <W25qxx_ReadUniqID+0x68>)
 800e2fe:	4423      	add	r3, r4
 800e300:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800e302:	79bb      	ldrb	r3, [r7, #6]
 800e304:	3301      	adds	r3, #1
 800e306:	71bb      	strb	r3, [r7, #6]
 800e308:	79bb      	ldrb	r3, [r7, #6]
 800e30a:	2b07      	cmp	r3, #7
 800e30c:	d9f0      	bls.n	800e2f0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e30e:	2201      	movs	r2, #1
 800e310:	2110      	movs	r1, #16
 800e312:	4803      	ldr	r0, [pc, #12]	; (800e320 <W25qxx_ReadUniqID+0x64>)
 800e314:	f7f6 fbb2 	bl	8004a7c <HAL_GPIO_WritePin>
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd90      	pop	{r4, r7, pc}
 800e320:	40020000 	.word	0x40020000
 800e324:	20002df4 	.word	0x20002df4

0800e328 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void) {
 800e328:	b580      	push	{r7, lr}
 800e32a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e32c:	2200      	movs	r2, #0
 800e32e:	2110      	movs	r1, #16
 800e330:	4806      	ldr	r0, [pc, #24]	; (800e34c <W25qxx_WriteEnable+0x24>)
 800e332:	f7f6 fba3 	bl	8004a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800e336:	2006      	movs	r0, #6
 800e338:	f7ff ff72 	bl	800e220 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e33c:	2201      	movs	r2, #1
 800e33e:	2110      	movs	r1, #16
 800e340:	4802      	ldr	r0, [pc, #8]	; (800e34c <W25qxx_WriteEnable+0x24>)
 800e342:	f7f6 fb9b 	bl	8004a7c <HAL_GPIO_WritePin>
	//W25qxx_Delay(1);
}
 800e346:	bf00      	nop
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	40020000 	.word	0x40020000

0800e350 <W25qxx_ReadStatusRegister>:
	W25qxx_Spi(0x04);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	//W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3) {
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	4603      	mov	r3, r0
 800e358:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e35e:	2200      	movs	r2, #0
 800e360:	2110      	movs	r1, #16
 800e362:	481c      	ldr	r0, [pc, #112]	; (800e3d4 <W25qxx_ReadStatusRegister+0x84>)
 800e364:	f7f6 fb8a 	bl	8004a7c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1) {
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d10c      	bne.n	800e388 <W25qxx_ReadStatusRegister+0x38>
		W25qxx_Spi(0x05);
 800e36e:	2005      	movs	r0, #5
 800e370:	f7ff ff56 	bl	800e220 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e374:	20a5      	movs	r0, #165	; 0xa5
 800e376:	f7ff ff53 	bl	800e220 <W25qxx_Spi>
 800e37a:	4603      	mov	r3, r0
 800e37c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800e37e:	4a16      	ldr	r2, [pc, #88]	; (800e3d8 <W25qxx_ReadStatusRegister+0x88>)
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800e386:	e01b      	b.n	800e3c0 <W25qxx_ReadStatusRegister+0x70>
	} else if (SelectStatusRegister_1_2_3 == 2) {
 800e388:	79fb      	ldrb	r3, [r7, #7]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d10c      	bne.n	800e3a8 <W25qxx_ReadStatusRegister+0x58>
		W25qxx_Spi(0x35);
 800e38e:	2035      	movs	r0, #53	; 0x35
 800e390:	f7ff ff46 	bl	800e220 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e394:	20a5      	movs	r0, #165	; 0xa5
 800e396:	f7ff ff43 	bl	800e220 <W25qxx_Spi>
 800e39a:	4603      	mov	r3, r0
 800e39c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800e39e:	4a0e      	ldr	r2, [pc, #56]	; (800e3d8 <W25qxx_ReadStatusRegister+0x88>)
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
 800e3a2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800e3a6:	e00b      	b.n	800e3c0 <W25qxx_ReadStatusRegister+0x70>
	} else {
		W25qxx_Spi(0x15);
 800e3a8:	2015      	movs	r0, #21
 800e3aa:	f7ff ff39 	bl	800e220 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e3ae:	20a5      	movs	r0, #165	; 0xa5
 800e3b0:	f7ff ff36 	bl	800e220 <W25qxx_Spi>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800e3b8:	4a07      	ldr	r2, [pc, #28]	; (800e3d8 <W25qxx_ReadStatusRegister+0x88>)
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
 800e3bc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	2110      	movs	r1, #16
 800e3c4:	4803      	ldr	r0, [pc, #12]	; (800e3d4 <W25qxx_ReadStatusRegister+0x84>)
 800e3c6:	f7f6 fb59 	bl	8004a7c <HAL_GPIO_WritePin>
	return status;
 800e3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	40020000 	.word	0x40020000
 800e3d8:	20002df4 	.word	0x20002df4

0800e3dc <W25qxx_WaitForWriteEnd>:
	}
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void) {
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	af00      	add	r7, sp, #0
	//W25qxx_Delay(1);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2110      	movs	r1, #16
 800e3e4:	480d      	ldr	r0, [pc, #52]	; (800e41c <W25qxx_WaitForWriteEnd+0x40>)
 800e3e6:	f7f6 fb49 	bl	8004a7c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800e3ea:	2005      	movs	r0, #5
 800e3ec:	f7ff ff18 	bl	800e220 <W25qxx_Spi>
	do {
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e3f0:	20a5      	movs	r0, #165	; 0xa5
 800e3f2:	f7ff ff15 	bl	800e220 <W25qxx_Spi>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <W25qxx_WaitForWriteEnd+0x44>)
 800e3fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		//W25qxx_Delay(1);
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800e400:	4b07      	ldr	r3, [pc, #28]	; (800e420 <W25qxx_WaitForWriteEnd+0x44>)
 800e402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1f0      	bne.n	800e3f0 <W25qxx_WaitForWriteEnd+0x14>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e40e:	2201      	movs	r2, #1
 800e410:	2110      	movs	r1, #16
 800e412:	4802      	ldr	r0, [pc, #8]	; (800e41c <W25qxx_WaitForWriteEnd+0x40>)
 800e414:	f7f6 fb32 	bl	8004a7c <HAL_GPIO_WritePin>
}
 800e418:	bf00      	nop
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	40020000 	.word	0x40020000
 800e420:	20002df4 	.word	0x20002df4

0800e424 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void) {
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800e42a:	4b8d      	ldr	r3, [pc, #564]	; (800e660 <W25qxx_Init+0x23c>)
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800e432:	e004      	b.n	800e43e <W25qxx_Init+0x1a>
		//W25qxx_Delay(1);
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e434:	2201      	movs	r2, #1
 800e436:	2110      	movs	r1, #16
 800e438:	488a      	ldr	r0, [pc, #552]	; (800e664 <W25qxx_Init+0x240>)
 800e43a:	f7f6 fb1f 	bl	8004a7c <HAL_GPIO_WritePin>
	while (HAL_GetTick() < 100)
 800e43e:	f7f5 fcb7 	bl	8003db0 <HAL_GetTick>
 800e442:	4603      	mov	r3, r0
 800e444:	2b63      	cmp	r3, #99	; 0x63
 800e446:	d9f5      	bls.n	800e434 <W25qxx_Init+0x10>
	//W25qxx_Delay(1);(100);
	uint32_t id;

	printf("w25qxx Init Begin...\r\n");
 800e448:	4887      	ldr	r0, [pc, #540]	; (800e668 <W25qxx_Init+0x244>)
 800e44a:	f00a fcf9 	bl	8018e40 <puts>

	id = W25qxx_ReadID();
 800e44e:	f7ff feff 	bl	800e250 <W25qxx_ReadID>
 800e452:	6078      	str	r0, [r7, #4]


	printf("w25qxx ID:0x%X\r\n", id);
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	4885      	ldr	r0, [pc, #532]	; (800e66c <W25qxx_Init+0x248>)
 800e458:	f00a fc6c 	bl	8018d34 <iprintf>

	switch (id & 0x000000FF) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	3b11      	subs	r3, #17
 800e462:	2b0f      	cmp	r3, #15
 800e464:	f200 808b 	bhi.w	800e57e <W25qxx_Init+0x15a>
 800e468:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <W25qxx_Init+0x4c>)
 800e46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46e:	bf00      	nop
 800e470:	0800e56b 	.word	0x0800e56b
 800e474:	0800e557 	.word	0x0800e557
 800e478:	0800e543 	.word	0x0800e543
 800e47c:	0800e52f 	.word	0x0800e52f
 800e480:	0800e51b 	.word	0x0800e51b
 800e484:	0800e507 	.word	0x0800e507
 800e488:	0800e4f3 	.word	0x0800e4f3
 800e48c:	0800e4dd 	.word	0x0800e4dd
 800e490:	0800e4c7 	.word	0x0800e4c7
 800e494:	0800e57f 	.word	0x0800e57f
 800e498:	0800e57f 	.word	0x0800e57f
 800e49c:	0800e57f 	.word	0x0800e57f
 800e4a0:	0800e57f 	.word	0x0800e57f
 800e4a4:	0800e57f 	.word	0x0800e57f
 800e4a8:	0800e57f 	.word	0x0800e57f
 800e4ac:	0800e4b1 	.word	0x0800e4b1
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800e4b0:	4b6b      	ldr	r3, [pc, #428]	; (800e660 <W25qxx_Init+0x23c>)
 800e4b2:	220a      	movs	r2, #10
 800e4b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800e4b6:	4b6a      	ldr	r3, [pc, #424]	; (800e660 <W25qxx_Init+0x23c>)
 800e4b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e4bc:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q512\r\n");
 800e4be:	486c      	ldr	r0, [pc, #432]	; (800e670 <W25qxx_Init+0x24c>)
 800e4c0:	f00a fcbe 	bl	8018e40 <puts>

		break;
 800e4c4:	e064      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800e4c6:	4b66      	ldr	r3, [pc, #408]	; (800e660 <W25qxx_Init+0x23c>)
 800e4c8:	2209      	movs	r2, #9
 800e4ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800e4cc:	4b64      	ldr	r3, [pc, #400]	; (800e660 <W25qxx_Init+0x23c>)
 800e4ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4d2:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q256\r\n");
 800e4d4:	4867      	ldr	r0, [pc, #412]	; (800e674 <W25qxx_Init+0x250>)
 800e4d6:	f00a fcb3 	bl	8018e40 <puts>

		break;
 800e4da:	e059      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800e4dc:	4b60      	ldr	r3, [pc, #384]	; (800e660 <W25qxx_Init+0x23c>)
 800e4de:	2208      	movs	r2, #8
 800e4e0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800e4e2:	4b5f      	ldr	r3, [pc, #380]	; (800e660 <W25qxx_Init+0x23c>)
 800e4e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4e8:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q128\r\n");
 800e4ea:	4863      	ldr	r0, [pc, #396]	; (800e678 <W25qxx_Init+0x254>)
 800e4ec:	f00a fca8 	bl	8018e40 <puts>

		break;
 800e4f0:	e04e      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800e4f2:	4b5b      	ldr	r3, [pc, #364]	; (800e660 <W25qxx_Init+0x23c>)
 800e4f4:	2207      	movs	r2, #7
 800e4f6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800e4f8:	4b59      	ldr	r3, [pc, #356]	; (800e660 <W25qxx_Init+0x23c>)
 800e4fa:	2280      	movs	r2, #128	; 0x80
 800e4fc:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q64\r\n");
 800e4fe:	485f      	ldr	r0, [pc, #380]	; (800e67c <W25qxx_Init+0x258>)
 800e500:	f00a fc9e 	bl	8018e40 <puts>

		break;
 800e504:	e044      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800e506:	4b56      	ldr	r3, [pc, #344]	; (800e660 <W25qxx_Init+0x23c>)
 800e508:	2206      	movs	r2, #6
 800e50a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800e50c:	4b54      	ldr	r3, [pc, #336]	; (800e660 <W25qxx_Init+0x23c>)
 800e50e:	2240      	movs	r2, #64	; 0x40
 800e510:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q32\r\n");
 800e512:	485b      	ldr	r0, [pc, #364]	; (800e680 <W25qxx_Init+0x25c>)
 800e514:	f00a fc94 	bl	8018e40 <puts>

		break;
 800e518:	e03a      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800e51a:	4b51      	ldr	r3, [pc, #324]	; (800e660 <W25qxx_Init+0x23c>)
 800e51c:	2205      	movs	r2, #5
 800e51e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800e520:	4b4f      	ldr	r3, [pc, #316]	; (800e660 <W25qxx_Init+0x23c>)
 800e522:	2220      	movs	r2, #32
 800e524:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q16\r\n");
 800e526:	4857      	ldr	r0, [pc, #348]	; (800e684 <W25qxx_Init+0x260>)
 800e528:	f00a fc8a 	bl	8018e40 <puts>

		break;
 800e52c:	e030      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800e52e:	4b4c      	ldr	r3, [pc, #304]	; (800e660 <W25qxx_Init+0x23c>)
 800e530:	2204      	movs	r2, #4
 800e532:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800e534:	4b4a      	ldr	r3, [pc, #296]	; (800e660 <W25qxx_Init+0x23c>)
 800e536:	2210      	movs	r2, #16
 800e538:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q80\r\n");
 800e53a:	4853      	ldr	r0, [pc, #332]	; (800e688 <W25qxx_Init+0x264>)
 800e53c:	f00a fc80 	bl	8018e40 <puts>

		break;
 800e540:	e026      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800e542:	4b47      	ldr	r3, [pc, #284]	; (800e660 <W25qxx_Init+0x23c>)
 800e544:	2203      	movs	r2, #3
 800e546:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800e548:	4b45      	ldr	r3, [pc, #276]	; (800e660 <W25qxx_Init+0x23c>)
 800e54a:	2208      	movs	r2, #8
 800e54c:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q40\r\n");
 800e54e:	484f      	ldr	r0, [pc, #316]	; (800e68c <W25qxx_Init+0x268>)
 800e550:	f00a fc76 	bl	8018e40 <puts>

		break;
 800e554:	e01c      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800e556:	4b42      	ldr	r3, [pc, #264]	; (800e660 <W25qxx_Init+0x23c>)
 800e558:	2202      	movs	r2, #2
 800e55a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800e55c:	4b40      	ldr	r3, [pc, #256]	; (800e660 <W25qxx_Init+0x23c>)
 800e55e:	2204      	movs	r2, #4
 800e560:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q20\r\n");
 800e562:	484b      	ldr	r0, [pc, #300]	; (800e690 <W25qxx_Init+0x26c>)
 800e564:	f00a fc6c 	bl	8018e40 <puts>

		break;
 800e568:	e012      	b.n	800e590 <W25qxx_Init+0x16c>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800e56a:	4b3d      	ldr	r3, [pc, #244]	; (800e660 <W25qxx_Init+0x23c>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800e570:	4b3b      	ldr	r3, [pc, #236]	; (800e660 <W25qxx_Init+0x23c>)
 800e572:	2202      	movs	r2, #2
 800e574:	61da      	str	r2, [r3, #28]

		printf("w25qxx Chip: w25q10\r\n");
 800e576:	4847      	ldr	r0, [pc, #284]	; (800e694 <W25qxx_Init+0x270>)
 800e578:	f00a fc62 	bl	8018e40 <puts>

		break;
 800e57c:	e008      	b.n	800e590 <W25qxx_Init+0x16c>
	default:

		printf("w25qxx Unknown ID\r\n");
 800e57e:	4846      	ldr	r0, [pc, #280]	; (800e698 <W25qxx_Init+0x274>)
 800e580:	f00a fc5e 	bl	8018e40 <puts>

		w25qxx.Lock = 0;
 800e584:	4b36      	ldr	r3, [pc, #216]	; (800e660 <W25qxx_Init+0x23c>)
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800e58c:	2300      	movs	r3, #0
 800e58e:	e063      	b.n	800e658 <W25qxx_Init+0x234>
	}
	w25qxx.PageSize = 256;
 800e590:	4b33      	ldr	r3, [pc, #204]	; (800e660 <W25qxx_Init+0x23c>)
 800e592:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e596:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800e598:	4b31      	ldr	r3, [pc, #196]	; (800e660 <W25qxx_Init+0x23c>)
 800e59a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e59e:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800e5a0:	4b2f      	ldr	r3, [pc, #188]	; (800e660 <W25qxx_Init+0x23c>)
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	011b      	lsls	r3, r3, #4
 800e5a6:	4a2e      	ldr	r2, [pc, #184]	; (800e660 <W25qxx_Init+0x23c>)
 800e5a8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800e5aa:	4b2d      	ldr	r3, [pc, #180]	; (800e660 <W25qxx_Init+0x23c>)
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	4a2c      	ldr	r2, [pc, #176]	; (800e660 <W25qxx_Init+0x23c>)
 800e5b0:	6912      	ldr	r2, [r2, #16]
 800e5b2:	fb02 f303 	mul.w	r3, r2, r3
 800e5b6:	4a2a      	ldr	r2, [pc, #168]	; (800e660 <W25qxx_Init+0x23c>)
 800e5b8:	8952      	ldrh	r2, [r2, #10]
 800e5ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5be:	4a28      	ldr	r2, [pc, #160]	; (800e660 <W25qxx_Init+0x23c>)
 800e5c0:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800e5c2:	4b27      	ldr	r3, [pc, #156]	; (800e660 <W25qxx_Init+0x23c>)
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	011b      	lsls	r3, r3, #4
 800e5c8:	4a25      	ldr	r2, [pc, #148]	; (800e660 <W25qxx_Init+0x23c>)
 800e5ca:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800e5cc:	4b24      	ldr	r3, [pc, #144]	; (800e660 <W25qxx_Init+0x23c>)
 800e5ce:	695b      	ldr	r3, [r3, #20]
 800e5d0:	4a23      	ldr	r2, [pc, #140]	; (800e660 <W25qxx_Init+0x23c>)
 800e5d2:	6912      	ldr	r2, [r2, #16]
 800e5d4:	fb02 f303 	mul.w	r3, r2, r3
 800e5d8:	0a9b      	lsrs	r3, r3, #10
 800e5da:	4a21      	ldr	r2, [pc, #132]	; (800e660 <W25qxx_Init+0x23c>)
 800e5dc:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800e5de:	f7ff fe6d 	bl	800e2bc <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800e5e2:	2001      	movs	r0, #1
 800e5e4:	f7ff feb4 	bl	800e350 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800e5e8:	2002      	movs	r0, #2
 800e5ea:	f7ff feb1 	bl	800e350 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800e5ee:	2003      	movs	r0, #3
 800e5f0:	f7ff feae 	bl	800e350 <W25qxx_ReadStatusRegister>

	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 800e5f4:	4b1a      	ldr	r3, [pc, #104]	; (800e660 <W25qxx_Init+0x23c>)
 800e5f6:	895b      	ldrh	r3, [r3, #10]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4828      	ldr	r0, [pc, #160]	; (800e69c <W25qxx_Init+0x278>)
 800e5fc:	f00a fb9a 	bl	8018d34 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 800e600:	4b17      	ldr	r3, [pc, #92]	; (800e660 <W25qxx_Init+0x23c>)
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	4619      	mov	r1, r3
 800e606:	4826      	ldr	r0, [pc, #152]	; (800e6a0 <W25qxx_Init+0x27c>)
 800e608:	f00a fb94 	bl	8018d34 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 800e60c:	4b14      	ldr	r3, [pc, #80]	; (800e660 <W25qxx_Init+0x23c>)
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	4619      	mov	r1, r3
 800e612:	4824      	ldr	r0, [pc, #144]	; (800e6a4 <W25qxx_Init+0x280>)
 800e614:	f00a fb8e 	bl	8018d34 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 800e618:	4b11      	ldr	r3, [pc, #68]	; (800e660 <W25qxx_Init+0x23c>)
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	4619      	mov	r1, r3
 800e61e:	4822      	ldr	r0, [pc, #136]	; (800e6a8 <W25qxx_Init+0x284>)
 800e620:	f00a fb88 	bl	8018d34 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 800e624:	4b0e      	ldr	r3, [pc, #56]	; (800e660 <W25qxx_Init+0x23c>)
 800e626:	699b      	ldr	r3, [r3, #24]
 800e628:	4619      	mov	r1, r3
 800e62a:	4820      	ldr	r0, [pc, #128]	; (800e6ac <W25qxx_Init+0x288>)
 800e62c:	f00a fb82 	bl	8018d34 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 800e630:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <W25qxx_Init+0x23c>)
 800e632:	69db      	ldr	r3, [r3, #28]
 800e634:	4619      	mov	r1, r3
 800e636:	481e      	ldr	r0, [pc, #120]	; (800e6b0 <W25qxx_Init+0x28c>)
 800e638:	f00a fb7c 	bl	8018d34 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 800e63c:	4b08      	ldr	r3, [pc, #32]	; (800e660 <W25qxx_Init+0x23c>)
 800e63e:	6a1b      	ldr	r3, [r3, #32]
 800e640:	4619      	mov	r1, r3
 800e642:	481c      	ldr	r0, [pc, #112]	; (800e6b4 <W25qxx_Init+0x290>)
 800e644:	f00a fb76 	bl	8018d34 <iprintf>
	printf("w25qxx Init Done\r\n");
 800e648:	481b      	ldr	r0, [pc, #108]	; (800e6b8 <W25qxx_Init+0x294>)
 800e64a:	f00a fbf9 	bl	8018e40 <puts>

	w25qxx.Lock = 0;
 800e64e:	4b04      	ldr	r3, [pc, #16]	; (800e660 <W25qxx_Init+0x23c>)
 800e650:	2200      	movs	r2, #0
 800e652:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800e656:	2301      	movs	r3, #1
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20002df4 	.word	0x20002df4
 800e664:	40020000 	.word	0x40020000
 800e668:	0801b2b4 	.word	0x0801b2b4
 800e66c:	0801b2cc 	.word	0x0801b2cc
 800e670:	0801b2e0 	.word	0x0801b2e0
 800e674:	0801b2f8 	.word	0x0801b2f8
 800e678:	0801b310 	.word	0x0801b310
 800e67c:	0801b328 	.word	0x0801b328
 800e680:	0801b340 	.word	0x0801b340
 800e684:	0801b358 	.word	0x0801b358
 800e688:	0801b370 	.word	0x0801b370
 800e68c:	0801b388 	.word	0x0801b388
 800e690:	0801b3a0 	.word	0x0801b3a0
 800e694:	0801b3b8 	.word	0x0801b3b8
 800e698:	0801b3d0 	.word	0x0801b3d0
 800e69c:	0801b3e4 	.word	0x0801b3e4
 800e6a0:	0801b404 	.word	0x0801b404
 800e6a4:	0801b41c 	.word	0x0801b41c
 800e6a8:	0801b43c 	.word	0x0801b43c
 800e6ac:	0801b458 	.word	0x0801b458
 800e6b0:	0801b478 	.word	0x0801b478
 800e6b4:	0801b494 	.word	0x0801b494
 800e6b8:	0801b4b4 	.word	0x0801b4b4

0800e6bc <W25qxx_EraseSector>:

	//W25qxx_Delay(1);(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 800e6c4:	e003      	b.n	800e6ce <W25qxx_EraseSector+0x12>
		//W25qxx_Delay(1);
		w25qxx.Lock = 1;
 800e6c6:	4b24      	ldr	r3, [pc, #144]	; (800e758 <W25qxx_EraseSector+0x9c>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (w25qxx.Lock == 1)
 800e6ce:	4b22      	ldr	r3, [pc, #136]	; (800e758 <W25qxx_EraseSector+0x9c>)
 800e6d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d0f6      	beq.n	800e6c6 <W25qxx_EraseSector+0xa>
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800e6d8:	f7ff fe80 	bl	800e3dc <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800e6dc:	4b1e      	ldr	r3, [pc, #120]	; (800e758 <W25qxx_EraseSector+0x9c>)
 800e6de:	691a      	ldr	r2, [r3, #16]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	fb02 f303 	mul.w	r3, r2, r3
 800e6e6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800e6e8:	f7ff fe1e 	bl	800e328 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2110      	movs	r1, #16
 800e6f0:	481a      	ldr	r0, [pc, #104]	; (800e75c <W25qxx_EraseSector+0xa0>)
 800e6f2:	f7f6 f9c3 	bl	8004a7c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 800e6f6:	4b18      	ldr	r3, [pc, #96]	; (800e758 <W25qxx_EraseSector+0x9c>)
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	2b08      	cmp	r3, #8
 800e6fc:	d909      	bls.n	800e712 <W25qxx_EraseSector+0x56>
		W25qxx_Spi(0x21);
 800e6fe:	2021      	movs	r0, #33	; 0x21
 800e700:	f7ff fd8e 	bl	800e220 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	0e1b      	lsrs	r3, r3, #24
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7ff fd88 	bl	800e220 <W25qxx_Spi>
 800e710:	e002      	b.n	800e718 <W25qxx_EraseSector+0x5c>
	} else {
		W25qxx_Spi(0x20);
 800e712:	2020      	movs	r0, #32
 800e714:	f7ff fd84 	bl	800e220 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	0c1b      	lsrs	r3, r3, #16
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff fd7e 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	0a1b      	lsrs	r3, r3, #8
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fd78 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	b2db      	uxtb	r3, r3
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff fd73 	bl	800e220 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e73a:	2201      	movs	r2, #1
 800e73c:	2110      	movs	r1, #16
 800e73e:	4807      	ldr	r0, [pc, #28]	; (800e75c <W25qxx_EraseSector+0xa0>)
 800e740:	f7f6 f99c 	bl	8004a7c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800e744:	f7ff fe4a 	bl	800e3dc <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	//W25qxx_Delay(1);
	w25qxx.Lock = 0;
 800e748:	4b03      	ldr	r3, [pc, #12]	; (800e758 <W25qxx_EraseSector+0x9c>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	20002df4 	.word	0x20002df4
 800e75c:	40020000 	.word	0x40020000

0800e760 <W25qxx_SectorToPage>:
//###################################################################################################################
uint32_t W25qxx_SectorToBlock(uint32_t SectorAddress) {
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress) {
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800e768:	4b07      	ldr	r3, [pc, #28]	; (800e788 <W25qxx_SectorToPage+0x28>)
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	fb02 f303 	mul.w	r3, r2, r3
 800e772:	4a05      	ldr	r2, [pc, #20]	; (800e788 <W25qxx_SectorToPage+0x28>)
 800e774:	8952      	ldrh	r2, [r2, #10]
 800e776:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	370c      	adds	r7, #12
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	20002df4 	.word	0x20002df4

0800e78c <W25qxx_WritePage>:
	printf("w25qxx WriteByte done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize) {
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800e79a:	e003      	b.n	800e7a4 <W25qxx_WritePage+0x18>
		////W25qxx_Delay(1);(1);
		w25qxx.Lock = 1;
 800e79c:	4b37      	ldr	r3, [pc, #220]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (w25qxx.Lock == 1)
 800e7a4:	4b35      	ldr	r3, [pc, #212]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e7a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d0f6      	beq.n	800e79c <W25qxx_WritePage+0x10>
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800e7ae:	683a      	ldr	r2, [r7, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	4a31      	ldr	r2, [pc, #196]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e7b6:	8952      	ldrh	r2, [r2, #10]
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d802      	bhi.n	800e7c2 <W25qxx_WritePage+0x36>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <W25qxx_WritePage+0x42>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800e7c2:	4b2e      	ldr	r3, [pc, #184]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e7c4:	895b      	ldrh	r3, [r3, #10]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	1ad3      	subs	r3, r2, r3
 800e7cc:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	4a29      	ldr	r2, [pc, #164]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e7d6:	8952      	ldrh	r2, [r2, #10]
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d905      	bls.n	800e7e8 <W25qxx_WritePage+0x5c>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800e7dc:	4b27      	ldr	r3, [pc, #156]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e7de:	895b      	ldrh	r3, [r3, #10]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	//W25qxx_Delay(1);(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800e7e8:	f7ff fdf8 	bl	800e3dc <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800e7ec:	f7ff fd9c 	bl	800e328 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2110      	movs	r1, #16
 800e7f4:	4822      	ldr	r0, [pc, #136]	; (800e880 <W25qxx_WritePage+0xf4>)
 800e7f6:	f7f6 f941 	bl	8004a7c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800e7fa:	4b20      	ldr	r3, [pc, #128]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e7fc:	895b      	ldrh	r3, [r3, #10]
 800e7fe:	461a      	mov	r2, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	fb02 f303 	mul.w	r3, r2, r3
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256) {
 800e80c:	4b1b      	ldr	r3, [pc, #108]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b08      	cmp	r3, #8
 800e812:	d909      	bls.n	800e828 <W25qxx_WritePage+0x9c>
		W25qxx_Spi(0x12);
 800e814:	2012      	movs	r0, #18
 800e816:	f7ff fd03 	bl	800e220 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	0e1b      	lsrs	r3, r3, #24
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff fcfd 	bl	800e220 <W25qxx_Spi>
 800e826:	e002      	b.n	800e82e <W25qxx_WritePage+0xa2>
	} else {
		W25qxx_Spi(0x02);
 800e828:	2002      	movs	r0, #2
 800e82a:	f7ff fcf9 	bl	800e220 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	0c1b      	lsrs	r3, r3, #16
 800e832:	b2db      	uxtb	r3, r3
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fcf3 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	0a1b      	lsrs	r3, r3, #8
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff fced 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff fce8 	bl	800e220 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	b29a      	uxth	r2, r3
 800e854:	2364      	movs	r3, #100	; 0x64
 800e856:	68f9      	ldr	r1, [r7, #12]
 800e858:	480a      	ldr	r0, [pc, #40]	; (800e884 <W25qxx_WritePage+0xf8>)
 800e85a:	f7fa fe80 	bl	800955e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e85e:	2201      	movs	r2, #1
 800e860:	2110      	movs	r1, #16
 800e862:	4807      	ldr	r0, [pc, #28]	; (800e880 <W25qxx_WritePage+0xf4>)
 800e864:	f7f6 f90a 	bl	8004a7c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800e868:	f7ff fdb8 	bl	800e3dc <W25qxx_WaitForWriteEnd>
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	//W25qxx_Delay(1);(100);
#endif
	//W25qxx_Delay(1);
	w25qxx.Lock = 0;
 800e86c:	4b03      	ldr	r3, [pc, #12]	; (800e87c <W25qxx_WritePage+0xf0>)
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800e874:	bf00      	nop
 800e876:	3710      	adds	r7, #16
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20002df4 	.word	0x20002df4
 800e880:	40020000 	.word	0x40020000
 800e884:	20002698 	.word	0x20002698

0800e888 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize) {
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800e896:	4b2c      	ldr	r3, [pc, #176]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d802      	bhi.n	800e8a6 <W25qxx_WriteSector+0x1e>
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d102      	bne.n	800e8ac <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800e8a6:	4b28      	ldr	r3, [pc, #160]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	//W25qxx_Delay(1);(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize) {
 800e8ac:	4b26      	ldr	r3, [pc, #152]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d243      	bcs.n	800e93e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	441a      	add	r2, r3
 800e8bc:	4b22      	ldr	r3, [pc, #136]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d905      	bls.n	800e8d0 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800e8c4:	4b20      	ldr	r3, [pc, #128]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e8c6:	691a      	ldr	r2, [r3, #16]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	61bb      	str	r3, [r7, #24]
 800e8ce:	e001      	b.n	800e8d4 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800e8d4:	68b8      	ldr	r0, [r7, #8]
 800e8d6:	f7ff ff43 	bl	800e760 <W25qxx_SectorToPage>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	4b1a      	ldr	r3, [pc, #104]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e8de:	895b      	ldrh	r3, [r3, #10]
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8e8:	4413      	add	r3, r2
 800e8ea:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800e8ec:	4b16      	ldr	r3, [pc, #88]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e8ee:	895b      	ldrh	r3, [r3, #10]
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8f8:	fb01 f202 	mul.w	r2, r1, r2
 800e8fc:	1a9b      	subs	r3, r3, r2
 800e8fe:	617b      	str	r3, [r7, #20]
	do {
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	69f9      	ldr	r1, [r7, #28]
 800e906:	68f8      	ldr	r0, [r7, #12]
 800e908:	f7ff ff40 	bl	800e78c <W25qxx_WritePage>
		StartPage++;
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	3301      	adds	r3, #1
 800e910:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800e912:	4b0d      	ldr	r3, [pc, #52]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e914:	895b      	ldrh	r3, [r3, #10]
 800e916:	461a      	mov	r2, r3
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	1a9a      	subs	r2, r3, r2
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	4413      	add	r3, r2
 800e920:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800e922:	4b09      	ldr	r3, [pc, #36]	; (800e948 <W25qxx_WriteSector+0xc0>)
 800e924:	895b      	ldrh	r3, [r3, #10]
 800e926:	461a      	mov	r2, r3
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	4413      	add	r3, r2
 800e930:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dce1      	bgt.n	800e900 <W25qxx_WriteSector+0x78>
 800e93c:	e000      	b.n	800e940 <W25qxx_WriteSector+0xb8>
		return;
 800e93e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	//W25qxx_Delay(1);(100);
#endif
}
 800e940:	3720      	adds	r7, #32
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	20002df4 	.word	0x20002df4

0800e94c <W25qxx_ReadPage>:
#endif
	//W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize) {
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800e95a:	e003      	b.n	800e964 <W25qxx_ReadPage+0x18>
		//W25qxx_Delay(1);
		w25qxx.Lock = 1;
 800e95c:	4b34      	ldr	r3, [pc, #208]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (w25qxx.Lock == 1)
 800e964:	4b32      	ldr	r3, [pc, #200]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e966:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d0f6      	beq.n	800e95c <W25qxx_ReadPage+0x10>
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800e96e:	4b30      	ldr	r3, [pc, #192]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e970:	895b      	ldrh	r3, [r3, #10]
 800e972:	461a      	mov	r2, r3
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	4293      	cmp	r3, r2
 800e978:	d802      	bhi.n	800e980 <W25qxx_ReadPage+0x34>
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d102      	bne.n	800e986 <W25qxx_ReadPage+0x3a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800e980:	4b2b      	ldr	r3, [pc, #172]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e982:	895b      	ldrh	r3, [r3, #10]
 800e984:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	4413      	add	r3, r2
 800e98c:	4a28      	ldr	r2, [pc, #160]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e98e:	8952      	ldrh	r2, [r2, #10]
 800e990:	4293      	cmp	r3, r2
 800e992:	d905      	bls.n	800e9a0 <W25qxx_ReadPage+0x54>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800e994:	4b26      	ldr	r3, [pc, #152]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e996:	895b      	ldrh	r3, [r3, #10]
 800e998:	461a      	mov	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	//W25qxx_Delay(1);(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800e9a0:	4b23      	ldr	r3, [pc, #140]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e9a2:	895b      	ldrh	r3, [r3, #10]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	fb02 f303 	mul.w	r3, r2, r3
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	2110      	movs	r1, #16
 800e9b6:	481f      	ldr	r0, [pc, #124]	; (800ea34 <W25qxx_ReadPage+0xe8>)
 800e9b8:	f7f6 f860 	bl	8004a7c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 800e9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2b08      	cmp	r3, #8
 800e9c2:	d909      	bls.n	800e9d8 <W25qxx_ReadPage+0x8c>
		W25qxx_Spi(0x0C);
 800e9c4:	200c      	movs	r0, #12
 800e9c6:	f7ff fc2b 	bl	800e220 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	0e1b      	lsrs	r3, r3, #24
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff fc25 	bl	800e220 <W25qxx_Spi>
 800e9d6:	e002      	b.n	800e9de <W25qxx_ReadPage+0x92>
	} else {
		W25qxx_Spi(0x0B);
 800e9d8:	200b      	movs	r0, #11
 800e9da:	f7ff fc21 	bl	800e220 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	0c1b      	lsrs	r3, r3, #16
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff fc1b 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	0a1b      	lsrs	r3, r3, #8
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff fc15 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7ff fc10 	bl	800e220 <W25qxx_Spi>
	W25qxx_Spi(0);
 800ea00:	2000      	movs	r0, #0
 800ea02:	f7ff fc0d 	bl	800e220 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	2364      	movs	r3, #100	; 0x64
 800ea0c:	68f9      	ldr	r1, [r7, #12]
 800ea0e:	480a      	ldr	r0, [pc, #40]	; (800ea38 <W25qxx_ReadPage+0xec>)
 800ea10:	f7fa fee1 	bl	80097d6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ea14:	2201      	movs	r2, #1
 800ea16:	2110      	movs	r1, #16
 800ea18:	4806      	ldr	r0, [pc, #24]	; (800ea34 <W25qxx_ReadPage+0xe8>)
 800ea1a:	f7f6 f82f 	bl	8004a7c <HAL_GPIO_WritePin>
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	//W25qxx_Delay(1);(100);
#endif
	//W25qxx_Delay(1);
	w25qxx.Lock = 0;
 800ea1e:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <W25qxx_ReadPage+0xe4>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20002df4 	.word	0x20002df4
 800ea34:	40020000 	.word	0x40020000
 800ea38:	20002698 	.word	0x20002698

0800ea3c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize) {
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b088      	sub	sp, #32
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800ea4a:	4b2c      	ldr	r3, [pc, #176]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d802      	bhi.n	800ea5a <W25qxx_ReadSector+0x1e>
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d102      	bne.n	800ea60 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800ea5a:	4b28      	ldr	r3, [pc, #160]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ea5c:	691b      	ldr	r3, [r3, #16]
 800ea5e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	//W25qxx_Delay(1);(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize) {
 800ea60:	4b26      	ldr	r3, [pc, #152]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d243      	bcs.n	800eaf2 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	441a      	add	r2, r3
 800ea70:	4b22      	ldr	r3, [pc, #136]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d905      	bls.n	800ea84 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800ea78:	4b20      	ldr	r3, [pc, #128]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ea7a:	691a      	ldr	r2, [r3, #16]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	e001      	b.n	800ea88 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800ea88:	68b8      	ldr	r0, [r7, #8]
 800ea8a:	f7ff fe69 	bl	800e760 <W25qxx_SectorToPage>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	4b1a      	ldr	r3, [pc, #104]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ea92:	895b      	ldrh	r3, [r3, #10]
 800ea94:	4619      	mov	r1, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea9c:	4413      	add	r3, r2
 800ea9e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800eaa0:	4b16      	ldr	r3, [pc, #88]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800eaa2:	895b      	ldrh	r3, [r3, #10]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	fbb3 f1f2 	udiv	r1, r3, r2
 800eaac:	fb01 f202 	mul.w	r2, r1, r2
 800eab0:	1a9b      	subs	r3, r3, r2
 800eab2:	617b      	str	r3, [r7, #20]
	do {
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	69f9      	ldr	r1, [r7, #28]
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7ff ff46 	bl	800e94c <W25qxx_ReadPage>
		StartPage++;
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	3301      	adds	r3, #1
 800eac4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800eac6:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800eac8:	895b      	ldrh	r3, [r3, #10]
 800eaca:	461a      	mov	r2, r3
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	1a9a      	subs	r2, r3, r2
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	4413      	add	r3, r2
 800ead4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800ead6:	4b09      	ldr	r3, [pc, #36]	; (800eafc <W25qxx_ReadSector+0xc0>)
 800ead8:	895b      	ldrh	r3, [r3, #10]
 800eada:	461a      	mov	r2, r3
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4413      	add	r3, r2
 800eae4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	dce1      	bgt.n	800eab4 <W25qxx_ReadSector+0x78>
 800eaf0:	e000      	b.n	800eaf4 <W25qxx_ReadSector+0xb8>
		return;
 800eaf2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	//W25qxx_Delay(1);(100);
#endif
}
 800eaf4:	3720      	adds	r7, #32
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	20002df4 	.word	0x20002df4

0800eb00 <w25qReadingByUSB>:
	printf("---w25qxx ReadBlock Done\r\n");
	//W25qxx_Delay(1);(100);
#endif
}
//###################################################################################################################
void w25qReadingByUSB(uint16_t blk_addr, uint8_t *buf) {
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	4603      	mov	r3, r0
 800eb08:	6039      	str	r1, [r7, #0]
 800eb0a:	80fb      	strh	r3, [r7, #6]
	W25qxx_ReadPage(buf, blk_addr * 2, 0, 0);
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	005b      	lsls	r3, r3, #1
 800eb10:	4619      	mov	r1, r3
 800eb12:	2300      	movs	r3, #0
 800eb14:	2200      	movs	r2, #0
 800eb16:	6838      	ldr	r0, [r7, #0]
 800eb18:	f7ff ff18 	bl	800e94c <W25qxx_ReadPage>
	W25qxx_ReadPage(buf + 256, blk_addr * 2 + 1, 0, 0);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800eb22:	88fb      	ldrh	r3, [r7, #6]
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	3301      	adds	r3, #1
 800eb28:	4619      	mov	r1, r3
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f7ff ff0d 	bl	800e94c <W25qxx_ReadPage>
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <w25qWritingByUSB>:
//###################################################################################################################
void w25qWritingByUSB(uint16_t blk_addr, uint8_t *buf) {
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800eb40:	b084      	sub	sp, #16
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	4602      	mov	r2, r0
 800eb46:	f107 0310 	add.w	r3, r7, #16
 800eb4a:	f843 1c10 	str.w	r1, [r3, #-16]
 800eb4e:	f107 0310 	add.w	r3, r7, #16
 800eb52:	f823 2c0a 	strh.w	r2, [r3, #-10]

	uint8_t current_sector_buf[4096];
	uint16_t current_sector_addr = blk_addr / 8;
 800eb56:	f107 0310 	add.w	r3, r7, #16
 800eb5a:	f833 3c0a 	ldrh.w	r3, [r3, #-10]
 800eb5e:	08db      	lsrs	r3, r3, #3
 800eb60:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800eb64:	f102 020e 	add.w	r2, r2, #14
 800eb68:	8013      	strh	r3, [r2, #0]
	//uint16_t startPage = current_sector_addr * 16;
	int offset = 512 * (blk_addr % 8);
 800eb6a:	f107 0310 	add.w	r3, r7, #16
 800eb6e:	f833 3c0a 	ldrh.w	r3, [r3, #-10]
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	025b      	lsls	r3, r3, #9
 800eb78:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800eb7c:	f102 0208 	add.w	r2, r2, #8
 800eb80:	6013      	str	r3, [r2, #0]

	W25qxx_ReadSector(current_sector_buf, current_sector_addr, 0, 0);
 800eb82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eb86:	f103 030e 	add.w	r3, r3, #14
 800eb8a:	8819      	ldrh	r1, [r3, #0]
 800eb8c:	f107 0010 	add.w	r0, r7, #16
 800eb90:	3808      	subs	r0, #8
 800eb92:	2300      	movs	r3, #0
 800eb94:	2200      	movs	r2, #0
 800eb96:	f7ff ff51 	bl	800ea3c <W25qxx_ReadSector>

	memcpy(current_sector_buf + offset, buf, 512);
 800eb9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eb9e:	f103 0308 	add.w	r3, r3, #8
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	f107 0310 	add.w	r3, r7, #16
 800eba8:	3b08      	subs	r3, #8
 800ebaa:	4413      	add	r3, r2
 800ebac:	f107 0210 	add.w	r2, r7, #16
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebb6:	f851 1c10 	ldr.w	r1, [r1, #-16]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f009 ffc4 	bl	8018b48 <memcpy>

	W25qxx_EraseSector(current_sector_addr);
 800ebc0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ebc4:	f103 030e 	add.w	r3, r3, #14
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff fd76 	bl	800e6bc <W25qxx_EraseSector>

	//startPage = current_sector_addr * 16;

	W25qxx_WriteSector(current_sector_buf, current_sector_addr, 0, 0);
 800ebd0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ebd4:	f103 030e 	add.w	r3, r3, #14
 800ebd8:	8819      	ldrh	r1, [r3, #0]
 800ebda:	f107 0010 	add.w	r0, r7, #16
 800ebde:	3808      	subs	r0, #8
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f7ff fe50 	bl	800e888 <W25qxx_WriteSector>
}
 800ebe8:	bf00      	nop
 800ebea:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ebf8:	4904      	ldr	r1, [pc, #16]	; (800ec0c <MX_FATFS_Init+0x18>)
 800ebfa:	4805      	ldr	r0, [pc, #20]	; (800ec10 <MX_FATFS_Init+0x1c>)
 800ebfc:	f009 fc70 	bl	80184e0 <FATFS_LinkDriver>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	4b03      	ldr	r3, [pc, #12]	; (800ec14 <MX_FATFS_Init+0x20>)
 800ec06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec08:	bf00      	nop
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	20002e20 	.word	0x20002e20
 800ec10:	2000000c 	.word	0x2000000c
 800ec14:	20002e1c 	.word	0x20002e1c

0800ec18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ec1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat = STA_NOINIT;
 800ec32:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <USER_initialize+0x20>)
 800ec34:	2201      	movs	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
	//return Stat;
	return 0;
 800ec38:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	20000009 	.word	0x20000009

0800ec4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	4603      	mov	r3, r0
 800ec54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	Stat = STA_NOINIT;
 800ec56:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <USER_status+0x20>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	701a      	strb	r2, [r3, #0]
	//return Stat;
	return 0;
 800ec5c:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	370c      	adds	r7, #12
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	20000009 	.word	0x20000009

0800ec70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60b9      	str	r1, [r7, #8]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	603b      	str	r3, [r7, #0]
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//printf("%d || read  storage fatFs, sector:%d count:%d \r\n", HAL_GetTick(),   sector, count);


	int i;
	for (i = 0; i < count; i++) {
 800ec80:	2300      	movs	r3, #0
 800ec82:	617b      	str	r3, [r7, #20]
 800ec84:	e00f      	b.n	800eca6 <USER_read+0x36>
		w25qReadingByUSB(sector, buff);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	68b9      	ldr	r1, [r7, #8]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7ff ff37 	bl	800eb00 <w25qReadingByUSB>
		//W25X_Read_Sector(sector,buff);

		//W25qxx_ReadPage(buff, sector * 2,0,0);
		//W25qxx_ReadPage(buff + 256, sector * 2 + 1,0,0);

		sector++;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	3301      	adds	r3, #1
 800ec96:	607b      	str	r3, [r7, #4]
		buff += STORAGE_BLK_SIZ;
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ec9e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; i++) {
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	3301      	adds	r3, #1
 800eca4:	617b      	str	r3, [r7, #20]
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d8eb      	bhi.n	800ec86 <USER_read+0x16>
	}

	return RES_OK;
 800ecae:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3718      	adds	r7, #24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60b9      	str	r1, [r7, #8]
 800ecc0:	607a      	str	r2, [r7, #4]
 800ecc2:	603b      	str	r3, [r7, #0]
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE HERE */

	//printf("%d || write storage fatFs, sector:%d count:%d \r\n", HAL_GetTick(),   sector, count);

	int i;
	for (i = 0; i < count; i++) {
 800ecc8:	2300      	movs	r3, #0
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	e00f      	b.n	800ecee <USER_write+0x36>
		//W25qxx_EraseSector(sector);
		w25qWritingByUSB(sector, buff);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	68b9      	ldr	r1, [r7, #8]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7ff ff30 	bl	800eb3a <w25qWritingByUSB>
		//W25qxx_WriteSector((uint8_t*)buff,sector, 0,0);
		//writePage(buff, sector);



		sector++;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	607b      	str	r3, [r7, #4]
		buff += STORAGE_BLK_SIZ;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ece6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; i++) {
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	3301      	adds	r3, #1
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d8eb      	bhi.n	800ecce <USER_write+0x16>
	}

	return RES_OK;
 800ecf6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3718      	adds	r7, #24
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	4603      	mov	r3, r0
 800ed08:	603a      	str	r2, [r7, #0]
 800ed0a:	71fb      	strb	r3, [r7, #7]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	73fb      	strb	r3, [r7, #15]

	switch (cmd) {
 800ed14:	79bb      	ldrb	r3, [r7, #6]
 800ed16:	2b03      	cmp	r3, #3
 800ed18:	d819      	bhi.n	800ed4e <USER_ioctl+0x4e>
 800ed1a:	a201      	add	r2, pc, #4	; (adr r2, 800ed20 <USER_ioctl+0x20>)
 800ed1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed20:	0800ed55 	.word	0x0800ed55
 800ed24:	0800ed45 	.word	0x0800ed45
 800ed28:	0800ed3b 	.word	0x0800ed3b
 800ed2c:	0800ed31 	.word	0x0800ed31
		//				W25X_Erase_Sector(i);
		//
		//			break;

	case GET_BLOCK_SIZE:
		*(DWORD*) buff = STORAGE_BLK_SIZ;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed36:	601a      	str	r2, [r3, #0]
		//printf("%d || return block size:%d \r\n", HAL_GetTick(),   w25qxx.BlockSize);
		//	buf[1] = (u8)(FLASH_BLOCK_SIZE & 0xFF);
		//	buf[0] = (u8)(FLASH_BLOCK_SIZE >> 8);
		break;
 800ed38:	e00d      	b.n	800ed56 <USER_ioctl+0x56>

	case GET_SECTOR_SIZE:
		*(DWORD*) buff = STORAGE_BLK_SIZ;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed40:	601a      	str	r2, [r3, #0]
		//printf("%d || return SectorSize:%d \r\n", HAL_GetTick(),  w25qxx.SectorSize);
		//	buf[0] = (u8)(FLASH_SECTOR_SIZE & 0xFF);
		//	buf[1] = (u8)(FLASH_SECTOR_SIZE >> 8);
		break;
 800ed42:	e008      	b.n	800ed56 <USER_ioctl+0x56>

	case GET_SECTOR_COUNT:
		*(DWORD*) buff = STORAGE_BLK_NBR;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ed4a:	601a      	str	r2, [r3, #0]
		//printf("%d || return SectorCount:%d \r\n", HAL_GetTick(),  w25qxx.SectorCount);
		//	buf[0] = (u8)(FLASH_SECTOR_COUNT & 0xFF);
		//	buf[1] = (u8)(FLASH_SECTOR_COUNT >> 8);
		break;
 800ed4c:	e003      	b.n	800ed56 <USER_ioctl+0x56>

	default:
		res = RES_PARERR;
 800ed4e:	2304      	movs	r3, #4
 800ed50:	73fb      	strb	r3, [r7, #15]
		break;
 800ed52:	e000      	b.n	800ed56 <USER_ioctl+0x56>
		break;
 800ed54:	bf00      	nop
	}

	return res;
 800ed56:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800ed68:	f001 fa9c 	bl	80102a4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	4917      	ldr	r1, [pc, #92]	; (800edcc <MX_USB_DEVICE_Init+0x68>)
 800ed70:	4817      	ldr	r0, [pc, #92]	; (800edd0 <MX_USB_DEVICE_Init+0x6c>)
 800ed72:	f003 fcb6 	bl	80126e2 <USBD_Init>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800ed7c:	f7f3 fcc6 	bl	800270c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800ed80:	4914      	ldr	r1, [pc, #80]	; (800edd4 <MX_USB_DEVICE_Init+0x70>)
 800ed82:	4813      	ldr	r0, [pc, #76]	; (800edd0 <MX_USB_DEVICE_Init+0x6c>)
 800ed84:	f003 fcd9 	bl	801273a <USBD_RegisterClass>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800ed8e:	f7f3 fcbd 	bl	800270c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800ed92:	4911      	ldr	r1, [pc, #68]	; (800edd8 <MX_USB_DEVICE_Init+0x74>)
 800ed94:	480e      	ldr	r0, [pc, #56]	; (800edd0 <MX_USB_DEVICE_Init+0x6c>)
 800ed96:	f000 ff1f 	bl	800fbd8 <USBD_CDC_ACM_RegisterInterface>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800eda0:	f7f3 fcb4 	bl	800270c <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_MSC == 1)
  if (USBD_MSC_RegisterStorage(&hUsbDevice, &USBD_Storage_Interface_fops) != USBD_OK)
 800eda4:	490d      	ldr	r1, [pc, #52]	; (800eddc <MX_USB_DEVICE_Init+0x78>)
 800eda6:	480a      	ldr	r0, [pc, #40]	; (800edd0 <MX_USB_DEVICE_Init+0x6c>)
 800eda8:	f002 f80a 	bl	8010dc0 <USBD_MSC_RegisterStorage>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 800edb2:	f7f3 fcab 	bl	800270c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800edb6:	4806      	ldr	r0, [pc, #24]	; (800edd0 <MX_USB_DEVICE_Init+0x6c>)
 800edb8:	f003 fcfd 	bl	80127b6 <USBD_Start>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d001      	beq.n	800edc6 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 800edc2:	f7f3 fca3 	bl	800270c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800edc6:	bf00      	nop
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	20000034 	.word	0x20000034
 800edd0:	20002e24 	.word	0x20002e24
 800edd4:	20000184 	.word	0x20000184
 800edd8:	20000020 	.word	0x20000020
 800eddc:	20000084 	.word	0x20000084

0800ede0 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800edea:	79fb      	ldrb	r3, [r7, #7]
 800edec:	01db      	lsls	r3, r3, #7
 800edee:	4a06      	ldr	r2, [pc, #24]	; (800ee08 <CDC_Init+0x28>)
 800edf0:	441a      	add	r2, r3
 800edf2:	79fb      	ldrb	r3, [r7, #7]
 800edf4:	4905      	ldr	r1, [pc, #20]	; (800ee0c <CDC_Init+0x2c>)
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 ff28 	bl	800fc4c <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800edfc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20003140 	.word	0x20003140
 800ee0c:	20002e24 	.word	0x20002e24

0800ee10 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800ee1a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	603a      	str	r2, [r7, #0]
 800ee30:	461a      	mov	r2, r3
 800ee32:	4603      	mov	r3, r0
 800ee34:	71fb      	strb	r3, [r7, #7]
 800ee36:	460b      	mov	r3, r1
 800ee38:	71bb      	strb	r3, [r7, #6]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800ee3e:	79bb      	ldrb	r3, [r7, #6]
 800ee40:	2b23      	cmp	r3, #35	; 0x23
 800ee42:	f200 80b6 	bhi.w	800efb2 <CDC_Control+0x18a>
 800ee46:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <CDC_Control+0x24>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800efb3 	.word	0x0800efb3
 800ee50:	0800efb3 	.word	0x0800efb3
 800ee54:	0800efb3 	.word	0x0800efb3
 800ee58:	0800efb3 	.word	0x0800efb3
 800ee5c:	0800efb3 	.word	0x0800efb3
 800ee60:	0800efb3 	.word	0x0800efb3
 800ee64:	0800efb3 	.word	0x0800efb3
 800ee68:	0800efb3 	.word	0x0800efb3
 800ee6c:	0800efb3 	.word	0x0800efb3
 800ee70:	0800efb3 	.word	0x0800efb3
 800ee74:	0800efb3 	.word	0x0800efb3
 800ee78:	0800efb3 	.word	0x0800efb3
 800ee7c:	0800efb3 	.word	0x0800efb3
 800ee80:	0800efb3 	.word	0x0800efb3
 800ee84:	0800efb3 	.word	0x0800efb3
 800ee88:	0800efb3 	.word	0x0800efb3
 800ee8c:	0800efb3 	.word	0x0800efb3
 800ee90:	0800efb3 	.word	0x0800efb3
 800ee94:	0800efb3 	.word	0x0800efb3
 800ee98:	0800efb3 	.word	0x0800efb3
 800ee9c:	0800efb3 	.word	0x0800efb3
 800eea0:	0800efb3 	.word	0x0800efb3
 800eea4:	0800efb3 	.word	0x0800efb3
 800eea8:	0800efb3 	.word	0x0800efb3
 800eeac:	0800efb3 	.word	0x0800efb3
 800eeb0:	0800efb3 	.word	0x0800efb3
 800eeb4:	0800efb3 	.word	0x0800efb3
 800eeb8:	0800efb3 	.word	0x0800efb3
 800eebc:	0800efb3 	.word	0x0800efb3
 800eec0:	0800efb3 	.word	0x0800efb3
 800eec4:	0800efb3 	.word	0x0800efb3
 800eec8:	0800efb3 	.word	0x0800efb3
 800eecc:	0800eedd 	.word	0x0800eedd
 800eed0:	0800ef3d 	.word	0x0800ef3d
 800eed4:	0800efb3 	.word	0x0800efb3
 800eed8:	0800efb3 	.word	0x0800efb3
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	461a      	mov	r2, r3
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	3301      	adds	r3, #1
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	021b      	lsls	r3, r3, #8
 800eeea:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	3302      	adds	r3, #2
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800eef4:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	3303      	adds	r3, #3
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	061b      	lsls	r3, r3, #24
 800eefe:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800ef00:	79fb      	ldrb	r3, [r7, #7]
 800ef02:	4611      	mov	r1, r2
 800ef04:	4a2f      	ldr	r2, [pc, #188]	; (800efc4 <CDC_Control+0x19c>)
 800ef06:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800ef0a:	79fb      	ldrb	r3, [r7, #7]
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	7911      	ldrb	r1, [r2, #4]
 800ef10:	4a2c      	ldr	r2, [pc, #176]	; (800efc4 <CDC_Control+0x19c>)
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	4413      	add	r3, r2
 800ef16:	460a      	mov	r2, r1
 800ef18:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	7951      	ldrb	r1, [r2, #5]
 800ef20:	4a28      	ldr	r2, [pc, #160]	; (800efc4 <CDC_Control+0x19c>)
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	4413      	add	r3, r2
 800ef26:	460a      	mov	r2, r1
 800ef28:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	7991      	ldrb	r1, [r2, #6]
 800ef30:	4a24      	ldr	r2, [pc, #144]	; (800efc4 <CDC_Control+0x19c>)
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	4413      	add	r3, r2
 800ef36:	460a      	mov	r2, r1
 800ef38:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800ef3a:	e03b      	b.n	800efb4 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	4a21      	ldr	r2, [pc, #132]	; (800efc4 <CDC_Control+0x19c>)
 800ef40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	4a1d      	ldr	r2, [pc, #116]	; (800efc4 <CDC_Control+0x19c>)
 800ef4e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef52:	0a1a      	lsrs	r2, r3, #8
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	3301      	adds	r3, #1
 800ef58:	b2d2      	uxtb	r2, r2
 800ef5a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	4a19      	ldr	r2, [pc, #100]	; (800efc4 <CDC_Control+0x19c>)
 800ef60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef64:	0c1a      	lsrs	r2, r3, #16
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	3302      	adds	r3, #2
 800ef6a:	b2d2      	uxtb	r2, r2
 800ef6c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800ef6e:	79fb      	ldrb	r3, [r7, #7]
 800ef70:	4a14      	ldr	r2, [pc, #80]	; (800efc4 <CDC_Control+0x19c>)
 800ef72:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef76:	0e1a      	lsrs	r2, r3, #24
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	3303      	adds	r3, #3
 800ef7c:	b2d2      	uxtb	r2, r2
 800ef7e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800ef80:	79fb      	ldrb	r3, [r7, #7]
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	3204      	adds	r2, #4
 800ef86:	490f      	ldr	r1, [pc, #60]	; (800efc4 <CDC_Control+0x19c>)
 800ef88:	00db      	lsls	r3, r3, #3
 800ef8a:	440b      	add	r3, r1
 800ef8c:	791b      	ldrb	r3, [r3, #4]
 800ef8e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800ef90:	79fb      	ldrb	r3, [r7, #7]
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	3205      	adds	r2, #5
 800ef96:	490b      	ldr	r1, [pc, #44]	; (800efc4 <CDC_Control+0x19c>)
 800ef98:	00db      	lsls	r3, r3, #3
 800ef9a:	440b      	add	r3, r1
 800ef9c:	795b      	ldrb	r3, [r3, #5]
 800ef9e:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800efa0:	79fb      	ldrb	r3, [r7, #7]
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	3206      	adds	r2, #6
 800efa6:	4907      	ldr	r1, [pc, #28]	; (800efc4 <CDC_Control+0x19c>)
 800efa8:	00db      	lsls	r3, r3, #3
 800efaa:	440b      	add	r3, r1
 800efac:	799b      	ldrb	r3, [r3, #6]
 800efae:	7013      	strb	r3, [r2, #0]
    break;
 800efb0:	e000      	b.n	800efb4 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800efb2:	bf00      	nop
  }

  return (USBD_OK);
 800efb4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	200031c0 	.word	0x200031c0

0800efc8 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
 //CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
	CDC_reciveFlag=1;
 800efd6:	4b09      	ldr	r3, [pc, #36]	; (800effc <CDC_Receive+0x34>)
 800efd8:	2201      	movs	r2, #1
 800efda:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	4907      	ldr	r1, [pc, #28]	; (800f000 <CDC_Receive+0x38>)
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 fe32 	bl	800fc4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	4905      	ldr	r1, [pc, #20]	; (800f000 <CDC_Receive+0x38>)
 800efec:	4618      	mov	r0, r3
 800efee:	f000 fe8d 	bl	800fd0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eff2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	2000050c 	.word	0x2000050c
 800f000:	20002e24 	.word	0x20002e24

0800f004 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60b9      	str	r1, [r7, #8]
 800f00c:	607a      	str	r2, [r7, #4]
 800f00e:	461a      	mov	r2, r3
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]
 800f014:	4613      	mov	r3, r2
 800f016:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3714      	adds	r7, #20
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
	...

0800f028 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	4603      	mov	r3, r0
 800f030:	6039      	str	r1, [r7, #0]
 800f032:	71fb      	strb	r3, [r7, #7]
 800f034:	4613      	mov	r3, r2
 800f036:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800f03c:	2300      	movs	r3, #0
 800f03e:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f046:	fb02 f303 	mul.w	r3, r2, r3
 800f04a:	4a0e      	ldr	r2, [pc, #56]	; (800f084 <CDC_Transmit+0x5c>)
 800f04c:	4413      	add	r3, r2
 800f04e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e00d      	b.n	800f07a <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800f05e:	88bb      	ldrh	r3, [r7, #4]
 800f060:	79f8      	ldrb	r0, [r7, #7]
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	4908      	ldr	r1, [pc, #32]	; (800f088 <CDC_Transmit+0x60>)
 800f066:	f000 fdcd 	bl	800fc04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800f06a:	79fb      	ldrb	r3, [r7, #7]
 800f06c:	4906      	ldr	r1, [pc, #24]	; (800f088 <CDC_Transmit+0x60>)
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 fe0a 	bl	800fc88 <USBD_CDC_TransmitPacket>
 800f074:	4603      	mov	r3, r0
 800f076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f078:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	200033e0 	.word	0x200033e0
 800f088:	20002e24 	.word	0x20002e24

0800f08c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	4603      	mov	r3, r0
 800f094:	6039      	str	r1, [r7, #0]
 800f096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2212      	movs	r2, #18
 800f09c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800f09e:	4b03      	ldr	r3, [pc, #12]	; (800f0ac <USBD_DeviceDescriptor+0x20>)
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	20000050 	.word	0x20000050

0800f0b0 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	6039      	str	r1, [r7, #0]
 800f0ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2204      	movs	r2, #4
 800f0c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f0c2:	4b03      	ldr	r3, [pc, #12]	; (800f0d0 <USBD_LangIDStrDescriptor+0x20>)
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	20000064 	.word	0x20000064

0800f0d4 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4603      	mov	r3, r0
 800f0dc:	6039      	str	r1, [r7, #0]
 800f0de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f0e0:	79fb      	ldrb	r3, [r7, #7]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d105      	bne.n	800f0f2 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	4907      	ldr	r1, [pc, #28]	; (800f108 <USBD_ProductStrDescriptor+0x34>)
 800f0ea:	4808      	ldr	r0, [pc, #32]	; (800f10c <USBD_ProductStrDescriptor+0x38>)
 800f0ec:	f004 fba1 	bl	8013832 <USBD_GetString>
 800f0f0:	e004      	b.n	800f0fc <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f0f2:	683a      	ldr	r2, [r7, #0]
 800f0f4:	4904      	ldr	r1, [pc, #16]	; (800f108 <USBD_ProductStrDescriptor+0x34>)
 800f0f6:	4805      	ldr	r0, [pc, #20]	; (800f10c <USBD_ProductStrDescriptor+0x38>)
 800f0f8:	f004 fb9b 	bl	8013832 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0fc:	4b02      	ldr	r3, [pc, #8]	; (800f108 <USBD_ProductStrDescriptor+0x34>)
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	200031c8 	.word	0x200031c8
 800f10c:	0801b514 	.word	0x0801b514

0800f110 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	6039      	str	r1, [r7, #0]
 800f11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	4904      	ldr	r1, [pc, #16]	; (800f130 <USBD_ManufacturerStrDescriptor+0x20>)
 800f120:	4804      	ldr	r0, [pc, #16]	; (800f134 <USBD_ManufacturerStrDescriptor+0x24>)
 800f122:	f004 fb86 	bl	8013832 <USBD_GetString>
  return USBD_StrDesc;
 800f126:	4b02      	ldr	r3, [pc, #8]	; (800f130 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	200031c8 	.word	0x200031c8
 800f134:	0801b52c 	.word	0x0801b52c

0800f138 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	6039      	str	r1, [r7, #0]
 800f142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	221a      	movs	r2, #26
 800f148:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f14a:	f000 f843 	bl	800f1d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f14e:	4b02      	ldr	r3, [pc, #8]	; (800f158 <USBD_SerialStrDescriptor+0x20>)
}
 800f150:	4618      	mov	r0, r3
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20000068 	.word	0x20000068

0800f15c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	4603      	mov	r3, r0
 800f164:	6039      	str	r1, [r7, #0]
 800f166:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d105      	bne.n	800f17a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f16e:	683a      	ldr	r2, [r7, #0]
 800f170:	4907      	ldr	r1, [pc, #28]	; (800f190 <USBD_ConfigStrDescriptor+0x34>)
 800f172:	4808      	ldr	r0, [pc, #32]	; (800f194 <USBD_ConfigStrDescriptor+0x38>)
 800f174:	f004 fb5d 	bl	8013832 <USBD_GetString>
 800f178:	e004      	b.n	800f184 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	4904      	ldr	r1, [pc, #16]	; (800f190 <USBD_ConfigStrDescriptor+0x34>)
 800f17e:	4805      	ldr	r0, [pc, #20]	; (800f194 <USBD_ConfigStrDescriptor+0x38>)
 800f180:	f004 fb57 	bl	8013832 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f184:	4b02      	ldr	r3, [pc, #8]	; (800f190 <USBD_ConfigStrDescriptor+0x34>)
}
 800f186:	4618      	mov	r0, r3
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	200031c8 	.word	0x200031c8
 800f194:	0801b540 	.word	0x0801b540

0800f198 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	6039      	str	r1, [r7, #0]
 800f1a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1a4:	79fb      	ldrb	r3, [r7, #7]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d105      	bne.n	800f1b6 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	4907      	ldr	r1, [pc, #28]	; (800f1cc <USBD_InterfaceStrDescriptor+0x34>)
 800f1ae:	4808      	ldr	r0, [pc, #32]	; (800f1d0 <USBD_InterfaceStrDescriptor+0x38>)
 800f1b0:	f004 fb3f 	bl	8013832 <USBD_GetString>
 800f1b4:	e004      	b.n	800f1c0 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	4904      	ldr	r1, [pc, #16]	; (800f1cc <USBD_InterfaceStrDescriptor+0x34>)
 800f1ba:	4805      	ldr	r0, [pc, #20]	; (800f1d0 <USBD_InterfaceStrDescriptor+0x38>)
 800f1bc:	f004 fb39 	bl	8013832 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1c0:	4b02      	ldr	r3, [pc, #8]	; (800f1cc <USBD_InterfaceStrDescriptor+0x34>)
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	200031c8 	.word	0x200031c8
 800f1d0:	0801b550 	.word	0x0801b550

0800f1d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f1da:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <Get_SerialNum+0x44>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f1e0:	4b0e      	ldr	r3, [pc, #56]	; (800f21c <Get_SerialNum+0x48>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f1e6:	4b0e      	ldr	r3, [pc, #56]	; (800f220 <Get_SerialNum+0x4c>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d009      	beq.n	800f20e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f1fa:	2208      	movs	r2, #8
 800f1fc:	4909      	ldr	r1, [pc, #36]	; (800f224 <Get_SerialNum+0x50>)
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f000 f814 	bl	800f22c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f204:	2204      	movs	r2, #4
 800f206:	4908      	ldr	r1, [pc, #32]	; (800f228 <Get_SerialNum+0x54>)
 800f208:	68b8      	ldr	r0, [r7, #8]
 800f20a:	f000 f80f 	bl	800f22c <IntToUnicode>
  }
}
 800f20e:	bf00      	nop
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	1fff7a10 	.word	0x1fff7a10
 800f21c:	1fff7a14 	.word	0x1fff7a14
 800f220:	1fff7a18 	.word	0x1fff7a18
 800f224:	2000006a 	.word	0x2000006a
 800f228:	2000007a 	.word	0x2000007a

0800f22c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b087      	sub	sp, #28
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	4613      	mov	r3, r2
 800f238:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f23e:	2300      	movs	r3, #0
 800f240:	75fb      	strb	r3, [r7, #23]
 800f242:	e027      	b.n	800f294 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	0f1b      	lsrs	r3, r3, #28
 800f248:	2b09      	cmp	r3, #9
 800f24a:	d80b      	bhi.n	800f264 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	0f1b      	lsrs	r3, r3, #28
 800f250:	b2da      	uxtb	r2, r3
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	4619      	mov	r1, r3
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	440b      	add	r3, r1
 800f25c:	3230      	adds	r2, #48	; 0x30
 800f25e:	b2d2      	uxtb	r2, r2
 800f260:	701a      	strb	r2, [r3, #0]
 800f262:	e00a      	b.n	800f27a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	0f1b      	lsrs	r3, r3, #28
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	005b      	lsls	r3, r3, #1
 800f26e:	4619      	mov	r1, r3
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	440b      	add	r3, r1
 800f274:	3237      	adds	r2, #55	; 0x37
 800f276:	b2d2      	uxtb	r2, r2
 800f278:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	011b      	lsls	r3, r3, #4
 800f27e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	3301      	adds	r3, #1
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	4413      	add	r3, r2
 800f28a:	2200      	movs	r2, #0
 800f28c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f28e:	7dfb      	ldrb	r3, [r7, #23]
 800f290:	3301      	adds	r3, #1
 800f292:	75fb      	strb	r3, [r7, #23]
 800f294:	7dfa      	ldrb	r2, [r7, #23]
 800f296:	79fb      	ldrb	r3, [r7, #7]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d3d3      	bcc.n	800f244 <IntToUnicode+0x18>
  }
}
 800f29c:	bf00      	nop
 800f29e:	bf00      	nop
 800f2a0:	371c      	adds	r7, #28
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <STORAGE_Init>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init(uint8_t lun)
{
 800f2aa:	b480      	push	{r7}
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800f2b4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <STORAGE_GetCapacity>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b085      	sub	sp, #20
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	60b9      	str	r1, [r7, #8]
 800f2cc:	607a      	str	r2, [r7, #4]
 800f2ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f2d6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2de:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800f2e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <STORAGE_IsReady>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f2f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <STORAGE_IsWriteProtected>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 800f306:	b480      	push	{r7}
 800f308:	b083      	sub	sp, #12
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	4603      	mov	r3, r0
 800f30e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800f310:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f312:	4618      	mov	r0, r3
 800f314:	370c      	adds	r7, #12
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
	...

0800f320 <STORAGE_Read>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	60b9      	str	r1, [r7, #8]
 800f328:	607a      	str	r2, [r7, #4]
 800f32a:	461a      	mov	r2, r3
 800f32c:	4603      	mov	r3, r0
 800f32e:	73fb      	strb	r3, [r7, #15]
 800f330:	4613      	mov	r3, r2
 800f332:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	printf("%d || read  storage, blk adr:%d blk_len:%d \r\n", HAL_GetTick(),   blk_addr, blk_len);
 800f334:	f7f4 fd3c 	bl	8003db0 <HAL_GetTick>
 800f338:	4601      	mov	r1, r0
 800f33a:	89bb      	ldrh	r3, [r7, #12]
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	480c      	ldr	r0, [pc, #48]	; (800f370 <STORAGE_Read+0x50>)
 800f340:	f009 fcf8 	bl	8018d34 <iprintf>
	W25qxx_ReadPage(buf, blk_addr * 2,0,0);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	0059      	lsls	r1, r3, #1
 800f348:	2300      	movs	r3, #0
 800f34a:	2200      	movs	r2, #0
 800f34c:	68b8      	ldr	r0, [r7, #8]
 800f34e:	f7ff fafd 	bl	800e94c <W25qxx_ReadPage>
	W25qxx_ReadPage(buf + 256, blk_addr * 2 + 1,0,0);
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	005b      	lsls	r3, r3, #1
 800f35c:	1c59      	adds	r1, r3, #1
 800f35e:	2300      	movs	r3, #0
 800f360:	2200      	movs	r2, #0
 800f362:	f7ff faf3 	bl	800e94c <W25qxx_ReadPage>
  return (USBD_OK);
 800f366:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3710      	adds	r7, #16
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	0801b564 	.word	0x0801b564

0800f374 <STORAGE_Write>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f374:	b5b0      	push	{r4, r5, r7, lr}
 800f376:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800f37a:	b082      	sub	sp, #8
 800f37c:	af04      	add	r7, sp, #16
 800f37e:	4604      	mov	r4, r0
 800f380:	f107 0018 	add.w	r0, r7, #24
 800f384:	f840 1c10 	str.w	r1, [r0, #-16]
 800f388:	f107 0118 	add.w	r1, r7, #24
 800f38c:	f841 2c14 	str.w	r2, [r1, #-20]
 800f390:	4619      	mov	r1, r3
 800f392:	f107 0318 	add.w	r3, r7, #24
 800f396:	4622      	mov	r2, r4
 800f398:	f803 2c09 	strb.w	r2, [r3, #-9]
 800f39c:	f107 0318 	add.w	r3, r7, #24
 800f3a0:	460a      	mov	r2, r1
 800f3a2:	f823 2c0c 	strh.w	r2, [r3, #-12]
  /* USER CODE BEGIN 7 */
	//printf("%d || write  storage, blk adr:%d blk_len:%d \r\n", HAL_GetTick(),  blk_addr, blk_len);
	//w25qWritingByUSB(blk_addr, buf);

	uint8_t current_sector_buf[4096];
	uint16_t current_sector_addr = blk_addr/ 8;
 800f3a6:	f107 0318 	add.w	r3, r7, #24
 800f3aa:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800f3ae:	08db      	lsrs	r3, r3, #3
 800f3b0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800f3b4:	f102 0216 	add.w	r2, r2, #22
 800f3b8:	8013      	strh	r3, [r2, #0]
	uint16_t startPage = current_sector_addr * 16;
 800f3ba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f3be:	f103 0316 	add.w	r3, r3, #22
 800f3c2:	881b      	ldrh	r3, [r3, #0]
 800f3c4:	011b      	lsls	r3, r3, #4
 800f3c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800f3ca:	f102 0214 	add.w	r2, r2, #20
 800f3ce:	8013      	strh	r3, [r2, #0]
	int offset = 512 * (blk_addr % 8);
 800f3d0:	f107 0318 	add.w	r3, r7, #24
 800f3d4:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800f3d8:	f003 0307 	and.w	r3, r3, #7
 800f3dc:	025b      	lsls	r3, r3, #9
 800f3de:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800f3e2:	f102 0210 	add.w	r2, r2, #16
 800f3e6:	6013      	str	r3, [r2, #0]

	printf("%d || write  storage, blk adr:%d blk_len:%d current_sector_addr:%d startPage:%d offset:%d \r\n", HAL_GetTick(),  blk_addr, blk_len, current_sector_addr, startPage, offset);
 800f3e8:	f7f4 fce2 	bl	8003db0 <HAL_GetTick>
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	f107 0318 	add.w	r3, r7, #24
 800f3f2:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 800f3f6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f3fa:	f103 0316 	add.w	r3, r3, #22
 800f3fe:	881b      	ldrh	r3, [r3, #0]
 800f400:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800f404:	f102 0214 	add.w	r2, r2, #20
 800f408:	8812      	ldrh	r2, [r2, #0]
 800f40a:	f107 0118 	add.w	r1, r7, #24
 800f40e:	460d      	mov	r5, r1
 800f410:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800f414:	f101 0110 	add.w	r1, r1, #16
 800f418:	6809      	ldr	r1, [r1, #0]
 800f41a:	9102      	str	r1, [sp, #8]
 800f41c:	9201      	str	r2, [sp, #4]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4603      	mov	r3, r0
 800f422:	f855 2c14 	ldr.w	r2, [r5, #-20]
 800f426:	4621      	mov	r1, r4
 800f428:	481e      	ldr	r0, [pc, #120]	; (800f4a4 <STORAGE_Write+0x130>)
 800f42a:	f009 fc83 	bl	8018d34 <iprintf>
	/*
	for (uint16_t i = 0; i < 16; i++) {
		W25qxx_ReadPage(current_sector_buf + 256 * i, startPage + i);
	}
	*/
	W25qxx_ReadSector(current_sector_buf, current_sector_addr, 0, 0);
 800f42e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f432:	f103 0316 	add.w	r3, r3, #22
 800f436:	8819      	ldrh	r1, [r3, #0]
 800f438:	f107 0018 	add.w	r0, r7, #24
 800f43c:	3808      	subs	r0, #8
 800f43e:	2300      	movs	r3, #0
 800f440:	2200      	movs	r2, #0
 800f442:	f7ff fafb 	bl	800ea3c <W25qxx_ReadSector>

	memcpy(current_sector_buf + offset, buf, 512);
 800f446:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f44a:	f103 0310 	add.w	r3, r3, #16
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	f107 0318 	add.w	r3, r7, #24
 800f454:	3b08      	subs	r3, #8
 800f456:	4413      	add	r3, r2
 800f458:	f107 0218 	add.w	r2, r7, #24
 800f45c:	4611      	mov	r1, r2
 800f45e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f462:	f851 1c10 	ldr.w	r1, [r1, #-16]
 800f466:	4618      	mov	r0, r3
 800f468:	f009 fb6e 	bl	8018b48 <memcpy>

	W25qxx_EraseSector (current_sector_addr);
 800f46c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f470:	f103 0316 	add.w	r3, r3, #22
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	4618      	mov	r0, r3
 800f478:	f7ff f920 	bl	800e6bc <W25qxx_EraseSector>

	//startPage = current_sector_addr * 16;

	W25qxx_WriteSector(current_sector_buf, current_sector_addr, 0, 0);
 800f47c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800f480:	f103 0316 	add.w	r3, r3, #22
 800f484:	8819      	ldrh	r1, [r3, #0]
 800f486:	f107 0018 	add.w	r0, r7, #24
 800f48a:	3808      	subs	r0, #8
 800f48c:	2300      	movs	r3, #0
 800f48e:	2200      	movs	r2, #0
 800f490:	f7ff f9fa 	bl	800e888 <W25qxx_WriteSector>

  return (USBD_OK);
 800f494:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f496:	4618      	mov	r0, r3
 800f498:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800f49c:	3718      	adds	r7, #24
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0801b594 	.word	0x0801b594

0800f4a8 <STORAGE_GetMaxLun>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun(void)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800f4ac:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	73fb      	strb	r3, [r7, #15]
 800f4cc:	e0c6      	b.n	800f65c <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800f4ce:	7bfb      	ldrb	r3, [r7, #15]
 800f4d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f4d4:	fb02 f303 	mul.w	r3, r2, r3
 800f4d8:	4a65      	ldr	r2, [pc, #404]	; (800f670 <USBD_CDC_Init+0x1b8>)
 800f4da:	4413      	add	r3, r2
 800f4dc:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	7c1b      	ldrb	r3, [r3, #16]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d13d      	bne.n	800f562 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	4a62      	ldr	r2, [pc, #392]	; (800f674 <USBD_CDC_Init+0x1bc>)
 800f4ea:	5cd1      	ldrb	r1, [r2, r3]
 800f4ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4f0:	2202      	movs	r2, #2
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f004 fc1d 	bl	8013d32 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	4a5e      	ldr	r2, [pc, #376]	; (800f674 <USBD_CDC_Init+0x1bc>)
 800f4fc:	5cd3      	ldrb	r3, [r2, r3]
 800f4fe:	f003 020f 	and.w	r2, r3, #15
 800f502:	6879      	ldr	r1, [r7, #4]
 800f504:	4613      	mov	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4413      	add	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	440b      	add	r3, r1
 800f50e:	3324      	adds	r3, #36	; 0x24
 800f510:	2201      	movs	r2, #1
 800f512:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800f514:	7bfb      	ldrb	r3, [r7, #15]
 800f516:	4a58      	ldr	r2, [pc, #352]	; (800f678 <USBD_CDC_Init+0x1c0>)
 800f518:	5cd1      	ldrb	r1, [r2, r3]
 800f51a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f51e:	2202      	movs	r2, #2
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f004 fc06 	bl	8013d32 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	4a53      	ldr	r2, [pc, #332]	; (800f678 <USBD_CDC_Init+0x1c0>)
 800f52a:	5cd3      	ldrb	r3, [r2, r3]
 800f52c:	f003 020f 	and.w	r2, r3, #15
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	4613      	mov	r3, r2
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4413      	add	r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	440b      	add	r3, r1
 800f53c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f540:	2201      	movs	r2, #1
 800f542:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	4a4d      	ldr	r2, [pc, #308]	; (800f67c <USBD_CDC_Init+0x1c4>)
 800f548:	5cd3      	ldrb	r3, [r2, r3]
 800f54a:	f003 020f 	and.w	r2, r3, #15
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	440b      	add	r3, r1
 800f55a:	3326      	adds	r3, #38	; 0x26
 800f55c:	2210      	movs	r2, #16
 800f55e:	801a      	strh	r2, [r3, #0]
 800f560:	e03a      	b.n	800f5d8 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800f562:	7bfb      	ldrb	r3, [r7, #15]
 800f564:	4a43      	ldr	r2, [pc, #268]	; (800f674 <USBD_CDC_Init+0x1bc>)
 800f566:	5cd1      	ldrb	r1, [r2, r3]
 800f568:	2340      	movs	r3, #64	; 0x40
 800f56a:	2202      	movs	r2, #2
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f004 fbe0 	bl	8013d32 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800f572:	7bfb      	ldrb	r3, [r7, #15]
 800f574:	4a3f      	ldr	r2, [pc, #252]	; (800f674 <USBD_CDC_Init+0x1bc>)
 800f576:	5cd3      	ldrb	r3, [r2, r3]
 800f578:	f003 020f 	and.w	r2, r3, #15
 800f57c:	6879      	ldr	r1, [r7, #4]
 800f57e:	4613      	mov	r3, r2
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	4413      	add	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	440b      	add	r3, r1
 800f588:	3324      	adds	r3, #36	; 0x24
 800f58a:	2201      	movs	r2, #1
 800f58c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800f58e:	7bfb      	ldrb	r3, [r7, #15]
 800f590:	4a39      	ldr	r2, [pc, #228]	; (800f678 <USBD_CDC_Init+0x1c0>)
 800f592:	5cd1      	ldrb	r1, [r2, r3]
 800f594:	2340      	movs	r3, #64	; 0x40
 800f596:	2202      	movs	r2, #2
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f004 fbca 	bl	8013d32 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	4a35      	ldr	r2, [pc, #212]	; (800f678 <USBD_CDC_Init+0x1c0>)
 800f5a2:	5cd3      	ldrb	r3, [r2, r3]
 800f5a4:	f003 020f 	and.w	r2, r3, #15
 800f5a8:	6879      	ldr	r1, [r7, #4]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	440b      	add	r3, r1
 800f5b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
 800f5be:	4a2f      	ldr	r2, [pc, #188]	; (800f67c <USBD_CDC_Init+0x1c4>)
 800f5c0:	5cd3      	ldrb	r3, [r2, r3]
 800f5c2:	f003 020f 	and.w	r2, r3, #15
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4413      	add	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	440b      	add	r3, r1
 800f5d2:	3326      	adds	r3, #38	; 0x26
 800f5d4:	2210      	movs	r2, #16
 800f5d6:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
 800f5da:	4a28      	ldr	r2, [pc, #160]	; (800f67c <USBD_CDC_Init+0x1c4>)
 800f5dc:	5cd1      	ldrb	r1, [r2, r3]
 800f5de:	2308      	movs	r3, #8
 800f5e0:	2203      	movs	r2, #3
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f004 fba5 	bl	8013d32 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800f5e8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ea:	4a24      	ldr	r2, [pc, #144]	; (800f67c <USBD_CDC_Init+0x1c4>)
 800f5ec:	5cd3      	ldrb	r3, [r2, r3]
 800f5ee:	f003 020f 	and.w	r2, r3, #15
 800f5f2:	6879      	ldr	r1, [r7, #4]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	4413      	add	r3, r2
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	440b      	add	r3, r1
 800f5fe:	3324      	adds	r3, #36	; 0x24
 800f600:	2201      	movs	r2, #1
 800f602:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	7bfa      	ldrb	r2, [r7, #15]
 800f60e:	4610      	mov	r0, r2
 800f610:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2200      	movs	r2, #0
 800f616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	7c1b      	ldrb	r3, [r3, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10b      	bne.n	800f642 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	4a12      	ldr	r2, [pc, #72]	; (800f678 <USBD_CDC_Init+0x1c0>)
 800f62e:	5cd1      	ldrb	r1, [r2, r3]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f004 fc87 	bl	8013f4e <USBD_LL_PrepareReceive>
 800f640:	e009      	b.n	800f656 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800f642:	7bfb      	ldrb	r3, [r7, #15]
 800f644:	4a0c      	ldr	r2, [pc, #48]	; (800f678 <USBD_CDC_Init+0x1c0>)
 800f646:	5cd1      	ldrb	r1, [r2, r3]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f64e:	2340      	movs	r3, #64	; 0x40
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f004 fc7c 	bl	8013f4e <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f656:	7bfb      	ldrb	r3, [r7, #15]
 800f658:	3301      	adds	r3, #1
 800f65a:	73fb      	strb	r3, [r7, #15]
 800f65c:	7bfb      	ldrb	r3, [r7, #15]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f43f af35 	beq.w	800f4ce <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	200033e0 	.word	0x200033e0
 800f674:	200033c8 	.word	0x200033c8
 800f678:	200033cc 	.word	0x200033cc
 800f67c:	200033d0 	.word	0x200033d0

0800f680 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f68c:	2300      	movs	r3, #0
 800f68e:	73fb      	strb	r3, [r7, #15]
 800f690:	e057      	b.n	800f742 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800f692:	7bfb      	ldrb	r3, [r7, #15]
 800f694:	4a2f      	ldr	r2, [pc, #188]	; (800f754 <USBD_CDC_DeInit+0xd4>)
 800f696:	5cd3      	ldrb	r3, [r2, r3]
 800f698:	4619      	mov	r1, r3
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f004 fb6f 	bl	8013d7e <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800f6a0:	7bfb      	ldrb	r3, [r7, #15]
 800f6a2:	4a2c      	ldr	r2, [pc, #176]	; (800f754 <USBD_CDC_DeInit+0xd4>)
 800f6a4:	5cd3      	ldrb	r3, [r2, r3]
 800f6a6:	f003 020f 	and.w	r2, r3, #15
 800f6aa:	6879      	ldr	r1, [r7, #4]
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	440b      	add	r3, r1
 800f6b6:	3324      	adds	r3, #36	; 0x24
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800f6bc:	7bfb      	ldrb	r3, [r7, #15]
 800f6be:	4a26      	ldr	r2, [pc, #152]	; (800f758 <USBD_CDC_DeInit+0xd8>)
 800f6c0:	5cd3      	ldrb	r3, [r2, r3]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f004 fb5a 	bl	8013d7e <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
 800f6cc:	4a22      	ldr	r2, [pc, #136]	; (800f758 <USBD_CDC_DeInit+0xd8>)
 800f6ce:	5cd3      	ldrb	r3, [r2, r3]
 800f6d0:	f003 020f 	and.w	r2, r3, #15
 800f6d4:	6879      	ldr	r1, [r7, #4]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	440b      	add	r3, r1
 800f6e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800f6e8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ea:	4a1c      	ldr	r2, [pc, #112]	; (800f75c <USBD_CDC_DeInit+0xdc>)
 800f6ec:	5cd3      	ldrb	r3, [r2, r3]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f004 fb44 	bl	8013d7e <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
 800f6f8:	4a18      	ldr	r2, [pc, #96]	; (800f75c <USBD_CDC_DeInit+0xdc>)
 800f6fa:	5cd3      	ldrb	r3, [r2, r3]
 800f6fc:	f003 020f 	and.w	r2, r3, #15
 800f700:	6879      	ldr	r1, [r7, #4]
 800f702:	4613      	mov	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	440b      	add	r3, r1
 800f70c:	3324      	adds	r3, #36	; 0x24
 800f70e:	2200      	movs	r2, #0
 800f710:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	4a11      	ldr	r2, [pc, #68]	; (800f75c <USBD_CDC_DeInit+0xdc>)
 800f716:	5cd3      	ldrb	r3, [r2, r3]
 800f718:	f003 020f 	and.w	r2, r3, #15
 800f71c:	6879      	ldr	r1, [r7, #4]
 800f71e:	4613      	mov	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4413      	add	r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	440b      	add	r3, r1
 800f728:	3326      	adds	r3, #38	; 0x26
 800f72a:	2200      	movs	r2, #0
 800f72c:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	7bfa      	ldrb	r2, [r7, #15]
 800f738:	4610      	mov	r0, r2
 800f73a:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	3301      	adds	r3, #1
 800f740:	73fb      	strb	r3, [r7, #15]
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0a4      	beq.n	800f692 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	200033c8 	.word	0x200033c8
 800f758:	200033cc 	.word	0x200033cc
 800f75c:	200033d0 	.word	0x200033d0

0800f760 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f760:	b590      	push	{r4, r7, lr}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f76e:	2300      	movs	r3, #0
 800f770:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f772:	2300      	movs	r3, #0
 800f774:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f776:	2300      	movs	r3, #0
 800f778:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f77e:	2300      	movs	r3, #0
 800f780:	757b      	strb	r3, [r7, #21]
 800f782:	e015      	b.n	800f7b0 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	889b      	ldrh	r3, [r3, #4]
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	7d7b      	ldrb	r3, [r7, #21]
 800f78c:	496d      	ldr	r1, [pc, #436]	; (800f944 <USBD_CDC_Setup+0x1e4>)
 800f78e:	5ccb      	ldrb	r3, [r1, r3]
 800f790:	429a      	cmp	r2, r3
 800f792:	d007      	beq.n	800f7a4 <USBD_CDC_Setup+0x44>
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	889b      	ldrh	r3, [r3, #4]
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	7d7b      	ldrb	r3, [r7, #21]
 800f79c:	496a      	ldr	r1, [pc, #424]	; (800f948 <USBD_CDC_Setup+0x1e8>)
 800f79e:	5ccb      	ldrb	r3, [r1, r3]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d102      	bne.n	800f7aa <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800f7a4:	7d7b      	ldrb	r3, [r7, #21]
 800f7a6:	75bb      	strb	r3, [r7, #22]
      break;
 800f7a8:	e005      	b.n	800f7b6 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f7aa:	7d7b      	ldrb	r3, [r7, #21]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	757b      	strb	r3, [r7, #21]
 800f7b0:	7d7b      	ldrb	r3, [r7, #21]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d0e6      	beq.n	800f784 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800f7b6:	7dbb      	ldrb	r3, [r7, #22]
 800f7b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f7bc:	fb02 f303 	mul.w	r3, r2, r3
 800f7c0:	4a62      	ldr	r2, [pc, #392]	; (800f94c <USBD_CDC_Setup+0x1ec>)
 800f7c2:	4413      	add	r3, r2
 800f7c4:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d04a      	beq.n	800f868 <USBD_CDC_Setup+0x108>
 800f7d2:	2b20      	cmp	r3, #32
 800f7d4:	f040 80aa 	bne.w	800f92c <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	88db      	ldrh	r3, [r3, #6]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d038      	beq.n	800f852 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	b25b      	sxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	da1d      	bge.n	800f826 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7f0:	689c      	ldr	r4, [r3, #8]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	7859      	ldrb	r1, [r3, #1]
 800f7f6:	7dbb      	ldrb	r3, [r7, #22]
 800f7f8:	025b      	lsls	r3, r3, #9
 800f7fa:	693a      	ldr	r2, [r7, #16]
 800f7fc:	441a      	add	r2, r3
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	88db      	ldrh	r3, [r3, #6]
 800f802:	7db8      	ldrb	r0, [r7, #22]
 800f804:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	88db      	ldrh	r3, [r3, #6]
 800f80a:	2b07      	cmp	r3, #7
 800f80c:	bf28      	it	cs
 800f80e:	2307      	movcs	r3, #7
 800f810:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800f812:	7dbb      	ldrb	r3, [r7, #22]
 800f814:	025b      	lsls	r3, r3, #9
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	4413      	add	r3, r2
 800f81a:	89fa      	ldrh	r2, [r7, #14]
 800f81c:	4619      	mov	r1, r3
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f004 f867 	bl	80138f2 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800f824:	e089      	b.n	800f93a <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	785a      	ldrb	r2, [r3, #1]
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	88db      	ldrh	r3, [r3, #6]
 800f834:	b2da      	uxtb	r2, r3
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800f83c:	7dbb      	ldrb	r3, [r7, #22]
 800f83e:	025b      	lsls	r3, r3, #9
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	18d1      	adds	r1, r2, r3
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	88db      	ldrh	r3, [r3, #6]
 800f848:	461a      	mov	r2, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f004 f87d 	bl	801394a <USBD_CtlPrepareRx>
    break;
 800f850:	e073      	b.n	800f93a <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f858:	689c      	ldr	r4, [r3, #8]
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	7859      	ldrb	r1, [r3, #1]
 800f85e:	7db8      	ldrb	r0, [r7, #22]
 800f860:	2300      	movs	r3, #0
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	47a0      	blx	r4
    break;
 800f866:	e068      	b.n	800f93a <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	785b      	ldrb	r3, [r3, #1]
 800f86c:	2b0b      	cmp	r3, #11
 800f86e:	d852      	bhi.n	800f916 <USBD_CDC_Setup+0x1b6>
 800f870:	a201      	add	r2, pc, #4	; (adr r2, 800f878 <USBD_CDC_Setup+0x118>)
 800f872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f876:	bf00      	nop
 800f878:	0800f8a9 	.word	0x0800f8a9
 800f87c:	0800f925 	.word	0x0800f925
 800f880:	0800f917 	.word	0x0800f917
 800f884:	0800f917 	.word	0x0800f917
 800f888:	0800f917 	.word	0x0800f917
 800f88c:	0800f917 	.word	0x0800f917
 800f890:	0800f917 	.word	0x0800f917
 800f894:	0800f917 	.word	0x0800f917
 800f898:	0800f917 	.word	0x0800f917
 800f89c:	0800f917 	.word	0x0800f917
 800f8a0:	0800f8d3 	.word	0x0800f8d3
 800f8a4:	0800f8fd 	.word	0x0800f8fd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b03      	cmp	r3, #3
 800f8b2:	d107      	bne.n	800f8c4 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f8b4:	f107 030a 	add.w	r3, r7, #10
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f004 f818 	bl	80138f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f8c2:	e032      	b.n	800f92a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f003 ffa2 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800f8d0:	e02b      	b.n	800f92a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b03      	cmp	r3, #3
 800f8dc:	d107      	bne.n	800f8ee <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f8de:	f107 030d 	add.w	r3, r7, #13
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f004 f803 	bl	80138f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f8ec:	e01d      	b.n	800f92a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800f8ee:	6839      	ldr	r1, [r7, #0]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f003 ff8d 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 800f8f6:	2303      	movs	r3, #3
 800f8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800f8fa:	e016      	b.n	800f92a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f902:	b2db      	uxtb	r3, r3
 800f904:	2b03      	cmp	r3, #3
 800f906:	d00f      	beq.n	800f928 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800f908:	6839      	ldr	r1, [r7, #0]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f003 ff80 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 800f910:	2303      	movs	r3, #3
 800f912:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f914:	e008      	b.n	800f928 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f003 ff79 	bl	8013810 <USBD_CtlError>
      ret = USBD_FAIL;
 800f91e:	2303      	movs	r3, #3
 800f920:	75fb      	strb	r3, [r7, #23]
      break;
 800f922:	e002      	b.n	800f92a <USBD_CDC_Setup+0x1ca>
      break;
 800f924:	bf00      	nop
 800f926:	e008      	b.n	800f93a <USBD_CDC_Setup+0x1da>
      break;
 800f928:	bf00      	nop
    }
    break;
 800f92a:	e006      	b.n	800f93a <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f003 ff6e 	bl	8013810 <USBD_CtlError>
    ret = USBD_FAIL;
 800f934:	2303      	movs	r3, #3
 800f936:	75fb      	strb	r3, [r7, #23]
    break;
 800f938:	bf00      	nop
  }

  return (uint8_t)ret;
 800f93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	371c      	adds	r7, #28
 800f940:	46bd      	mov	sp, r7
 800f942:	bd90      	pop	{r4, r7, pc}
 800f944:	200033d4 	.word	0x200033d4
 800f948:	200033d8 	.word	0x200033d8
 800f94c:	200033e0 	.word	0x200033e0

0800f950 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f950:	b590      	push	{r4, r7, lr}
 800f952:	b087      	sub	sp, #28
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	460b      	mov	r3, r1
 800f95a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800f95c:	2300      	movs	r3, #0
 800f95e:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800f966:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f96c:	2300      	movs	r3, #0
 800f96e:	75bb      	strb	r3, [r7, #22]
 800f970:	e00d      	b.n	800f98e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800f972:	78fa      	ldrb	r2, [r7, #3]
 800f974:	7dbb      	ldrb	r3, [r7, #22]
 800f976:	4934      	ldr	r1, [pc, #208]	; (800fa48 <USBD_CDC_DataIn+0xf8>)
 800f978:	5ccb      	ldrb	r3, [r1, r3]
 800f97a:	f003 030f 	and.w	r3, r3, #15
 800f97e:	429a      	cmp	r2, r3
 800f980:	d102      	bne.n	800f988 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800f982:	7dbb      	ldrb	r3, [r7, #22]
 800f984:	75fb      	strb	r3, [r7, #23]
      break;
 800f986:	e005      	b.n	800f994 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800f988:	7dbb      	ldrb	r3, [r7, #22]
 800f98a:	3301      	adds	r3, #1
 800f98c:	75bb      	strb	r3, [r7, #22]
 800f98e:	7dbb      	ldrb	r3, [r7, #22]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0ee      	beq.n	800f972 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800f994:	7dfb      	ldrb	r3, [r7, #23]
 800f996:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f99a:	fb02 f303 	mul.w	r3, r2, r3
 800f99e:	4a2b      	ldr	r2, [pc, #172]	; (800fa4c <USBD_CDC_DataIn+0xfc>)
 800f9a0:	4413      	add	r3, r2
 800f9a2:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f9a4:	78fa      	ldrb	r2, [r7, #3]
 800f9a6:	6879      	ldr	r1, [r7, #4]
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	440b      	add	r3, r1
 800f9b2:	3318      	adds	r3, #24
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d029      	beq.n	800fa0e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f9ba:	78fa      	ldrb	r2, [r7, #3]
 800f9bc:	6879      	ldr	r1, [r7, #4]
 800f9be:	4613      	mov	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	4413      	add	r3, r2
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	440b      	add	r3, r1
 800f9c8:	3318      	adds	r3, #24
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	78f9      	ldrb	r1, [r7, #3]
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	440b      	add	r3, r1
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	4403      	add	r3, r0
 800f9da:	3348      	adds	r3, #72	; 0x48
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	fbb2 f1f3 	udiv	r1, r2, r3
 800f9e2:	fb01 f303 	mul.w	r3, r1, r3
 800f9e6:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d110      	bne.n	800fa0e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f9ec:	78fa      	ldrb	r2, [r7, #3]
 800f9ee:	6879      	ldr	r1, [r7, #4]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	4413      	add	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	440b      	add	r3, r1
 800f9fa:	3318      	adds	r3, #24
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fa00:	78f9      	ldrb	r1, [r7, #3]
 800fa02:	2300      	movs	r3, #0
 800fa04:	2200      	movs	r2, #0
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f004 fa80 	bl	8013f0c <USBD_LL_Transmit>
 800fa0c:	e016      	b.n	800fa3c <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00c      	beq.n	800fa3c <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa28:	691c      	ldr	r4, [r3, #16]
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800fa36:	78fb      	ldrb	r3, [r7, #3]
 800fa38:	7df8      	ldrb	r0, [r7, #23]
 800fa3a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	371c      	adds	r7, #28
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd90      	pop	{r4, r7, pc}
 800fa46:	bf00      	nop
 800fa48:	200033c8 	.word	0x200033c8
 800fa4c:	200033e0 	.word	0x200033e0

0800fa50 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800fa64:	2300      	movs	r3, #0
 800fa66:	73bb      	strb	r3, [r7, #14]
 800fa68:	e00b      	b.n	800fa82 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800fa6a:	7bbb      	ldrb	r3, [r7, #14]
 800fa6c:	4a17      	ldr	r2, [pc, #92]	; (800facc <USBD_CDC_DataOut+0x7c>)
 800fa6e:	5cd3      	ldrb	r3, [r2, r3]
 800fa70:	78fa      	ldrb	r2, [r7, #3]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d102      	bne.n	800fa7c <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800fa76:	7bbb      	ldrb	r3, [r7, #14]
 800fa78:	73fb      	strb	r3, [r7, #15]
      break;
 800fa7a:	e005      	b.n	800fa88 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	73bb      	strb	r3, [r7, #14]
 800fa82:	7bbb      	ldrb	r3, [r7, #14]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d0f0      	beq.n	800fa6a <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
 800fa8a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fa8e:	fb02 f303 	mul.w	r3, r2, r3
 800fa92:	4a0f      	ldr	r2, [pc, #60]	; (800fad0 <USBD_CDC_DataOut+0x80>)
 800fa94:	4413      	add	r3, r2
 800fa96:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f004 fa77 	bl	8013f90 <USBD_LL_GetRxDataSize>
 800faa2:	4602      	mov	r2, r0
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800fabe:	7bf8      	ldrb	r0, [r7, #15]
 800fac0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	200033cc 	.word	0x200033cc
 800fad0:	200033e0 	.word	0x200033e0

0800fad4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fad4:	b590      	push	{r4, r7, lr}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800fadc:	2300      	movs	r3, #0
 800fade:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 800fae6:	2303      	movs	r3, #3
 800fae8:	e030      	b.n	800fb4c <USBD_CDC_EP0_RxReady+0x78>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800faea:	2300      	movs	r3, #0
 800faec:	73fb      	strb	r3, [r7, #15]
 800faee:	e029      	b.n	800fb44 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800faf6:	fb02 f303 	mul.w	r3, r2, r3
 800fafa:	4a16      	ldr	r2, [pc, #88]	; (800fb54 <USBD_CDC_EP0_RxReady+0x80>)
 800fafc:	4413      	add	r3, r2
 800fafe:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d019      	beq.n	800fb3e <USBD_CDC_EP0_RxReady+0x6a>
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fb10:	2bff      	cmp	r3, #255	; 0xff
 800fb12:	d014      	beq.n	800fb3e <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb1a:	689c      	ldr	r4, [r3, #8]
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
 800fb24:	025b      	lsls	r3, r3, #9
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	441a      	add	r2, r3
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	7bf8      	ldrb	r0, [r7, #15]
 800fb34:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	22ff      	movs	r2, #255	; 0xff
 800fb3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	3301      	adds	r3, #1
 800fb42:	73fb      	strb	r3, [r7, #15]
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d0d2      	beq.n	800faf0 <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3714      	adds	r7, #20
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd90      	pop	{r4, r7, pc}
 800fb54:	200033e0 	.word	0x200033e0

0800fb58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	224b      	movs	r2, #75	; 0x4b
 800fb64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fb66:	4b03      	ldr	r3, [pc, #12]	; (800fb74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	20000138 	.word	0x20000138

0800fb78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	224b      	movs	r2, #75	; 0x4b
 800fb84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fb86:	4b03      	ldr	r3, [pc, #12]	; (800fb94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	200000ec 	.word	0x200000ec

0800fb98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	224b      	movs	r2, #75	; 0x4b
 800fba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fba6:	4b03      	ldr	r3, [pc, #12]	; (800fbb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr
 800fbb4:	20000138 	.word	0x20000138

0800fbb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	220a      	movs	r2, #10
 800fbc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fbc6:	4b03      	ldr	r3, [pc, #12]	; (800fbd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr
 800fbd4:	200000a4 	.word	0x200000a4

0800fbd8 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fbe8:	2303      	movs	r3, #3
 800fbea:	e004      	b.n	800fbf6 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	683a      	ldr	r2, [r7, #0]
 800fbf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
	...

0800fc04 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b087      	sub	sp, #28
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60b9      	str	r1, [r7, #8]
 800fc0c:	607a      	str	r2, [r7, #4]
 800fc0e:	603b      	str	r3, [r7, #0]
 800fc10:	4603      	mov	r3, r0
 800fc12:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800fc14:	2300      	movs	r3, #0
 800fc16:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fc1e:	fb02 f303 	mul.w	r3, r2, r3
 800fc22:	4a09      	ldr	r2, [pc, #36]	; (800fc48 <USBD_CDC_SetTxBuffer+0x44>)
 800fc24:	4413      	add	r3, r2
 800fc26:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	371c      	adds	r7, #28
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	200033e0 	.word	0x200033e0

0800fc4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b087      	sub	sp, #28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800fc5e:	7bfb      	ldrb	r3, [r7, #15]
 800fc60:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fc64:	fb02 f303 	mul.w	r3, r2, r3
 800fc68:	4a06      	ldr	r2, [pc, #24]	; (800fc84 <USBD_CDC_SetRxBuffer+0x38>)
 800fc6a:	4413      	add	r3, r2
 800fc6c:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	200033e0 	.word	0x200033e0

0800fc88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	4603      	mov	r3, r0
 800fc90:	6039      	str	r1, [r7, #0]
 800fc92:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800fc94:	2300      	movs	r3, #0
 800fc96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fca2:	fb02 f303 	mul.w	r3, r2, r3
 800fca6:	4a17      	ldr	r2, [pc, #92]	; (800fd04 <USBD_CDC_TransmitPacket+0x7c>)
 800fca8:	4413      	add	r3, r2
 800fcaa:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d121      	bne.n	800fcfa <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2201      	movs	r2, #1
 800fcba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	4a11      	ldr	r2, [pc, #68]	; (800fd08 <USBD_CDC_TransmitPacket+0x80>)
 800fcc2:	5cd3      	ldrb	r3, [r2, r3]
 800fcc4:	f003 020f 	and.w	r2, r3, #15
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800fcce:	6838      	ldr	r0, [r7, #0]
 800fcd0:	4613      	mov	r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	4413      	add	r3, r2
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	4403      	add	r3, r0
 800fcda:	3318      	adds	r3, #24
 800fcdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800fcde:	79fb      	ldrb	r3, [r7, #7]
 800fce0:	4a09      	ldr	r2, [pc, #36]	; (800fd08 <USBD_CDC_TransmitPacket+0x80>)
 800fce2:	5cd1      	ldrb	r1, [r2, r3]
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fcf0:	6838      	ldr	r0, [r7, #0]
 800fcf2:	f004 f90b 	bl	8013f0c <USBD_LL_Transmit>

    ret = USBD_OK;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	200033e0 	.word	0x200033e0
 800fd08:	200033c8 	.word	0x200033c8

0800fd0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	4603      	mov	r3, r0
 800fd14:	6039      	str	r1, [r7, #0]
 800fd16:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fd22:	fb02 f303 	mul.w	r3, r2, r3
 800fd26:	4a12      	ldr	r2, [pc, #72]	; (800fd70 <USBD_CDC_ReceivePacket+0x64>)
 800fd28:	4413      	add	r3, r2
 800fd2a:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	7c1b      	ldrb	r3, [r3, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d10b      	bne.n	800fd4c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	4a0f      	ldr	r2, [pc, #60]	; (800fd74 <USBD_CDC_ReceivePacket+0x68>)
 800fd38:	5cd1      	ldrb	r1, [r2, r3]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd44:	6838      	ldr	r0, [r7, #0]
 800fd46:	f004 f902 	bl	8013f4e <USBD_LL_PrepareReceive>
 800fd4a:	e009      	b.n	800fd60 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	4a09      	ldr	r2, [pc, #36]	; (800fd74 <USBD_CDC_ReceivePacket+0x68>)
 800fd50:	5cd1      	ldrb	r1, [r2, r3]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd58:	2340      	movs	r3, #64	; 0x40
 800fd5a:	6838      	ldr	r0, [r7, #0]
 800fd5c:	f004 f8f7 	bl	8013f4e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  CDC_reciveFlag=1;
 800fd60:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <USBD_CDC_ReceivePacket+0x6c>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	701a      	strb	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	200033e0 	.word	0x200033e0
 800fd74:	200033cc 	.word	0x200033cc
 800fd78:	2000050c 	.word	0x2000050c

0800fd7c <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	4608      	mov	r0, r1
 800fd86:	4611      	mov	r1, r2
 800fd88:	461a      	mov	r2, r3
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	70fb      	strb	r3, [r7, #3]
 800fd8e:	460b      	mov	r3, r1
 800fd90:	70bb      	strb	r3, [r7, #2]
 800fd92:	4613      	mov	r3, r2
 800fd94:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	3309      	adds	r3, #9
 800fd9a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	73fb      	strb	r3, [r7, #15]
 800fda0:	e05b      	b.n	800fe5a <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	3302      	adds	r3, #2
 800fda6:	78fa      	ldrb	r2, [r7, #3]
 800fda8:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	3307      	adds	r3, #7
 800fdae:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fdb2:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	330a      	adds	r3, #10
 800fdb8:	78fa      	ldrb	r2, [r7, #3]
 800fdba:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	331a      	adds	r3, #26
 800fdc0:	78ba      	ldrb	r2, [r7, #2]
 800fdc2:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	3322      	adds	r3, #34	; 0x22
 800fdc8:	78fa      	ldrb	r2, [r7, #3]
 800fdca:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	3323      	adds	r3, #35	; 0x23
 800fdd0:	78ba      	ldrb	r2, [r7, #2]
 800fdd2:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3326      	adds	r3, #38	; 0x26
 800fdd8:	7e3a      	ldrb	r2, [r7, #24]
 800fdda:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	332d      	adds	r3, #45	; 0x2d
 800fde0:	78ba      	ldrb	r2, [r7, #2]
 800fde2:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	3336      	adds	r3, #54	; 0x36
 800fde8:	7f3a      	ldrb	r2, [r7, #28]
 800fdea:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	333d      	adds	r3, #61	; 0x3d
 800fdf0:	787a      	ldrb	r2, [r7, #1]
 800fdf2:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3342      	adds	r3, #66	; 0x42
 800fdf8:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800fdfa:	7bfb      	ldrb	r3, [r7, #15]
 800fdfc:	491c      	ldr	r1, [pc, #112]	; (800fe70 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800fdfe:	787a      	ldrb	r2, [r7, #1]
 800fe00:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800fe02:	7bfb      	ldrb	r3, [r7, #15]
 800fe04:	491b      	ldr	r1, [pc, #108]	; (800fe74 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800fe06:	7f3a      	ldrb	r2, [r7, #28]
 800fe08:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	491a      	ldr	r1, [pc, #104]	; (800fe78 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800fe0e:	7e3a      	ldrb	r2, [r7, #24]
 800fe10:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800fe12:	7bfb      	ldrb	r3, [r7, #15]
 800fe14:	4919      	ldr	r1, [pc, #100]	; (800fe7c <USBD_Update_CDC_ACM_DESC+0x100>)
 800fe16:	78fa      	ldrb	r2, [r7, #3]
 800fe18:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800fe1a:	7bfb      	ldrb	r3, [r7, #15]
 800fe1c:	4918      	ldr	r1, [pc, #96]	; (800fe80 <USBD_Update_CDC_ACM_DESC+0x104>)
 800fe1e:	78ba      	ldrb	r2, [r7, #2]
 800fe20:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800fe22:	7bfb      	ldrb	r3, [r7, #15]
 800fe24:	4917      	ldr	r1, [pc, #92]	; (800fe84 <USBD_Update_CDC_ACM_DESC+0x108>)
 800fe26:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fe2a:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800fe2c:	787b      	ldrb	r3, [r7, #1]
 800fe2e:	3302      	adds	r3, #2
 800fe30:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800fe32:	787b      	ldrb	r3, [r7, #1]
 800fe34:	3301      	adds	r3, #1
 800fe36:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800fe38:	7f3b      	ldrb	r3, [r7, #28]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800fe3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe42:	3301      	adds	r3, #1
 800fe44:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800fe48:	78fb      	ldrb	r3, [r7, #3]
 800fe4a:	3302      	adds	r3, #2
 800fe4c:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800fe4e:	78fb      	ldrb	r3, [r7, #3]
 800fe50:	3301      	adds	r3, #1
 800fe52:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
 800fe56:	3301      	adds	r3, #1
 800fe58:	73fb      	strb	r3, [r7, #15]
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0a0      	beq.n	800fda2 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800fe60:	bf00      	nop
 800fe62:	bf00      	nop
 800fe64:	3714      	adds	r7, #20
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	200033c8 	.word	0x200033c8
 800fe74:	200033cc 	.word	0x200033cc
 800fe78:	200033d0 	.word	0x200033d0
 800fe7c:	200033d4 	.word	0x200033d4
 800fe80:	200033d8 	.word	0x200033d8
 800fe84:	200033dc 	.word	0x200033dc

0800fe88 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800fe94:	4b0b      	ldr	r3, [pc, #44]	; (800fec4 <USBD_COMPOSITE_Init+0x3c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	78fa      	ldrb	r2, [r7, #3]
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 800fea0:	4b09      	ldr	r3, [pc, #36]	; (800fec8 <USBD_COMPOSITE_Init+0x40>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	78fa      	ldrb	r2, [r7, #3]
 800fea6:	4611      	mov	r1, r2
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.Init(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
 800feac:	4b07      	ldr	r3, [pc, #28]	; (800fecc <USBD_COMPOSITE_Init+0x44>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	78fa      	ldrb	r2, [r7, #3]
 800feb2:	4611      	mov	r1, r2
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800feb8:	2300      	movs	r3, #0
}
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	200000b0 	.word	0x200000b0
 800fec8:	200001d0 	.word	0x200001d0
 800fecc:	200002b0 	.word	0x200002b0

0800fed0 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	460b      	mov	r3, r1
 800feda:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800fedc:	4b0b      	ldr	r3, [pc, #44]	; (800ff0c <USBD_COMPOSITE_DeInit+0x3c>)
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	78fa      	ldrb	r2, [r7, #3]
 800fee2:	4611      	mov	r1, r2
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 800fee8:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <USBD_COMPOSITE_DeInit+0x40>)
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	78fa      	ldrb	r2, [r7, #3]
 800feee:	4611      	mov	r1, r2
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
 800fef4:	4b07      	ldr	r3, [pc, #28]	; (800ff14 <USBD_COMPOSITE_DeInit+0x44>)
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	78fa      	ldrb	r2, [r7, #3]
 800fefa:	4611      	mov	r1, r2
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800ff00:	2300      	movs	r3, #0
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3708      	adds	r7, #8
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	200000b0 	.word	0x200000b0
 800ff10:	200001d0 	.word	0x200001d0
 800ff14:	200002b0 	.word	0x200002b0

0800ff18 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ff22:	2300      	movs	r3, #0
 800ff24:	73fb      	strb	r3, [r7, #15]
 800ff26:	e019      	b.n	800ff5c <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	889b      	ldrh	r3, [r3, #4]
 800ff2c:	b2da      	uxtb	r2, r3
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
 800ff30:	491c      	ldr	r1, [pc, #112]	; (800ffa4 <USBD_COMPOSITE_Setup+0x8c>)
 800ff32:	5ccb      	ldrb	r3, [r1, r3]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d007      	beq.n	800ff48 <USBD_COMPOSITE_Setup+0x30>
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	889b      	ldrh	r3, [r3, #4]
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	7bfb      	ldrb	r3, [r7, #15]
 800ff40:	4919      	ldr	r1, [pc, #100]	; (800ffa8 <USBD_COMPOSITE_Setup+0x90>)
 800ff42:	5ccb      	ldrb	r3, [r1, r3]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d106      	bne.n	800ff56 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800ff48:	4b18      	ldr	r3, [pc, #96]	; (800ffac <USBD_COMPOSITE_Setup+0x94>)
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	4798      	blx	r3
 800ff52:	4603      	mov	r3, r0
 800ff54:	e022      	b.n	800ff9c <USBD_COMPOSITE_Setup+0x84>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	73fb      	strb	r3, [r7, #15]
 800ff5c:	7bfb      	ldrb	r3, [r7, #15]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d0e2      	beq.n	800ff28 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	889b      	ldrh	r3, [r3, #4]
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <USBD_COMPOSITE_Setup+0x98>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d106      	bne.n	800ff7e <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 800ff70:	4b10      	ldr	r3, [pc, #64]	; (800ffb4 <USBD_COMPOSITE_Setup+0x9c>)
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	4798      	blx	r3
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	e00e      	b.n	800ff9c <USBD_COMPOSITE_Setup+0x84>
  {
    return USBD_VIDEO.Setup(pdev, req);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (LOBYTE(req->wIndex) == MSC_ITF_NBR)
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	889b      	ldrh	r3, [r3, #4]
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <USBD_COMPOSITE_Setup+0xa0>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d106      	bne.n	800ff9a <USBD_COMPOSITE_Setup+0x82>
  {
    return USBD_MSC.Setup(pdev, req);
 800ff8c:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <USBD_COMPOSITE_Setup+0xa4>)
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	6839      	ldr	r1, [r7, #0]
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	4798      	blx	r3
 800ff96:	4603      	mov	r3, r0
 800ff98:	e000      	b.n	800ff9c <USBD_COMPOSITE_Setup+0x84>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800ff9a:	2303      	movs	r3, #3
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	200033d4 	.word	0x200033d4
 800ffa8:	200033d8 	.word	0x200033d8
 800ffac:	200000b0 	.word	0x200000b0
 800ffb0:	20003734 	.word	0x20003734
 800ffb4:	200001d0 	.word	0x200001d0
 800ffb8:	20003748 	.word	0x20003748
 800ffbc:	200002b0 	.word	0x200002b0

0800ffc0 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ffcc:	2300      	movs	r3, #0
 800ffce:	73fb      	strb	r3, [r7, #15]
 800ffd0:	e01a      	b.n	8010008 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800ffd2:	78fa      	ldrb	r2, [r7, #3]
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
 800ffd6:	491f      	ldr	r1, [pc, #124]	; (8010054 <USBD_COMPOSITE_DataIn+0x94>)
 800ffd8:	5ccb      	ldrb	r3, [r1, r3]
 800ffda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d007      	beq.n	800fff2 <USBD_COMPOSITE_DataIn+0x32>
 800ffe2:	78fa      	ldrb	r2, [r7, #3]
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
 800ffe6:	491c      	ldr	r1, [pc, #112]	; (8010058 <USBD_COMPOSITE_DataIn+0x98>)
 800ffe8:	5ccb      	ldrb	r3, [r1, r3]
 800ffea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d107      	bne.n	8010002 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800fff2:	4b1a      	ldr	r3, [pc, #104]	; (801005c <USBD_COMPOSITE_DataIn+0x9c>)
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	78fa      	ldrb	r2, [r7, #3]
 800fff8:	4611      	mov	r1, r2
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	4798      	blx	r3
 800fffe:	4603      	mov	r3, r0
 8010000:	e024      	b.n	801004c <USBD_COMPOSITE_DataIn+0x8c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8010002:	7bfb      	ldrb	r3, [r7, #15]
 8010004:	3301      	adds	r3, #1
 8010006:	73fb      	strb	r3, [r7, #15]
 8010008:	7bfb      	ldrb	r3, [r7, #15]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d0e1      	beq.n	800ffd2 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 801000e:	78fa      	ldrb	r2, [r7, #3]
 8010010:	4b13      	ldr	r3, [pc, #76]	; (8010060 <USBD_COMPOSITE_DataIn+0xa0>)
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010018:	429a      	cmp	r2, r3
 801001a:	d107      	bne.n	801002c <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 801001c:	4b11      	ldr	r3, [pc, #68]	; (8010064 <USBD_COMPOSITE_DataIn+0xa4>)
 801001e:	695b      	ldr	r3, [r3, #20]
 8010020:	78fa      	ldrb	r2, [r7, #3]
 8010022:	4611      	mov	r1, r2
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	4798      	blx	r3
 8010028:	4603      	mov	r3, r0
 801002a:	e00f      	b.n	801004c <USBD_COMPOSITE_DataIn+0x8c>
  {
    return USBD_VIDEO.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == (MSC_IN_EP & 0x7F))
 801002c:	78fa      	ldrb	r2, [r7, #3]
 801002e:	4b0e      	ldr	r3, [pc, #56]	; (8010068 <USBD_COMPOSITE_DataIn+0xa8>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010036:	429a      	cmp	r2, r3
 8010038:	d107      	bne.n	801004a <USBD_COMPOSITE_DataIn+0x8a>
  {
    return USBD_MSC.DataIn(pdev, epnum);
 801003a:	4b0c      	ldr	r3, [pc, #48]	; (801006c <USBD_COMPOSITE_DataIn+0xac>)
 801003c:	695b      	ldr	r3, [r3, #20]
 801003e:	78fa      	ldrb	r2, [r7, #3]
 8010040:	4611      	mov	r1, r2
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	4798      	blx	r3
 8010046:	4603      	mov	r3, r0
 8010048:	e000      	b.n	801004c <USBD_COMPOSITE_DataIn+0x8c>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 801004a:	2303      	movs	r3, #3
}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	200033c8 	.word	0x200033c8
 8010058:	200033d0 	.word	0x200033d0
 801005c:	200000b0 	.word	0x200000b0
 8010060:	200001ce 	.word	0x200001ce
 8010064:	200001d0 	.word	0x200001d0
 8010068:	200002ab 	.word	0x200002ab
 801006c:	200002b0 	.word	0x200002b0

08010070 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8010078:	4b04      	ldr	r3, [pc, #16]	; (801008c <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 801007a:	691b      	ldr	r3, [r3, #16]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	200000b0 	.word	0x200000b0

08010090 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8010098:	2300      	movs	r3, #0
}
 801009a:	4618      	mov	r0, r3
 801009c:	370c      	adds	r7, #12
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr

080100a6 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 80100a6:	b480      	push	{r7}
 80100a8:	b083      	sub	sp, #12
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	460b      	mov	r3, r1
 80100c6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	370c      	adds	r7, #12
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr

080100d6 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100d6:	b480      	push	{r7}
 80100d8:	b083      	sub	sp, #12
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
 80100de:	460b      	mov	r3, r1
 80100e0:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80100e2:	2300      	movs	r3, #0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	460b      	mov	r3, r1
 80100fa:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80100fc:	2300      	movs	r3, #0
 80100fe:	73fb      	strb	r3, [r7, #15]
 8010100:	e010      	b.n	8010124 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8010102:	7bfb      	ldrb	r3, [r7, #15]
 8010104:	4a12      	ldr	r2, [pc, #72]	; (8010150 <USBD_COMPOSITE_DataOut+0x60>)
 8010106:	5cd3      	ldrb	r3, [r2, r3]
 8010108:	78fa      	ldrb	r2, [r7, #3]
 801010a:	429a      	cmp	r2, r3
 801010c:	d107      	bne.n	801011e <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 801010e:	4b11      	ldr	r3, [pc, #68]	; (8010154 <USBD_COMPOSITE_DataOut+0x64>)
 8010110:	699b      	ldr	r3, [r3, #24]
 8010112:	78fa      	ldrb	r2, [r7, #3]
 8010114:	4611      	mov	r1, r2
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	4798      	blx	r3
 801011a:	4603      	mov	r3, r0
 801011c:	e013      	b.n	8010146 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 801011e:	7bfb      	ldrb	r3, [r7, #15]
 8010120:	3301      	adds	r3, #1
 8010122:	73fb      	strb	r3, [r7, #15]
 8010124:	7bfb      	ldrb	r3, [r7, #15]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d0eb      	beq.n	8010102 <USBD_COMPOSITE_DataOut+0x12>
  }
#endif
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == MSC_OUT_EP)
 801012a:	4b0b      	ldr	r3, [pc, #44]	; (8010158 <USBD_COMPOSITE_DataOut+0x68>)
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	78fa      	ldrb	r2, [r7, #3]
 8010130:	429a      	cmp	r2, r3
 8010132:	d107      	bne.n	8010144 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_MSC.DataOut(pdev, epnum);
 8010134:	4b09      	ldr	r3, [pc, #36]	; (801015c <USBD_COMPOSITE_DataOut+0x6c>)
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	78fa      	ldrb	r2, [r7, #3]
 801013a:	4611      	mov	r1, r2
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	4798      	blx	r3
 8010140:	4603      	mov	r3, r0
 8010142:	e000      	b.n	8010146 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8010144:	2303      	movs	r3, #3
}
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	200033cc 	.word	0x200033cc
 8010154:	200000b0 	.word	0x200000b0
 8010158:	200002ac 	.word	0x200002ac
 801015c:	200002b0 	.word	0x200002b0

08010160 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	227b      	movs	r2, #123	; 0x7b
 801016c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 801016e:	4b03      	ldr	r3, [pc, #12]	; (801017c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8010170:	4618      	mov	r0, r3
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr
 801017c:	20003678 	.word	0x20003678

08010180 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	227b      	movs	r2, #123	; 0x7b
 801018c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 801018e:	4b03      	ldr	r3, [pc, #12]	; (801019c <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8010190:	4618      	mov	r0, r3
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr
 801019c:	200035fc 	.word	0x200035fc

080101a0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	227b      	movs	r2, #123	; 0x7b
 80101ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80101ae:	4b03      	ldr	r3, [pc, #12]	; (80101bc <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	20003678 	.word	0x20003678

080101c0 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	220a      	movs	r2, #10
 80101cc:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 80101ce:	4b03      	ldr	r3, [pc, #12]	; (80101dc <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	370c      	adds	r7, #12
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr
 80101dc:	200001c4 	.word	0x200001c4

080101e0 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b08a      	sub	sp, #40	; 0x28
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	460b      	mov	r3, r1
 80101ea:	607a      	str	r2, [r7, #4]
 80101ec:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 80101ee:	4b25      	ldr	r3, [pc, #148]	; (8010284 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	7afa      	ldrb	r2, [r7, #11]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d840      	bhi.n	801027a <USBD_COMPOSITE_GetUsrStringDesc+0x9a>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 80101f8:	2300      	movs	r3, #0
 80101fa:	617b      	str	r3, [r7, #20]
 80101fc:	f107 0318 	add.w	r3, r7, #24
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	605a      	str	r2, [r3, #4]
 8010206:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8010208:	2300      	movs	r3, #0
 801020a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801020e:	e01a      	b.n	8010246 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8010210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010214:	4a1c      	ldr	r2, [pc, #112]	; (8010288 <USBD_COMPOSITE_GetUsrStringDesc+0xa8>)
 8010216:	5cd3      	ldrb	r3, [r2, r3]
 8010218:	7afa      	ldrb	r2, [r7, #11]
 801021a:	429a      	cmp	r2, r3
 801021c:	d10e      	bne.n	801023c <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 801021e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010222:	f107 0014 	add.w	r0, r7, #20
 8010226:	4a19      	ldr	r2, [pc, #100]	; (801028c <USBD_COMPOSITE_GetUsrStringDesc+0xac>)
 8010228:	2110      	movs	r1, #16
 801022a:	f008 fe21 	bl	8018e70 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 801022e:	f107 0314 	add.w	r3, r7, #20
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	4916      	ldr	r1, [pc, #88]	; (8010290 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 8010236:	4618      	mov	r0, r3
 8010238:	f003 fafb 	bl	8013832 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 801023c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010240:	3301      	adds	r3, #1
 8010242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801024a:	2b00      	cmp	r3, #0
 801024c:	d0e0      	beq.n	8010210 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 801024e:	4b11      	ldr	r3, [pc, #68]	; (8010294 <USBD_COMPOSITE_GetUsrStringDesc+0xb4>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	7afa      	ldrb	r2, [r7, #11]
 8010254:	429a      	cmp	r2, r3
 8010256:	d104      	bne.n	8010262 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	490d      	ldr	r1, [pc, #52]	; (8010290 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 801025c:	480e      	ldr	r0, [pc, #56]	; (8010298 <USBD_COMPOSITE_GetUsrStringDesc+0xb8>)
 801025e:	f003 fae8 	bl	8013832 <USBD_GetString>
    {
      USBD_GetString((uint8_t *)UVC_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_MSC == 1)
    if (index == MSC_BOT_STR_DESC_IDX)
 8010262:	4b0e      	ldr	r3, [pc, #56]	; (801029c <USBD_COMPOSITE_GetUsrStringDesc+0xbc>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	7afa      	ldrb	r2, [r7, #11]
 8010268:	429a      	cmp	r2, r3
 801026a:	d104      	bne.n	8010276 <USBD_COMPOSITE_GetUsrStringDesc+0x96>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	4908      	ldr	r1, [pc, #32]	; (8010290 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 8010270:	480b      	ldr	r0, [pc, #44]	; (80102a0 <USBD_COMPOSITE_GetUsrStringDesc+0xc0>)
 8010272:	f003 fade 	bl	8013832 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8010276:	4b06      	ldr	r3, [pc, #24]	; (8010290 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 8010278:	e000      	b.n	801027c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 801027a:	2300      	movs	r3, #0
  }
}
 801027c:	4618      	mov	r0, r3
 801027e:	3728      	adds	r7, #40	; 0x28
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	200001c0 	.word	0x200001c0
 8010288:	200033dc 	.word	0x200033dc
 801028c:	0801b5f4 	.word	0x0801b5f4
 8010290:	200036f4 	.word	0x200036f4
 8010294:	20003735 	.word	0x20003735
 8010298:	0801b604 	.word	0x0801b604
 801029c:	20003749 	.word	0x20003749
 80102a0:	0801b618 	.word	0x0801b618

080102a4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80102a4:	b590      	push	{r4, r7, lr}
 80102a6:	b089      	sub	sp, #36	; 0x24
 80102a8:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80102ae:	2300      	movs	r3, #0
 80102b0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80102b2:	2381      	movs	r3, #129	; 0x81
 80102b4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80102b6:	2301      	movs	r3, #1
 80102b8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80102ba:	2300      	movs	r3, #0
 80102bc:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 80102be:	4b8f      	ldr	r3, [pc, #572]	; (80104fc <USBD_COMPOSITE_Mount_Class+0x258>)
 80102c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c2:	1d3a      	adds	r2, r7, #4
 80102c4:	4610      	mov	r0, r2
 80102c6:	4798      	blx	r3
 80102c8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 80102ca:	4b8d      	ldr	r3, [pc, #564]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	7afa      	ldrb	r2, [r7, #11]
 80102d0:	7a79      	ldrb	r1, [r7, #9]
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f000 fb36 	bl	8010944 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	3309      	adds	r3, #9
 80102dc:	88ba      	ldrh	r2, [r7, #4]
 80102de:	3a09      	subs	r2, #9
 80102e0:	4619      	mov	r1, r3
 80102e2:	4888      	ldr	r0, [pc, #544]	; (8010504 <USBD_COMPOSITE_Mount_Class+0x260>)
 80102e4:	f008 fc30 	bl	8018b48 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 80102e8:	4b84      	ldr	r3, [pc, #528]	; (80104fc <USBD_COMPOSITE_Mount_Class+0x258>)
 80102ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ec:	1d3a      	adds	r2, r7, #4
 80102ee:	4610      	mov	r0, r2
 80102f0:	4798      	blx	r3
 80102f2:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 80102f4:	4b82      	ldr	r3, [pc, #520]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	7afa      	ldrb	r2, [r7, #11]
 80102fa:	7a79      	ldrb	r1, [r7, #9]
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f000 fb21 	bl	8010944 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	3309      	adds	r3, #9
 8010306:	88ba      	ldrh	r2, [r7, #4]
 8010308:	3a09      	subs	r2, #9
 801030a:	4619      	mov	r1, r3
 801030c:	487e      	ldr	r0, [pc, #504]	; (8010508 <USBD_COMPOSITE_Mount_Class+0x264>)
 801030e:	f008 fc1b 	bl	8018b48 <memcpy>

  in_ep_track += 1;
 8010312:	7afb      	ldrb	r3, [r7, #11]
 8010314:	3301      	adds	r3, #1
 8010316:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8010318:	7a7b      	ldrb	r3, [r7, #9]
 801031a:	3301      	adds	r3, #1
 801031c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 801031e:	4b78      	ldr	r3, [pc, #480]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	b2da      	uxtb	r2, r3
 8010326:	4b76      	ldr	r3, [pc, #472]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010328:	701a      	strb	r2, [r3, #0]
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_MSC == 1)
  ptr = USBD_MSC.GetFSConfigDescriptor(&len);
 801032a:	4b78      	ldr	r3, [pc, #480]	; (801050c <USBD_COMPOSITE_Mount_Class+0x268>)
 801032c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032e:	1d3a      	adds	r2, r7, #4
 8010330:	4610      	mov	r0, r2
 8010332:	4798      	blx	r3
 8010334:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8010336:	4b72      	ldr	r3, [pc, #456]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	7ab8      	ldrb	r0, [r7, #10]
 801033c:	7afa      	ldrb	r2, [r7, #11]
 801033e:	7a79      	ldrb	r1, [r7, #9]
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	4603      	mov	r3, r0
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f000 fd51 	bl	8010dec <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3309      	adds	r3, #9
 801034e:	88ba      	ldrh	r2, [r7, #4]
 8010350:	3a09      	subs	r2, #9
 8010352:	4619      	mov	r1, r3
 8010354:	486e      	ldr	r0, [pc, #440]	; (8010510 <USBD_COMPOSITE_Mount_Class+0x26c>)
 8010356:	f008 fbf7 	bl	8018b48 <memcpy>

  ptr = USBD_MSC.GetHSConfigDescriptor(&len);
 801035a:	4b6c      	ldr	r3, [pc, #432]	; (801050c <USBD_COMPOSITE_Mount_Class+0x268>)
 801035c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801035e:	1d3a      	adds	r2, r7, #4
 8010360:	4610      	mov	r0, r2
 8010362:	4798      	blx	r3
 8010364:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8010366:	4b66      	ldr	r3, [pc, #408]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	7ab8      	ldrb	r0, [r7, #10]
 801036c:	7afa      	ldrb	r2, [r7, #11]
 801036e:	7a79      	ldrb	r1, [r7, #9]
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	4603      	mov	r3, r0
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f000 fd39 	bl	8010dec <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3309      	adds	r3, #9
 801037e:	88ba      	ldrh	r2, [r7, #4]
 8010380:	3a09      	subs	r2, #9
 8010382:	4619      	mov	r1, r3
 8010384:	4863      	ldr	r0, [pc, #396]	; (8010514 <USBD_COMPOSITE_Mount_Class+0x270>)
 8010386:	f008 fbdf 	bl	8018b48 <memcpy>

  in_ep_track += 1;
 801038a:	7afb      	ldrb	r3, [r7, #11]
 801038c:	3301      	adds	r3, #1
 801038e:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8010390:	7abb      	ldrb	r3, [r7, #10]
 8010392:	3301      	adds	r3, #1
 8010394:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8010396:	7a7b      	ldrb	r3, [r7, #9]
 8010398:	3301      	adds	r3, #1
 801039a:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 801039c:	4b58      	ldr	r3, [pc, #352]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	3301      	adds	r3, #1
 80103a2:	b2da      	uxtb	r2, r3
 80103a4:	4b56      	ldr	r3, [pc, #344]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 80103a6:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80103a8:	4b5b      	ldr	r3, [pc, #364]	; (8010518 <USBD_COMPOSITE_Mount_Class+0x274>)
 80103aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ac:	1d3a      	adds	r2, r7, #4
 80103ae:	4610      	mov	r0, r2
 80103b0:	4798      	blx	r3
 80103b2:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80103b4:	7a7b      	ldrb	r3, [r7, #9]
 80103b6:	3301      	adds	r3, #1
 80103b8:	b2d8      	uxtb	r0, r3
 80103ba:	7afb      	ldrb	r3, [r7, #11]
 80103bc:	3301      	adds	r3, #1
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	4a4f      	ldr	r2, [pc, #316]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 80103c2:	7812      	ldrb	r2, [r2, #0]
 80103c4:	7afc      	ldrb	r4, [r7, #11]
 80103c6:	7a79      	ldrb	r1, [r7, #9]
 80103c8:	9202      	str	r2, [sp, #8]
 80103ca:	7aba      	ldrb	r2, [r7, #10]
 80103cc:	9201      	str	r2, [sp, #4]
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	4623      	mov	r3, r4
 80103d2:	4602      	mov	r2, r0
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f7ff fcd1 	bl	800fd7c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	3309      	adds	r3, #9
 80103de:	88ba      	ldrh	r2, [r7, #4]
 80103e0:	3a09      	subs	r2, #9
 80103e2:	4619      	mov	r1, r3
 80103e4:	484d      	ldr	r0, [pc, #308]	; (801051c <USBD_COMPOSITE_Mount_Class+0x278>)
 80103e6:	f008 fbaf 	bl	8018b48 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 80103ea:	4b4b      	ldr	r3, [pc, #300]	; (8010518 <USBD_COMPOSITE_Mount_Class+0x274>)
 80103ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ee:	1d3a      	adds	r2, r7, #4
 80103f0:	4610      	mov	r0, r2
 80103f2:	4798      	blx	r3
 80103f4:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80103f6:	7a7b      	ldrb	r3, [r7, #9]
 80103f8:	3301      	adds	r3, #1
 80103fa:	b2d8      	uxtb	r0, r3
 80103fc:	7afb      	ldrb	r3, [r7, #11]
 80103fe:	3301      	adds	r3, #1
 8010400:	b2db      	uxtb	r3, r3
 8010402:	4a3f      	ldr	r2, [pc, #252]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010404:	7812      	ldrb	r2, [r2, #0]
 8010406:	7afc      	ldrb	r4, [r7, #11]
 8010408:	7a79      	ldrb	r1, [r7, #9]
 801040a:	9202      	str	r2, [sp, #8]
 801040c:	7aba      	ldrb	r2, [r7, #10]
 801040e:	9201      	str	r2, [sp, #4]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	4623      	mov	r3, r4
 8010414:	4602      	mov	r2, r0
 8010416:	68f8      	ldr	r0, [r7, #12]
 8010418:	f7ff fcb0 	bl	800fd7c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	3309      	adds	r3, #9
 8010420:	88ba      	ldrh	r2, [r7, #4]
 8010422:	3a09      	subs	r2, #9
 8010424:	4619      	mov	r1, r3
 8010426:	483e      	ldr	r0, [pc, #248]	; (8010520 <USBD_COMPOSITE_Mount_Class+0x27c>)
 8010428:	f008 fb8e 	bl	8018b48 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 801042c:	7afb      	ldrb	r3, [r7, #11]
 801042e:	3302      	adds	r3, #2
 8010430:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8010432:	7abb      	ldrb	r3, [r7, #10]
 8010434:	3301      	adds	r3, #1
 8010436:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8010438:	7a7b      	ldrb	r3, [r7, #9]
 801043a:	3302      	adds	r3, #2
 801043c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 801043e:	4b30      	ldr	r3, [pc, #192]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	3301      	adds	r3, #1
 8010444:	b2da      	uxtb	r2, r3
 8010446:	4b2e      	ldr	r3, [pc, #184]	; (8010500 <USBD_COMPOSITE_Mount_Class+0x25c>)
 8010448:	701a      	strb	r2, [r3, #0]
#endif
  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 801044a:	237b      	movs	r3, #123	; 0x7b
 801044c:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 801044e:	4b35      	ldr	r3, [pc, #212]	; (8010524 <USBD_COMPOSITE_Mount_Class+0x280>)
 8010450:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2209      	movs	r2, #9
 8010456:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	2202      	movs	r2, #2
 801045e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	3302      	adds	r3, #2
 8010464:	88fa      	ldrh	r2, [r7, #6]
 8010466:	b2d2      	uxtb	r2, r2
 8010468:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 801046a:	88fb      	ldrh	r3, [r7, #6]
 801046c:	0a1b      	lsrs	r3, r3, #8
 801046e:	b29a      	uxth	r2, r3
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	3303      	adds	r3, #3
 8010474:	b2d2      	uxtb	r2, r2
 8010476:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	3304      	adds	r3, #4
 801047c:	7a7a      	ldrb	r2, [r7, #9]
 801047e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	3305      	adds	r3, #5
 8010484:	2201      	movs	r2, #1
 8010486:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	3306      	adds	r3, #6
 801048c:	2200      	movs	r2, #0
 801048e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	3307      	adds	r3, #7
 8010494:	22c0      	movs	r2, #192	; 0xc0
 8010496:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3308      	adds	r3, #8
 801049c:	2232      	movs	r2, #50	; 0x32
 801049e:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 80104a0:	4b21      	ldr	r3, [pc, #132]	; (8010528 <USBD_COMPOSITE_Mount_Class+0x284>)
 80104a2:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2209      	movs	r2, #9
 80104a8:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	3301      	adds	r3, #1
 80104ae:	2202      	movs	r2, #2
 80104b0:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	3302      	adds	r3, #2
 80104b6:	88fa      	ldrh	r2, [r7, #6]
 80104b8:	b2d2      	uxtb	r2, r2
 80104ba:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80104bc:	88fb      	ldrh	r3, [r7, #6]
 80104be:	0a1b      	lsrs	r3, r3, #8
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	3303      	adds	r3, #3
 80104c6:	b2d2      	uxtb	r2, r2
 80104c8:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	3304      	adds	r3, #4
 80104ce:	7a7a      	ldrb	r2, [r7, #9]
 80104d0:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	3305      	adds	r3, #5
 80104d6:	2201      	movs	r2, #1
 80104d8:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3306      	adds	r3, #6
 80104de:	2200      	movs	r2, #0
 80104e0:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3307      	adds	r3, #7
 80104e6:	22c0      	movs	r2, #192	; 0xc0
 80104e8:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3308      	adds	r3, #8
 80104ee:	2232      	movs	r2, #50	; 0x32
 80104f0:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 80104f2:	bf00      	nop
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd90      	pop	{r4, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	200001d0 	.word	0x200001d0
 8010500:	200001c0 	.word	0x200001c0
 8010504:	20003605 	.word	0x20003605
 8010508:	20003681 	.word	0x20003681
 801050c:	200002b0 	.word	0x200002b0
 8010510:	2000361e 	.word	0x2000361e
 8010514:	2000369a 	.word	0x2000369a
 8010518:	200000b0 	.word	0x200000b0
 801051c:	20003635 	.word	0x20003635
 8010520:	200036b1 	.word	0x200036b1
 8010524:	20003678 	.word	0x20003678
 8010528:	200035fc 	.word	0x200035fc

0801052c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8010538:	4b24      	ldr	r3, [pc, #144]	; (80105cc <USBD_HID_Init+0xa0>)
 801053a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d105      	bne.n	801054e <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 801054a:	2302      	movs	r3, #2
 801054c:	e03a      	b.n	80105c4 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	7c1b      	ldrb	r3, [r3, #16]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d10d      	bne.n	801057a <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 801055e:	4b1c      	ldr	r3, [pc, #112]	; (80105d0 <USBD_HID_Init+0xa4>)
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	f003 020f 	and.w	r2, r3, #15
 8010566:	6879      	ldr	r1, [r7, #4]
 8010568:	4613      	mov	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	440b      	add	r3, r1
 8010572:	3326      	adds	r3, #38	; 0x26
 8010574:	2207      	movs	r2, #7
 8010576:	801a      	strh	r2, [r3, #0]
 8010578:	e00c      	b.n	8010594 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 801057a:	4b15      	ldr	r3, [pc, #84]	; (80105d0 <USBD_HID_Init+0xa4>)
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	f003 020f 	and.w	r2, r3, #15
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	4613      	mov	r3, r2
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4413      	add	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	440b      	add	r3, r1
 801058e:	3326      	adds	r3, #38	; 0x26
 8010590:	220a      	movs	r2, #10
 8010592:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 8010594:	4b0e      	ldr	r3, [pc, #56]	; (80105d0 <USBD_HID_Init+0xa4>)
 8010596:	7819      	ldrb	r1, [r3, #0]
 8010598:	2308      	movs	r3, #8
 801059a:	2203      	movs	r2, #3
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f003 fbc8 	bl	8013d32 <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 80105a2:	4b0b      	ldr	r3, [pc, #44]	; (80105d0 <USBD_HID_Init+0xa4>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	f003 020f 	and.w	r2, r3, #15
 80105aa:	6879      	ldr	r1, [r7, #4]
 80105ac:	4613      	mov	r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4413      	add	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	440b      	add	r3, r1
 80105b6:	3324      	adds	r3, #36	; 0x24
 80105b8:	2201      	movs	r2, #1
 80105ba:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2200      	movs	r2, #0
 80105c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	20003738 	.word	0x20003738
 80105d0:	200001ce 	.word	0x200001ce

080105d4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	460b      	mov	r3, r1
 80105de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 80105e0:	4b16      	ldr	r3, [pc, #88]	; (801063c <USBD_HID_DeInit+0x68>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	4619      	mov	r1, r3
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f003 fbc9 	bl	8013d7e <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 80105ec:	4b13      	ldr	r3, [pc, #76]	; (801063c <USBD_HID_DeInit+0x68>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	f003 020f 	and.w	r2, r3, #15
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	4613      	mov	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	4413      	add	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	440b      	add	r3, r1
 8010600:	3324      	adds	r3, #36	; 0x24
 8010602:	2200      	movs	r2, #0
 8010604:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8010606:	4b0d      	ldr	r3, [pc, #52]	; (801063c <USBD_HID_DeInit+0x68>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	f003 020f 	and.w	r2, r3, #15
 801060e:	6879      	ldr	r1, [r7, #4]
 8010610:	4613      	mov	r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	4413      	add	r3, r2
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	440b      	add	r3, r1
 801061a:	3326      	adds	r3, #38	; 0x26
 801061c:	2200      	movs	r2, #0
 801061e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010626:	2b00      	cmp	r3, #0
 8010628:	d003      	beq.n	8010632 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }

  return (uint8_t)USBD_OK;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	200001ce 	.word	0x200001ce

08010640 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010650:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010652:	2300      	movs	r3, #0
 8010654:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8010656:	2300      	movs	r3, #0
 8010658:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010660:	2303      	movs	r3, #3
 8010662:	e0e8      	b.n	8010836 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801066c:	2b00      	cmp	r3, #0
 801066e:	d046      	beq.n	80106fe <USBD_HID_Setup+0xbe>
 8010670:	2b20      	cmp	r3, #32
 8010672:	f040 80d8 	bne.w	8010826 <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	785b      	ldrb	r3, [r3, #1]
 801067a:	3b02      	subs	r3, #2
 801067c:	2b09      	cmp	r3, #9
 801067e:	d836      	bhi.n	80106ee <USBD_HID_Setup+0xae>
 8010680:	a201      	add	r2, pc, #4	; (adr r2, 8010688 <USBD_HID_Setup+0x48>)
 8010682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010686:	bf00      	nop
 8010688:	080106df 	.word	0x080106df
 801068c:	080106bf 	.word	0x080106bf
 8010690:	080106ef 	.word	0x080106ef
 8010694:	080106ef 	.word	0x080106ef
 8010698:	080106ef 	.word	0x080106ef
 801069c:	080106ef 	.word	0x080106ef
 80106a0:	080106ef 	.word	0x080106ef
 80106a4:	080106ef 	.word	0x080106ef
 80106a8:	080106cd 	.word	0x080106cd
 80106ac:	080106b1 	.word	0x080106b1
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	885b      	ldrh	r3, [r3, #2]
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	461a      	mov	r2, r3
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	601a      	str	r2, [r3, #0]
      break;
 80106bc:	e01e      	b.n	80106fc <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2201      	movs	r2, #1
 80106c2:	4619      	mov	r1, r3
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f003 f914 	bl	80138f2 <USBD_CtlSendData>
      break;
 80106ca:	e017      	b.n	80106fc <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	885b      	ldrh	r3, [r3, #2]
 80106d0:	0a1b      	lsrs	r3, r3, #8
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	461a      	mov	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	605a      	str	r2, [r3, #4]
      break;
 80106dc:	e00e      	b.n	80106fc <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3304      	adds	r3, #4
 80106e2:	2201      	movs	r2, #1
 80106e4:	4619      	mov	r1, r3
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f003 f903 	bl	80138f2 <USBD_CtlSendData>
      break;
 80106ec:	e006      	b.n	80106fc <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f003 f88d 	bl	8013810 <USBD_CtlError>
      ret = USBD_FAIL;
 80106f6:	2303      	movs	r3, #3
 80106f8:	75fb      	strb	r3, [r7, #23]
      break;
 80106fa:	bf00      	nop
    }
    break;
 80106fc:	e09a      	b.n	8010834 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	785b      	ldrb	r3, [r3, #1]
 8010702:	2b0b      	cmp	r3, #11
 8010704:	f200 8086 	bhi.w	8010814 <USBD_HID_Setup+0x1d4>
 8010708:	a201      	add	r2, pc, #4	; (adr r2, 8010710 <USBD_HID_Setup+0xd0>)
 801070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070e:	bf00      	nop
 8010710:	08010741 	.word	0x08010741
 8010714:	08010823 	.word	0x08010823
 8010718:	08010815 	.word	0x08010815
 801071c:	08010815 	.word	0x08010815
 8010720:	08010815 	.word	0x08010815
 8010724:	08010815 	.word	0x08010815
 8010728:	0801076b 	.word	0x0801076b
 801072c:	08010815 	.word	0x08010815
 8010730:	08010815 	.word	0x08010815
 8010734:	08010815 	.word	0x08010815
 8010738:	080107c3 	.word	0x080107c3
 801073c:	080107ed 	.word	0x080107ed
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010746:	b2db      	uxtb	r3, r3
 8010748:	2b03      	cmp	r3, #3
 801074a:	d107      	bne.n	801075c <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801074c:	f107 030a 	add.w	r3, r7, #10
 8010750:	2202      	movs	r2, #2
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f003 f8cc 	bl	80138f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801075a:	e063      	b.n	8010824 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 801075c:	6839      	ldr	r1, [r7, #0]
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f003 f856 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 8010764:	2303      	movs	r3, #3
 8010766:	75fb      	strb	r3, [r7, #23]
      break;
 8010768:	e05c      	b.n	8010824 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	885b      	ldrh	r3, [r3, #2]
 801076e:	0a1b      	lsrs	r3, r3, #8
 8010770:	b29b      	uxth	r3, r3
 8010772:	2b22      	cmp	r3, #34	; 0x22
 8010774:	d108      	bne.n	8010788 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	88db      	ldrh	r3, [r3, #6]
 801077a:	2b3f      	cmp	r3, #63	; 0x3f
 801077c:	bf28      	it	cs
 801077e:	233f      	movcs	r3, #63	; 0x3f
 8010780:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8010782:	4b2f      	ldr	r3, [pc, #188]	; (8010840 <USBD_HID_Setup+0x200>)
 8010784:	613b      	str	r3, [r7, #16]
 8010786:	e015      	b.n	80107b4 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	885b      	ldrh	r3, [r3, #2]
 801078c:	0a1b      	lsrs	r3, r3, #8
 801078e:	b29b      	uxth	r3, r3
 8010790:	2b21      	cmp	r3, #33	; 0x21
 8010792:	d108      	bne.n	80107a6 <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 8010794:	4b2b      	ldr	r3, [pc, #172]	; (8010844 <USBD_HID_Setup+0x204>)
 8010796:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	88db      	ldrh	r3, [r3, #6]
 801079c:	2b09      	cmp	r3, #9
 801079e:	bf28      	it	cs
 80107a0:	2309      	movcs	r3, #9
 80107a2:	82bb      	strh	r3, [r7, #20]
 80107a4:	e006      	b.n	80107b4 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80107a6:	6839      	ldr	r1, [r7, #0]
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f003 f831 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 80107ae:	2303      	movs	r3, #3
 80107b0:	75fb      	strb	r3, [r7, #23]
        break;
 80107b2:	e037      	b.n	8010824 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80107b4:	8abb      	ldrh	r3, [r7, #20]
 80107b6:	461a      	mov	r2, r3
 80107b8:	6939      	ldr	r1, [r7, #16]
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f003 f899 	bl	80138f2 <USBD_CtlSendData>
      break;
 80107c0:	e030      	b.n	8010824 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	2b03      	cmp	r3, #3
 80107cc:	d107      	bne.n	80107de <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3308      	adds	r3, #8
 80107d2:	2201      	movs	r2, #1
 80107d4:	4619      	mov	r1, r3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f003 f88b 	bl	80138f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80107dc:	e022      	b.n	8010824 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f003 f815 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 80107e6:	2303      	movs	r3, #3
 80107e8:	75fb      	strb	r3, [r7, #23]
      break;
 80107ea:	e01b      	b.n	8010824 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b03      	cmp	r3, #3
 80107f6:	d106      	bne.n	8010806 <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	885b      	ldrh	r3, [r3, #2]
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	461a      	mov	r2, r3
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010804:	e00e      	b.n	8010824 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f003 f801 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 801080e:	2303      	movs	r3, #3
 8010810:	75fb      	strb	r3, [r7, #23]
      break;
 8010812:	e007      	b.n	8010824 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010814:	6839      	ldr	r1, [r7, #0]
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f002 fffa 	bl	8013810 <USBD_CtlError>
      ret = USBD_FAIL;
 801081c:	2303      	movs	r3, #3
 801081e:	75fb      	strb	r3, [r7, #23]
      break;
 8010820:	e000      	b.n	8010824 <USBD_HID_Setup+0x1e4>
      break;
 8010822:	bf00      	nop
    }
    break;
 8010824:	e006      	b.n	8010834 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8010826:	6839      	ldr	r1, [r7, #0]
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f002 fff1 	bl	8013810 <USBD_CtlError>
    ret = USBD_FAIL;
 801082e:	2303      	movs	r3, #3
 8010830:	75fb      	strb	r3, [r7, #23]
    break;
 8010832:	bf00      	nop
  }

  return (uint8_t)ret;
 8010834:	7dfb      	ldrb	r3, [r7, #23]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3718      	adds	r7, #24
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	2000026c 	.word	0x2000026c
 8010844:	20000254 	.word	0x20000254

08010848 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2222      	movs	r2, #34	; 0x22
 8010854:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8010856:	4b03      	ldr	r3, [pc, #12]	; (8010864 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8010858:	4618      	mov	r0, r3
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	2000020c 	.word	0x2000020c

08010868 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2222      	movs	r2, #34	; 0x22
 8010874:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 8010876:	4b03      	ldr	r3, [pc, #12]	; (8010884 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8010878:	4618      	mov	r0, r3
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	20000230 	.word	0x20000230

08010888 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2222      	movs	r2, #34	; 0x22
 8010894:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8010896:	4b03      	ldr	r3, [pc, #12]	; (80108a4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr
 80108a4:	2000020c 	.word	0x2000020c

080108a8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	460b      	mov	r3, r1
 80108b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80108ba:	2200      	movs	r2, #0
 80108bc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80108be:	2300      	movs	r3, #0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	220a      	movs	r2, #10
 80108d8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80108da:	4b03      	ldr	r3, [pc, #12]	; (80108e8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80108dc:	4618      	mov	r0, r3
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	20000260 	.word	0x20000260

080108ec <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	4613      	mov	r3, r2
 80108f8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010900:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8010908:	2303      	movs	r3, #3
 801090a:	e014      	b.n	8010936 <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010912:	b2db      	uxtb	r3, r3
 8010914:	2b03      	cmp	r3, #3
 8010916:	d10d      	bne.n	8010934 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	7b1b      	ldrb	r3, [r3, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d109      	bne.n	8010934 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	2201      	movs	r2, #1
 8010924:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 8010926:	4b06      	ldr	r3, [pc, #24]	; (8010940 <USBD_HID_Keybaord_SendReport+0x54>)
 8010928:	7819      	ldrb	r1, [r3, #0]
 801092a:	88fb      	ldrh	r3, [r7, #6]
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f003 faec 	bl	8013f0c <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3718      	adds	r7, #24
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	200001ce 	.word	0x200001ce

08010944 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	4608      	mov	r0, r1
 801094e:	4611      	mov	r1, r2
 8010950:	461a      	mov	r2, r3
 8010952:	4603      	mov	r3, r0
 8010954:	70fb      	strb	r3, [r7, #3]
 8010956:	460b      	mov	r3, r1
 8010958:	70bb      	strb	r3, [r7, #2]
 801095a:	4613      	mov	r3, r2
 801095c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	330b      	adds	r3, #11
 8010962:	78fa      	ldrb	r2, [r7, #3]
 8010964:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	3311      	adds	r3, #17
 801096a:	787a      	ldrb	r2, [r7, #1]
 801096c:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	331d      	adds	r3, #29
 8010972:	78ba      	ldrb	r2, [r7, #2]
 8010974:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 8010976:	4a07      	ldr	r2, [pc, #28]	; (8010994 <USBD_Update_HID_KBD_DESC+0x50>)
 8010978:	78bb      	ldrb	r3, [r7, #2]
 801097a:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 801097c:	4a06      	ldr	r2, [pc, #24]	; (8010998 <USBD_Update_HID_KBD_DESC+0x54>)
 801097e:	78fb      	ldrb	r3, [r7, #3]
 8010980:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8010982:	4a06      	ldr	r2, [pc, #24]	; (801099c <USBD_Update_HID_KBD_DESC+0x58>)
 8010984:	787b      	ldrb	r3, [r7, #1]
 8010986:	7013      	strb	r3, [r2, #0]
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	200001ce 	.word	0x200001ce
 8010998:	20003734 	.word	0x20003734
 801099c:	20003735 	.word	0x20003735

080109a0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = &USBD_MSC_Instance;
 80109ac:	4b37      	ldr	r3, [pc, #220]	; (8010a8c <USBD_MSC_Init+0xec>)
 80109ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d105      	bne.n	80109c2 <USBD_MSC_Init+0x22>
  {
    pdev->pClassData_MSC = NULL;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    return (uint8_t)USBD_EMEM;
 80109be:	2302      	movs	r3, #2
 80109c0:	e060      	b.n	8010a84 <USBD_MSC_Init+0xe4>
  }

  pdev->pClassData_MSC = (void *)hmsc;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	7c1b      	ldrb	r3, [r3, #16]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d12b      	bne.n	8010a2a <USBD_MSC_Init+0x8a>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80109d2:	4b2f      	ldr	r3, [pc, #188]	; (8010a90 <USBD_MSC_Init+0xf0>)
 80109d4:	7819      	ldrb	r1, [r3, #0]
 80109d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109da:	2202      	movs	r2, #2
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f003 f9a8 	bl	8013d32 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 80109e2:	4b2b      	ldr	r3, [pc, #172]	; (8010a90 <USBD_MSC_Init+0xf0>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	f003 020f 	and.w	r2, r3, #15
 80109ea:	6879      	ldr	r1, [r7, #4]
 80109ec:	4613      	mov	r3, r2
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	4413      	add	r3, r2
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	440b      	add	r3, r1
 80109f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80109fa:	2201      	movs	r2, #1
 80109fc:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80109fe:	4b25      	ldr	r3, [pc, #148]	; (8010a94 <USBD_MSC_Init+0xf4>)
 8010a00:	7819      	ldrb	r1, [r3, #0]
 8010a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a06:	2202      	movs	r2, #2
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f003 f992 	bl	8013d32 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 8010a0e:	4b21      	ldr	r3, [pc, #132]	; (8010a94 <USBD_MSC_Init+0xf4>)
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	f003 020f 	and.w	r2, r3, #15
 8010a16:	6879      	ldr	r1, [r7, #4]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	4413      	add	r3, r2
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	440b      	add	r3, r1
 8010a22:	3324      	adds	r3, #36	; 0x24
 8010a24:	2201      	movs	r2, #1
 8010a26:	801a      	strh	r2, [r3, #0]
 8010a28:	e028      	b.n	8010a7c <USBD_MSC_Init+0xdc>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010a2a:	4b19      	ldr	r3, [pc, #100]	; (8010a90 <USBD_MSC_Init+0xf0>)
 8010a2c:	7819      	ldrb	r1, [r3, #0]
 8010a2e:	2340      	movs	r3, #64	; 0x40
 8010a30:	2202      	movs	r2, #2
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f003 f97d 	bl	8013d32 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 8010a38:	4b15      	ldr	r3, [pc, #84]	; (8010a90 <USBD_MSC_Init+0xf0>)
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	f003 020f 	and.w	r2, r3, #15
 8010a40:	6879      	ldr	r1, [r7, #4]
 8010a42:	4613      	mov	r3, r2
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	4413      	add	r3, r2
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	440b      	add	r3, r1
 8010a4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010a50:	2201      	movs	r2, #1
 8010a52:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010a54:	4b0f      	ldr	r3, [pc, #60]	; (8010a94 <USBD_MSC_Init+0xf4>)
 8010a56:	7819      	ldrb	r1, [r3, #0]
 8010a58:	2340      	movs	r3, #64	; 0x40
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f003 f968 	bl	8013d32 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 8010a62:	4b0c      	ldr	r3, [pc, #48]	; (8010a94 <USBD_MSC_Init+0xf4>)
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	f003 020f 	and.w	r2, r3, #15
 8010a6a:	6879      	ldr	r1, [r7, #4]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	009b      	lsls	r3, r3, #2
 8010a70:	4413      	add	r3, r2
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	440b      	add	r3, r1
 8010a76:	3324      	adds	r3, #36	; 0x24
 8010a78:	2201      	movs	r2, #1
 8010a7a:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 f9ed 	bl	8010e5c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8010a82:	2300      	movs	r3, #0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	2000374c 	.word	0x2000374c
 8010a90:	200002ac 	.word	0x200002ac
 8010a94:	200002ab 	.word	0x200002ab

08010a98 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 8010aa4:	4b1b      	ldr	r3, [pc, #108]	; (8010b14 <USBD_MSC_DeInit+0x7c>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f003 f967 	bl	8013d7e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 8010ab0:	4b18      	ldr	r3, [pc, #96]	; (8010b14 <USBD_MSC_DeInit+0x7c>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f003 020f 	and.w	r2, r3, #15
 8010ab8:	6879      	ldr	r1, [r7, #4]
 8010aba:	4613      	mov	r3, r2
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	4413      	add	r3, r2
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	440b      	add	r3, r1
 8010ac4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010ac8:	2200      	movs	r2, #0
 8010aca:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 8010acc:	4b12      	ldr	r3, [pc, #72]	; (8010b18 <USBD_MSC_DeInit+0x80>)
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f003 f953 	bl	8013d7e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 8010ad8:	4b0f      	ldr	r3, [pc, #60]	; (8010b18 <USBD_MSC_DeInit+0x80>)
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f003 020f 	and.w	r2, r3, #15
 8010ae0:	6879      	ldr	r1, [r7, #4]
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	440b      	add	r3, r1
 8010aec:	3324      	adds	r3, #36	; 0x24
 8010aee:	2200      	movs	r2, #0
 8010af0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassData_MSC != NULL)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d006      	beq.n	8010b0a <USBD_MSC_DeInit+0x72>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f000 fa1f 	bl	8010f40 <MSC_BOT_DeInit>
#if (0)
    (void)USBD_free(pdev->pClassData_MSC);
#endif
    pdev->pClassData_MSC = NULL;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  }

  return (uint8_t)USBD_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	200002ac 	.word	0x200002ac
 8010b18:	200002ab 	.word	0x200002ab

08010b1c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b086      	sub	sp, #24
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010b2c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8010b32:	2300      	movs	r3, #0
 8010b34:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d101      	bne.n	8010b40 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010b3c:	2303      	movs	r3, #3
 8010b3e:	e0db      	b.n	8010cf8 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d04e      	beq.n	8010bea <USBD_MSC_Setup+0xce>
 8010b4c:	2b20      	cmp	r3, #32
 8010b4e:	f040 80cb 	bne.w	8010ce8 <USBD_MSC_Setup+0x1cc>
  {
  /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	785b      	ldrb	r3, [r3, #1]
 8010b56:	2bfe      	cmp	r3, #254	; 0xfe
 8010b58:	d002      	beq.n	8010b60 <USBD_MSC_Setup+0x44>
 8010b5a:	2bff      	cmp	r3, #255	; 0xff
 8010b5c:	d025      	beq.n	8010baa <USBD_MSC_Setup+0x8e>
 8010b5e:	e03c      	b.n	8010bda <USBD_MSC_Setup+0xbe>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	885b      	ldrh	r3, [r3, #2]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d119      	bne.n	8010b9c <USBD_MSC_Setup+0x80>
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	88db      	ldrh	r3, [r3, #6]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d115      	bne.n	8010b9c <USBD_MSC_Setup+0x80>
          ((req->bmRequest & 0x80U) == 0x80U))
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	da10      	bge.n	8010b9c <USBD_MSC_Setup+0x80>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetMaxLun();
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8010b80:	699b      	ldr	r3, [r3, #24]
 8010b82:	4798      	blx	r3
 8010b84:	4603      	mov	r3, r0
 8010b86:	461a      	mov	r2, r3
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2201      	movs	r2, #1
 8010b90:	4619      	mov	r1, r3
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f002 fead 	bl	80138f2 <USBD_CtlSendData>
 8010b98:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010b9a:	e025      	b.n	8010be8 <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f002 fe36 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8010ba8:	e01e      	b.n	8010be8 <USBD_MSC_Setup+0xcc>

    case BOT_RESET:
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	885b      	ldrh	r3, [r3, #2]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d10c      	bne.n	8010bcc <USBD_MSC_Setup+0xb0>
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	88db      	ldrh	r3, [r3, #6]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d108      	bne.n	8010bcc <USBD_MSC_Setup+0xb0>
          ((req->bmRequest & 0x80U) != 0x80U))
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	db03      	blt.n	8010bcc <USBD_MSC_Setup+0xb0>
      {
        MSC_BOT_Reset(pdev);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 f98b 	bl	8010ee0 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010bca:	e00d      	b.n	8010be8 <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8010bcc:	6839      	ldr	r1, [r7, #0]
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f002 fe1e 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 8010bd4:	2303      	movs	r3, #3
 8010bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8010bd8:	e006      	b.n	8010be8 <USBD_MSC_Setup+0xcc>

    default:
      USBD_CtlError(pdev, req);
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f002 fe17 	bl	8013810 <USBD_CtlError>
      ret = USBD_FAIL;
 8010be2:	2303      	movs	r3, #3
 8010be4:	75fb      	strb	r3, [r7, #23]
      break;
 8010be6:	bf00      	nop
    }
    break;
 8010be8:	e085      	b.n	8010cf6 <USBD_MSC_Setup+0x1da>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	785b      	ldrb	r3, [r3, #1]
 8010bee:	2b0b      	cmp	r3, #11
 8010bf0:	d871      	bhi.n	8010cd6 <USBD_MSC_Setup+0x1ba>
 8010bf2:	a201      	add	r2, pc, #4	; (adr r2, 8010bf8 <USBD_MSC_Setup+0xdc>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c29 	.word	0x08010c29
 8010bfc:	08010ca5 	.word	0x08010ca5
 8010c00:	08010cd7 	.word	0x08010cd7
 8010c04:	08010cd7 	.word	0x08010cd7
 8010c08:	08010cd7 	.word	0x08010cd7
 8010c0c:	08010cd7 	.word	0x08010cd7
 8010c10:	08010cd7 	.word	0x08010cd7
 8010c14:	08010cd7 	.word	0x08010cd7
 8010c18:	08010cd7 	.word	0x08010cd7
 8010c1c:	08010cd7 	.word	0x08010cd7
 8010c20:	08010c53 	.word	0x08010c53
 8010c24:	08010c7d 	.word	0x08010c7d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b03      	cmp	r3, #3
 8010c32:	d107      	bne.n	8010c44 <USBD_MSC_Setup+0x128>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010c34:	f107 030e 	add.w	r3, r7, #14
 8010c38:	2202      	movs	r2, #2
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f002 fe58 	bl	80138f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010c42:	e050      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f002 fde2 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 8010c4c:	2303      	movs	r3, #3
 8010c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8010c50:	e049      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d107      	bne.n	8010c6e <USBD_MSC_Setup+0x152>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	3304      	adds	r3, #4
 8010c62:	2201      	movs	r2, #1
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f002 fe43 	bl	80138f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010c6c:	e03b      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8010c6e:	6839      	ldr	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f002 fdcd 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 8010c76:	2303      	movs	r3, #3
 8010c78:	75fb      	strb	r3, [r7, #23]
      break;
 8010c7a:	e034      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	2b03      	cmp	r3, #3
 8010c86:	d106      	bne.n	8010c96 <USBD_MSC_Setup+0x17a>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	885b      	ldrh	r3, [r3, #2]
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	461a      	mov	r2, r3
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010c94:	e027      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8010c96:	6839      	ldr	r1, [r7, #0]
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f002 fdb9 	bl	8013810 <USBD_CtlError>
        ret = USBD_FAIL;
 8010c9e:	2303      	movs	r3, #3
 8010ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8010ca2:	e020      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	2b03      	cmp	r3, #3
 8010cae:	d119      	bne.n	8010ce4 <USBD_MSC_Setup+0x1c8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	885b      	ldrh	r3, [r3, #2]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d115      	bne.n	8010ce4 <USBD_MSC_Setup+0x1c8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	889b      	ldrh	r3, [r3, #4]
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f003 f87b 	bl	8013dbc <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	889b      	ldrh	r3, [r3, #4]
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 fae6 	bl	80112a0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8010cd4:	e006      	b.n	8010ce4 <USBD_MSC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 8010cd6:	6839      	ldr	r1, [r7, #0]
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f002 fd99 	bl	8013810 <USBD_CtlError>
      ret = USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8010ce2:	e000      	b.n	8010ce6 <USBD_MSC_Setup+0x1ca>
      break;
 8010ce4:	bf00      	nop
    }
    break;
 8010ce6:	e006      	b.n	8010cf6 <USBD_MSC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8010ce8:	6839      	ldr	r1, [r7, #0]
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f002 fd90 	bl	8013810 <USBD_CtlError>
    ret = USBD_FAIL;
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	75fb      	strb	r3, [r7, #23]
    break;
 8010cf4:	bf00      	nop
  }

  return (uint8_t)ret;
 8010cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3718      	adds	r7, #24
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010d0c:	78fb      	ldrb	r3, [r7, #3]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 f929 	bl	8010f68 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8010d16:	2300      	movs	r3, #0
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010d2c:	78fb      	ldrb	r3, [r7, #3]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 f94f 	bl	8010fd4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8010d36:	2300      	movs	r3, #0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2220      	movs	r2, #32
 8010d4c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8010d4e:	4b03      	ldr	r3, [pc, #12]	; (8010d5c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr
 8010d5c:	200002ec 	.word	0x200002ec

08010d60 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8010d6e:	4b03      	ldr	r3, [pc, #12]	; (8010d7c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr
 8010d7c:	2000030c 	.word	0x2000030c

08010d80 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2220      	movs	r2, #32
 8010d8c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8010d8e:	4b03      	ldr	r3, [pc, #12]	; (8010d9c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr
 8010d9c:	2000032c 	.word	0x2000032c

08010da0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	220a      	movs	r2, #10
 8010dac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8010dae:	4b03      	ldr	r3, [pc, #12]	; (8010dbc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	2000034c 	.word	0x2000034c

08010dc0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d101      	bne.n	8010dd4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010dd0:	2303      	movs	r3, #3
 8010dd2:	e004      	b.n	8010dde <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData_MSC = fops;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	683a      	ldr	r2, [r7, #0]
 8010dd8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

  return (uint8_t)USBD_OK;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr
	...

08010dec <USBD_Update_MSC_DESC>:

void USBD_Update_MSC_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	4608      	mov	r0, r1
 8010df6:	4611      	mov	r1, r2
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	70fb      	strb	r3, [r7, #3]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	70bb      	strb	r3, [r7, #2]
 8010e02:	4613      	mov	r3, r2
 8010e04:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	330b      	adds	r3, #11
 8010e0a:	78fa      	ldrb	r2, [r7, #3]
 8010e0c:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	3311      	adds	r3, #17
 8010e12:	7c3a      	ldrb	r2, [r7, #16]
 8010e14:	701a      	strb	r2, [r3, #0]
  desc[20] = in_ep;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	3314      	adds	r3, #20
 8010e1a:	78ba      	ldrb	r2, [r7, #2]
 8010e1c:	701a      	strb	r2, [r3, #0]
  desc[27] = out_ep;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	331b      	adds	r3, #27
 8010e22:	787a      	ldrb	r2, [r7, #1]
 8010e24:	701a      	strb	r2, [r3, #0]

  MSC_IN_EP = in_ep;
 8010e26:	4a09      	ldr	r2, [pc, #36]	; (8010e4c <USBD_Update_MSC_DESC+0x60>)
 8010e28:	78bb      	ldrb	r3, [r7, #2]
 8010e2a:	7013      	strb	r3, [r2, #0]
  MSC_OUT_EP = out_ep;
 8010e2c:	4a08      	ldr	r2, [pc, #32]	; (8010e50 <USBD_Update_MSC_DESC+0x64>)
 8010e2e:	787b      	ldrb	r3, [r7, #1]
 8010e30:	7013      	strb	r3, [r2, #0]
  MSC_ITF_NBR = itf_no;
 8010e32:	4a08      	ldr	r2, [pc, #32]	; (8010e54 <USBD_Update_MSC_DESC+0x68>)
 8010e34:	78fb      	ldrb	r3, [r7, #3]
 8010e36:	7013      	strb	r3, [r2, #0]
  MSC_BOT_STR_DESC_IDX = str_idx;
 8010e38:	4a07      	ldr	r2, [pc, #28]	; (8010e58 <USBD_Update_MSC_DESC+0x6c>)
 8010e3a:	7c3b      	ldrb	r3, [r7, #16]
 8010e3c:	7013      	strb	r3, [r2, #0]
}
 8010e3e:	bf00      	nop
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	200002ab 	.word	0x200002ab
 8010e50:	200002ac 	.word	0x200002ac
 8010e54:	20003748 	.word	0x20003748
 8010e58:	20003749 	.word	0x20003749

08010e5c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010e6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d02d      	beq.n	8010ece <MSC_BOT_Init+0x72>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2200      	movs	r2, #0
 8010e76:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2200      	movs	r2, #0
 8010e82:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2200      	movs	r2, #0
 8010e92:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Init(0U);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 8010ea2:	4b0d      	ldr	r3, [pc, #52]	; (8010ed8 <MSC_BOT_Init+0x7c>)
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f002 ff87 	bl	8013dbc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 8010eae:	4b0b      	ldr	r3, [pc, #44]	; (8010edc <MSC_BOT_Init+0x80>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f002 ff81 	bl	8013dbc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 8010eba:	4b07      	ldr	r3, [pc, #28]	; (8010ed8 <MSC_BOT_Init+0x7c>)
 8010ebc:	7819      	ldrb	r1, [r3, #0]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010ec4:	231f      	movs	r3, #31
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f003 f841 	bl	8013f4e <USBD_LL_PrepareReceive>
 8010ecc:	e000      	b.n	8010ed0 <MSC_BOT_Init+0x74>
    return;
 8010ece:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	200002ac 	.word	0x200002ac
 8010edc:	200002ab 	.word	0x200002ab

08010ee0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010eee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d01b      	beq.n	8010f2e <MSC_BOT_Reset+0x4e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2201      	movs	r2, #1
 8010f00:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 8010f02:	4b0d      	ldr	r3, [pc, #52]	; (8010f38 <MSC_BOT_Reset+0x58>)
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f002 ff95 	bl	8013e38 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 8010f0e:	4b0b      	ldr	r3, [pc, #44]	; (8010f3c <MSC_BOT_Reset+0x5c>)
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	4619      	mov	r1, r3
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f002 ff8f 	bl	8013e38 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 8010f1a:	4b08      	ldr	r3, [pc, #32]	; (8010f3c <MSC_BOT_Reset+0x5c>)
 8010f1c:	7819      	ldrb	r1, [r3, #0]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010f24:	231f      	movs	r3, #31
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f003 f811 	bl	8013f4e <USBD_LL_PrepareReceive>
 8010f2c:	e000      	b.n	8010f30 <MSC_BOT_Reset+0x50>
    return;
 8010f2e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	200002ab 	.word	0x200002ab
 8010f3c:	200002ac 	.word	0x200002ac

08010f40 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010f4e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d002      	beq.n	8010f5c <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	721a      	strb	r2, [r3, #8]
  }
}
 8010f5c:	bf00      	nop
 8010f5e:	3714      	adds	r7, #20
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	460b      	mov	r3, r1
 8010f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010f7a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d020      	beq.n	8010fc4 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	7a1b      	ldrb	r3, [r3, #8]
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d005      	beq.n	8010f96 <MSC_BOT_DataIn+0x2e>
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	db1c      	blt.n	8010fc8 <MSC_BOT_DataIn+0x60>
 8010f8e:	3b03      	subs	r3, #3
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d819      	bhi.n	8010fc8 <MSC_BOT_DataIn+0x60>
 8010f94:	e011      	b.n	8010fba <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 f9b1 	bl	801130c <SCSI_ProcessCmd>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	da0d      	bge.n	8010fcc <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 f900 	bl	80111b8 <MSC_BOT_SendCSW>
      }
      break;
 8010fb8:	e008      	b.n	8010fcc <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010fba:	2100      	movs	r1, #0
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 f8fb 	bl	80111b8 <MSC_BOT_SendCSW>
      break;
 8010fc2:	e004      	b.n	8010fce <MSC_BOT_DataIn+0x66>
    return;
 8010fc4:	bf00      	nop
 8010fc6:	e002      	b.n	8010fce <MSC_BOT_DataIn+0x66>

    default:
      break;
 8010fc8:	bf00      	nop
 8010fca:	e000      	b.n	8010fce <MSC_BOT_DataIn+0x66>
      break;
 8010fcc:	bf00      	nop
  }
}
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010fe6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d01c      	beq.n	8011028 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	7a1b      	ldrb	r3, [r3, #8]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d002      	beq.n	8010ffc <MSC_BOT_DataOut+0x28>
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d004      	beq.n	8011004 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8010ffa:	e018      	b.n	801102e <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 f819 	bl	8011034 <MSC_BOT_CBW_Decode>
      break;
 8011002:	e014      	b.n	801102e <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011010:	461a      	mov	r2, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f97a 	bl	801130c <SCSI_ProcessCmd>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	da06      	bge.n	801102c <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801101e:	2101      	movs	r1, #1
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 f8c9 	bl	80111b8 <MSC_BOT_SendCSW>
      break;
 8011026:	e001      	b.n	801102c <MSC_BOT_DataOut+0x58>
    return;
 8011028:	bf00      	nop
 801102a:	e000      	b.n	801102e <MSC_BOT_DataOut+0x5a>
      break;
 801102c:	bf00      	nop
  }
}
 801102e:	3710      	adds	r7, #16
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011042:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d079      	beq.n	801113e <MSC_BOT_CBW_Decode+0x10a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 8011062:	4b3a      	ldr	r3, [pc, #232]	; (801114c <MSC_BOT_CBW_Decode+0x118>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f002 ff91 	bl	8013f90 <USBD_LL_GetRxDataSize>
 801106e:	4603      	mov	r3, r0
 8011070:	2b1f      	cmp	r3, #31
 8011072:	d114      	bne.n	801109e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801107a:	4a35      	ldr	r2, [pc, #212]	; (8011150 <MSC_BOT_CBW_Decode+0x11c>)
 801107c:	4293      	cmp	r3, r2
 801107e:	d10e      	bne.n	801109e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011086:	2b01      	cmp	r3, #1
 8011088:	d809      	bhi.n	801109e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8011090:	2b00      	cmp	r3, #0
 8011092:	d004      	beq.n	801109e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bCBLength > 16U))
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801109a:	2b10      	cmp	r3, #16
 801109c:	d90e      	bls.n	80110bc <MSC_BOT_CBW_Decode+0x88>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80110a4:	2320      	movs	r3, #32
 80110a6:	2205      	movs	r2, #5
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 fdda 	bl	8011c62 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2202      	movs	r2, #2
 80110b2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 f8b5 	bl	8011224 <MSC_BOT_Abort>
 80110ba:	e043      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80110c8:	461a      	mov	r2, r3
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 f91e 	bl	801130c <SCSI_ProcessCmd>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	da0c      	bge.n	80110f0 <MSC_BOT_CBW_Decode+0xbc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	7a1b      	ldrb	r3, [r3, #8]
 80110da:	2b05      	cmp	r3, #5
 80110dc:	d104      	bne.n	80110e8 <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80110de:	2101      	movs	r1, #1
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f869 	bl	80111b8 <MSC_BOT_SendCSW>
 80110e6:	e02d      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 f89b 	bl	8011224 <MSC_BOT_Abort>
 80110ee:	e029      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	7a1b      	ldrb	r3, [r3, #8]
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d024      	beq.n	8011142 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d020      	beq.n	8011142 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011104:	2b03      	cmp	r3, #3
 8011106:	d01c      	beq.n	8011142 <MSC_BOT_CBW_Decode+0x10e>
    {
      if (hmsc->bot_data_length > 0U)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d009      	beq.n	8011124 <MSC_BOT_CBW_Decode+0xf0>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	f103 0110 	add.w	r1, r3, #16
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	461a      	mov	r2, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f819 	bl	8011154 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011122:	e00f      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
      }
      else if (hmsc->bot_data_length == 0U)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d104      	bne.n	8011136 <MSC_BOT_CBW_Decode+0x102>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801112c:	2100      	movs	r1, #0
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 f842 	bl	80111b8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8011134:	e006      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 f874 	bl	8011224 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801113c:	e002      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
    return;
 801113e:	bf00      	nop
 8011140:	e000      	b.n	8011144 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    else
    {
      return;
 8011142:	bf00      	nop
    }
  }
}
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	200002ac 	.word	0x200002ac
 8011150:	43425355 	.word	0x43425355

08011154 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b086      	sub	sp, #24
 8011158:	af00      	add	r7, sp, #0
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011166:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	4293      	cmp	r3, r2
 8011172:	bf28      	it	cs
 8011174:	4613      	movcs	r3, r2
 8011176:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d016      	beq.n	80111ac <MSC_BOT_SendData+0x58>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	1ad2      	subs	r2, r2, r3
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	2200      	movs	r2, #0
 8011192:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	2204      	movs	r2, #4
 801119a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801119c:	4b05      	ldr	r3, [pc, #20]	; (80111b4 <MSC_BOT_SendData+0x60>)
 801119e:	7819      	ldrb	r1, [r3, #0]
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	68f8      	ldr	r0, [r7, #12]
 80111a6:	f002 feb1 	bl	8013f0c <USBD_LL_Transmit>
 80111aa:	e000      	b.n	80111ae <MSC_BOT_SendData+0x5a>
    return;
 80111ac:	bf00      	nop
}
 80111ae:	3718      	adds	r7, #24
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	200002ab 	.word	0x200002ab

080111b8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	460b      	mov	r3, r1
 80111c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80111ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d01d      	beq.n	801120e <MSC_BOT_SendCSW+0x56>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	4a10      	ldr	r2, [pc, #64]	; (8011218 <MSC_BOT_SendCSW+0x60>)
 80111d6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	78fa      	ldrb	r2, [r7, #3]
 80111de:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2200      	movs	r2, #0
 80111e6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 80111e8:	4b0c      	ldr	r3, [pc, #48]	; (801121c <MSC_BOT_SendCSW+0x64>)
 80111ea:	7819      	ldrb	r1, [r3, #0]
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80111f2:	230d      	movs	r3, #13
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f002 fe89 	bl	8013f0c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80111fa:	4b09      	ldr	r3, [pc, #36]	; (8011220 <MSC_BOT_SendCSW+0x68>)
 80111fc:	7819      	ldrb	r1, [r3, #0]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011204:	231f      	movs	r3, #31
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f002 fea1 	bl	8013f4e <USBD_LL_PrepareReceive>
 801120c:	e000      	b.n	8011210 <MSC_BOT_SendCSW+0x58>
    return;
 801120e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	53425355 	.word	0x53425355
 801121c:	200002ab 	.word	0x200002ab
 8011220:	200002ac 	.word	0x200002ac

08011224 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011232:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d02a      	beq.n	8011290 <MSC_BOT_Abort+0x6c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011240:	2b00      	cmp	r3, #0
 8011242:	d10e      	bne.n	8011262 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801124a:	2b00      	cmp	r3, #0
 801124c:	d009      	beq.n	8011262 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011252:	2b00      	cmp	r3, #0
 8011254:	d105      	bne.n	8011262 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8011256:	4b10      	ldr	r3, [pc, #64]	; (8011298 <MSC_BOT_Abort+0x74>)
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	4619      	mov	r1, r3
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f002 fdcc 	bl	8013dfa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8011262:	4b0e      	ldr	r3, [pc, #56]	; (801129c <MSC_BOT_Abort+0x78>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f002 fdc6 	bl	8013dfa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	7a5b      	ldrb	r3, [r3, #9]
 8011272:	2b02      	cmp	r3, #2
 8011274:	d10d      	bne.n	8011292 <MSC_BOT_Abort+0x6e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8011276:	4b09      	ldr	r3, [pc, #36]	; (801129c <MSC_BOT_Abort+0x78>)
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	4619      	mov	r1, r3
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f002 fdbc 	bl	8013dfa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8011282:	4b05      	ldr	r3, [pc, #20]	; (8011298 <MSC_BOT_Abort+0x74>)
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	4619      	mov	r1, r3
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f002 fdb6 	bl	8013dfa <USBD_LL_StallEP>
 801128e:	e000      	b.n	8011292 <MSC_BOT_Abort+0x6e>
    return;
 8011290:	bf00      	nop
  }
}
 8011292:	3710      	adds	r7, #16
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	200002ac 	.word	0x200002ac
 801129c:	200002ab 	.word	0x200002ab

080112a0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	460b      	mov	r3, r1
 80112aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80112b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d01d      	beq.n	80112f6 <MSC_BOT_CplClrFeature+0x56>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	7a5b      	ldrb	r3, [r3, #9]
 80112be:	2b02      	cmp	r3, #2
 80112c0:	d10c      	bne.n	80112dc <MSC_BOT_CplClrFeature+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 80112c2:	4b10      	ldr	r3, [pc, #64]	; (8011304 <MSC_BOT_CplClrFeature+0x64>)
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	4619      	mov	r1, r3
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f002 fd96 	bl	8013dfa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80112ce:	4b0e      	ldr	r3, [pc, #56]	; (8011308 <MSC_BOT_CplClrFeature+0x68>)
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	4619      	mov	r1, r3
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f002 fd90 	bl	8013dfa <USBD_LL_StallEP>
 80112da:	e00f      	b.n	80112fc <MSC_BOT_CplClrFeature+0x5c>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80112dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	da0a      	bge.n	80112fa <MSC_BOT_CplClrFeature+0x5a>
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	7a5b      	ldrb	r3, [r3, #9]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d006      	beq.n	80112fa <MSC_BOT_CplClrFeature+0x5a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80112ec:	2101      	movs	r1, #1
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7ff ff62 	bl	80111b8 <MSC_BOT_SendCSW>
 80112f4:	e002      	b.n	80112fc <MSC_BOT_CplClrFeature+0x5c>
    return;
 80112f6:	bf00      	nop
 80112f8:	e000      	b.n	80112fc <MSC_BOT_CplClrFeature+0x5c>
  }
  else
  {
    return;
 80112fa:	bf00      	nop
  }
}
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	200002ab 	.word	0x200002ab
 8011308:	200002ac 	.word	0x200002ac

0801130c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	460b      	mov	r3, r1
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011320:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d102      	bne.n	801132e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8011328:	f04f 33ff 	mov.w	r3, #4294967295
 801132c:	e168      	b.n	8011600 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	2baa      	cmp	r3, #170	; 0xaa
 8011334:	f000 8144 	beq.w	80115c0 <SCSI_ProcessCmd+0x2b4>
 8011338:	2baa      	cmp	r3, #170	; 0xaa
 801133a:	f300 8153 	bgt.w	80115e4 <SCSI_ProcessCmd+0x2d8>
 801133e:	2ba8      	cmp	r3, #168	; 0xa8
 8011340:	f000 812c 	beq.w	801159c <SCSI_ProcessCmd+0x290>
 8011344:	2ba8      	cmp	r3, #168	; 0xa8
 8011346:	f300 814d 	bgt.w	80115e4 <SCSI_ProcessCmd+0x2d8>
 801134a:	2b5a      	cmp	r3, #90	; 0x5a
 801134c:	f300 80c0 	bgt.w	80114d0 <SCSI_ProcessCmd+0x1c4>
 8011350:	2b00      	cmp	r3, #0
 8011352:	f2c0 8147 	blt.w	80115e4 <SCSI_ProcessCmd+0x2d8>
 8011356:	2b5a      	cmp	r3, #90	; 0x5a
 8011358:	f200 8144 	bhi.w	80115e4 <SCSI_ProcessCmd+0x2d8>
 801135c:	a201      	add	r2, pc, #4	; (adr r2, 8011364 <SCSI_ProcessCmd+0x58>)
 801135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011362:	bf00      	nop
 8011364:	080114d7 	.word	0x080114d7
 8011368:	080115e5 	.word	0x080115e5
 801136c:	080115e5 	.word	0x080115e5
 8011370:	080114e9 	.word	0x080114e9
 8011374:	080115e5 	.word	0x080115e5
 8011378:	080115e5 	.word	0x080115e5
 801137c:	080115e5 	.word	0x080115e5
 8011380:	080115e5 	.word	0x080115e5
 8011384:	080115e5 	.word	0x080115e5
 8011388:	080115e5 	.word	0x080115e5
 801138c:	080115e5 	.word	0x080115e5
 8011390:	080115e5 	.word	0x080115e5
 8011394:	080115e5 	.word	0x080115e5
 8011398:	080115e5 	.word	0x080115e5
 801139c:	080115e5 	.word	0x080115e5
 80113a0:	080115e5 	.word	0x080115e5
 80113a4:	080115e5 	.word	0x080115e5
 80113a8:	080115e5 	.word	0x080115e5
 80113ac:	080114fb 	.word	0x080114fb
 80113b0:	080115e5 	.word	0x080115e5
 80113b4:	080115e5 	.word	0x080115e5
 80113b8:	080115e5 	.word	0x080115e5
 80113bc:	080115e5 	.word	0x080115e5
 80113c0:	080115e5 	.word	0x080115e5
 80113c4:	080115e5 	.word	0x080115e5
 80113c8:	080115e5 	.word	0x080115e5
 80113cc:	08011531 	.word	0x08011531
 80113d0:	0801150d 	.word	0x0801150d
 80113d4:	080115e5 	.word	0x080115e5
 80113d8:	080115e5 	.word	0x080115e5
 80113dc:	0801151f 	.word	0x0801151f
 80113e0:	080115e5 	.word	0x080115e5
 80113e4:	080115e5 	.word	0x080115e5
 80113e8:	080115e5 	.word	0x080115e5
 80113ec:	080115e5 	.word	0x080115e5
 80113f0:	08011555 	.word	0x08011555
 80113f4:	080115e5 	.word	0x080115e5
 80113f8:	08011567 	.word	0x08011567
 80113fc:	080115e5 	.word	0x080115e5
 8011400:	080115e5 	.word	0x080115e5
 8011404:	0801158b 	.word	0x0801158b
 8011408:	080115e5 	.word	0x080115e5
 801140c:	080115af 	.word	0x080115af
 8011410:	080115e5 	.word	0x080115e5
 8011414:	080115e5 	.word	0x080115e5
 8011418:	080115e5 	.word	0x080115e5
 801141c:	080115e5 	.word	0x080115e5
 8011420:	080115d3 	.word	0x080115d3
 8011424:	080115e5 	.word	0x080115e5
 8011428:	080115e5 	.word	0x080115e5
 801142c:	080115e5 	.word	0x080115e5
 8011430:	080115e5 	.word	0x080115e5
 8011434:	080115e5 	.word	0x080115e5
 8011438:	080115e5 	.word	0x080115e5
 801143c:	080115e5 	.word	0x080115e5
 8011440:	080115e5 	.word	0x080115e5
 8011444:	080115e5 	.word	0x080115e5
 8011448:	080115e5 	.word	0x080115e5
 801144c:	080115e5 	.word	0x080115e5
 8011450:	080115e5 	.word	0x080115e5
 8011454:	080115e5 	.word	0x080115e5
 8011458:	080115e5 	.word	0x080115e5
 801145c:	080115e5 	.word	0x080115e5
 8011460:	080115e5 	.word	0x080115e5
 8011464:	080115e5 	.word	0x080115e5
 8011468:	080115e5 	.word	0x080115e5
 801146c:	080115e5 	.word	0x080115e5
 8011470:	080115e5 	.word	0x080115e5
 8011474:	080115e5 	.word	0x080115e5
 8011478:	080115e5 	.word	0x080115e5
 801147c:	080115e5 	.word	0x080115e5
 8011480:	080115e5 	.word	0x080115e5
 8011484:	080115e5 	.word	0x080115e5
 8011488:	080115e5 	.word	0x080115e5
 801148c:	080115e5 	.word	0x080115e5
 8011490:	080115e5 	.word	0x080115e5
 8011494:	080115e5 	.word	0x080115e5
 8011498:	080115e5 	.word	0x080115e5
 801149c:	080115e5 	.word	0x080115e5
 80114a0:	080115e5 	.word	0x080115e5
 80114a4:	080115e5 	.word	0x080115e5
 80114a8:	080115e5 	.word	0x080115e5
 80114ac:	080115e5 	.word	0x080115e5
 80114b0:	080115e5 	.word	0x080115e5
 80114b4:	080115e5 	.word	0x080115e5
 80114b8:	080115e5 	.word	0x080115e5
 80114bc:	080115e5 	.word	0x080115e5
 80114c0:	080115e5 	.word	0x080115e5
 80114c4:	080115e5 	.word	0x080115e5
 80114c8:	080115e5 	.word	0x080115e5
 80114cc:	08011543 	.word	0x08011543
 80114d0:	2b9e      	cmp	r3, #158	; 0x9e
 80114d2:	d051      	beq.n	8011578 <SCSI_ProcessCmd+0x26c>
 80114d4:	e086      	b.n	80115e4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80114d6:	7afb      	ldrb	r3, [r7, #11]
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	4619      	mov	r1, r3
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f000 f893 	bl	8011608 <SCSI_TestUnitReady>
 80114e2:	4603      	mov	r3, r0
 80114e4:	75fb      	strb	r3, [r7, #23]
      break;
 80114e6:	e089      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80114e8:	7afb      	ldrb	r3, [r7, #11]
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	4619      	mov	r1, r3
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f000 fb38 	bl	8011b64 <SCSI_RequestSense>
 80114f4:	4603      	mov	r3, r0
 80114f6:	75fb      	strb	r3, [r7, #23]
      break;
 80114f8:	e080      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80114fa:	7afb      	ldrb	r3, [r7, #11]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	4619      	mov	r1, r3
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f000 f8d1 	bl	80116a8 <SCSI_Inquiry>
 8011506:	4603      	mov	r3, r0
 8011508:	75fb      	strb	r3, [r7, #23]
      break;
 801150a:	e077      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801150c:	7afb      	ldrb	r3, [r7, #11]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	4619      	mov	r1, r3
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f000 fbec 	bl	8011cf0 <SCSI_StartStopUnit>
 8011518:	4603      	mov	r3, r0
 801151a:	75fb      	strb	r3, [r7, #23]
      break;
 801151c:	e06e      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801151e:	7afb      	ldrb	r3, [r7, #11]
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	4619      	mov	r1, r3
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f000 fc34 	bl	8011d92 <SCSI_AllowPreventRemovable>
 801152a:	4603      	mov	r3, r0
 801152c:	75fb      	strb	r3, [r7, #23]
      break;
 801152e:	e065      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8011530:	7afb      	ldrb	r3, [r7, #11]
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	4619      	mov	r1, r3
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f000 fabc 	bl	8011ab4 <SCSI_ModeSense6>
 801153c:	4603      	mov	r3, r0
 801153e:	75fb      	strb	r3, [r7, #23]
      break;
 8011540:	e05c      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8011542:	7afb      	ldrb	r3, [r7, #11]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	4619      	mov	r1, r3
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f000 fadf 	bl	8011b0c <SCSI_ModeSense10>
 801154e:	4603      	mov	r3, r0
 8011550:	75fb      	strb	r3, [r7, #23]
      break;
 8011552:	e053      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8011554:	7afb      	ldrb	r3, [r7, #11]
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	4619      	mov	r1, r3
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f000 fa37 	bl	80119ce <SCSI_ReadFormatCapacity>
 8011560:	4603      	mov	r3, r0
 8011562:	75fb      	strb	r3, [r7, #23]
      break;
 8011564:	e04a      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8011566:	7afb      	ldrb	r3, [r7, #11]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	4619      	mov	r1, r3
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f000 f90f 	bl	8011790 <SCSI_ReadCapacity10>
 8011572:	4603      	mov	r3, r0
 8011574:	75fb      	strb	r3, [r7, #23]
      break;
 8011576:	e041      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011578:	7afb      	ldrb	r3, [r7, #11]
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	4619      	mov	r1, r3
 801157e:	68f8      	ldr	r0, [r7, #12]
 8011580:	f000 f97b 	bl	801187a <SCSI_ReadCapacity16>
 8011584:	4603      	mov	r3, r0
 8011586:	75fb      	strb	r3, [r7, #23]
      break;
 8011588:	e038      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801158a:	7afb      	ldrb	r3, [r7, #11]
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	4619      	mov	r1, r3
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f000 fc27 	bl	8011de4 <SCSI_Read10>
 8011596:	4603      	mov	r3, r0
 8011598:	75fb      	strb	r3, [r7, #23]
      break;
 801159a:	e02f      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801159c:	7afb      	ldrb	r3, [r7, #11]
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	4619      	mov	r1, r3
 80115a2:	68f8      	ldr	r0, [r7, #12]
 80115a4:	f000 fcbe 	bl	8011f24 <SCSI_Read12>
 80115a8:	4603      	mov	r3, r0
 80115aa:	75fb      	strb	r3, [r7, #23]
      break;
 80115ac:	e026      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80115ae:	7afb      	ldrb	r3, [r7, #11]
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	4619      	mov	r1, r3
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f000 fd61 	bl	801207c <SCSI_Write10>
 80115ba:	4603      	mov	r3, r0
 80115bc:	75fb      	strb	r3, [r7, #23]
      break;
 80115be:	e01d      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80115c0:	7afb      	ldrb	r3, [r7, #11]
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	4619      	mov	r1, r3
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f000 fe20 	bl	801220c <SCSI_Write12>
 80115cc:	4603      	mov	r3, r0
 80115ce:	75fb      	strb	r3, [r7, #23]
      break;
 80115d0:	e014      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80115d2:	7afb      	ldrb	r3, [r7, #11]
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	4619      	mov	r1, r3
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f000 feef 	bl	80123bc <SCSI_Verify10>
 80115de:	4603      	mov	r3, r0
 80115e0:	75fb      	strb	r3, [r7, #23]
      break;
 80115e2:	e00b      	b.n	80115fc <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80115e4:	7af9      	ldrb	r1, [r7, #11]
 80115e6:	2320      	movs	r3, #32
 80115e8:	2205      	movs	r2, #5
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f000 fb39 	bl	8011c62 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	2202      	movs	r2, #2
 80115f4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80115f6:	23ff      	movs	r3, #255	; 0xff
 80115f8:	75fb      	strb	r3, [r7, #23]
      break;
 80115fa:	bf00      	nop
  }

  return ret;
 80115fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b086      	sub	sp, #24
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	460b      	mov	r3, r1
 8011612:	607a      	str	r2, [r7, #4]
 8011614:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801161c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d102      	bne.n	801162a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8011624:	f04f 33ff 	mov.w	r3, #4294967295
 8011628:	e03a      	b.n	80116a0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00a      	beq.n	801164a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801163a:	2320      	movs	r3, #32
 801163c:	2205      	movs	r2, #5
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f000 fb0f 	bl	8011c62 <SCSI_SenseCode>

    return -1;
 8011644:	f04f 33ff 	mov.w	r3, #4294967295
 8011648:	e02a      	b.n	80116a0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011650:	2b02      	cmp	r3, #2
 8011652:	d10b      	bne.n	801166c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011654:	7af9      	ldrb	r1, [r7, #11]
 8011656:	233a      	movs	r3, #58	; 0x3a
 8011658:	2202      	movs	r2, #2
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f000 fb01 	bl	8011c62 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	2205      	movs	r2, #5
 8011664:	721a      	strb	r2, [r3, #8]
    return -1;
 8011666:	f04f 33ff 	mov.w	r3, #4294967295
 801166a:	e019      	b.n	80116a0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	7afa      	ldrb	r2, [r7, #11]
 8011676:	4610      	mov	r0, r2
 8011678:	4798      	blx	r3
 801167a:	4603      	mov	r3, r0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00b      	beq.n	8011698 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011680:	7af9      	ldrb	r1, [r7, #11]
 8011682:	233a      	movs	r3, #58	; 0x3a
 8011684:	2202      	movs	r2, #2
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f000 faeb 	bl	8011c62 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	2205      	movs	r2, #5
 8011690:	721a      	strb	r2, [r3, #8]

    return -1;
 8011692:	f04f 33ff 	mov.w	r3, #4294967295
 8011696:	e003      	b.n	80116a0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	2200      	movs	r2, #0
 801169c:	60da      	str	r2, [r3, #12]

  return 0;
 801169e:	2300      	movs	r3, #0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3718      	adds	r7, #24
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b088      	sub	sp, #32
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	460b      	mov	r3, r1
 80116b2:	607a      	str	r2, [r7, #4]
 80116b4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80116bc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80116be:	69bb      	ldr	r3, [r7, #24]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d102      	bne.n	80116ca <SCSI_Inquiry+0x22>
  {
    return -1;
 80116c4:	f04f 33ff 	mov.w	r3, #4294967295
 80116c8:	e05a      	b.n	8011780 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d10a      	bne.n	80116ea <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80116da:	2320      	movs	r3, #32
 80116dc:	2205      	movs	r2, #5
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f000 fabf 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 80116e4:	f04f 33ff 	mov.w	r3, #4294967295
 80116e8:	e04a      	b.n	8011780 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	3301      	adds	r3, #1
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d020      	beq.n	801173a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3302      	adds	r3, #2
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d105      	bne.n	801170e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011702:	2206      	movs	r2, #6
 8011704:	4920      	ldr	r1, [pc, #128]	; (8011788 <SCSI_Inquiry+0xe0>)
 8011706:	69b8      	ldr	r0, [r7, #24]
 8011708:	f000 ffc2 	bl	8012690 <SCSI_UpdateBotData>
 801170c:	e037      	b.n	801177e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	3302      	adds	r3, #2
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	2b80      	cmp	r3, #128	; 0x80
 8011716:	d105      	bne.n	8011724 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8011718:	2208      	movs	r2, #8
 801171a:	491c      	ldr	r1, [pc, #112]	; (801178c <SCSI_Inquiry+0xe4>)
 801171c:	69b8      	ldr	r0, [r7, #24]
 801171e:	f000 ffb7 	bl	8012690 <SCSI_UpdateBotData>
 8011722:	e02c      	b.n	801177e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801172a:	2324      	movs	r3, #36	; 0x24
 801172c:	2205      	movs	r2, #5
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f000 fa97 	bl	8011c62 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8011734:	f04f 33ff 	mov.w	r3, #4294967295
 8011738:	e022      	b.n	8011780 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData_MSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8011740:	69d9      	ldr	r1, [r3, #28]
 8011742:	7afa      	ldrb	r2, [r7, #11]
 8011744:	4613      	mov	r3, r2
 8011746:	00db      	lsls	r3, r3, #3
 8011748:	4413      	add	r3, r2
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	440b      	add	r3, r1
 801174e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	3304      	adds	r3, #4
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	b29b      	uxth	r3, r3
 8011758:	3305      	adds	r3, #5
 801175a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	3304      	adds	r3, #4
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	b29b      	uxth	r3, r3
 8011764:	8bfa      	ldrh	r2, [r7, #30]
 8011766:	429a      	cmp	r2, r3
 8011768:	d303      	bcc.n	8011772 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	3304      	adds	r3, #4
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011772:	8bfb      	ldrh	r3, [r7, #30]
 8011774:	461a      	mov	r2, r3
 8011776:	6979      	ldr	r1, [r7, #20]
 8011778:	69b8      	ldr	r0, [r7, #24]
 801177a:	f000 ff89 	bl	8012690 <SCSI_UpdateBotData>
  }

  return 0;
 801177e:	2300      	movs	r3, #0
}
 8011780:	4618      	mov	r0, r3
 8011782:	3720      	adds	r7, #32
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}
 8011788:	20000358 	.word	0x20000358
 801178c:	20000360 	.word	0x20000360

08011790 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b086      	sub	sp, #24
 8011794:	af00      	add	r7, sp, #0
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	460b      	mov	r3, r1
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80117a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d102      	bne.n	80117b2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80117ac:	f04f 33ff 	mov.w	r3, #4294967295
 80117b0:	e05f      	b.n	8011872 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	697a      	ldr	r2, [r7, #20]
 80117bc:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80117c0:	697a      	ldr	r2, [r7, #20]
 80117c2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80117c6:	7af8      	ldrb	r0, [r7, #11]
 80117c8:	4798      	blx	r3
 80117ca:	4603      	mov	r3, r0
 80117cc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80117ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d104      	bne.n	80117e0 <SCSI_ReadCapacity10+0x50>
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80117dc:	2b02      	cmp	r3, #2
 80117de:	d108      	bne.n	80117f2 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80117e0:	7af9      	ldrb	r1, [r7, #11]
 80117e2:	233a      	movs	r3, #58	; 0x3a
 80117e4:	2202      	movs	r2, #2
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f000 fa3b 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295
 80117f0:	e03f      	b.n	8011872 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80117f8:	3b01      	subs	r3, #1
 80117fa:	0e1b      	lsrs	r3, r3, #24
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011808:	3b01      	subs	r3, #1
 801180a:	0c1b      	lsrs	r3, r3, #16
 801180c:	b2da      	uxtb	r2, r3
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011818:	3b01      	subs	r3, #1
 801181a:	0a1b      	lsrs	r3, r3, #8
 801181c:	b2da      	uxtb	r2, r3
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011828:	b2db      	uxtb	r3, r3
 801182a:	3b01      	subs	r3, #1
 801182c:	b2da      	uxtb	r2, r3
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011838:	161b      	asrs	r3, r3, #24
 801183a:	b2da      	uxtb	r2, r3
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011846:	141b      	asrs	r3, r3, #16
 8011848:	b2da      	uxtb	r2, r3
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011854:	0a1b      	lsrs	r3, r3, #8
 8011856:	b29b      	uxth	r3, r3
 8011858:	b2da      	uxtb	r2, r3
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011864:	b2da      	uxtb	r2, r3
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2208      	movs	r2, #8
 801186e:	60da      	str	r2, [r3, #12]

  return 0;
 8011870:	2300      	movs	r3, #0

}
 8011872:	4618      	mov	r0, r3
 8011874:	3718      	adds	r7, #24
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801187a:	b580      	push	{r7, lr}
 801187c:	b088      	sub	sp, #32
 801187e:	af00      	add	r7, sp, #0
 8011880:	60f8      	str	r0, [r7, #12]
 8011882:	460b      	mov	r3, r1
 8011884:	607a      	str	r2, [r7, #4]
 8011886:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801188e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d102      	bne.n	801189c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8011896:	f04f 33ff 	mov.w	r3, #4294967295
 801189a:	e094      	b.n	80119c6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	69ba      	ldr	r2, [r7, #24]
 80118a6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80118aa:	69ba      	ldr	r2, [r7, #24]
 80118ac:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80118b0:	7af8      	ldrb	r0, [r7, #11]
 80118b2:	4798      	blx	r3
 80118b4:	4603      	mov	r3, r0
 80118b6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80118b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d104      	bne.n	80118ca <SCSI_ReadCapacity16+0x50>
 80118c0:	69bb      	ldr	r3, [r7, #24]
 80118c2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d108      	bne.n	80118dc <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80118ca:	7af9      	ldrb	r1, [r7, #11]
 80118cc:	233a      	movs	r3, #58	; 0x3a
 80118ce:	2202      	movs	r2, #2
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f000 f9c6 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 80118d6:	f04f 33ff 	mov.w	r3, #4294967295
 80118da:	e074      	b.n	80119c6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	330a      	adds	r3, #10
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	330b      	adds	r3, #11
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80118ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	330c      	adds	r3, #12
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80118f6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	320d      	adds	r2, #13
 80118fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80118fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011904:	2300      	movs	r3, #0
 8011906:	77fb      	strb	r3, [r7, #31]
 8011908:	e007      	b.n	801191a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801190a:	7ffb      	ldrb	r3, [r7, #31]
 801190c:	69ba      	ldr	r2, [r7, #24]
 801190e:	4413      	add	r3, r2
 8011910:	2200      	movs	r2, #0
 8011912:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011914:	7ffb      	ldrb	r3, [r7, #31]
 8011916:	3301      	adds	r3, #1
 8011918:	77fb      	strb	r3, [r7, #31]
 801191a:	7ffa      	ldrb	r2, [r7, #31]
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	429a      	cmp	r2, r3
 8011922:	d3f2      	bcc.n	801190a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801192a:	3b01      	subs	r3, #1
 801192c:	0e1b      	lsrs	r3, r3, #24
 801192e:	b2da      	uxtb	r2, r3
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801193a:	3b01      	subs	r3, #1
 801193c:	0c1b      	lsrs	r3, r3, #16
 801193e:	b2da      	uxtb	r2, r3
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801194a:	3b01      	subs	r3, #1
 801194c:	0a1b      	lsrs	r3, r3, #8
 801194e:	b2da      	uxtb	r2, r3
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801195a:	b2db      	uxtb	r3, r3
 801195c:	3b01      	subs	r3, #1
 801195e:	b2da      	uxtb	r2, r3
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801196a:	161b      	asrs	r3, r3, #24
 801196c:	b2da      	uxtb	r2, r3
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011978:	141b      	asrs	r3, r3, #16
 801197a:	b2da      	uxtb	r2, r3
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011980:	69bb      	ldr	r3, [r7, #24]
 8011982:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011986:	0a1b      	lsrs	r3, r3, #8
 8011988:	b29b      	uxth	r3, r3
 801198a:	b2da      	uxtb	r2, r3
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011996:	b2da      	uxtb	r2, r3
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	330a      	adds	r3, #10
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	330b      	adds	r3, #11
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80119ac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	330c      	adds	r3, #12
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80119b6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	320d      	adds	r2, #13
 80119bc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80119be:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	60da      	str	r2, [r3, #12]

  return 0;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3720      	adds	r7, #32
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b088      	sub	sp, #32
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	60f8      	str	r0, [r7, #12]
 80119d6:	460b      	mov	r3, r1
 80119d8:	607a      	str	r2, [r7, #4]
 80119da:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80119e2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d102      	bne.n	80119f0 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80119ea:	f04f 33ff 	mov.w	r3, #4294967295
 80119ee:	e05c      	b.n	8011aaa <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	f107 0214 	add.w	r2, r7, #20
 80119fc:	f107 0110 	add.w	r1, r7, #16
 8011a00:	7af8      	ldrb	r0, [r7, #11]
 8011a02:	4798      	blx	r3
 8011a04:	4603      	mov	r3, r0
 8011a06:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d104      	bne.n	8011a1a <SCSI_ReadFormatCapacity+0x4c>
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011a16:	2b02      	cmp	r3, #2
 8011a18:	d108      	bne.n	8011a2c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011a1a:	7af9      	ldrb	r1, [r7, #11]
 8011a1c:	233a      	movs	r3, #58	; 0x3a
 8011a1e:	2202      	movs	r2, #2
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f000 f91e 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 8011a26:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2a:	e03e      	b.n	8011aaa <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	83fb      	strh	r3, [r7, #30]
 8011a30:	e007      	b.n	8011a42 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8011a32:	8bfb      	ldrh	r3, [r7, #30]
 8011a34:	69ba      	ldr	r2, [r7, #24]
 8011a36:	4413      	add	r3, r2
 8011a38:	2200      	movs	r2, #0
 8011a3a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8011a3c:	8bfb      	ldrh	r3, [r7, #30]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	83fb      	strh	r3, [r7, #30]
 8011a42:	8bfb      	ldrh	r3, [r7, #30]
 8011a44:	2b0b      	cmp	r3, #11
 8011a46:	d9f4      	bls.n	8011a32 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8011a48:	69bb      	ldr	r3, [r7, #24]
 8011a4a:	2208      	movs	r2, #8
 8011a4c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	0e1b      	lsrs	r3, r3, #24
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	0c1b      	lsrs	r3, r3, #16
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	0a1b      	lsrs	r3, r3, #8
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	b2db      	uxtb	r3, r3
 8011a76:	3b01      	subs	r3, #1
 8011a78:	b2da      	uxtb	r2, r3
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	2202      	movs	r2, #2
 8011a82:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011a84:	8abb      	ldrh	r3, [r7, #20]
 8011a86:	141b      	asrs	r3, r3, #16
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8011a8e:	8abb      	ldrh	r3, [r7, #20]
 8011a90:	0a1b      	lsrs	r3, r3, #8
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8011a9a:	8abb      	ldrh	r3, [r7, #20]
 8011a9c:	b2da      	uxtb	r2, r3
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	220c      	movs	r2, #12
 8011aa6:	60da      	str	r2, [r3, #12]

  return 0;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3720      	adds	r7, #32
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
	...

08011ab4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	460b      	mov	r3, r1
 8011abe:	607a      	str	r2, [r7, #4]
 8011ac0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011ac8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011aca:	2317      	movs	r3, #23
 8011acc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d102      	bne.n	8011ada <SCSI_ModeSense6+0x26>
  {
    return -1;
 8011ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ad8:	e011      	b.n	8011afe <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	3304      	adds	r3, #4
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	8afa      	ldrh	r2, [r7, #22]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d303      	bcc.n	8011af0 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	3304      	adds	r3, #4
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011af0:	8afb      	ldrh	r3, [r7, #22]
 8011af2:	461a      	mov	r2, r3
 8011af4:	4904      	ldr	r1, [pc, #16]	; (8011b08 <SCSI_ModeSense6+0x54>)
 8011af6:	6938      	ldr	r0, [r7, #16]
 8011af8:	f000 fdca 	bl	8012690 <SCSI_UpdateBotData>

  return 0;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	20000368 	.word	0x20000368

08011b0c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	460b      	mov	r3, r1
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011b20:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8011b22:	231b      	movs	r3, #27
 8011b24:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d102      	bne.n	8011b32 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8011b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b30:	e011      	b.n	8011b56 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	3308      	adds	r3, #8
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	8afa      	ldrh	r2, [r7, #22]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d303      	bcc.n	8011b48 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	3308      	adds	r3, #8
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8011b48:	8afb      	ldrh	r3, [r7, #22]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	4904      	ldr	r1, [pc, #16]	; (8011b60 <SCSI_ModeSense10+0x54>)
 8011b4e:	6938      	ldr	r0, [r7, #16]
 8011b50:	f000 fd9e 	bl	8012690 <SCSI_UpdateBotData>

  return 0;
 8011b54:	2300      	movs	r3, #0
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3718      	adds	r7, #24
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	20000380 	.word	0x20000380

08011b64 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b086      	sub	sp, #24
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	607a      	str	r2, [r7, #4]
 8011b70:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011b78:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d102      	bne.n	8011b86 <SCSI_RequestSense+0x22>
  {
    return -1;
 8011b80:	f04f 33ff 	mov.w	r3, #4294967295
 8011b84:	e069      	b.n	8011c5a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10a      	bne.n	8011ba6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b96:	2320      	movs	r3, #32
 8011b98:	2205      	movs	r2, #5
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f000 f861 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 8011ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba4:	e059      	b.n	8011c5a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	75fb      	strb	r3, [r7, #23]
 8011baa:	e007      	b.n	8011bbc <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8011bac:	7dfb      	ldrb	r3, [r7, #23]
 8011bae:	693a      	ldr	r2, [r7, #16]
 8011bb0:	4413      	add	r3, r2
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011bb6:	7dfb      	ldrb	r3, [r7, #23]
 8011bb8:	3301      	adds	r3, #1
 8011bba:	75fb      	strb	r3, [r7, #23]
 8011bbc:	7dfb      	ldrb	r3, [r7, #23]
 8011bbe:	2b11      	cmp	r3, #17
 8011bc0:	d9f4      	bls.n	8011bac <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	2270      	movs	r2, #112	; 0x70
 8011bc6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	220c      	movs	r2, #12
 8011bcc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d02e      	beq.n	8011c3c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011be4:	461a      	mov	r2, r3
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	3248      	adds	r2, #72	; 0x48
 8011bea:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011bf8:	693a      	ldr	r2, [r7, #16]
 8011bfa:	3348      	adds	r3, #72	; 0x48
 8011bfc:	00db      	lsls	r3, r3, #3
 8011bfe:	4413      	add	r3, r2
 8011c00:	791a      	ldrb	r2, [r3, #4]
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011c0c:	693a      	ldr	r2, [r7, #16]
 8011c0e:	3348      	adds	r3, #72	; 0x48
 8011c10:	00db      	lsls	r3, r3, #3
 8011c12:	4413      	add	r3, r2
 8011c14:	795a      	ldrb	r2, [r3, #5]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011c20:	3301      	adds	r3, #1
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011c30:	2b04      	cmp	r3, #4
 8011c32:	d103      	bne.n	8011c3c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2200      	movs	r2, #0
 8011c38:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	2212      	movs	r2, #18
 8011c40:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	3304      	adds	r3, #4
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	2b12      	cmp	r3, #18
 8011c4a:	d805      	bhi.n	8011c58 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	461a      	mov	r2, r3
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3718      	adds	r7, #24
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8011c62:	b480      	push	{r7}
 8011c64:	b085      	sub	sp, #20
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
 8011c6a:	4608      	mov	r0, r1
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	461a      	mov	r2, r3
 8011c70:	4603      	mov	r3, r0
 8011c72:	70fb      	strb	r3, [r7, #3]
 8011c74:	460b      	mov	r3, r1
 8011c76:	70bb      	strb	r3, [r7, #2]
 8011c78:	4613      	mov	r3, r2
 8011c7a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011c82:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d02c      	beq.n	8011ce4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011c90:	461a      	mov	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	3248      	adds	r2, #72	; 0x48
 8011c96:	78b9      	ldrb	r1, [r7, #2]
 8011c98:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	3348      	adds	r3, #72	; 0x48
 8011ca6:	00db      	lsls	r3, r3, #3
 8011ca8:	4413      	add	r3, r2
 8011caa:	787a      	ldrb	r2, [r7, #1]
 8011cac:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	3348      	adds	r3, #72	; 0x48
 8011cb8:	00db      	lsls	r3, r3, #3
 8011cba:	4413      	add	r3, r2
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011cd6:	2b04      	cmp	r3, #4
 8011cd8:	d105      	bne.n	8011ce6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8011ce2:	e000      	b.n	8011ce6 <SCSI_SenseCode+0x84>
    return;
 8011ce4:	bf00      	nop
  }
}
 8011ce6:	3714      	adds	r7, #20
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b086      	sub	sp, #24
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	607a      	str	r2, [r7, #4]
 8011cfc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011d04:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d102      	bne.n	8011d12 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8011d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d10:	e03b      	b.n	8011d8a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d10f      	bne.n	8011d3c <SCSI_StartStopUnit+0x4c>
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	3304      	adds	r3, #4
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	f003 0303 	and.w	r3, r3, #3
 8011d26:	2b02      	cmp	r3, #2
 8011d28:	d108      	bne.n	8011d3c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011d2a:	7af9      	ldrb	r1, [r7, #11]
 8011d2c:	2324      	movs	r3, #36	; 0x24
 8011d2e:	2205      	movs	r2, #5
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f7ff ff96 	bl	8011c62 <SCSI_SenseCode>

    return -1;
 8011d36:	f04f 33ff 	mov.w	r3, #4294967295
 8011d3a:	e026      	b.n	8011d8a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	3304      	adds	r3, #4
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	f003 0303 	and.w	r3, r3, #3
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d104      	bne.n	8011d54 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011d52:	e016      	b.n	8011d82 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3304      	adds	r3, #4
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	f003 0303 	and.w	r3, r3, #3
 8011d5e:	2b02      	cmp	r3, #2
 8011d60:	d104      	bne.n	8011d6c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	2202      	movs	r2, #2
 8011d66:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011d6a:	e00a      	b.n	8011d82 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3304      	adds	r3, #4
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	f003 0303 	and.w	r3, r3, #3
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d103      	bne.n	8011d82 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	2200      	movs	r2, #0
 8011d86:	60da      	str	r2, [r3, #12]

  return 0;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3718      	adds	r7, #24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011d92:	b480      	push	{r7}
 8011d94:	b087      	sub	sp, #28
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	607a      	str	r2, [r7, #4]
 8011d9e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011da6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d102      	bne.n	8011db4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8011dae:	f04f 33ff 	mov.w	r3, #4294967295
 8011db2:	e011      	b.n	8011dd8 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	3304      	adds	r3, #4
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d104      	bne.n	8011dc8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011dc6:	e003      	b.n	8011dd0 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	60da      	str	r2, [r3, #12]

  return 0;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	371c      	adds	r7, #28
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr

08011de4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	460b      	mov	r3, r1
 8011dee:	607a      	str	r2, [r7, #4]
 8011df0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011df8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d102      	bne.n	8011e06 <SCSI_Read10+0x22>
  {
    return -1;
 8011e00:	f04f 33ff 	mov.w	r3, #4294967295
 8011e04:	e08a      	b.n	8011f1c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	7a1b      	ldrb	r3, [r3, #8]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d17c      	bne.n	8011f08 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011e14:	b25b      	sxtb	r3, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	db0a      	blt.n	8011e30 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011e20:	2320      	movs	r3, #32
 8011e22:	2205      	movs	r2, #5
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f7ff ff1c 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8011e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e2e:	e075      	b.n	8011f1c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	d108      	bne.n	8011e4c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011e3a:	7af9      	ldrb	r1, [r7, #11]
 8011e3c:	233a      	movs	r3, #58	; 0x3a
 8011e3e:	2202      	movs	r2, #2
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	f7ff ff0e 	bl	8011c62 <SCSI_SenseCode>

      return -1;
 8011e46:	f04f 33ff 	mov.w	r3, #4294967295
 8011e4a:	e067      	b.n	8011f1c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8011e52:	689b      	ldr	r3, [r3, #8]
 8011e54:	7afa      	ldrb	r2, [r7, #11]
 8011e56:	4610      	mov	r0, r2
 8011e58:	4798      	blx	r3
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d008      	beq.n	8011e72 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011e60:	7af9      	ldrb	r1, [r7, #11]
 8011e62:	233a      	movs	r3, #58	; 0x3a
 8011e64:	2202      	movs	r2, #2
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f7ff fefb 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e70:	e054      	b.n	8011f1c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	3302      	adds	r3, #2
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	3303      	adds	r3, #3
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011e82:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	3304      	adds	r3, #4
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011e8c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	3205      	adds	r2, #5
 8011e92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011e94:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	3307      	adds	r3, #7
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	021b      	lsls	r3, r3, #8
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	3208      	adds	r2, #8
 8011ea8:	7812      	ldrb	r2, [r2, #0]
 8011eaa:	431a      	orrs	r2, r3
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011ebe:	7af9      	ldrb	r1, [r7, #11]
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f000 fab4 	bl	801242e <SCSI_CheckAddressRange>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	da02      	bge.n	8011ed2 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed0:	e024      	b.n	8011f1c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011ede:	6979      	ldr	r1, [r7, #20]
 8011ee0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8011ee4:	fb01 f303 	mul.w	r3, r1, r3
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d00a      	beq.n	8011f02 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011ef2:	2320      	movs	r3, #32
 8011ef4:	2205      	movs	r2, #5
 8011ef6:	68f8      	ldr	r0, [r7, #12]
 8011ef8:	f7ff feb3 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8011efc:	f04f 33ff 	mov.w	r3, #4294967295
 8011f00:	e00c      	b.n	8011f1c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	2202      	movs	r2, #2
 8011f06:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f0e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011f10:	7afb      	ldrb	r3, [r7, #11]
 8011f12:	4619      	mov	r1, r3
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f000 fab3 	bl	8012480 <SCSI_ProcessRead>
 8011f1a:	4603      	mov	r3, r0
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3718      	adds	r7, #24
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	460b      	mov	r3, r1
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011f38:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d102      	bne.n	8011f46 <SCSI_Read12+0x22>
  {
    return -1;
 8011f40:	f04f 33ff 	mov.w	r3, #4294967295
 8011f44:	e095      	b.n	8012072 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	7a1b      	ldrb	r3, [r3, #8]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f040 8087 	bne.w	801205e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011f56:	b25b      	sxtb	r3, r3
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	db0a      	blt.n	8011f72 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011f62:	2320      	movs	r3, #32
 8011f64:	2205      	movs	r2, #5
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f7ff fe7b 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8011f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f70:	e07f      	b.n	8012072 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011f78:	2b02      	cmp	r3, #2
 8011f7a:	d108      	bne.n	8011f8e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011f7c:	7af9      	ldrb	r1, [r7, #11]
 8011f7e:	233a      	movs	r3, #58	; 0x3a
 8011f80:	2202      	movs	r2, #2
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f7ff fe6d 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8011f88:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8c:	e071      	b.n	8012072 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	7afa      	ldrb	r2, [r7, #11]
 8011f98:	4610      	mov	r0, r2
 8011f9a:	4798      	blx	r3
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d008      	beq.n	8011fb4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011fa2:	7af9      	ldrb	r1, [r7, #11]
 8011fa4:	233a      	movs	r3, #58	; 0x3a
 8011fa6:	2202      	movs	r2, #2
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f7ff fe5a 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8011fae:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb2:	e05e      	b.n	8012072 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	3302      	adds	r3, #2
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	3303      	adds	r3, #3
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011fc4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	3304      	adds	r3, #4
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011fce:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	3205      	adds	r2, #5
 8011fd4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011fd6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3306      	adds	r3, #6
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	3307      	adds	r3, #7
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011fee:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	3308      	adds	r3, #8
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011ff8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	3209      	adds	r2, #9
 8011ffe:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012000:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012014:	7af9      	ldrb	r1, [r7, #11]
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f000 fa09 	bl	801242e <SCSI_CheckAddressRange>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	da02      	bge.n	8012028 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012022:	f04f 33ff 	mov.w	r3, #4294967295
 8012026:	e024      	b.n	8012072 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012034:	6979      	ldr	r1, [r7, #20]
 8012036:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801203a:	fb01 f303 	mul.w	r3, r1, r3
 801203e:	429a      	cmp	r2, r3
 8012040:	d00a      	beq.n	8012058 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012048:	2320      	movs	r3, #32
 801204a:	2205      	movs	r2, #5
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f7ff fe08 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
 8012056:	e00c      	b.n	8012072 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	2202      	movs	r2, #2
 801205c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012064:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012066:	7afb      	ldrb	r3, [r7, #11]
 8012068:	4619      	mov	r1, r3
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f000 fa08 	bl	8012480 <SCSI_ProcessRead>
 8012070:	4603      	mov	r3, r0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3718      	adds	r7, #24
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
	...

0801207c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b086      	sub	sp, #24
 8012080:	af00      	add	r7, sp, #0
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	460b      	mov	r3, r1
 8012086:	607a      	str	r2, [r7, #4]
 8012088:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012090:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d102      	bne.n	801209e <SCSI_Write10+0x22>
  {
    return -1;
 8012098:	f04f 33ff 	mov.w	r3, #4294967295
 801209c:	e0b0      	b.n	8012200 <SCSI_Write10+0x184>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	7a1b      	ldrb	r3, [r3, #8]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f040 80a6 	bne.w	80121f4 <SCSI_Write10+0x178>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d10a      	bne.n	80120c8 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80120b8:	2320      	movs	r3, #32
 80120ba:	2205      	movs	r2, #5
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f7ff fdd0 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 80120c2:	f04f 33ff 	mov.w	r3, #4294967295
 80120c6:	e09b      	b.n	8012200 <SCSI_Write10+0x184>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80120ce:	b25b      	sxtb	r3, r3
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	da0a      	bge.n	80120ea <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80120da:	2320      	movs	r3, #32
 80120dc:	2205      	movs	r2, #5
 80120de:	68f8      	ldr	r0, [r7, #12]
 80120e0:	f7ff fdbf 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 80120e4:	f04f 33ff 	mov.w	r3, #4294967295
 80120e8:	e08a      	b.n	8012200 <SCSI_Write10+0x184>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80120f0:	689b      	ldr	r3, [r3, #8]
 80120f2:	7afa      	ldrb	r2, [r7, #11]
 80120f4:	4610      	mov	r0, r2
 80120f6:	4798      	blx	r3
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d008      	beq.n	8012110 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80120fe:	7af9      	ldrb	r1, [r7, #11]
 8012100:	233a      	movs	r3, #58	; 0x3a
 8012102:	2202      	movs	r2, #2
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f7ff fdac 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 801210a:	f04f 33ff 	mov.w	r3, #4294967295
 801210e:	e077      	b.n	8012200 <SCSI_Write10+0x184>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	4610      	mov	r0, r2
 801211c:	4798      	blx	r3
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d008      	beq.n	8012136 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012124:	7af9      	ldrb	r1, [r7, #11]
 8012126:	2327      	movs	r3, #39	; 0x27
 8012128:	2202      	movs	r2, #2
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	f7ff fd99 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8012130:	f04f 33ff 	mov.w	r3, #4294967295
 8012134:	e064      	b.n	8012200 <SCSI_Write10+0x184>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	3302      	adds	r3, #2
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	3303      	adds	r3, #3
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012146:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	3304      	adds	r3, #4
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012150:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	3205      	adds	r2, #5
 8012156:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012158:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	3307      	adds	r3, #7
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	3208      	adds	r2, #8
 801216c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801216e:	431a      	orrs	r2, r3
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012182:	7af9      	ldrb	r1, [r7, #11]
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f000 f952 	bl	801242e <SCSI_CheckAddressRange>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	da02      	bge.n	8012196 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012190:	f04f 33ff 	mov.w	r3, #4294967295
 8012194:	e034      	b.n	8012200 <SCSI_Write10+0x184>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801219c:	697a      	ldr	r2, [r7, #20]
 801219e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80121a2:	fb02 f303 	mul.w	r3, r2, r3
 80121a6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80121ae:	693a      	ldr	r2, [r7, #16]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d00a      	beq.n	80121ca <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80121ba:	2320      	movs	r3, #32
 80121bc:	2205      	movs	r2, #5
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7ff fd4f 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 80121c4:	f04f 33ff 	mov.w	r3, #4294967295
 80121c8:	e01a      	b.n	8012200 <SCSI_Write10+0x184>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80121d0:	bf28      	it	cs
 80121d2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80121d6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	2201      	movs	r2, #1
 80121dc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 80121de:	4b0a      	ldr	r3, [pc, #40]	; (8012208 <SCSI_Write10+0x18c>)
 80121e0:	7819      	ldrb	r1, [r3, #0]
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	f103 0210 	add.w	r2, r3, #16
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f001 feaf 	bl	8013f4e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80121f0:	2300      	movs	r3, #0
 80121f2:	e005      	b.n	8012200 <SCSI_Write10+0x184>
    return SCSI_ProcessWrite(pdev, lun);
 80121f4:	7afb      	ldrb	r3, [r7, #11]
 80121f6:	4619      	mov	r1, r3
 80121f8:	68f8      	ldr	r0, [r7, #12]
 80121fa:	f000 f9bd 	bl	8012578 <SCSI_ProcessWrite>
 80121fe:	4603      	mov	r3, r0
}
 8012200:	4618      	mov	r0, r3
 8012202:	3718      	adds	r7, #24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	200002ac 	.word	0x200002ac

0801220c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b086      	sub	sp, #24
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	460b      	mov	r3, r1
 8012216:	607a      	str	r2, [r7, #4]
 8012218:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012220:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d102      	bne.n	801222e <SCSI_Write12+0x22>
  {
    return -1;
 8012228:	f04f 33ff 	mov.w	r3, #4294967295
 801222c:	e0c0      	b.n	80123b0 <SCSI_Write12+0x1a4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	7a1b      	ldrb	r3, [r3, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	f040 80b6 	bne.w	80123a4 <SCSI_Write12+0x198>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10a      	bne.n	8012258 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012248:	2320      	movs	r3, #32
 801224a:	2205      	movs	r2, #5
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	f7ff fd08 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8012252:	f04f 33ff 	mov.w	r3, #4294967295
 8012256:	e0ab      	b.n	80123b0 <SCSI_Write12+0x1a4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801225e:	b25b      	sxtb	r3, r3
 8012260:	2b00      	cmp	r3, #0
 8012262:	da0a      	bge.n	801227a <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801226a:	2320      	movs	r3, #32
 801226c:	2205      	movs	r2, #5
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f7ff fcf7 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8012274:	f04f 33ff 	mov.w	r3, #4294967295
 8012278:	e09a      	b.n	80123b0 <SCSI_Write12+0x1a4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8012280:	689b      	ldr	r3, [r3, #8]
 8012282:	7afa      	ldrb	r2, [r7, #11]
 8012284:	4610      	mov	r0, r2
 8012286:	4798      	blx	r3
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00b      	beq.n	80122a6 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801228e:	7af9      	ldrb	r1, [r7, #11]
 8012290:	233a      	movs	r3, #58	; 0x3a
 8012292:	2202      	movs	r2, #2
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f7ff fce4 	bl	8011c62 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	2205      	movs	r2, #5
 801229e:	721a      	strb	r2, [r3, #8]
      return -1;
 80122a0:	f04f 33ff 	mov.w	r3, #4294967295
 80122a4:	e084      	b.n	80123b0 <SCSI_Write12+0x1a4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	7afa      	ldrb	r2, [r7, #11]
 80122b0:	4610      	mov	r0, r2
 80122b2:	4798      	blx	r3
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00b      	beq.n	80122d2 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80122ba:	7af9      	ldrb	r1, [r7, #11]
 80122bc:	2327      	movs	r3, #39	; 0x27
 80122be:	2202      	movs	r2, #2
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f7ff fcce 	bl	8011c62 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	2205      	movs	r2, #5
 80122ca:	721a      	strb	r2, [r3, #8]
      return -1;
 80122cc:	f04f 33ff 	mov.w	r3, #4294967295
 80122d0:	e06e      	b.n	80123b0 <SCSI_Write12+0x1a4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	3302      	adds	r3, #2
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	3303      	adds	r3, #3
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80122e2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	3304      	adds	r3, #4
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80122ec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	3205      	adds	r2, #5
 80122f2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80122f4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3306      	adds	r3, #6
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3307      	adds	r3, #7
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801230c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	3308      	adds	r3, #8
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012316:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	3209      	adds	r2, #9
 801231c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801231e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012332:	7af9      	ldrb	r1, [r7, #11]
 8012334:	68f8      	ldr	r0, [r7, #12]
 8012336:	f000 f87a 	bl	801242e <SCSI_CheckAddressRange>
 801233a:	4603      	mov	r3, r0
 801233c:	2b00      	cmp	r3, #0
 801233e:	da02      	bge.n	8012346 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012340:	f04f 33ff 	mov.w	r3, #4294967295
 8012344:	e034      	b.n	80123b0 <SCSI_Write12+0x1a4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801234c:	697a      	ldr	r2, [r7, #20]
 801234e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012352:	fb02 f303 	mul.w	r3, r2, r3
 8012356:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801235e:	693a      	ldr	r2, [r7, #16]
 8012360:	429a      	cmp	r2, r3
 8012362:	d00a      	beq.n	801237a <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801236a:	2320      	movs	r3, #32
 801236c:	2205      	movs	r2, #5
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7ff fc77 	bl	8011c62 <SCSI_SenseCode>
      return -1;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295
 8012378:	e01a      	b.n	80123b0 <SCSI_Write12+0x1a4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012380:	bf28      	it	cs
 8012382:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012386:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	2201      	movs	r2, #1
 801238c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801238e:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <SCSI_Write12+0x1ac>)
 8012390:	7819      	ldrb	r1, [r3, #0]
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f103 0210 	add.w	r2, r3, #16
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f001 fdd7 	bl	8013f4e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80123a0:	2300      	movs	r3, #0
 80123a2:	e005      	b.n	80123b0 <SCSI_Write12+0x1a4>
    return SCSI_ProcessWrite(pdev, lun);
 80123a4:	7afb      	ldrb	r3, [r7, #11]
 80123a6:	4619      	mov	r1, r3
 80123a8:	68f8      	ldr	r0, [r7, #12]
 80123aa:	f000 f8e5 	bl	8012578 <SCSI_ProcessWrite>
 80123ae:	4603      	mov	r3, r0
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3718      	adds	r7, #24
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}
 80123b8:	200002ac 	.word	0x200002ac

080123bc <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	460b      	mov	r3, r1
 80123c6:	607a      	str	r2, [r7, #4]
 80123c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80123d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d102      	bne.n	80123de <SCSI_Verify10+0x22>
  {
    return -1;
 80123d8:	f04f 33ff 	mov.w	r3, #4294967295
 80123dc:	e023      	b.n	8012426 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	3301      	adds	r3, #1
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	f003 0302 	and.w	r3, r3, #2
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d008      	beq.n	80123fe <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80123ec:	7af9      	ldrb	r1, [r7, #11]
 80123ee:	2324      	movs	r3, #36	; 0x24
 80123f0:	2205      	movs	r2, #5
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f7ff fc35 	bl	8011c62 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80123f8:	f04f 33ff 	mov.w	r3, #4294967295
 80123fc:	e013      	b.n	8012426 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801240a:	7af9      	ldrb	r1, [r7, #11]
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f000 f80e 	bl	801242e <SCSI_CheckAddressRange>
 8012412:	4603      	mov	r3, r0
 8012414:	2b00      	cmp	r3, #0
 8012416:	da02      	bge.n	801241e <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8012418:	f04f 33ff 	mov.w	r3, #4294967295
 801241c:	e003      	b.n	8012426 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	2200      	movs	r2, #0
 8012422:	60da      	str	r2, [r3, #12]

  return 0;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3718      	adds	r7, #24
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b086      	sub	sp, #24
 8012432:	af00      	add	r7, sp, #0
 8012434:	60f8      	str	r0, [r7, #12]
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	603b      	str	r3, [r7, #0]
 801243a:	460b      	mov	r3, r1
 801243c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012444:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d102      	bne.n	8012452 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801244c:	f04f 33ff 	mov.w	r3, #4294967295
 8012450:	e011      	b.n	8012476 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	441a      	add	r2, r3
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801245e:	429a      	cmp	r2, r3
 8012460:	d908      	bls.n	8012474 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012462:	7af9      	ldrb	r1, [r7, #11]
 8012464:	2321      	movs	r3, #33	; 0x21
 8012466:	2205      	movs	r2, #5
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f7ff fbfa 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 801246e:	f04f 33ff 	mov.w	r3, #4294967295
 8012472:	e000      	b.n	8012476 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	3718      	adds	r7, #24
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
	...

08012480 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012480:	b590      	push	{r4, r7, lr}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	460b      	mov	r3, r1
 801248a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012492:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80124a0:	fb02 f303 	mul.w	r3, r2, r3
 80124a4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d102      	bne.n	80124b2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80124ac:	f04f 33ff 	mov.w	r3, #4294967295
 80124b0:	e05c      	b.n	801256c <SCSI_ProcessRead+0xec>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124b8:	bf28      	it	cs
 80124ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80124be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80124c6:	691c      	ldr	r4, [r3, #16]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	f103 0110 	add.w	r1, r3, #16
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80124da:	4618      	mov	r0, r3
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	78f8      	ldrb	r0, [r7, #3]
 80124e6:	47a0      	blx	r4
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	da08      	bge.n	8012500 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80124ee:	78f9      	ldrb	r1, [r7, #3]
 80124f0:	2311      	movs	r3, #17
 80124f2:	2204      	movs	r2, #4
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff fbb4 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 80124fa:	f04f 33ff 	mov.w	r3, #4294967295
 80124fe:	e035      	b.n	801256c <SCSI_ProcessRead+0xec>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 8012500:	4b1c      	ldr	r3, [pc, #112]	; (8012574 <SCSI_ProcessRead+0xf4>)
 8012502:	7819      	ldrb	r1, [r3, #0]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f103 0210 	add.w	r2, r3, #16
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f001 fcfd 	bl	8013f0c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801251e:	4619      	mov	r1, r3
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	fbb3 f3f1 	udiv	r3, r3, r1
 8012526:	441a      	add	r2, r3
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801253a:	4619      	mov	r1, r3
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012542:	1ad2      	subs	r2, r2, r3
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	1ad2      	subs	r2, r2, r3
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012560:	2b00      	cmp	r3, #0
 8012562:	d102      	bne.n	801256a <SCSI_ProcessRead+0xea>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2203      	movs	r2, #3
 8012568:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3714      	adds	r7, #20
 8012570:	46bd      	mov	sp, r7
 8012572:	bd90      	pop	{r4, r7, pc}
 8012574:	200002ab 	.word	0x200002ab

08012578 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012578:	b590      	push	{r4, r7, lr}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	460b      	mov	r3, r1
 8012582:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801258a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012592:	68fa      	ldr	r2, [r7, #12]
 8012594:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012598:	fb02 f303 	mul.w	r3, r2, r3
 801259c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d102      	bne.n	80125aa <SCSI_ProcessWrite+0x32>
  {
    return -1;
 80125a4:	f04f 33ff 	mov.w	r3, #4294967295
 80125a8:	e06c      	b.n	8012684 <SCSI_ProcessWrite+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125b0:	bf28      	it	cs
 80125b2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80125b6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80125be:	695c      	ldr	r4, [r3, #20]
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f103 0110 	add.w	r1, r3, #16
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80125d2:	4618      	mov	r0, r3
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 80125da:	b29b      	uxth	r3, r3
 80125dc:	78f8      	ldrb	r0, [r7, #3]
 80125de:	47a0      	blx	r4
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	da08      	bge.n	80125f8 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80125e6:	78f9      	ldrb	r1, [r7, #3]
 80125e8:	2303      	movs	r3, #3
 80125ea:	2204      	movs	r2, #4
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f7ff fb38 	bl	8011c62 <SCSI_SenseCode>
    return -1;
 80125f2:	f04f 33ff 	mov.w	r3, #4294967295
 80125f6:	e045      	b.n	8012684 <SCSI_ProcessWrite+0x10c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012604:	4619      	mov	r1, r3
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	fbb3 f3f1 	udiv	r3, r3, r1
 801260c:	441a      	add	r2, r3
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012620:	4619      	mov	r1, r3
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	fbb3 f3f1 	udiv	r3, r3, r1
 8012628:	1ad2      	subs	r2, r2, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	1ad2      	subs	r2, r2, r3
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012646:	2b00      	cmp	r3, #0
 8012648:	d104      	bne.n	8012654 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801264a:	2100      	movs	r1, #0
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f7fe fdb3 	bl	80111b8 <MSC_BOT_SendCSW>
 8012652:	e016      	b.n	8012682 <SCSI_ProcessWrite+0x10a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801265a:	68fa      	ldr	r2, [r7, #12]
 801265c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012660:	fb02 f303 	mul.w	r3, r2, r3
 8012664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012668:	bf28      	it	cs
 801266a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801266e:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8012670:	4b06      	ldr	r3, [pc, #24]	; (801268c <SCSI_ProcessWrite+0x114>)
 8012672:	7819      	ldrb	r1, [r3, #0]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f103 0210 	add.w	r2, r3, #16
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f001 fc66 	bl	8013f4e <USBD_LL_PrepareReceive>
  }

  return 0;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	bd90      	pop	{r4, r7, pc}
 801268c:	200002ac 	.word	0x200002ac

08012690 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012690:	b480      	push	{r7}
 8012692:	b087      	sub	sp, #28
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	4613      	mov	r3, r2
 801269c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801269e:	88fb      	ldrh	r3, [r7, #6]
 80126a0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d102      	bne.n	80126ae <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80126a8:	f04f 33ff 	mov.w	r3, #4294967295
 80126ac:	e013      	b.n	80126d6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80126ae:	8afa      	ldrh	r2, [r7, #22]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80126b4:	e00b      	b.n	80126ce <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80126b6:	8afb      	ldrh	r3, [r7, #22]
 80126b8:	3b01      	subs	r3, #1
 80126ba:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80126bc:	8afb      	ldrh	r3, [r7, #22]
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	441a      	add	r2, r3
 80126c2:	8afb      	ldrh	r3, [r7, #22]
 80126c4:	7811      	ldrb	r1, [r2, #0]
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	4413      	add	r3, r2
 80126ca:	460a      	mov	r2, r1
 80126cc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80126ce:	8afb      	ldrh	r3, [r7, #22]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1f0      	bne.n	80126b6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	371c      	adds	r7, #28
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80126e2:	b580      	push	{r7, lr}
 80126e4:	b086      	sub	sp, #24
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	60f8      	str	r0, [r7, #12]
 80126ea:	60b9      	str	r1, [r7, #8]
 80126ec:	4613      	mov	r3, r2
 80126ee:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d101      	bne.n	80126fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80126f6:	2303      	movs	r3, #3
 80126f8:	e01b      	b.n	8012732 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2200      	movs	r2, #0
 80126fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2200      	movs	r2, #0
 8012706:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d003      	beq.n	8012718 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	68ba      	ldr	r2, [r7, #8]
 8012714:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2201      	movs	r2, #1
 801271c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	79fa      	ldrb	r2, [r7, #7]
 8012724:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f001 fa7c 	bl	8013c24 <USBD_LL_Init>
 801272c:	4603      	mov	r3, r0
 801272e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012730:	7dfb      	ldrb	r3, [r7, #23]
}
 8012732:	4618      	mov	r0, r3
 8012734:	3718      	adds	r7, #24
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}

0801273a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801273a:	b580      	push	{r7, lr}
 801273c:	b084      	sub	sp, #16
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
 8012742:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012744:	2300      	movs	r3, #0
 8012746:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d101      	bne.n	8012752 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801274e:	2303      	movs	r3, #3
 8012750:	e02d      	b.n	80127ae <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	683a      	ldr	r2, [r7, #0]
 8012756:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	7c1b      	ldrb	r3, [r3, #16]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d112      	bne.n	8012788 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801276a:	2b00      	cmp	r3, #0
 801276c:	d01e      	beq.n	80127ac <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012776:	f107 020e 	add.w	r2, r7, #14
 801277a:	4610      	mov	r0, r2
 801277c:	4798      	blx	r3
 801277e:	4602      	mov	r2, r0
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8012786:	e011      	b.n	80127ac <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00b      	beq.n	80127ac <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801279c:	f107 020e 	add.w	r2, r7, #14
 80127a0:	4610      	mov	r0, r2
 80127a2:	4798      	blx	r3
 80127a4:	4602      	mov	r2, r0
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b082      	sub	sp, #8
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f001 fa9c 	bl	8013cfc <USBD_LL_Start>
 80127c4:	4603      	mov	r3, r0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3708      	adds	r7, #8
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80127ce:	b480      	push	{r7}
 80127d0:	b083      	sub	sp, #12
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80127d6:	2300      	movs	r3, #0
}
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	460b      	mov	r3, r1
 80127ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80127f0:	2303      	movs	r3, #3
 80127f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d009      	beq.n	8012812 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	78fa      	ldrb	r2, [r7, #3]
 8012808:	4611      	mov	r1, r2
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	4798      	blx	r3
 801280e:	4603      	mov	r3, r0
 8012810:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012812:	7bfb      	ldrb	r3, [r7, #15]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	460b      	mov	r3, r1
 8012826:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801282e:	2b00      	cmp	r3, #0
 8012830:	d007      	beq.n	8012842 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	78fa      	ldrb	r2, [r7, #3]
 801283c:	4611      	mov	r1, r2
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	4798      	blx	r3
  }

  return USBD_OK;
 8012842:	2300      	movs	r3, #0
}
 8012844:	4618      	mov	r0, r3
 8012846:	3708      	adds	r7, #8
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801285c:	6839      	ldr	r1, [r7, #0]
 801285e:	4618      	mov	r0, r3
 8012860:	f000 ff9c 	bl	801379c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2201      	movs	r2, #1
 8012868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012872:	461a      	mov	r2, r3
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012880:	f003 031f 	and.w	r3, r3, #31
 8012884:	2b02      	cmp	r3, #2
 8012886:	d01a      	beq.n	80128be <USBD_LL_SetupStage+0x72>
 8012888:	2b02      	cmp	r3, #2
 801288a:	d822      	bhi.n	80128d2 <USBD_LL_SetupStage+0x86>
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <USBD_LL_SetupStage+0x4a>
 8012890:	2b01      	cmp	r3, #1
 8012892:	d00a      	beq.n	80128aa <USBD_LL_SetupStage+0x5e>
 8012894:	e01d      	b.n	80128d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801289c:	4619      	mov	r1, r3
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 fa5c 	bl	8012d5c <USBD_StdDevReq>
 80128a4:	4603      	mov	r3, r0
 80128a6:	73fb      	strb	r3, [r7, #15]
      break;
 80128a8:	e020      	b.n	80128ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80128b0:	4619      	mov	r1, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 fac0 	bl	8012e38 <USBD_StdItfReq>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73fb      	strb	r3, [r7, #15]
      break;
 80128bc:	e016      	b.n	80128ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80128c4:	4619      	mov	r1, r3
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 faff 	bl	8012eca <USBD_StdEPReq>
 80128cc:	4603      	mov	r3, r0
 80128ce:	73fb      	strb	r3, [r7, #15]
      break;
 80128d0:	e00c      	b.n	80128ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80128d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	4619      	mov	r1, r3
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f001 fa8a 	bl	8013dfa <USBD_LL_StallEP>
 80128e6:	4603      	mov	r3, r0
 80128e8:	73fb      	strb	r3, [r7, #15]
      break;
 80128ea:	bf00      	nop
  }

  return ret;
 80128ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b086      	sub	sp, #24
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	60f8      	str	r0, [r7, #12]
 80128fe:	460b      	mov	r3, r1
 8012900:	607a      	str	r2, [r7, #4]
 8012902:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012904:	7afb      	ldrb	r3, [r7, #11]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d138      	bne.n	801297c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012910:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012918:	2b03      	cmp	r3, #3
 801291a:	d14a      	bne.n	80129b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	689a      	ldr	r2, [r3, #8]
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	429a      	cmp	r2, r3
 8012926:	d913      	bls.n	8012950 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	689a      	ldr	r2, [r3, #8]
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	1ad2      	subs	r2, r2, r3
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	68da      	ldr	r2, [r3, #12]
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	4293      	cmp	r3, r2
 8012940:	bf28      	it	cs
 8012942:	4613      	movcs	r3, r2
 8012944:	461a      	mov	r2, r3
 8012946:	6879      	ldr	r1, [r7, #4]
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f001 f81b 	bl	8013984 <USBD_CtlContinueRx>
 801294e:	e030      	b.n	80129b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012956:	b2db      	uxtb	r3, r3
 8012958:	2b03      	cmp	r3, #3
 801295a:	d10b      	bne.n	8012974 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012962:	691b      	ldr	r3, [r3, #16]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d005      	beq.n	8012974 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	68f8      	ldr	r0, [r7, #12]
 8012972:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	f001 f816 	bl	80139a6 <USBD_CtlSendStatus>
 801297a:	e01a      	b.n	80129b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012982:	b2db      	uxtb	r3, r3
 8012984:	2b03      	cmp	r3, #3
 8012986:	d114      	bne.n	80129b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801298e:	699b      	ldr	r3, [r3, #24]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d00e      	beq.n	80129b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801299a:	699b      	ldr	r3, [r3, #24]
 801299c:	7afa      	ldrb	r2, [r7, #11]
 801299e:	4611      	mov	r1, r2
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	4798      	blx	r3
 80129a4:	4603      	mov	r3, r0
 80129a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80129a8:	7dfb      	ldrb	r3, [r7, #23]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d001      	beq.n	80129b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80129ae:	7dfb      	ldrb	r3, [r7, #23]
 80129b0:	e000      	b.n	80129b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80129b2:	2300      	movs	r3, #0
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3718      	adds	r7, #24
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}

080129bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	460b      	mov	r3, r1
 80129c6:	607a      	str	r2, [r7, #4]
 80129c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80129ca:	7afb      	ldrb	r3, [r7, #11]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d16b      	bne.n	8012aa8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	3314      	adds	r3, #20
 80129d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d156      	bne.n	8012a8e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	689a      	ldr	r2, [r3, #8]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d914      	bls.n	8012a16 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	689a      	ldr	r2, [r3, #8]
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	1ad2      	subs	r2, r2, r3
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	689b      	ldr	r3, [r3, #8]
 80129fe:	461a      	mov	r2, r3
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f000 ff90 	bl	8013928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012a08:	2300      	movs	r3, #0
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	68f8      	ldr	r0, [r7, #12]
 8012a10:	f001 fa9d 	bl	8013f4e <USBD_LL_PrepareReceive>
 8012a14:	e03b      	b.n	8012a8e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	68da      	ldr	r2, [r3, #12]
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d11c      	bne.n	8012a5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	685a      	ldr	r2, [r3, #4]
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d316      	bcc.n	8012a5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d20f      	bcs.n	8012a5c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	2100      	movs	r1, #0
 8012a40:	68f8      	ldr	r0, [r7, #12]
 8012a42:	f000 ff71 	bl	8013928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012a4e:	2300      	movs	r3, #0
 8012a50:	2200      	movs	r2, #0
 8012a52:	2100      	movs	r1, #0
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f001 fa7a 	bl	8013f4e <USBD_LL_PrepareReceive>
 8012a5a:	e018      	b.n	8012a8e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2b03      	cmp	r3, #3
 8012a66:	d10b      	bne.n	8012a80 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d005      	beq.n	8012a80 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012a80:	2180      	movs	r1, #128	; 0x80
 8012a82:	68f8      	ldr	r0, [r7, #12]
 8012a84:	f001 f9b9 	bl	8013dfa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f000 ff9f 	bl	80139cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d122      	bne.n	8012ade <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	f7ff fe98 	bl	80127ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012aa6:	e01a      	b.n	8012ade <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	2b03      	cmp	r3, #3
 8012ab2:	d114      	bne.n	8012ade <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012aba:	695b      	ldr	r3, [r3, #20]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d00e      	beq.n	8012ade <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ac6:	695b      	ldr	r3, [r3, #20]
 8012ac8:	7afa      	ldrb	r2, [r7, #11]
 8012aca:	4611      	mov	r1, r2
 8012acc:	68f8      	ldr	r0, [r7, #12]
 8012ace:	4798      	blx	r3
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012ad4:	7dfb      	ldrb	r3, [r7, #23]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012ada:	7dfb      	ldrb	r3, [r7, #23]
 8012adc:	e000      	b.n	8012ae0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2201      	movs	r2, #1
 8012af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2200      	movs	r2, #0
 8012afc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2200      	movs	r2, #0
 8012b04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d101      	bne.n	8012b1c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	e02a      	b.n	8012b72 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d009      	beq.n	8012b3c <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	6852      	ldr	r2, [r2, #4]
 8012b34:	b2d2      	uxtb	r2, r2
 8012b36:	4611      	mov	r1, r2
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012b3c:	2340      	movs	r3, #64	; 0x40
 8012b3e:	2200      	movs	r2, #0
 8012b40:	2100      	movs	r1, #0
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f001 f8f5 	bl	8013d32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2240      	movs	r2, #64	; 0x40
 8012b54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012b58:	2340      	movs	r3, #64	; 0x40
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	2180      	movs	r1, #128	; 0x80
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f001 f8e7 	bl	8013d32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2201      	movs	r2, #1
 8012b68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2240      	movs	r2, #64	; 0x40
 8012b6e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3708      	adds	r7, #8
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	b083      	sub	sp, #12
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
 8012b82:	460b      	mov	r3, r1
 8012b84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	78fa      	ldrb	r2, [r7, #3]
 8012b8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012b8c:	2300      	movs	r3, #0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b083      	sub	sp, #12
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ba8:	b2da      	uxtb	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2204      	movs	r2, #4
 8012bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012bb8:	2300      	movs	r3, #0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	370c      	adds	r7, #12
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012bc6:	b480      	push	{r7}
 8012bc8:	b083      	sub	sp, #12
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bd4:	b2db      	uxtb	r3, r3
 8012bd6:	2b04      	cmp	r3, #4
 8012bd8:	d106      	bne.n	8012be8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012be8:	2300      	movs	r3, #0
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	370c      	adds	r7, #12
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf4:	4770      	bx	lr

08012bf6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b082      	sub	sp, #8
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d101      	bne.n	8012c0c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012c08:	2303      	movs	r3, #3
 8012c0a:	e012      	b.n	8012c32 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	2b03      	cmp	r3, #3
 8012c16:	d10b      	bne.n	8012c30 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c1e:	69db      	ldr	r3, [r3, #28]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d005      	beq.n	8012c30 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c2a:	69db      	ldr	r3, [r3, #28]
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b082      	sub	sp, #8
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	460b      	mov	r3, r1
 8012c44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d101      	bne.n	8012c54 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012c50:	2303      	movs	r3, #3
 8012c52:	e014      	b.n	8012c7e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d10d      	bne.n	8012c7c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c66:	6a1b      	ldr	r3, [r3, #32]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d007      	beq.n	8012c7c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c72:	6a1b      	ldr	r3, [r3, #32]
 8012c74:	78fa      	ldrb	r2, [r7, #3]
 8012c76:	4611      	mov	r1, r2
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012c7c:	2300      	movs	r3, #0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3708      	adds	r7, #8
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}

08012c86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b082      	sub	sp, #8
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d101      	bne.n	8012ca0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012c9c:	2303      	movs	r3, #3
 8012c9e:	e014      	b.n	8012cca <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	2b03      	cmp	r3, #3
 8012caa:	d10d      	bne.n	8012cc8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d007      	beq.n	8012cc8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cc0:	78fa      	ldrb	r2, [r7, #3]
 8012cc2:	4611      	mov	r1, r2
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012cc8:	2300      	movs	r3, #0
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b083      	sub	sp, #12
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012cda:	2300      	movs	r3, #0
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d009      	beq.n	8012d16 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	6852      	ldr	r2, [r2, #4]
 8012d0e:	b2d2      	uxtb	r2, r2
 8012d10:	4611      	mov	r1, r2
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	4798      	blx	r3
  }

  return USBD_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b087      	sub	sp, #28
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	3301      	adds	r3, #1
 8012d36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012d3e:	8a3b      	ldrh	r3, [r7, #16]
 8012d40:	021b      	lsls	r3, r3, #8
 8012d42:	b21a      	sxth	r2, r3
 8012d44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d48:	4313      	orrs	r3, r2
 8012d4a:	b21b      	sxth	r3, r3
 8012d4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	371c      	adds	r7, #28
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr

08012d5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d66:	2300      	movs	r3, #0
 8012d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d72:	2b40      	cmp	r3, #64	; 0x40
 8012d74:	d005      	beq.n	8012d82 <USBD_StdDevReq+0x26>
 8012d76:	2b40      	cmp	r3, #64	; 0x40
 8012d78:	d853      	bhi.n	8012e22 <USBD_StdDevReq+0xc6>
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d00b      	beq.n	8012d96 <USBD_StdDevReq+0x3a>
 8012d7e:	2b20      	cmp	r3, #32
 8012d80:	d14f      	bne.n	8012e22 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d88:	689b      	ldr	r3, [r3, #8]
 8012d8a:	6839      	ldr	r1, [r7, #0]
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	4798      	blx	r3
 8012d90:	4603      	mov	r3, r0
 8012d92:	73fb      	strb	r3, [r7, #15]
      break;
 8012d94:	e04a      	b.n	8012e2c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	785b      	ldrb	r3, [r3, #1]
 8012d9a:	2b09      	cmp	r3, #9
 8012d9c:	d83b      	bhi.n	8012e16 <USBD_StdDevReq+0xba>
 8012d9e:	a201      	add	r2, pc, #4	; (adr r2, 8012da4 <USBD_StdDevReq+0x48>)
 8012da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da4:	08012df9 	.word	0x08012df9
 8012da8:	08012e0d 	.word	0x08012e0d
 8012dac:	08012e17 	.word	0x08012e17
 8012db0:	08012e03 	.word	0x08012e03
 8012db4:	08012e17 	.word	0x08012e17
 8012db8:	08012dd7 	.word	0x08012dd7
 8012dbc:	08012dcd 	.word	0x08012dcd
 8012dc0:	08012e17 	.word	0x08012e17
 8012dc4:	08012def 	.word	0x08012def
 8012dc8:	08012de1 	.word	0x08012de1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012dcc:	6839      	ldr	r1, [r7, #0]
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f000 f9de 	bl	8013190 <USBD_GetDescriptor>
          break;
 8012dd4:	e024      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012dd6:	6839      	ldr	r1, [r7, #0]
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 fb55 	bl	8013488 <USBD_SetAddress>
          break;
 8012dde:	e01f      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012de0:	6839      	ldr	r1, [r7, #0]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 fb94 	bl	8013510 <USBD_SetConfig>
 8012de8:	4603      	mov	r3, r0
 8012dea:	73fb      	strb	r3, [r7, #15]
          break;
 8012dec:	e018      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012dee:	6839      	ldr	r1, [r7, #0]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 fc33 	bl	801365c <USBD_GetConfig>
          break;
 8012df6:	e013      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012df8:	6839      	ldr	r1, [r7, #0]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 fc64 	bl	80136c8 <USBD_GetStatus>
          break;
 8012e00:	e00e      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f000 fc93 	bl	8013730 <USBD_SetFeature>
          break;
 8012e0a:	e009      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012e0c:	6839      	ldr	r1, [r7, #0]
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 fca2 	bl	8013758 <USBD_ClrFeature>
          break;
 8012e14:	e004      	b.n	8012e20 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012e16:	6839      	ldr	r1, [r7, #0]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f000 fcf9 	bl	8013810 <USBD_CtlError>
          break;
 8012e1e:	bf00      	nop
      }
      break;
 8012e20:	e004      	b.n	8012e2c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012e22:	6839      	ldr	r1, [r7, #0]
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 fcf3 	bl	8013810 <USBD_CtlError>
      break;
 8012e2a:	bf00      	nop
  }

  return ret;
 8012e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop

08012e38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e42:	2300      	movs	r3, #0
 8012e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e4e:	2b40      	cmp	r3, #64	; 0x40
 8012e50:	d005      	beq.n	8012e5e <USBD_StdItfReq+0x26>
 8012e52:	2b40      	cmp	r3, #64	; 0x40
 8012e54:	d82f      	bhi.n	8012eb6 <USBD_StdItfReq+0x7e>
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d001      	beq.n	8012e5e <USBD_StdItfReq+0x26>
 8012e5a:	2b20      	cmp	r3, #32
 8012e5c:	d12b      	bne.n	8012eb6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	3b01      	subs	r3, #1
 8012e68:	2b02      	cmp	r3, #2
 8012e6a:	d81d      	bhi.n	8012ea8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	889b      	ldrh	r3, [r3, #4]
 8012e70:	b2db      	uxtb	r3, r3
 8012e72:	2b0f      	cmp	r3, #15
 8012e74:	d813      	bhi.n	8012e9e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e7c:	689b      	ldr	r3, [r3, #8]
 8012e7e:	6839      	ldr	r1, [r7, #0]
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	4798      	blx	r3
 8012e84:	4603      	mov	r3, r0
 8012e86:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	88db      	ldrh	r3, [r3, #6]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d110      	bne.n	8012eb2 <USBD_StdItfReq+0x7a>
 8012e90:	7bfb      	ldrb	r3, [r7, #15]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d10d      	bne.n	8012eb2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f000 fd85 	bl	80139a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012e9c:	e009      	b.n	8012eb2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012e9e:	6839      	ldr	r1, [r7, #0]
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f000 fcb5 	bl	8013810 <USBD_CtlError>
          break;
 8012ea6:	e004      	b.n	8012eb2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012ea8:	6839      	ldr	r1, [r7, #0]
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f000 fcb0 	bl	8013810 <USBD_CtlError>
          break;
 8012eb0:	e000      	b.n	8012eb4 <USBD_StdItfReq+0x7c>
          break;
 8012eb2:	bf00      	nop
      }
      break;
 8012eb4:	e004      	b.n	8012ec0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012eb6:	6839      	ldr	r1, [r7, #0]
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f000 fca9 	bl	8013810 <USBD_CtlError>
      break;
 8012ebe:	bf00      	nop
  }

  return ret;
 8012ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b084      	sub	sp, #16
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
 8012ed2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	889b      	ldrh	r3, [r3, #4]
 8012edc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ee6:	2b40      	cmp	r3, #64	; 0x40
 8012ee8:	d007      	beq.n	8012efa <USBD_StdEPReq+0x30>
 8012eea:	2b40      	cmp	r3, #64	; 0x40
 8012eec:	f200 8145 	bhi.w	801317a <USBD_StdEPReq+0x2b0>
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00c      	beq.n	8012f0e <USBD_StdEPReq+0x44>
 8012ef4:	2b20      	cmp	r3, #32
 8012ef6:	f040 8140 	bne.w	801317a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	6839      	ldr	r1, [r7, #0]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	4798      	blx	r3
 8012f08:	4603      	mov	r3, r0
 8012f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8012f0c:	e13a      	b.n	8013184 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	785b      	ldrb	r3, [r3, #1]
 8012f12:	2b03      	cmp	r3, #3
 8012f14:	d007      	beq.n	8012f26 <USBD_StdEPReq+0x5c>
 8012f16:	2b03      	cmp	r3, #3
 8012f18:	f300 8129 	bgt.w	801316e <USBD_StdEPReq+0x2a4>
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d07f      	beq.n	8013020 <USBD_StdEPReq+0x156>
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d03c      	beq.n	8012f9e <USBD_StdEPReq+0xd4>
 8012f24:	e123      	b.n	801316e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d002      	beq.n	8012f38 <USBD_StdEPReq+0x6e>
 8012f32:	2b03      	cmp	r3, #3
 8012f34:	d016      	beq.n	8012f64 <USBD_StdEPReq+0x9a>
 8012f36:	e02c      	b.n	8012f92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f38:	7bbb      	ldrb	r3, [r7, #14]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d00d      	beq.n	8012f5a <USBD_StdEPReq+0x90>
 8012f3e:	7bbb      	ldrb	r3, [r7, #14]
 8012f40:	2b80      	cmp	r3, #128	; 0x80
 8012f42:	d00a      	beq.n	8012f5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f44:	7bbb      	ldrb	r3, [r7, #14]
 8012f46:	4619      	mov	r1, r3
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 ff56 	bl	8013dfa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f4e:	2180      	movs	r1, #128	; 0x80
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 ff52 	bl	8013dfa <USBD_LL_StallEP>
 8012f56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f58:	e020      	b.n	8012f9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012f5a:	6839      	ldr	r1, [r7, #0]
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 fc57 	bl	8013810 <USBD_CtlError>
              break;
 8012f62:	e01b      	b.n	8012f9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	885b      	ldrh	r3, [r3, #2]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d10e      	bne.n	8012f8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012f6c:	7bbb      	ldrb	r3, [r7, #14]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00b      	beq.n	8012f8a <USBD_StdEPReq+0xc0>
 8012f72:	7bbb      	ldrb	r3, [r7, #14]
 8012f74:	2b80      	cmp	r3, #128	; 0x80
 8012f76:	d008      	beq.n	8012f8a <USBD_StdEPReq+0xc0>
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	88db      	ldrh	r3, [r3, #6]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d104      	bne.n	8012f8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f80:	7bbb      	ldrb	r3, [r7, #14]
 8012f82:	4619      	mov	r1, r3
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f000 ff38 	bl	8013dfa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 fd0b 	bl	80139a6 <USBD_CtlSendStatus>

              break;
 8012f90:	e004      	b.n	8012f9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012f92:	6839      	ldr	r1, [r7, #0]
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 fc3b 	bl	8013810 <USBD_CtlError>
              break;
 8012f9a:	bf00      	nop
          }
          break;
 8012f9c:	e0ec      	b.n	8013178 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	2b02      	cmp	r3, #2
 8012fa8:	d002      	beq.n	8012fb0 <USBD_StdEPReq+0xe6>
 8012faa:	2b03      	cmp	r3, #3
 8012fac:	d016      	beq.n	8012fdc <USBD_StdEPReq+0x112>
 8012fae:	e030      	b.n	8013012 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012fb0:	7bbb      	ldrb	r3, [r7, #14]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d00d      	beq.n	8012fd2 <USBD_StdEPReq+0x108>
 8012fb6:	7bbb      	ldrb	r3, [r7, #14]
 8012fb8:	2b80      	cmp	r3, #128	; 0x80
 8012fba:	d00a      	beq.n	8012fd2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012fbc:	7bbb      	ldrb	r3, [r7, #14]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 ff1a 	bl	8013dfa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fc6:	2180      	movs	r1, #128	; 0x80
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f000 ff16 	bl	8013dfa <USBD_LL_StallEP>
 8012fce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012fd0:	e025      	b.n	801301e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 fc1b 	bl	8013810 <USBD_CtlError>
              break;
 8012fda:	e020      	b.n	801301e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	885b      	ldrh	r3, [r3, #2]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d11b      	bne.n	801301c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012fe4:	7bbb      	ldrb	r3, [r7, #14]
 8012fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d004      	beq.n	8012ff8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012fee:	7bbb      	ldrb	r3, [r7, #14]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 ff20 	bl	8013e38 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f000 fcd4 	bl	80139a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	6839      	ldr	r1, [r7, #0]
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	4798      	blx	r3
 801300c:	4603      	mov	r3, r0
 801300e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013010:	e004      	b.n	801301c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013012:	6839      	ldr	r1, [r7, #0]
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f000 fbfb 	bl	8013810 <USBD_CtlError>
              break;
 801301a:	e000      	b.n	801301e <USBD_StdEPReq+0x154>
              break;
 801301c:	bf00      	nop
          }
          break;
 801301e:	e0ab      	b.n	8013178 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013026:	b2db      	uxtb	r3, r3
 8013028:	2b02      	cmp	r3, #2
 801302a:	d002      	beq.n	8013032 <USBD_StdEPReq+0x168>
 801302c:	2b03      	cmp	r3, #3
 801302e:	d032      	beq.n	8013096 <USBD_StdEPReq+0x1cc>
 8013030:	e097      	b.n	8013162 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013032:	7bbb      	ldrb	r3, [r7, #14]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d007      	beq.n	8013048 <USBD_StdEPReq+0x17e>
 8013038:	7bbb      	ldrb	r3, [r7, #14]
 801303a:	2b80      	cmp	r3, #128	; 0x80
 801303c:	d004      	beq.n	8013048 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801303e:	6839      	ldr	r1, [r7, #0]
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f000 fbe5 	bl	8013810 <USBD_CtlError>
                break;
 8013046:	e091      	b.n	801316c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801304c:	2b00      	cmp	r3, #0
 801304e:	da0b      	bge.n	8013068 <USBD_StdEPReq+0x19e>
 8013050:	7bbb      	ldrb	r3, [r7, #14]
 8013052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013056:	4613      	mov	r3, r2
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	4413      	add	r3, r2
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	3310      	adds	r3, #16
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	4413      	add	r3, r2
 8013064:	3304      	adds	r3, #4
 8013066:	e00b      	b.n	8013080 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013068:	7bbb      	ldrb	r3, [r7, #14]
 801306a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801306e:	4613      	mov	r3, r2
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	4413      	add	r3, r2
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801307a:	687a      	ldr	r2, [r7, #4]
 801307c:	4413      	add	r3, r2
 801307e:	3304      	adds	r3, #4
 8013080:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	2200      	movs	r2, #0
 8013086:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	2202      	movs	r2, #2
 801308c:	4619      	mov	r1, r3
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f000 fc2f 	bl	80138f2 <USBD_CtlSendData>
              break;
 8013094:	e06a      	b.n	801316c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801309a:	2b00      	cmp	r3, #0
 801309c:	da11      	bge.n	80130c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801309e:	7bbb      	ldrb	r3, [r7, #14]
 80130a0:	f003 020f 	and.w	r2, r3, #15
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	4613      	mov	r3, r2
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	4413      	add	r3, r2
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	440b      	add	r3, r1
 80130b0:	3324      	adds	r3, #36	; 0x24
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d117      	bne.n	80130e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80130b8:	6839      	ldr	r1, [r7, #0]
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f000 fba8 	bl	8013810 <USBD_CtlError>
                  break;
 80130c0:	e054      	b.n	801316c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80130c2:	7bbb      	ldrb	r3, [r7, #14]
 80130c4:	f003 020f 	and.w	r2, r3, #15
 80130c8:	6879      	ldr	r1, [r7, #4]
 80130ca:	4613      	mov	r3, r2
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	4413      	add	r3, r2
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	440b      	add	r3, r1
 80130d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80130d8:	881b      	ldrh	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d104      	bne.n	80130e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80130de:	6839      	ldr	r1, [r7, #0]
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f000 fb95 	bl	8013810 <USBD_CtlError>
                  break;
 80130e6:	e041      	b.n	801316c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	da0b      	bge.n	8013108 <USBD_StdEPReq+0x23e>
 80130f0:	7bbb      	ldrb	r3, [r7, #14]
 80130f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80130f6:	4613      	mov	r3, r2
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	4413      	add	r3, r2
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	3310      	adds	r3, #16
 8013100:	687a      	ldr	r2, [r7, #4]
 8013102:	4413      	add	r3, r2
 8013104:	3304      	adds	r3, #4
 8013106:	e00b      	b.n	8013120 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013108:	7bbb      	ldrb	r3, [r7, #14]
 801310a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801310e:	4613      	mov	r3, r2
 8013110:	009b      	lsls	r3, r3, #2
 8013112:	4413      	add	r3, r2
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	4413      	add	r3, r2
 801311e:	3304      	adds	r3, #4
 8013120:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013122:	7bbb      	ldrb	r3, [r7, #14]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <USBD_StdEPReq+0x264>
 8013128:	7bbb      	ldrb	r3, [r7, #14]
 801312a:	2b80      	cmp	r3, #128	; 0x80
 801312c:	d103      	bne.n	8013136 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	2200      	movs	r2, #0
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	e00e      	b.n	8013154 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013136:	7bbb      	ldrb	r3, [r7, #14]
 8013138:	4619      	mov	r1, r3
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f000 fe9b 	bl	8013e76 <USBD_LL_IsStallEP>
 8013140:	4603      	mov	r3, r0
 8013142:	2b00      	cmp	r3, #0
 8013144:	d003      	beq.n	801314e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	2201      	movs	r2, #1
 801314a:	601a      	str	r2, [r3, #0]
 801314c:	e002      	b.n	8013154 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	2200      	movs	r2, #0
 8013152:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	2202      	movs	r2, #2
 8013158:	4619      	mov	r1, r3
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 fbc9 	bl	80138f2 <USBD_CtlSendData>
              break;
 8013160:	e004      	b.n	801316c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013162:	6839      	ldr	r1, [r7, #0]
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f000 fb53 	bl	8013810 <USBD_CtlError>
              break;
 801316a:	bf00      	nop
          }
          break;
 801316c:	e004      	b.n	8013178 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801316e:	6839      	ldr	r1, [r7, #0]
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 fb4d 	bl	8013810 <USBD_CtlError>
          break;
 8013176:	bf00      	nop
      }
      break;
 8013178:	e004      	b.n	8013184 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801317a:	6839      	ldr	r1, [r7, #0]
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 fb47 	bl	8013810 <USBD_CtlError>
      break;
 8013182:	bf00      	nop
  }

  return ret;
 8013184:	7bfb      	ldrb	r3, [r7, #15]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3710      	adds	r7, #16
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
	...

08013190 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801319a:	2300      	movs	r3, #0
 801319c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80131a2:	2300      	movs	r3, #0
 80131a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	885b      	ldrh	r3, [r3, #2]
 80131aa:	0a1b      	lsrs	r3, r3, #8
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	3b01      	subs	r3, #1
 80131b0:	2b06      	cmp	r3, #6
 80131b2:	f200 813b 	bhi.w	801342c <USBD_GetDescriptor+0x29c>
 80131b6:	a201      	add	r2, pc, #4	; (adr r2, 80131bc <USBD_GetDescriptor+0x2c>)
 80131b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131bc:	080131d9 	.word	0x080131d9
 80131c0:	080131f1 	.word	0x080131f1
 80131c4:	08013231 	.word	0x08013231
 80131c8:	0801342d 	.word	0x0801342d
 80131cc:	0801342d 	.word	0x0801342d
 80131d0:	080133cd 	.word	0x080133cd
 80131d4:	080133f9 	.word	0x080133f9
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	7c12      	ldrb	r2, [r2, #16]
 80131e4:	f107 0108 	add.w	r1, r7, #8
 80131e8:	4610      	mov	r0, r2
 80131ea:	4798      	blx	r3
 80131ec:	60f8      	str	r0, [r7, #12]
      break;
 80131ee:	e125      	b.n	801343c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	7c1b      	ldrb	r3, [r3, #16]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d10d      	bne.n	8013214 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013200:	f107 0208 	add.w	r2, r7, #8
 8013204:	4610      	mov	r0, r2
 8013206:	4798      	blx	r3
 8013208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	3301      	adds	r3, #1
 801320e:	2202      	movs	r2, #2
 8013210:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013212:	e113      	b.n	801343c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321c:	f107 0208 	add.w	r2, r7, #8
 8013220:	4610      	mov	r0, r2
 8013222:	4798      	blx	r3
 8013224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	3301      	adds	r3, #1
 801322a:	2202      	movs	r2, #2
 801322c:	701a      	strb	r2, [r3, #0]
      break;
 801322e:	e105      	b.n	801343c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	885b      	ldrh	r3, [r3, #2]
 8013234:	b2db      	uxtb	r3, r3
 8013236:	2b05      	cmp	r3, #5
 8013238:	f200 80ac 	bhi.w	8013394 <USBD_GetDescriptor+0x204>
 801323c:	a201      	add	r2, pc, #4	; (adr r2, 8013244 <USBD_GetDescriptor+0xb4>)
 801323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013242:	bf00      	nop
 8013244:	0801325d 	.word	0x0801325d
 8013248:	08013291 	.word	0x08013291
 801324c:	080132c5 	.word	0x080132c5
 8013250:	080132f9 	.word	0x080132f9
 8013254:	0801332d 	.word	0x0801332d
 8013258:	08013361 	.word	0x08013361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013262:	685b      	ldr	r3, [r3, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00b      	beq.n	8013280 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	7c12      	ldrb	r2, [r2, #16]
 8013274:	f107 0108 	add.w	r1, r7, #8
 8013278:	4610      	mov	r0, r2
 801327a:	4798      	blx	r3
 801327c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801327e:	e0a4      	b.n	80133ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013280:	6839      	ldr	r1, [r7, #0]
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 fac4 	bl	8013810 <USBD_CtlError>
            err++;
 8013288:	7afb      	ldrb	r3, [r7, #11]
 801328a:	3301      	adds	r3, #1
 801328c:	72fb      	strb	r3, [r7, #11]
          break;
 801328e:	e09c      	b.n	80133ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00b      	beq.n	80132b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132a2:	689b      	ldr	r3, [r3, #8]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	7c12      	ldrb	r2, [r2, #16]
 80132a8:	f107 0108 	add.w	r1, r7, #8
 80132ac:	4610      	mov	r0, r2
 80132ae:	4798      	blx	r3
 80132b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132b2:	e08a      	b.n	80133ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80132b4:	6839      	ldr	r1, [r7, #0]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 faaa 	bl	8013810 <USBD_CtlError>
            err++;
 80132bc:	7afb      	ldrb	r3, [r7, #11]
 80132be:	3301      	adds	r3, #1
 80132c0:	72fb      	strb	r3, [r7, #11]
          break;
 80132c2:	e082      	b.n	80133ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00b      	beq.n	80132e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	687a      	ldr	r2, [r7, #4]
 80132da:	7c12      	ldrb	r2, [r2, #16]
 80132dc:	f107 0108 	add.w	r1, r7, #8
 80132e0:	4610      	mov	r0, r2
 80132e2:	4798      	blx	r3
 80132e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132e6:	e070      	b.n	80133ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80132e8:	6839      	ldr	r1, [r7, #0]
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f000 fa90 	bl	8013810 <USBD_CtlError>
            err++;
 80132f0:	7afb      	ldrb	r3, [r7, #11]
 80132f2:	3301      	adds	r3, #1
 80132f4:	72fb      	strb	r3, [r7, #11]
          break;
 80132f6:	e068      	b.n	80133ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00b      	beq.n	801331c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801330a:	691b      	ldr	r3, [r3, #16]
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	7c12      	ldrb	r2, [r2, #16]
 8013310:	f107 0108 	add.w	r1, r7, #8
 8013314:	4610      	mov	r0, r2
 8013316:	4798      	blx	r3
 8013318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801331a:	e056      	b.n	80133ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801331c:	6839      	ldr	r1, [r7, #0]
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f000 fa76 	bl	8013810 <USBD_CtlError>
            err++;
 8013324:	7afb      	ldrb	r3, [r7, #11]
 8013326:	3301      	adds	r3, #1
 8013328:	72fb      	strb	r3, [r7, #11]
          break;
 801332a:	e04e      	b.n	80133ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013332:	695b      	ldr	r3, [r3, #20]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d00b      	beq.n	8013350 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801333e:	695b      	ldr	r3, [r3, #20]
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	7c12      	ldrb	r2, [r2, #16]
 8013344:	f107 0108 	add.w	r1, r7, #8
 8013348:	4610      	mov	r0, r2
 801334a:	4798      	blx	r3
 801334c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801334e:	e03c      	b.n	80133ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013350:	6839      	ldr	r1, [r7, #0]
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f000 fa5c 	bl	8013810 <USBD_CtlError>
            err++;
 8013358:	7afb      	ldrb	r3, [r7, #11]
 801335a:	3301      	adds	r3, #1
 801335c:	72fb      	strb	r3, [r7, #11]
          break;
 801335e:	e034      	b.n	80133ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013366:	699b      	ldr	r3, [r3, #24]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d00b      	beq.n	8013384 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013372:	699b      	ldr	r3, [r3, #24]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	7c12      	ldrb	r2, [r2, #16]
 8013378:	f107 0108 	add.w	r1, r7, #8
 801337c:	4610      	mov	r0, r2
 801337e:	4798      	blx	r3
 8013380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013382:	e022      	b.n	80133ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013384:	6839      	ldr	r1, [r7, #0]
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f000 fa42 	bl	8013810 <USBD_CtlError>
            err++;
 801338c:	7afb      	ldrb	r3, [r7, #11]
 801338e:	3301      	adds	r3, #1
 8013390:	72fb      	strb	r3, [r7, #11]
          break;
 8013392:	e01a      	b.n	80133ca <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339c:	2b00      	cmp	r3, #0
 801339e:	d00c      	beq.n	80133ba <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	8852      	ldrh	r2, [r2, #2]
 80133ac:	b2d1      	uxtb	r1, r2
 80133ae:	f107 0208 	add.w	r2, r7, #8
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	4798      	blx	r3
 80133b6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80133b8:	e006      	b.n	80133c8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f000 fa27 	bl	8013810 <USBD_CtlError>
            err++;
 80133c2:	7afb      	ldrb	r3, [r7, #11]
 80133c4:	3301      	adds	r3, #1
 80133c6:	72fb      	strb	r3, [r7, #11]
          break;
 80133c8:	bf00      	nop
      }
      break;
 80133ca:	e037      	b.n	801343c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	7c1b      	ldrb	r3, [r3, #16]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d109      	bne.n	80133e8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133dc:	f107 0208 	add.w	r2, r7, #8
 80133e0:	4610      	mov	r0, r2
 80133e2:	4798      	blx	r3
 80133e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80133e6:	e029      	b.n	801343c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80133e8:	6839      	ldr	r1, [r7, #0]
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 fa10 	bl	8013810 <USBD_CtlError>
        err++;
 80133f0:	7afb      	ldrb	r3, [r7, #11]
 80133f2:	3301      	adds	r3, #1
 80133f4:	72fb      	strb	r3, [r7, #11]
      break;
 80133f6:	e021      	b.n	801343c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7c1b      	ldrb	r3, [r3, #16]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d10d      	bne.n	801341c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013408:	f107 0208 	add.w	r2, r7, #8
 801340c:	4610      	mov	r0, r2
 801340e:	4798      	blx	r3
 8013410:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	3301      	adds	r3, #1
 8013416:	2207      	movs	r2, #7
 8013418:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801341a:	e00f      	b.n	801343c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f9f6 	bl	8013810 <USBD_CtlError>
        err++;
 8013424:	7afb      	ldrb	r3, [r7, #11]
 8013426:	3301      	adds	r3, #1
 8013428:	72fb      	strb	r3, [r7, #11]
      break;
 801342a:	e007      	b.n	801343c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 801342c:	6839      	ldr	r1, [r7, #0]
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 f9ee 	bl	8013810 <USBD_CtlError>
      err++;
 8013434:	7afb      	ldrb	r3, [r7, #11]
 8013436:	3301      	adds	r3, #1
 8013438:	72fb      	strb	r3, [r7, #11]
      break;
 801343a:	bf00      	nop
  }

  if (err != 0U)
 801343c:	7afb      	ldrb	r3, [r7, #11]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d11e      	bne.n	8013480 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	88db      	ldrh	r3, [r3, #6]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d016      	beq.n	8013478 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 801344a:	893b      	ldrh	r3, [r7, #8]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d00e      	beq.n	801346e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	88da      	ldrh	r2, [r3, #6]
 8013454:	893b      	ldrh	r3, [r7, #8]
 8013456:	4293      	cmp	r3, r2
 8013458:	bf28      	it	cs
 801345a:	4613      	movcs	r3, r2
 801345c:	b29b      	uxth	r3, r3
 801345e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013460:	893b      	ldrh	r3, [r7, #8]
 8013462:	461a      	mov	r2, r3
 8013464:	68f9      	ldr	r1, [r7, #12]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 fa43 	bl	80138f2 <USBD_CtlSendData>
 801346c:	e009      	b.n	8013482 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801346e:	6839      	ldr	r1, [r7, #0]
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f000 f9cd 	bl	8013810 <USBD_CtlError>
 8013476:	e004      	b.n	8013482 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f000 fa94 	bl	80139a6 <USBD_CtlSendStatus>
 801347e:	e000      	b.n	8013482 <USBD_GetDescriptor+0x2f2>
    return;
 8013480:	bf00      	nop
  }
}
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	889b      	ldrh	r3, [r3, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d131      	bne.n	80134fe <USBD_SetAddress+0x76>
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	88db      	ldrh	r3, [r3, #6]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d12d      	bne.n	80134fe <USBD_SetAddress+0x76>
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	885b      	ldrh	r3, [r3, #2]
 80134a6:	2b7f      	cmp	r3, #127	; 0x7f
 80134a8:	d829      	bhi.n	80134fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	885b      	ldrh	r3, [r3, #2]
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	2b03      	cmp	r3, #3
 80134c0:	d104      	bne.n	80134cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80134c2:	6839      	ldr	r1, [r7, #0]
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f000 f9a3 	bl	8013810 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134ca:	e01d      	b.n	8013508 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	7bfa      	ldrb	r2, [r7, #15]
 80134d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80134d4:	7bfb      	ldrb	r3, [r7, #15]
 80134d6:	4619      	mov	r1, r3
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f000 fcf8 	bl	8013ece <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 fa61 	bl	80139a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d004      	beq.n	80134f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2202      	movs	r2, #2
 80134ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f2:	e009      	b.n	8013508 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2201      	movs	r2, #1
 80134f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134fc:	e004      	b.n	8013508 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f000 f985 	bl	8013810 <USBD_CtlError>
  }
}
 8013506:	bf00      	nop
 8013508:	bf00      	nop
 801350a:	3710      	adds	r7, #16
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801351a:	2300      	movs	r3, #0
 801351c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	885b      	ldrh	r3, [r3, #2]
 8013522:	b2da      	uxtb	r2, r3
 8013524:	4b4c      	ldr	r3, [pc, #304]	; (8013658 <USBD_SetConfig+0x148>)
 8013526:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013528:	4b4b      	ldr	r3, [pc, #300]	; (8013658 <USBD_SetConfig+0x148>)
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d905      	bls.n	801353c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013530:	6839      	ldr	r1, [r7, #0]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 f96c 	bl	8013810 <USBD_CtlError>
    return USBD_FAIL;
 8013538:	2303      	movs	r3, #3
 801353a:	e088      	b.n	801364e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013542:	b2db      	uxtb	r3, r3
 8013544:	2b02      	cmp	r3, #2
 8013546:	d002      	beq.n	801354e <USBD_SetConfig+0x3e>
 8013548:	2b03      	cmp	r3, #3
 801354a:	d025      	beq.n	8013598 <USBD_SetConfig+0x88>
 801354c:	e071      	b.n	8013632 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801354e:	4b42      	ldr	r3, [pc, #264]	; (8013658 <USBD_SetConfig+0x148>)
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d01c      	beq.n	8013590 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013556:	4b40      	ldr	r3, [pc, #256]	; (8013658 <USBD_SetConfig+0x148>)
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	461a      	mov	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013560:	4b3d      	ldr	r3, [pc, #244]	; (8013658 <USBD_SetConfig+0x148>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	4619      	mov	r1, r3
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7ff f93c 	bl	80127e4 <USBD_SetClassConfig>
 801356c:	4603      	mov	r3, r0
 801356e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013570:	7bfb      	ldrb	r3, [r7, #15]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d004      	beq.n	8013580 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013576:	6839      	ldr	r1, [r7, #0]
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f000 f949 	bl	8013810 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801357e:	e065      	b.n	801364c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 fa10 	bl	80139a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2203      	movs	r2, #3
 801358a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801358e:	e05d      	b.n	801364c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f000 fa08 	bl	80139a6 <USBD_CtlSendStatus>
      break;
 8013596:	e059      	b.n	801364c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013598:	4b2f      	ldr	r3, [pc, #188]	; (8013658 <USBD_SetConfig+0x148>)
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d112      	bne.n	80135c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2202      	movs	r2, #2
 80135a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80135a8:	4b2b      	ldr	r3, [pc, #172]	; (8013658 <USBD_SetConfig+0x148>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	461a      	mov	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80135b2:	4b29      	ldr	r3, [pc, #164]	; (8013658 <USBD_SetConfig+0x148>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	4619      	mov	r1, r3
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7ff f92f 	bl	801281c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f000 f9f1 	bl	80139a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80135c4:	e042      	b.n	801364c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80135c6:	4b24      	ldr	r3, [pc, #144]	; (8013658 <USBD_SetConfig+0x148>)
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	461a      	mov	r2, r3
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d02a      	beq.n	801362a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	4619      	mov	r1, r3
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f7ff f91d 	bl	801281c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80135e2:	4b1d      	ldr	r3, [pc, #116]	; (8013658 <USBD_SetConfig+0x148>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	461a      	mov	r2, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80135ec:	4b1a      	ldr	r3, [pc, #104]	; (8013658 <USBD_SetConfig+0x148>)
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	4619      	mov	r1, r3
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f7ff f8f6 	bl	80127e4 <USBD_SetClassConfig>
 80135f8:	4603      	mov	r3, r0
 80135fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80135fc:	7bfb      	ldrb	r3, [r7, #15]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00f      	beq.n	8013622 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8013602:	6839      	ldr	r1, [r7, #0]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f000 f903 	bl	8013810 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	b2db      	uxtb	r3, r3
 8013610:	4619      	mov	r1, r3
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7ff f902 	bl	801281c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2202      	movs	r2, #2
 801361c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013620:	e014      	b.n	801364c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 f9bf 	bl	80139a6 <USBD_CtlSendStatus>
      break;
 8013628:	e010      	b.n	801364c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f000 f9bb 	bl	80139a6 <USBD_CtlSendStatus>
      break;
 8013630:	e00c      	b.n	801364c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013632:	6839      	ldr	r1, [r7, #0]
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f000 f8eb 	bl	8013810 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801363a:	4b07      	ldr	r3, [pc, #28]	; (8013658 <USBD_SetConfig+0x148>)
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff f8eb 	bl	801281c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013646:	2303      	movs	r3, #3
 8013648:	73fb      	strb	r3, [r7, #15]
      break;
 801364a:	bf00      	nop
  }

  return ret;
 801364c:	7bfb      	ldrb	r3, [r7, #15]
}
 801364e:	4618      	mov	r0, r3
 8013650:	3710      	adds	r7, #16
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}
 8013656:	bf00      	nop
 8013658:	200039c0 	.word	0x200039c0

0801365c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	88db      	ldrh	r3, [r3, #6]
 801366a:	2b01      	cmp	r3, #1
 801366c:	d004      	beq.n	8013678 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801366e:	6839      	ldr	r1, [r7, #0]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f000 f8cd 	bl	8013810 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013676:	e023      	b.n	80136c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801367e:	b2db      	uxtb	r3, r3
 8013680:	2b02      	cmp	r3, #2
 8013682:	dc02      	bgt.n	801368a <USBD_GetConfig+0x2e>
 8013684:	2b00      	cmp	r3, #0
 8013686:	dc03      	bgt.n	8013690 <USBD_GetConfig+0x34>
 8013688:	e015      	b.n	80136b6 <USBD_GetConfig+0x5a>
 801368a:	2b03      	cmp	r3, #3
 801368c:	d00b      	beq.n	80136a6 <USBD_GetConfig+0x4a>
 801368e:	e012      	b.n	80136b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2200      	movs	r2, #0
 8013694:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3308      	adds	r3, #8
 801369a:	2201      	movs	r2, #1
 801369c:	4619      	mov	r1, r3
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f000 f927 	bl	80138f2 <USBD_CtlSendData>
        break;
 80136a4:	e00c      	b.n	80136c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	3304      	adds	r3, #4
 80136aa:	2201      	movs	r2, #1
 80136ac:	4619      	mov	r1, r3
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 f91f 	bl	80138f2 <USBD_CtlSendData>
        break;
 80136b4:	e004      	b.n	80136c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80136b6:	6839      	ldr	r1, [r7, #0]
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 f8a9 	bl	8013810 <USBD_CtlError>
        break;
 80136be:	bf00      	nop
}
 80136c0:	bf00      	nop
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	3b01      	subs	r3, #1
 80136dc:	2b02      	cmp	r3, #2
 80136de:	d81e      	bhi.n	801371e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	88db      	ldrh	r3, [r3, #6]
 80136e4:	2b02      	cmp	r3, #2
 80136e6:	d004      	beq.n	80136f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80136e8:	6839      	ldr	r1, [r7, #0]
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f000 f890 	bl	8013810 <USBD_CtlError>
        break;
 80136f0:	e01a      	b.n	8013728 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	2201      	movs	r2, #1
 80136f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d005      	beq.n	801370e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	f043 0202 	orr.w	r2, r3, #2
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	330c      	adds	r3, #12
 8013712:	2202      	movs	r2, #2
 8013714:	4619      	mov	r1, r3
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f000 f8eb 	bl	80138f2 <USBD_CtlSendData>
      break;
 801371c:	e004      	b.n	8013728 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801371e:	6839      	ldr	r1, [r7, #0]
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f000 f875 	bl	8013810 <USBD_CtlError>
      break;
 8013726:	bf00      	nop
  }
}
 8013728:	bf00      	nop
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}

08013730 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	885b      	ldrh	r3, [r3, #2]
 801373e:	2b01      	cmp	r3, #1
 8013740:	d106      	bne.n	8013750 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2201      	movs	r2, #1
 8013746:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 f92b 	bl	80139a6 <USBD_CtlSendStatus>
  }
}
 8013750:	bf00      	nop
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013768:	b2db      	uxtb	r3, r3
 801376a:	3b01      	subs	r3, #1
 801376c:	2b02      	cmp	r3, #2
 801376e:	d80b      	bhi.n	8013788 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	885b      	ldrh	r3, [r3, #2]
 8013774:	2b01      	cmp	r3, #1
 8013776:	d10c      	bne.n	8013792 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2200      	movs	r2, #0
 801377c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 f910 	bl	80139a6 <USBD_CtlSendStatus>
      }
      break;
 8013786:	e004      	b.n	8013792 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013788:	6839      	ldr	r1, [r7, #0]
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f000 f840 	bl	8013810 <USBD_CtlError>
      break;
 8013790:	e000      	b.n	8013794 <USBD_ClrFeature+0x3c>
      break;
 8013792:	bf00      	nop
  }
}
 8013794:	bf00      	nop
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	781a      	ldrb	r2, [r3, #0]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	3301      	adds	r3, #1
 80137b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	781a      	ldrb	r2, [r3, #0]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	3301      	adds	r3, #1
 80137c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	f7ff faaa 	bl	8012d20 <SWAPBYTE>
 80137cc:	4603      	mov	r3, r0
 80137ce:	461a      	mov	r2, r3
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	3301      	adds	r3, #1
 80137d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	3301      	adds	r3, #1
 80137de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80137e0:	68f8      	ldr	r0, [r7, #12]
 80137e2:	f7ff fa9d 	bl	8012d20 <SWAPBYTE>
 80137e6:	4603      	mov	r3, r0
 80137e8:	461a      	mov	r2, r3
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	3301      	adds	r3, #1
 80137f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	3301      	adds	r3, #1
 80137f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f7ff fa90 	bl	8012d20 <SWAPBYTE>
 8013800:	4603      	mov	r3, r0
 8013802:	461a      	mov	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	80da      	strh	r2, [r3, #6]
}
 8013808:	bf00      	nop
 801380a:	3710      	adds	r7, #16
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801381a:	2180      	movs	r1, #128	; 0x80
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 faec 	bl	8013dfa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013822:	2100      	movs	r1, #0
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f000 fae8 	bl	8013dfa <USBD_LL_StallEP>
}
 801382a:	bf00      	nop
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013832:	b580      	push	{r7, lr}
 8013834:	b086      	sub	sp, #24
 8013836:	af00      	add	r7, sp, #0
 8013838:	60f8      	str	r0, [r7, #12]
 801383a:	60b9      	str	r1, [r7, #8]
 801383c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801383e:	2300      	movs	r3, #0
 8013840:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d036      	beq.n	80138b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801384c:	6938      	ldr	r0, [r7, #16]
 801384e:	f000 f836 	bl	80138be <USBD_GetLen>
 8013852:	4603      	mov	r3, r0
 8013854:	3301      	adds	r3, #1
 8013856:	b29b      	uxth	r3, r3
 8013858:	005b      	lsls	r3, r3, #1
 801385a:	b29a      	uxth	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013860:	7dfb      	ldrb	r3, [r7, #23]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	4413      	add	r3, r2
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	7812      	ldrb	r2, [r2, #0]
 801386a:	701a      	strb	r2, [r3, #0]
  idx++;
 801386c:	7dfb      	ldrb	r3, [r7, #23]
 801386e:	3301      	adds	r3, #1
 8013870:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013872:	7dfb      	ldrb	r3, [r7, #23]
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	4413      	add	r3, r2
 8013878:	2203      	movs	r2, #3
 801387a:	701a      	strb	r2, [r3, #0]
  idx++;
 801387c:	7dfb      	ldrb	r3, [r7, #23]
 801387e:	3301      	adds	r3, #1
 8013880:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013882:	e013      	b.n	80138ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013884:	7dfb      	ldrb	r3, [r7, #23]
 8013886:	68ba      	ldr	r2, [r7, #8]
 8013888:	4413      	add	r3, r2
 801388a:	693a      	ldr	r2, [r7, #16]
 801388c:	7812      	ldrb	r2, [r2, #0]
 801388e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	3301      	adds	r3, #1
 8013894:	613b      	str	r3, [r7, #16]
    idx++;
 8013896:	7dfb      	ldrb	r3, [r7, #23]
 8013898:	3301      	adds	r3, #1
 801389a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801389c:	7dfb      	ldrb	r3, [r7, #23]
 801389e:	68ba      	ldr	r2, [r7, #8]
 80138a0:	4413      	add	r3, r2
 80138a2:	2200      	movs	r2, #0
 80138a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80138a6:	7dfb      	ldrb	r3, [r7, #23]
 80138a8:	3301      	adds	r3, #1
 80138aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d1e7      	bne.n	8013884 <USBD_GetString+0x52>
 80138b4:	e000      	b.n	80138b8 <USBD_GetString+0x86>
    return;
 80138b6:	bf00      	nop
  }
}
 80138b8:	3718      	adds	r7, #24
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}

080138be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80138be:	b480      	push	{r7}
 80138c0:	b085      	sub	sp, #20
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80138c6:	2300      	movs	r3, #0
 80138c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80138ce:	e005      	b.n	80138dc <USBD_GetLen+0x1e>
  {
    len++;
 80138d0:	7bfb      	ldrb	r3, [r7, #15]
 80138d2:	3301      	adds	r3, #1
 80138d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	3301      	adds	r3, #1
 80138da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1f5      	bne.n	80138d0 <USBD_GetLen+0x12>
  }

  return len;
 80138e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3714      	adds	r7, #20
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr

080138f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b084      	sub	sp, #16
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	60f8      	str	r0, [r7, #12]
 80138fa:	60b9      	str	r1, [r7, #8]
 80138fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2202      	movs	r2, #2
 8013902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	687a      	ldr	r2, [r7, #4]
 801390a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	68ba      	ldr	r2, [r7, #8]
 8013916:	2100      	movs	r1, #0
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f000 faf7 	bl	8013f0c <USBD_LL_Transmit>

  return USBD_OK;
 801391e:	2300      	movs	r3, #0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3710      	adds	r7, #16
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	2100      	movs	r1, #0
 801393a:	68f8      	ldr	r0, [r7, #12]
 801393c:	f000 fae6 	bl	8013f0c <USBD_LL_Transmit>

  return USBD_OK;
 8013940:	2300      	movs	r3, #0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b084      	sub	sp, #16
 801394e:	af00      	add	r7, sp, #0
 8013950:	60f8      	str	r0, [r7, #12]
 8013952:	60b9      	str	r1, [r7, #8]
 8013954:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2203      	movs	r2, #3
 801395a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	687a      	ldr	r2, [r7, #4]
 801396a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	68ba      	ldr	r2, [r7, #8]
 8013972:	2100      	movs	r1, #0
 8013974:	68f8      	ldr	r0, [r7, #12]
 8013976:	f000 faea 	bl	8013f4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3710      	adds	r7, #16
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	68ba      	ldr	r2, [r7, #8]
 8013994:	2100      	movs	r1, #0
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	f000 fad9 	bl	8013f4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2204      	movs	r2, #4
 80139b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80139b6:	2300      	movs	r3, #0
 80139b8:	2200      	movs	r2, #0
 80139ba:	2100      	movs	r1, #0
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 faa5 	bl	8013f0c <USBD_LL_Transmit>

  return USBD_OK;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2205      	movs	r2, #5
 80139d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80139dc:	2300      	movs	r3, #0
 80139de:	2200      	movs	r2, #0
 80139e0:	2100      	movs	r1, #0
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f000 fab3 	bl	8013f4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139e8:	2300      	movs	r3, #0
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3708      	adds	r7, #8
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}

080139f2 <HAL_PCDEx_SetTxFiFoInBytes>:

/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80139f2:	b580      	push	{r7, lr}
 80139f4:	b082      	sub	sp, #8
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	460b      	mov	r3, r1
 80139fc:	70fb      	strb	r3, [r7, #3]
 80139fe:	4613      	mov	r3, r2
 8013a00:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 8013a02:	883b      	ldrh	r3, [r7, #0]
 8013a04:	089b      	lsrs	r3, r3, #2
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	78fb      	ldrb	r3, [r7, #3]
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f7f5 f875 	bl	8008afc <HAL_PCDEx_SetTxFiFo>
 8013a12:	4603      	mov	r3, r0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
 8013a24:	460b      	mov	r3, r1
 8013a26:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8013a28:	887b      	ldrh	r3, [r7, #2]
 8013a2a:	089b      	lsrs	r3, r3, #2
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	4619      	mov	r1, r3
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f7f5 f8aa 	bl	8008b8a <HAL_PCDEx_SetRxFiFo>
 8013a36:	4603      	mov	r3, r0
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013a54:	4619      	mov	r1, r3
 8013a56:	4610      	mov	r0, r2
 8013a58:	f7fe fef8 	bl	801284c <USBD_LL_SetupStage>
}
 8013a5c:	bf00      	nop
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}

08013a64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013a76:	78fa      	ldrb	r2, [r7, #3]
 8013a78:	6879      	ldr	r1, [r7, #4]
 8013a7a:	4613      	mov	r3, r2
 8013a7c:	00db      	lsls	r3, r3, #3
 8013a7e:	4413      	add	r3, r2
 8013a80:	009b      	lsls	r3, r3, #2
 8013a82:	440b      	add	r3, r1
 8013a84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	78fb      	ldrb	r3, [r7, #3]
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	f7fe ff32 	bl	80128f6 <USBD_LL_DataOutStage>
}
 8013a92:	bf00      	nop
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a9a:	b580      	push	{r7, lr}
 8013a9c:	b082      	sub	sp, #8
 8013a9e:	af00      	add	r7, sp, #0
 8013aa0:	6078      	str	r0, [r7, #4]
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013aac:	78fa      	ldrb	r2, [r7, #3]
 8013aae:	6879      	ldr	r1, [r7, #4]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	00db      	lsls	r3, r3, #3
 8013ab4:	4413      	add	r3, r2
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	440b      	add	r3, r1
 8013aba:	334c      	adds	r3, #76	; 0x4c
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	78fb      	ldrb	r3, [r7, #3]
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	f7fe ff7b 	bl	80129bc <USBD_LL_DataInStage>
}
 8013ac6:	bf00      	nop
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ace:	b580      	push	{r7, lr}
 8013ad0:	b082      	sub	sp, #8
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7ff f88a 	bl	8012bf6 <USBD_LL_SOF>
}
 8013ae2:	bf00      	nop
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b084      	sub	sp, #16
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013af2:	2301      	movs	r3, #1
 8013af4:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	2b02      	cmp	r3, #2
 8013afc:	d102      	bne.n	8013b04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8013afe:	2301      	movs	r3, #1
 8013b00:	73fb      	strb	r3, [r7, #15]
 8013b02:	e008      	b.n	8013b16 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d102      	bne.n	8013b12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	73fb      	strb	r3, [r7, #15]
 8013b10:	e001      	b.n	8013b16 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 8013b12:	f7ee fdfb 	bl	800270c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b1c:	7bfa      	ldrb	r2, [r7, #15]
 8013b1e:	4611      	mov	r1, r2
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff f82a 	bl	8012b7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7fe ffdb 	bl	8012ae8 <USBD_LL_Reset>
}
 8013b32:	bf00      	nop
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
	...

08013b3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7ff f825 	bl	8012b9a <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	687a      	ldr	r2, [r7, #4]
 8013b5c:	6812      	ldr	r2, [r2, #0]
 8013b5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b62:	f043 0301 	orr.w	r3, r3, #1
 8013b66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6a1b      	ldr	r3, [r3, #32]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d005      	beq.n	8013b7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013b70:	4b04      	ldr	r3, [pc, #16]	; (8013b84 <HAL_PCD_SuspendCallback+0x48>)
 8013b72:	691b      	ldr	r3, [r3, #16]
 8013b74:	4a03      	ldr	r2, [pc, #12]	; (8013b84 <HAL_PCD_SuspendCallback+0x48>)
 8013b76:	f043 0306 	orr.w	r3, r3, #6
 8013b7a:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8013b7c:	bf00      	nop
 8013b7e:	3708      	adds	r7, #8
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	e000ed00 	.word	0xe000ed00

08013b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7ff f815 	bl	8012bc6 <USBD_LL_Resume>
}
 8013b9c:	bf00      	nop
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	460b      	mov	r3, r1
 8013bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bb6:	78fa      	ldrb	r2, [r7, #3]
 8013bb8:	4611      	mov	r1, r2
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7ff f863 	bl	8012c86 <USBD_LL_IsoOUTIncomplete>
}
 8013bc0:	bf00      	nop
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}

08013bc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bda:	78fa      	ldrb	r2, [r7, #3]
 8013bdc:	4611      	mov	r1, r2
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7ff f82b 	bl	8012c3a <USBD_LL_IsoINIncomplete>
}
 8013be4:	bf00      	nop
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7ff f869 	bl	8012cd2 <USBD_LL_DevConnected>
}
 8013c00:	bf00      	nop
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7ff f866 	bl	8012ce8 <USBD_LL_DevDisconnected>
}
 8013c1c:	bf00      	nop
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8013c2c:	4b2d      	ldr	r3, [pc, #180]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c2e:	4a2e      	ldr	r2, [pc, #184]	; (8013ce8 <USBD_LL_Init+0xc4>)
 8013c30:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d14e      	bne.n	8013cd8 <USBD_LL_Init+0xb4>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8013c3a:	4b2a      	ldr	r3, [pc, #168]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	687a      	ldr	r2, [r7, #4]
 8013c40:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    pdev->pData = hpcd_USB_OTG_PTR;
 8013c44:	4b27      	ldr	r3, [pc, #156]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 8013c4e:	4b25      	ldr	r3, [pc, #148]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ff fee0 	bl	8013a1c <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 8013c5c:	4b21      	ldr	r3, [pc, #132]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2240      	movs	r2, #64	; 0x40
 8013c62:	2100      	movs	r1, #0
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7ff fec4 	bl	80139f2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_MOUSE_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
 8013c6a:	4b1e      	ldr	r3, [pc, #120]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c6c:	6818      	ldr	r0, [r3, #0]
 8013c6e:	4b1f      	ldr	r3, [pc, #124]	; (8013cec <USBD_LL_Init+0xc8>)
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	2240      	movs	r2, #64	; 0x40
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	f7ff feb9 	bl	80139f2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_UVC == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (UVC_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_MSC == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (MSC_IN_EP & 0x7F), 128);
 8013c80:	4b18      	ldr	r3, [pc, #96]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c82:	6818      	ldr	r0, [r3, #0]
 8013c84:	4b1a      	ldr	r3, [pc, #104]	; (8013cf0 <USBD_LL_Init+0xcc>)
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c8c:	b2db      	uxtb	r3, r3
 8013c8e:	2280      	movs	r2, #128	; 0x80
 8013c90:	4619      	mov	r1, r3
 8013c92:	f7ff feae 	bl	80139f2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8013c96:	2300      	movs	r3, #0
 8013c98:	73fb      	strb	r3, [r7, #15]
 8013c9a:	e01a      	b.n	8013cd2 <USBD_LL_Init+0xae>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 8013c9c:	4b11      	ldr	r3, [pc, #68]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013c9e:	6818      	ldr	r0, [r3, #0]
 8013ca0:	7bfb      	ldrb	r3, [r7, #15]
 8013ca2:	4a14      	ldr	r2, [pc, #80]	; (8013cf4 <USBD_LL_Init+0xd0>)
 8013ca4:	5cd3      	ldrb	r3, [r2, r3]
 8013ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	2280      	movs	r2, #128	; 0x80
 8013cae:	4619      	mov	r1, r3
 8013cb0:	f7ff fe9f 	bl	80139f2 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 8013cb4:	4b0b      	ldr	r3, [pc, #44]	; (8013ce4 <USBD_LL_Init+0xc0>)
 8013cb6:	6818      	ldr	r0, [r3, #0]
 8013cb8:	7bfb      	ldrb	r3, [r7, #15]
 8013cba:	4a0f      	ldr	r2, [pc, #60]	; (8013cf8 <USBD_LL_Init+0xd4>)
 8013cbc:	5cd3      	ldrb	r3, [r2, r3]
 8013cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	2240      	movs	r2, #64	; 0x40
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	f7ff fe93 	bl	80139f2 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8013ccc:	7bfb      	ldrb	r3, [r7, #15]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	73fb      	strb	r3, [r7, #15]
 8013cd2:	7bfb      	ldrb	r3, [r7, #15]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d0e1      	beq.n	8013c9c <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8013cd8:	2300      	movs	r3, #0
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3710      	adds	r7, #16
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	200039c4 	.word	0x200039c4
 8013ce8:	2000282c 	.word	0x2000282c
 8013cec:	200001ce 	.word	0x200001ce
 8013cf0:	200002ab 	.word	0x200002ab
 8013cf4:	200033c8 	.word	0x200033c8
 8013cf8:	200033d0 	.word	0x200033d0

08013cfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d04:	2300      	movs	r3, #0
 8013d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f3 fdc9 	bl	80078aa <HAL_PCD_Start>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013d1c:	7bfb      	ldrb	r3, [r7, #15]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 f94a 	bl	8013fb8 <USBD_Get_USB_Status>
 8013d24:	4603      	mov	r3, r0
 8013d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}

08013d32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b084      	sub	sp, #16
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
 8013d3a:	4608      	mov	r0, r1
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	461a      	mov	r2, r3
 8013d40:	4603      	mov	r3, r0
 8013d42:	70fb      	strb	r3, [r7, #3]
 8013d44:	460b      	mov	r3, r1
 8013d46:	70bb      	strb	r3, [r7, #2]
 8013d48:	4613      	mov	r3, r2
 8013d4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d50:	2300      	movs	r3, #0
 8013d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8013d5a:	78bb      	ldrb	r3, [r7, #2]
 8013d5c:	883a      	ldrh	r2, [r7, #0]
 8013d5e:	78f9      	ldrb	r1, [r7, #3]
 8013d60:	f7f4 fa9a 	bl	8008298 <HAL_PCD_EP_Open>
 8013d64:	4603      	mov	r3, r0
 8013d66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013d68:	7bfb      	ldrb	r3, [r7, #15]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 f924 	bl	8013fb8 <USBD_Get_USB_Status>
 8013d70:	4603      	mov	r3, r0
 8013d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3710      	adds	r7, #16
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}

08013d7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d7e:	b580      	push	{r7, lr}
 8013d80:	b084      	sub	sp, #16
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
 8013d86:	460b      	mov	r3, r1
 8013d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013d98:	78fa      	ldrb	r2, [r7, #3]
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f4 fae3 	bl	8008368 <HAL_PCD_EP_Close>
 8013da2:	4603      	mov	r3, r0
 8013da4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013da6:	7bfb      	ldrb	r3, [r7, #15]
 8013da8:	4618      	mov	r0, r3
 8013daa:	f000 f905 	bl	8013fb8 <USBD_Get_USB_Status>
 8013dae:	4603      	mov	r3, r0
 8013db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013dd6:	78fa      	ldrb	r2, [r7, #3]
 8013dd8:	4611      	mov	r1, r2
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7f4 fca6 	bl	800872c <HAL_PCD_EP_Flush>
 8013de0:	4603      	mov	r3, r0
 8013de2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013de4:	7bfb      	ldrb	r3, [r7, #15]
 8013de6:	4618      	mov	r0, r3
 8013de8:	f000 f8e6 	bl	8013fb8 <USBD_Get_USB_Status>
 8013dec:	4603      	mov	r3, r0
 8013dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3710      	adds	r7, #16
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b084      	sub	sp, #16
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	460b      	mov	r3, r1
 8013e04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e06:	2300      	movs	r3, #0
 8013e08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013e14:	78fa      	ldrb	r2, [r7, #3]
 8013e16:	4611      	mov	r1, r2
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7f4 fb9c 	bl	8008556 <HAL_PCD_EP_SetStall>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013e22:	7bfb      	ldrb	r3, [r7, #15]
 8013e24:	4618      	mov	r0, r3
 8013e26:	f000 f8c7 	bl	8013fb8 <USBD_Get_USB_Status>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	460b      	mov	r3, r1
 8013e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e44:	2300      	movs	r3, #0
 8013e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013e52:	78fa      	ldrb	r2, [r7, #3]
 8013e54:	4611      	mov	r1, r2
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7f4 fbe1 	bl	800861e <HAL_PCD_EP_ClrStall>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013e60:	7bfb      	ldrb	r3, [r7, #15]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f000 f8a8 	bl	8013fb8 <USBD_Get_USB_Status>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3710      	adds	r7, #16
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}

08013e76 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e76:	b480      	push	{r7}
 8013e78:	b085      	sub	sp, #20
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	6078      	str	r0, [r7, #4]
 8013e7e:	460b      	mov	r3, r1
 8013e80:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013e88:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8013e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	da0b      	bge.n	8013eaa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013e92:	78fb      	ldrb	r3, [r7, #3]
 8013e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e98:	68f9      	ldr	r1, [r7, #12]
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	00db      	lsls	r3, r3, #3
 8013e9e:	4413      	add	r3, r2
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	440b      	add	r3, r1
 8013ea4:	333e      	adds	r3, #62	; 0x3e
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	e00b      	b.n	8013ec2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013eaa:	78fb      	ldrb	r3, [r7, #3]
 8013eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013eb0:	68f9      	ldr	r1, [r7, #12]
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	00db      	lsls	r3, r3, #3
 8013eb6:	4413      	add	r3, r2
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	440b      	add	r3, r1
 8013ebc:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013ec0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3714      	adds	r7, #20
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr

08013ece <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013ece:	b580      	push	{r7, lr}
 8013ed0:	b084      	sub	sp, #16
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	6078      	str	r0, [r7, #4]
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013eda:	2300      	movs	r3, #0
 8013edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013ee8:	78fa      	ldrb	r2, [r7, #3]
 8013eea:	4611      	mov	r1, r2
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7f4 f9ae 	bl	800824e <HAL_PCD_SetAddress>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013ef6:	7bfb      	ldrb	r3, [r7, #15]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f000 f85d 	bl	8013fb8 <USBD_Get_USB_Status>
 8013efe:	4603      	mov	r3, r0
 8013f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b086      	sub	sp, #24
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	607a      	str	r2, [r7, #4]
 8013f16:	603b      	str	r3, [r7, #0]
 8013f18:	460b      	mov	r3, r1
 8013f1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f20:	2300      	movs	r3, #0
 8013f22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8013f2a:	7af9      	ldrb	r1, [r7, #11]
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	f7f4 fac7 	bl	80084c2 <HAL_PCD_EP_Transmit>
 8013f34:	4603      	mov	r3, r0
 8013f36:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013f38:	7dfb      	ldrb	r3, [r7, #23]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f000 f83c 	bl	8013fb8 <USBD_Get_USB_Status>
 8013f40:	4603      	mov	r3, r0
 8013f42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f44:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3718      	adds	r7, #24
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}

08013f4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013f4e:	b580      	push	{r7, lr}
 8013f50:	b086      	sub	sp, #24
 8013f52:	af00      	add	r7, sp, #0
 8013f54:	60f8      	str	r0, [r7, #12]
 8013f56:	607a      	str	r2, [r7, #4]
 8013f58:	603b      	str	r3, [r7, #0]
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f62:	2300      	movs	r3, #0
 8013f64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8013f6c:	7af9      	ldrb	r1, [r7, #11]
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	f7f4 fa43 	bl	80083fc <HAL_PCD_EP_Receive>
 8013f76:	4603      	mov	r3, r0
 8013f78:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8013f7a:	7dfb      	ldrb	r3, [r7, #23]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f000 f81b 	bl	8013fb8 <USBD_Get_USB_Status>
 8013f82:	4603      	mov	r3, r0
 8013f84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f86:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3718      	adds	r7, #24
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b082      	sub	sp, #8
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	460b      	mov	r3, r1
 8013f9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8013fa2:	78fa      	ldrb	r2, [r7, #3]
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7f4 fa73 	bl	8008492 <HAL_PCD_EP_GetRxCount>
 8013fac:	4603      	mov	r3, r0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3708      	adds	r7, #8
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
	...

08013fb8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013fc6:	79fb      	ldrb	r3, [r7, #7]
 8013fc8:	2b03      	cmp	r3, #3
 8013fca:	d817      	bhi.n	8013ffc <USBD_Get_USB_Status+0x44>
 8013fcc:	a201      	add	r2, pc, #4	; (adr r2, 8013fd4 <USBD_Get_USB_Status+0x1c>)
 8013fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd2:	bf00      	nop
 8013fd4:	08013fe5 	.word	0x08013fe5
 8013fd8:	08013feb 	.word	0x08013feb
 8013fdc:	08013ff1 	.word	0x08013ff1
 8013fe0:	08013ff7 	.word	0x08013ff7
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8013fe8:	e00b      	b.n	8014002 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8013fea:	2303      	movs	r3, #3
 8013fec:	73fb      	strb	r3, [r7, #15]
    break;
 8013fee:	e008      	b.n	8014002 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8013ff4:	e005      	b.n	8014002 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8013ff6:	2303      	movs	r3, #3
 8013ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8013ffa:	e002      	b.n	8014002 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8013ffc:	2303      	movs	r3, #3
 8013ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8014000:	bf00      	nop
  }
  return usb_status;
 8014002:	7bfb      	ldrb	r3, [r7, #15]
}
 8014004:	4618      	mov	r0, r3
 8014006:	3714      	adds	r7, #20
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	4603      	mov	r3, r0
 8014018:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801401a:	79fb      	ldrb	r3, [r7, #7]
 801401c:	4a08      	ldr	r2, [pc, #32]	; (8014040 <disk_status+0x30>)
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	4413      	add	r3, r2
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	79fa      	ldrb	r2, [r7, #7]
 8014028:	4905      	ldr	r1, [pc, #20]	; (8014040 <disk_status+0x30>)
 801402a:	440a      	add	r2, r1
 801402c:	7a12      	ldrb	r2, [r2, #8]
 801402e:	4610      	mov	r0, r2
 8014030:	4798      	blx	r3
 8014032:	4603      	mov	r3, r0
 8014034:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014036:	7bfb      	ldrb	r3, [r7, #15]
}
 8014038:	4618      	mov	r0, r3
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	200039f0 	.word	0x200039f0

08014044 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b084      	sub	sp, #16
 8014048:	af00      	add	r7, sp, #0
 801404a:	4603      	mov	r3, r0
 801404c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801404e:	2300      	movs	r3, #0
 8014050:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014052:	79fb      	ldrb	r3, [r7, #7]
 8014054:	4a0d      	ldr	r2, [pc, #52]	; (801408c <disk_initialize+0x48>)
 8014056:	5cd3      	ldrb	r3, [r2, r3]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d111      	bne.n	8014080 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801405c:	79fb      	ldrb	r3, [r7, #7]
 801405e:	4a0b      	ldr	r2, [pc, #44]	; (801408c <disk_initialize+0x48>)
 8014060:	2101      	movs	r1, #1
 8014062:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014064:	79fb      	ldrb	r3, [r7, #7]
 8014066:	4a09      	ldr	r2, [pc, #36]	; (801408c <disk_initialize+0x48>)
 8014068:	009b      	lsls	r3, r3, #2
 801406a:	4413      	add	r3, r2
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	79fa      	ldrb	r2, [r7, #7]
 8014072:	4906      	ldr	r1, [pc, #24]	; (801408c <disk_initialize+0x48>)
 8014074:	440a      	add	r2, r1
 8014076:	7a12      	ldrb	r2, [r2, #8]
 8014078:	4610      	mov	r0, r2
 801407a:	4798      	blx	r3
 801407c:	4603      	mov	r3, r0
 801407e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014080:	7bfb      	ldrb	r3, [r7, #15]
}
 8014082:	4618      	mov	r0, r3
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	200039f0 	.word	0x200039f0

08014090 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014090:	b590      	push	{r4, r7, lr}
 8014092:	b087      	sub	sp, #28
 8014094:	af00      	add	r7, sp, #0
 8014096:	60b9      	str	r1, [r7, #8]
 8014098:	607a      	str	r2, [r7, #4]
 801409a:	603b      	str	r3, [r7, #0]
 801409c:	4603      	mov	r3, r0
 801409e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80140a0:	7bfb      	ldrb	r3, [r7, #15]
 80140a2:	4a0a      	ldr	r2, [pc, #40]	; (80140cc <disk_read+0x3c>)
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	4413      	add	r3, r2
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	689c      	ldr	r4, [r3, #8]
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
 80140ae:	4a07      	ldr	r2, [pc, #28]	; (80140cc <disk_read+0x3c>)
 80140b0:	4413      	add	r3, r2
 80140b2:	7a18      	ldrb	r0, [r3, #8]
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	687a      	ldr	r2, [r7, #4]
 80140b8:	68b9      	ldr	r1, [r7, #8]
 80140ba:	47a0      	blx	r4
 80140bc:	4603      	mov	r3, r0
 80140be:	75fb      	strb	r3, [r7, #23]
  return res;
 80140c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	371c      	adds	r7, #28
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd90      	pop	{r4, r7, pc}
 80140ca:	bf00      	nop
 80140cc:	200039f0 	.word	0x200039f0

080140d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80140d0:	b590      	push	{r4, r7, lr}
 80140d2:	b087      	sub	sp, #28
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60b9      	str	r1, [r7, #8]
 80140d8:	607a      	str	r2, [r7, #4]
 80140da:	603b      	str	r3, [r7, #0]
 80140dc:	4603      	mov	r3, r0
 80140de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80140e0:	7bfb      	ldrb	r3, [r7, #15]
 80140e2:	4a0a      	ldr	r2, [pc, #40]	; (801410c <disk_write+0x3c>)
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	4413      	add	r3, r2
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	68dc      	ldr	r4, [r3, #12]
 80140ec:	7bfb      	ldrb	r3, [r7, #15]
 80140ee:	4a07      	ldr	r2, [pc, #28]	; (801410c <disk_write+0x3c>)
 80140f0:	4413      	add	r3, r2
 80140f2:	7a18      	ldrb	r0, [r3, #8]
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	68b9      	ldr	r1, [r7, #8]
 80140fa:	47a0      	blx	r4
 80140fc:	4603      	mov	r3, r0
 80140fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8014100:	7dfb      	ldrb	r3, [r7, #23]
}
 8014102:	4618      	mov	r0, r3
 8014104:	371c      	adds	r7, #28
 8014106:	46bd      	mov	sp, r7
 8014108:	bd90      	pop	{r4, r7, pc}
 801410a:	bf00      	nop
 801410c:	200039f0 	.word	0x200039f0

08014110 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b084      	sub	sp, #16
 8014114:	af00      	add	r7, sp, #0
 8014116:	4603      	mov	r3, r0
 8014118:	603a      	str	r2, [r7, #0]
 801411a:	71fb      	strb	r3, [r7, #7]
 801411c:	460b      	mov	r3, r1
 801411e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014120:	79fb      	ldrb	r3, [r7, #7]
 8014122:	4a09      	ldr	r2, [pc, #36]	; (8014148 <disk_ioctl+0x38>)
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	4413      	add	r3, r2
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	691b      	ldr	r3, [r3, #16]
 801412c:	79fa      	ldrb	r2, [r7, #7]
 801412e:	4906      	ldr	r1, [pc, #24]	; (8014148 <disk_ioctl+0x38>)
 8014130:	440a      	add	r2, r1
 8014132:	7a10      	ldrb	r0, [r2, #8]
 8014134:	79b9      	ldrb	r1, [r7, #6]
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	4798      	blx	r3
 801413a:	4603      	mov	r3, r0
 801413c:	73fb      	strb	r3, [r7, #15]
  return res;
 801413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014140:	4618      	mov	r0, r3
 8014142:	3710      	adds	r7, #16
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	200039f0 	.word	0x200039f0

0801414c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801414c:	b480      	push	{r7}
 801414e:	b085      	sub	sp, #20
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	3301      	adds	r3, #1
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801415c:	89fb      	ldrh	r3, [r7, #14]
 801415e:	021b      	lsls	r3, r3, #8
 8014160:	b21a      	sxth	r2, r3
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	b21b      	sxth	r3, r3
 8014168:	4313      	orrs	r3, r2
 801416a:	b21b      	sxth	r3, r3
 801416c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801416e:	89fb      	ldrh	r3, [r7, #14]
}
 8014170:	4618      	mov	r0, r3
 8014172:	3714      	adds	r7, #20
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr

0801417c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801417c:	b480      	push	{r7}
 801417e:	b085      	sub	sp, #20
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	3303      	adds	r3, #3
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	021b      	lsls	r3, r3, #8
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	3202      	adds	r2, #2
 8014194:	7812      	ldrb	r2, [r2, #0]
 8014196:	4313      	orrs	r3, r2
 8014198:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	021b      	lsls	r3, r3, #8
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	3201      	adds	r2, #1
 80141a2:	7812      	ldrb	r2, [r2, #0]
 80141a4:	4313      	orrs	r3, r2
 80141a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	021b      	lsls	r3, r3, #8
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	7812      	ldrb	r2, [r2, #0]
 80141b0:	4313      	orrs	r3, r2
 80141b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80141b4:	68fb      	ldr	r3, [r7, #12]
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3714      	adds	r7, #20
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr

080141c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80141c2:	b480      	push	{r7}
 80141c4:	b083      	sub	sp, #12
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
 80141ca:	460b      	mov	r3, r1
 80141cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	1c5a      	adds	r2, r3, #1
 80141d2:	607a      	str	r2, [r7, #4]
 80141d4:	887a      	ldrh	r2, [r7, #2]
 80141d6:	b2d2      	uxtb	r2, r2
 80141d8:	701a      	strb	r2, [r3, #0]
 80141da:	887b      	ldrh	r3, [r7, #2]
 80141dc:	0a1b      	lsrs	r3, r3, #8
 80141de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	1c5a      	adds	r2, r3, #1
 80141e4:	607a      	str	r2, [r7, #4]
 80141e6:	887a      	ldrh	r2, [r7, #2]
 80141e8:	b2d2      	uxtb	r2, r2
 80141ea:	701a      	strb	r2, [r3, #0]
}
 80141ec:	bf00      	nop
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80141f8:	b480      	push	{r7}
 80141fa:	b083      	sub	sp, #12
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	1c5a      	adds	r2, r3, #1
 8014206:	607a      	str	r2, [r7, #4]
 8014208:	683a      	ldr	r2, [r7, #0]
 801420a:	b2d2      	uxtb	r2, r2
 801420c:	701a      	strb	r2, [r3, #0]
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	0a1b      	lsrs	r3, r3, #8
 8014212:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	1c5a      	adds	r2, r3, #1
 8014218:	607a      	str	r2, [r7, #4]
 801421a:	683a      	ldr	r2, [r7, #0]
 801421c:	b2d2      	uxtb	r2, r2
 801421e:	701a      	strb	r2, [r3, #0]
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	0a1b      	lsrs	r3, r3, #8
 8014224:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	1c5a      	adds	r2, r3, #1
 801422a:	607a      	str	r2, [r7, #4]
 801422c:	683a      	ldr	r2, [r7, #0]
 801422e:	b2d2      	uxtb	r2, r2
 8014230:	701a      	strb	r2, [r3, #0]
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	0a1b      	lsrs	r3, r3, #8
 8014236:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	1c5a      	adds	r2, r3, #1
 801423c:	607a      	str	r2, [r7, #4]
 801423e:	683a      	ldr	r2, [r7, #0]
 8014240:	b2d2      	uxtb	r2, r2
 8014242:	701a      	strb	r2, [r3, #0]
}
 8014244:	bf00      	nop
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014250:	b480      	push	{r7}
 8014252:	b087      	sub	sp, #28
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d00d      	beq.n	8014286 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801426a:	693a      	ldr	r2, [r7, #16]
 801426c:	1c53      	adds	r3, r2, #1
 801426e:	613b      	str	r3, [r7, #16]
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	1c59      	adds	r1, r3, #1
 8014274:	6179      	str	r1, [r7, #20]
 8014276:	7812      	ldrb	r2, [r2, #0]
 8014278:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	3b01      	subs	r3, #1
 801427e:	607b      	str	r3, [r7, #4]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d1f1      	bne.n	801426a <mem_cpy+0x1a>
	}
}
 8014286:	bf00      	nop
 8014288:	371c      	adds	r7, #28
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr

08014292 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014292:	b480      	push	{r7}
 8014294:	b087      	sub	sp, #28
 8014296:	af00      	add	r7, sp, #0
 8014298:	60f8      	str	r0, [r7, #12]
 801429a:	60b9      	str	r1, [r7, #8]
 801429c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	1c5a      	adds	r2, r3, #1
 80142a6:	617a      	str	r2, [r7, #20]
 80142a8:	68ba      	ldr	r2, [r7, #8]
 80142aa:	b2d2      	uxtb	r2, r2
 80142ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	3b01      	subs	r3, #1
 80142b2:	607b      	str	r3, [r7, #4]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d1f3      	bne.n	80142a2 <mem_set+0x10>
}
 80142ba:	bf00      	nop
 80142bc:	bf00      	nop
 80142be:	371c      	adds	r7, #28
 80142c0:	46bd      	mov	sp, r7
 80142c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c6:	4770      	bx	lr

080142c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80142c8:	b480      	push	{r7}
 80142ca:	b089      	sub	sp, #36	; 0x24
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	61fb      	str	r3, [r7, #28]
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80142dc:	2300      	movs	r3, #0
 80142de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	1c5a      	adds	r2, r3, #1
 80142e4:	61fa      	str	r2, [r7, #28]
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	4619      	mov	r1, r3
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	1c5a      	adds	r2, r3, #1
 80142ee:	61ba      	str	r2, [r7, #24]
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	1acb      	subs	r3, r1, r3
 80142f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	3b01      	subs	r3, #1
 80142fa:	607b      	str	r3, [r7, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d002      	beq.n	8014308 <mem_cmp+0x40>
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d0eb      	beq.n	80142e0 <mem_cmp+0x18>

	return r;
 8014308:	697b      	ldr	r3, [r7, #20]
}
 801430a:	4618      	mov	r0, r3
 801430c:	3724      	adds	r7, #36	; 0x24
 801430e:	46bd      	mov	sp, r7
 8014310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014314:	4770      	bx	lr

08014316 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014316:	b480      	push	{r7}
 8014318:	b083      	sub	sp, #12
 801431a:	af00      	add	r7, sp, #0
 801431c:	6078      	str	r0, [r7, #4]
 801431e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014320:	e002      	b.n	8014328 <chk_chr+0x12>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	3301      	adds	r3, #1
 8014326:	607b      	str	r3, [r7, #4]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d005      	beq.n	801433c <chk_chr+0x26>
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	781b      	ldrb	r3, [r3, #0]
 8014334:	461a      	mov	r2, r3
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	4293      	cmp	r3, r2
 801433a:	d1f2      	bne.n	8014322 <chk_chr+0xc>
	return *str;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	781b      	ldrb	r3, [r3, #0]
}
 8014340:	4618      	mov	r0, r3
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801434c:	b480      	push	{r7}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014356:	2300      	movs	r3, #0
 8014358:	60bb      	str	r3, [r7, #8]
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	60fb      	str	r3, [r7, #12]
 801435e:	e029      	b.n	80143b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014360:	4a27      	ldr	r2, [pc, #156]	; (8014400 <chk_lock+0xb4>)
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	011b      	lsls	r3, r3, #4
 8014366:	4413      	add	r3, r2
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d01d      	beq.n	80143aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801436e:	4a24      	ldr	r2, [pc, #144]	; (8014400 <chk_lock+0xb4>)
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	011b      	lsls	r3, r3, #4
 8014374:	4413      	add	r3, r2
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	429a      	cmp	r2, r3
 801437e:	d116      	bne.n	80143ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014380:	4a1f      	ldr	r2, [pc, #124]	; (8014400 <chk_lock+0xb4>)
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	011b      	lsls	r3, r3, #4
 8014386:	4413      	add	r3, r2
 8014388:	3304      	adds	r3, #4
 801438a:	681a      	ldr	r2, [r3, #0]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014390:	429a      	cmp	r2, r3
 8014392:	d10c      	bne.n	80143ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014394:	4a1a      	ldr	r2, [pc, #104]	; (8014400 <chk_lock+0xb4>)
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	011b      	lsls	r3, r3, #4
 801439a:	4413      	add	r3, r2
 801439c:	3308      	adds	r3, #8
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d102      	bne.n	80143ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80143a8:	e007      	b.n	80143ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80143aa:	2301      	movs	r3, #1
 80143ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	3301      	adds	r3, #1
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d9d2      	bls.n	8014360 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2b02      	cmp	r3, #2
 80143be:	d109      	bne.n	80143d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d102      	bne.n	80143cc <chk_lock+0x80>
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	2b02      	cmp	r3, #2
 80143ca:	d101      	bne.n	80143d0 <chk_lock+0x84>
 80143cc:	2300      	movs	r3, #0
 80143ce:	e010      	b.n	80143f2 <chk_lock+0xa6>
 80143d0:	2312      	movs	r3, #18
 80143d2:	e00e      	b.n	80143f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d108      	bne.n	80143ec <chk_lock+0xa0>
 80143da:	4a09      	ldr	r2, [pc, #36]	; (8014400 <chk_lock+0xb4>)
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	011b      	lsls	r3, r3, #4
 80143e0:	4413      	add	r3, r2
 80143e2:	330c      	adds	r3, #12
 80143e4:	881b      	ldrh	r3, [r3, #0]
 80143e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143ea:	d101      	bne.n	80143f0 <chk_lock+0xa4>
 80143ec:	2310      	movs	r3, #16
 80143ee:	e000      	b.n	80143f2 <chk_lock+0xa6>
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3714      	adds	r7, #20
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	200039d0 	.word	0x200039d0

08014404 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801440a:	2300      	movs	r3, #0
 801440c:	607b      	str	r3, [r7, #4]
 801440e:	e002      	b.n	8014416 <enq_lock+0x12>
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	3301      	adds	r3, #1
 8014414:	607b      	str	r3, [r7, #4]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2b01      	cmp	r3, #1
 801441a:	d806      	bhi.n	801442a <enq_lock+0x26>
 801441c:	4a09      	ldr	r2, [pc, #36]	; (8014444 <enq_lock+0x40>)
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	011b      	lsls	r3, r3, #4
 8014422:	4413      	add	r3, r2
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d1f2      	bne.n	8014410 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2b02      	cmp	r3, #2
 801442e:	bf14      	ite	ne
 8014430:	2301      	movne	r3, #1
 8014432:	2300      	moveq	r3, #0
 8014434:	b2db      	uxtb	r3, r3
}
 8014436:	4618      	mov	r0, r3
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop
 8014444:	200039d0 	.word	0x200039d0

08014448 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014452:	2300      	movs	r3, #0
 8014454:	60fb      	str	r3, [r7, #12]
 8014456:	e01f      	b.n	8014498 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014458:	4a41      	ldr	r2, [pc, #260]	; (8014560 <inc_lock+0x118>)
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	011b      	lsls	r3, r3, #4
 801445e:	4413      	add	r3, r2
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	429a      	cmp	r2, r3
 8014468:	d113      	bne.n	8014492 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801446a:	4a3d      	ldr	r2, [pc, #244]	; (8014560 <inc_lock+0x118>)
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	011b      	lsls	r3, r3, #4
 8014470:	4413      	add	r3, r2
 8014472:	3304      	adds	r3, #4
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801447a:	429a      	cmp	r2, r3
 801447c:	d109      	bne.n	8014492 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801447e:	4a38      	ldr	r2, [pc, #224]	; (8014560 <inc_lock+0x118>)
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	011b      	lsls	r3, r3, #4
 8014484:	4413      	add	r3, r2
 8014486:	3308      	adds	r3, #8
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801448e:	429a      	cmp	r2, r3
 8014490:	d006      	beq.n	80144a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	3301      	adds	r3, #1
 8014496:	60fb      	str	r3, [r7, #12]
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2b01      	cmp	r3, #1
 801449c:	d9dc      	bls.n	8014458 <inc_lock+0x10>
 801449e:	e000      	b.n	80144a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80144a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2b02      	cmp	r3, #2
 80144a6:	d132      	bne.n	801450e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80144a8:	2300      	movs	r3, #0
 80144aa:	60fb      	str	r3, [r7, #12]
 80144ac:	e002      	b.n	80144b4 <inc_lock+0x6c>
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	3301      	adds	r3, #1
 80144b2:	60fb      	str	r3, [r7, #12]
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d806      	bhi.n	80144c8 <inc_lock+0x80>
 80144ba:	4a29      	ldr	r2, [pc, #164]	; (8014560 <inc_lock+0x118>)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	011b      	lsls	r3, r3, #4
 80144c0:	4413      	add	r3, r2
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1f2      	bne.n	80144ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2b02      	cmp	r3, #2
 80144cc:	d101      	bne.n	80144d2 <inc_lock+0x8a>
 80144ce:	2300      	movs	r3, #0
 80144d0:	e040      	b.n	8014554 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	4922      	ldr	r1, [pc, #136]	; (8014560 <inc_lock+0x118>)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	011b      	lsls	r3, r3, #4
 80144dc:	440b      	add	r3, r1
 80144de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	689a      	ldr	r2, [r3, #8]
 80144e4:	491e      	ldr	r1, [pc, #120]	; (8014560 <inc_lock+0x118>)
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	011b      	lsls	r3, r3, #4
 80144ea:	440b      	add	r3, r1
 80144ec:	3304      	adds	r3, #4
 80144ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	695a      	ldr	r2, [r3, #20]
 80144f4:	491a      	ldr	r1, [pc, #104]	; (8014560 <inc_lock+0x118>)
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	011b      	lsls	r3, r3, #4
 80144fa:	440b      	add	r3, r1
 80144fc:	3308      	adds	r3, #8
 80144fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014500:	4a17      	ldr	r2, [pc, #92]	; (8014560 <inc_lock+0x118>)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	011b      	lsls	r3, r3, #4
 8014506:	4413      	add	r3, r2
 8014508:	330c      	adds	r3, #12
 801450a:	2200      	movs	r2, #0
 801450c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d009      	beq.n	8014528 <inc_lock+0xe0>
 8014514:	4a12      	ldr	r2, [pc, #72]	; (8014560 <inc_lock+0x118>)
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	011b      	lsls	r3, r3, #4
 801451a:	4413      	add	r3, r2
 801451c:	330c      	adds	r3, #12
 801451e:	881b      	ldrh	r3, [r3, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d001      	beq.n	8014528 <inc_lock+0xe0>
 8014524:	2300      	movs	r3, #0
 8014526:	e015      	b.n	8014554 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d108      	bne.n	8014540 <inc_lock+0xf8>
 801452e:	4a0c      	ldr	r2, [pc, #48]	; (8014560 <inc_lock+0x118>)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	011b      	lsls	r3, r3, #4
 8014534:	4413      	add	r3, r2
 8014536:	330c      	adds	r3, #12
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	3301      	adds	r3, #1
 801453c:	b29a      	uxth	r2, r3
 801453e:	e001      	b.n	8014544 <inc_lock+0xfc>
 8014540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014544:	4906      	ldr	r1, [pc, #24]	; (8014560 <inc_lock+0x118>)
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	011b      	lsls	r3, r3, #4
 801454a:	440b      	add	r3, r1
 801454c:	330c      	adds	r3, #12
 801454e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	3301      	adds	r3, #1
}
 8014554:	4618      	mov	r0, r3
 8014556:	3714      	adds	r7, #20
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr
 8014560:	200039d0 	.word	0x200039d0

08014564 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014564:	b480      	push	{r7}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	3b01      	subs	r3, #1
 8014570:	607b      	str	r3, [r7, #4]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2b01      	cmp	r3, #1
 8014576:	d825      	bhi.n	80145c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8014578:	4a17      	ldr	r2, [pc, #92]	; (80145d8 <dec_lock+0x74>)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	011b      	lsls	r3, r3, #4
 801457e:	4413      	add	r3, r2
 8014580:	330c      	adds	r3, #12
 8014582:	881b      	ldrh	r3, [r3, #0]
 8014584:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014586:	89fb      	ldrh	r3, [r7, #14]
 8014588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801458c:	d101      	bne.n	8014592 <dec_lock+0x2e>
 801458e:	2300      	movs	r3, #0
 8014590:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8014592:	89fb      	ldrh	r3, [r7, #14]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d002      	beq.n	801459e <dec_lock+0x3a>
 8014598:	89fb      	ldrh	r3, [r7, #14]
 801459a:	3b01      	subs	r3, #1
 801459c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801459e:	4a0e      	ldr	r2, [pc, #56]	; (80145d8 <dec_lock+0x74>)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	011b      	lsls	r3, r3, #4
 80145a4:	4413      	add	r3, r2
 80145a6:	330c      	adds	r3, #12
 80145a8:	89fa      	ldrh	r2, [r7, #14]
 80145aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80145ac:	89fb      	ldrh	r3, [r7, #14]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d105      	bne.n	80145be <dec_lock+0x5a>
 80145b2:	4a09      	ldr	r2, [pc, #36]	; (80145d8 <dec_lock+0x74>)
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	011b      	lsls	r3, r3, #4
 80145b8:	4413      	add	r3, r2
 80145ba:	2200      	movs	r2, #0
 80145bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80145be:	2300      	movs	r3, #0
 80145c0:	737b      	strb	r3, [r7, #13]
 80145c2:	e001      	b.n	80145c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80145c4:	2302      	movs	r3, #2
 80145c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80145c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3714      	adds	r7, #20
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr
 80145d6:	bf00      	nop
 80145d8:	200039d0 	.word	0x200039d0

080145dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80145dc:	b480      	push	{r7}
 80145de:	b085      	sub	sp, #20
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80145e4:	2300      	movs	r3, #0
 80145e6:	60fb      	str	r3, [r7, #12]
 80145e8:	e010      	b.n	801460c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80145ea:	4a0d      	ldr	r2, [pc, #52]	; (8014620 <clear_lock+0x44>)
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	011b      	lsls	r3, r3, #4
 80145f0:	4413      	add	r3, r2
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d105      	bne.n	8014606 <clear_lock+0x2a>
 80145fa:	4a09      	ldr	r2, [pc, #36]	; (8014620 <clear_lock+0x44>)
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	011b      	lsls	r3, r3, #4
 8014600:	4413      	add	r3, r2
 8014602:	2200      	movs	r2, #0
 8014604:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	3301      	adds	r3, #1
 801460a:	60fb      	str	r3, [r7, #12]
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b01      	cmp	r3, #1
 8014610:	d9eb      	bls.n	80145ea <clear_lock+0xe>
	}
}
 8014612:	bf00      	nop
 8014614:	bf00      	nop
 8014616:	3714      	adds	r7, #20
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr
 8014620:	200039d0 	.word	0x200039d0

08014624 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b086      	sub	sp, #24
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	78db      	ldrb	r3, [r3, #3]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d034      	beq.n	80146a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801463c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	7858      	ldrb	r0, [r3, #1]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014648:	2301      	movs	r3, #1
 801464a:	697a      	ldr	r2, [r7, #20]
 801464c:	f7ff fd40 	bl	80140d0 <disk_write>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d002      	beq.n	801465c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014656:	2301      	movs	r3, #1
 8014658:	73fb      	strb	r3, [r7, #15]
 801465a:	e022      	b.n	80146a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2200      	movs	r2, #0
 8014660:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014666:	697a      	ldr	r2, [r7, #20]
 8014668:	1ad2      	subs	r2, r2, r3
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a1b      	ldr	r3, [r3, #32]
 801466e:	429a      	cmp	r2, r3
 8014670:	d217      	bcs.n	80146a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	789b      	ldrb	r3, [r3, #2]
 8014676:	613b      	str	r3, [r7, #16]
 8014678:	e010      	b.n	801469c <sync_window+0x78>
					wsect += fs->fsize;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6a1b      	ldr	r3, [r3, #32]
 801467e:	697a      	ldr	r2, [r7, #20]
 8014680:	4413      	add	r3, r2
 8014682:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	7858      	ldrb	r0, [r3, #1]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801468e:	2301      	movs	r3, #1
 8014690:	697a      	ldr	r2, [r7, #20]
 8014692:	f7ff fd1d 	bl	80140d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	3b01      	subs	r3, #1
 801469a:	613b      	str	r3, [r7, #16]
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d8eb      	bhi.n	801467a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80146a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3718      	adds	r7, #24
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80146b6:	2300      	movs	r3, #0
 80146b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146be:	683a      	ldr	r2, [r7, #0]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d01b      	beq.n	80146fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7ff ffad 	bl	8014624 <sync_window>
 80146ca:	4603      	mov	r3, r0
 80146cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80146ce:	7bfb      	ldrb	r3, [r7, #15]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d113      	bne.n	80146fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	7858      	ldrb	r0, [r3, #1]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80146de:	2301      	movs	r3, #1
 80146e0:	683a      	ldr	r2, [r7, #0]
 80146e2:	f7ff fcd5 	bl	8014090 <disk_read>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d004      	beq.n	80146f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80146ec:	f04f 33ff 	mov.w	r3, #4294967295
 80146f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80146f2:	2301      	movs	r3, #1
 80146f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	683a      	ldr	r2, [r7, #0]
 80146fa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80146fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3710      	adds	r7, #16
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
	...

08014708 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f7ff ff87 	bl	8014624 <sync_window>
 8014716:	4603      	mov	r3, r0
 8014718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801471a:	7bfb      	ldrb	r3, [r7, #15]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d159      	bne.n	80147d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b03      	cmp	r3, #3
 8014726:	d149      	bne.n	80147bc <sync_fs+0xb4>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	791b      	ldrb	r3, [r3, #4]
 801472c:	2b01      	cmp	r3, #1
 801472e:	d145      	bne.n	80147bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	899b      	ldrh	r3, [r3, #12]
 801473a:	461a      	mov	r2, r3
 801473c:	2100      	movs	r1, #0
 801473e:	f7ff fda8 	bl	8014292 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	3338      	adds	r3, #56	; 0x38
 8014746:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801474a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff fd37 	bl	80141c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	3338      	adds	r3, #56	; 0x38
 8014758:	4921      	ldr	r1, [pc, #132]	; (80147e0 <sync_fs+0xd8>)
 801475a:	4618      	mov	r0, r3
 801475c:	f7ff fd4c 	bl	80141f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	3338      	adds	r3, #56	; 0x38
 8014764:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014768:	491e      	ldr	r1, [pc, #120]	; (80147e4 <sync_fs+0xdc>)
 801476a:	4618      	mov	r0, r3
 801476c:	f7ff fd44 	bl	80141f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	3338      	adds	r3, #56	; 0x38
 8014774:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	699b      	ldr	r3, [r3, #24]
 801477c:	4619      	mov	r1, r3
 801477e:	4610      	mov	r0, r2
 8014780:	f7ff fd3a 	bl	80141f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	3338      	adds	r3, #56	; 0x38
 8014788:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	695b      	ldr	r3, [r3, #20]
 8014790:	4619      	mov	r1, r3
 8014792:	4610      	mov	r0, r2
 8014794:	f7ff fd30 	bl	80141f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801479c:	1c5a      	adds	r2, r3, #1
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	7858      	ldrb	r0, [r3, #1]
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80147b0:	2301      	movs	r3, #1
 80147b2:	f7ff fc8d 	bl	80140d0 <disk_write>
			fs->fsi_flag = 0;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2200      	movs	r2, #0
 80147ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	785b      	ldrb	r3, [r3, #1]
 80147c0:	2200      	movs	r2, #0
 80147c2:	2100      	movs	r1, #0
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7ff fca3 	bl	8014110 <disk_ioctl>
 80147ca:	4603      	mov	r3, r0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d001      	beq.n	80147d4 <sync_fs+0xcc>
 80147d0:	2301      	movs	r3, #1
 80147d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80147d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	41615252 	.word	0x41615252
 80147e4:	61417272 	.word	0x61417272

080147e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	3b02      	subs	r3, #2
 80147f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	69db      	ldr	r3, [r3, #28]
 80147fc:	3b02      	subs	r3, #2
 80147fe:	683a      	ldr	r2, [r7, #0]
 8014800:	429a      	cmp	r2, r3
 8014802:	d301      	bcc.n	8014808 <clust2sect+0x20>
 8014804:	2300      	movs	r3, #0
 8014806:	e008      	b.n	801481a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	895b      	ldrh	r3, [r3, #10]
 801480c:	461a      	mov	r2, r3
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	fb03 f202 	mul.w	r2, r3, r2
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014818:	4413      	add	r3, r2
}
 801481a:	4618      	mov	r0, r3
 801481c:	370c      	adds	r7, #12
 801481e:	46bd      	mov	sp, r7
 8014820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014824:	4770      	bx	lr

08014826 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014826:	b580      	push	{r7, lr}
 8014828:	b086      	sub	sp, #24
 801482a:	af00      	add	r7, sp, #0
 801482c:	6078      	str	r0, [r7, #4]
 801482e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d904      	bls.n	8014846 <get_fat+0x20>
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	69db      	ldr	r3, [r3, #28]
 8014840:	683a      	ldr	r2, [r7, #0]
 8014842:	429a      	cmp	r2, r3
 8014844:	d302      	bcc.n	801484c <get_fat+0x26>
		val = 1;	/* Internal error */
 8014846:	2301      	movs	r3, #1
 8014848:	617b      	str	r3, [r7, #20]
 801484a:	e0bb      	b.n	80149c4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801484c:	f04f 33ff 	mov.w	r3, #4294967295
 8014850:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b03      	cmp	r3, #3
 8014858:	f000 8083 	beq.w	8014962 <get_fat+0x13c>
 801485c:	2b03      	cmp	r3, #3
 801485e:	f300 80a7 	bgt.w	80149b0 <get_fat+0x18a>
 8014862:	2b01      	cmp	r3, #1
 8014864:	d002      	beq.n	801486c <get_fat+0x46>
 8014866:	2b02      	cmp	r3, #2
 8014868:	d056      	beq.n	8014918 <get_fat+0xf2>
 801486a:	e0a1      	b.n	80149b0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	60fb      	str	r3, [r7, #12]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	085b      	lsrs	r3, r3, #1
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	4413      	add	r3, r2
 8014878:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	899b      	ldrh	r3, [r3, #12]
 8014882:	4619      	mov	r1, r3
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	fbb3 f3f1 	udiv	r3, r3, r1
 801488a:	4413      	add	r3, r2
 801488c:	4619      	mov	r1, r3
 801488e:	6938      	ldr	r0, [r7, #16]
 8014890:	f7ff ff0c 	bl	80146ac <move_window>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	f040 808d 	bne.w	80149b6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	1c5a      	adds	r2, r3, #1
 80148a0:	60fa      	str	r2, [r7, #12]
 80148a2:	693a      	ldr	r2, [r7, #16]
 80148a4:	8992      	ldrh	r2, [r2, #12]
 80148a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80148aa:	fb01 f202 	mul.w	r2, r1, r2
 80148ae:	1a9b      	subs	r3, r3, r2
 80148b0:	693a      	ldr	r2, [r7, #16]
 80148b2:	4413      	add	r3, r2
 80148b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	899b      	ldrh	r3, [r3, #12]
 80148c2:	4619      	mov	r1, r3
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80148ca:	4413      	add	r3, r2
 80148cc:	4619      	mov	r1, r3
 80148ce:	6938      	ldr	r0, [r7, #16]
 80148d0:	f7ff feec 	bl	80146ac <move_window>
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d16f      	bne.n	80149ba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	899b      	ldrh	r3, [r3, #12]
 80148de:	461a      	mov	r2, r3
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80148e6:	fb01 f202 	mul.w	r2, r1, r2
 80148ea:	1a9b      	subs	r3, r3, r2
 80148ec:	693a      	ldr	r2, [r7, #16]
 80148ee:	4413      	add	r3, r2
 80148f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148f4:	021b      	lsls	r3, r3, #8
 80148f6:	461a      	mov	r2, r3
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	4313      	orrs	r3, r2
 80148fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	f003 0301 	and.w	r3, r3, #1
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <get_fat+0xe8>
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	091b      	lsrs	r3, r3, #4
 801490c:	e002      	b.n	8014914 <get_fat+0xee>
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014914:	617b      	str	r3, [r7, #20]
			break;
 8014916:	e055      	b.n	80149c4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	899b      	ldrh	r3, [r3, #12]
 8014920:	085b      	lsrs	r3, r3, #1
 8014922:	b29b      	uxth	r3, r3
 8014924:	4619      	mov	r1, r3
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	fbb3 f3f1 	udiv	r3, r3, r1
 801492c:	4413      	add	r3, r2
 801492e:	4619      	mov	r1, r3
 8014930:	6938      	ldr	r0, [r7, #16]
 8014932:	f7ff febb 	bl	80146ac <move_window>
 8014936:	4603      	mov	r3, r0
 8014938:	2b00      	cmp	r3, #0
 801493a:	d140      	bne.n	80149be <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	005b      	lsls	r3, r3, #1
 8014946:	693a      	ldr	r2, [r7, #16]
 8014948:	8992      	ldrh	r2, [r2, #12]
 801494a:	fbb3 f0f2 	udiv	r0, r3, r2
 801494e:	fb00 f202 	mul.w	r2, r0, r2
 8014952:	1a9b      	subs	r3, r3, r2
 8014954:	440b      	add	r3, r1
 8014956:	4618      	mov	r0, r3
 8014958:	f7ff fbf8 	bl	801414c <ld_word>
 801495c:	4603      	mov	r3, r0
 801495e:	617b      	str	r3, [r7, #20]
			break;
 8014960:	e030      	b.n	80149c4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	899b      	ldrh	r3, [r3, #12]
 801496a:	089b      	lsrs	r3, r3, #2
 801496c:	b29b      	uxth	r3, r3
 801496e:	4619      	mov	r1, r3
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	fbb3 f3f1 	udiv	r3, r3, r1
 8014976:	4413      	add	r3, r2
 8014978:	4619      	mov	r1, r3
 801497a:	6938      	ldr	r0, [r7, #16]
 801497c:	f7ff fe96 	bl	80146ac <move_window>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d11d      	bne.n	80149c2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	693a      	ldr	r2, [r7, #16]
 8014992:	8992      	ldrh	r2, [r2, #12]
 8014994:	fbb3 f0f2 	udiv	r0, r3, r2
 8014998:	fb00 f202 	mul.w	r2, r0, r2
 801499c:	1a9b      	subs	r3, r3, r2
 801499e:	440b      	add	r3, r1
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7ff fbeb 	bl	801417c <ld_dword>
 80149a6:	4603      	mov	r3, r0
 80149a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80149ac:	617b      	str	r3, [r7, #20]
			break;
 80149ae:	e009      	b.n	80149c4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80149b0:	2301      	movs	r3, #1
 80149b2:	617b      	str	r3, [r7, #20]
 80149b4:	e006      	b.n	80149c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80149b6:	bf00      	nop
 80149b8:	e004      	b.n	80149c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80149ba:	bf00      	nop
 80149bc:	e002      	b.n	80149c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80149be:	bf00      	nop
 80149c0:	e000      	b.n	80149c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80149c2:	bf00      	nop
		}
	}

	return val;
 80149c4:	697b      	ldr	r3, [r7, #20]
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	3718      	adds	r7, #24
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}

080149ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80149ce:	b590      	push	{r4, r7, lr}
 80149d0:	b089      	sub	sp, #36	; 0x24
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	60f8      	str	r0, [r7, #12]
 80149d6:	60b9      	str	r1, [r7, #8]
 80149d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80149da:	2302      	movs	r3, #2
 80149dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	f240 8102 	bls.w	8014bea <put_fat+0x21c>
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	69db      	ldr	r3, [r3, #28]
 80149ea:	68ba      	ldr	r2, [r7, #8]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	f080 80fc 	bcs.w	8014bea <put_fat+0x21c>
		switch (fs->fs_type) {
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	2b03      	cmp	r3, #3
 80149f8:	f000 80b6 	beq.w	8014b68 <put_fat+0x19a>
 80149fc:	2b03      	cmp	r3, #3
 80149fe:	f300 80fd 	bgt.w	8014bfc <put_fat+0x22e>
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	d003      	beq.n	8014a0e <put_fat+0x40>
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	f000 8083 	beq.w	8014b12 <put_fat+0x144>
 8014a0c:	e0f6      	b.n	8014bfc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	61bb      	str	r3, [r7, #24]
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	085b      	lsrs	r3, r3, #1
 8014a16:	69ba      	ldr	r2, [r7, #24]
 8014a18:	4413      	add	r3, r2
 8014a1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	899b      	ldrh	r3, [r3, #12]
 8014a24:	4619      	mov	r1, r3
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a2c:	4413      	add	r3, r2
 8014a2e:	4619      	mov	r1, r3
 8014a30:	68f8      	ldr	r0, [r7, #12]
 8014a32:	f7ff fe3b 	bl	80146ac <move_window>
 8014a36:	4603      	mov	r3, r0
 8014a38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a3a:	7ffb      	ldrb	r3, [r7, #31]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	f040 80d6 	bne.w	8014bee <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	1c5a      	adds	r2, r3, #1
 8014a4c:	61ba      	str	r2, [r7, #24]
 8014a4e:	68fa      	ldr	r2, [r7, #12]
 8014a50:	8992      	ldrh	r2, [r2, #12]
 8014a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8014a56:	fb00 f202 	mul.w	r2, r0, r2
 8014a5a:	1a9b      	subs	r3, r3, r2
 8014a5c:	440b      	add	r3, r1
 8014a5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	f003 0301 	and.w	r3, r3, #1
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d00d      	beq.n	8014a86 <put_fat+0xb8>
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	b25b      	sxtb	r3, r3
 8014a70:	f003 030f 	and.w	r3, r3, #15
 8014a74:	b25a      	sxtb	r2, r3
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	011b      	lsls	r3, r3, #4
 8014a7c:	b25b      	sxtb	r3, r3
 8014a7e:	4313      	orrs	r3, r2
 8014a80:	b25b      	sxtb	r3, r3
 8014a82:	b2db      	uxtb	r3, r3
 8014a84:	e001      	b.n	8014a8a <put_fat+0xbc>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	697a      	ldr	r2, [r7, #20]
 8014a8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2201      	movs	r2, #1
 8014a92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	899b      	ldrh	r3, [r3, #12]
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	69bb      	ldr	r3, [r7, #24]
 8014aa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f7ff fdff 	bl	80146ac <move_window>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014ab2:	7ffb      	ldrb	r3, [r7, #31]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	f040 809c 	bne.w	8014bf2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	899b      	ldrh	r3, [r3, #12]
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	fbb3 f0f2 	udiv	r0, r3, r2
 8014acc:	fb00 f202 	mul.w	r2, r0, r2
 8014ad0:	1a9b      	subs	r3, r3, r2
 8014ad2:	440b      	add	r3, r1
 8014ad4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d003      	beq.n	8014ae8 <put_fat+0x11a>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	091b      	lsrs	r3, r3, #4
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	e00e      	b.n	8014b06 <put_fat+0x138>
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	781b      	ldrb	r3, [r3, #0]
 8014aec:	b25b      	sxtb	r3, r3
 8014aee:	f023 030f 	bic.w	r3, r3, #15
 8014af2:	b25a      	sxtb	r2, r3
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	0a1b      	lsrs	r3, r3, #8
 8014af8:	b25b      	sxtb	r3, r3
 8014afa:	f003 030f 	and.w	r3, r3, #15
 8014afe:	b25b      	sxtb	r3, r3
 8014b00:	4313      	orrs	r3, r2
 8014b02:	b25b      	sxtb	r3, r3
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	697a      	ldr	r2, [r7, #20]
 8014b08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	70da      	strb	r2, [r3, #3]
			break;
 8014b10:	e074      	b.n	8014bfc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	899b      	ldrh	r3, [r3, #12]
 8014b1a:	085b      	lsrs	r3, r3, #1
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	4619      	mov	r1, r3
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b26:	4413      	add	r3, r2
 8014b28:	4619      	mov	r1, r3
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	f7ff fdbe 	bl	80146ac <move_window>
 8014b30:	4603      	mov	r3, r0
 8014b32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014b34:	7ffb      	ldrb	r3, [r7, #31]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d15d      	bne.n	8014bf6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	8992      	ldrh	r2, [r2, #12]
 8014b48:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b4c:	fb00 f202 	mul.w	r2, r0, r2
 8014b50:	1a9b      	subs	r3, r3, r2
 8014b52:	440b      	add	r3, r1
 8014b54:	687a      	ldr	r2, [r7, #4]
 8014b56:	b292      	uxth	r2, r2
 8014b58:	4611      	mov	r1, r2
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7ff fb31 	bl	80141c2 <st_word>
			fs->wflag = 1;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2201      	movs	r2, #1
 8014b64:	70da      	strb	r2, [r3, #3]
			break;
 8014b66:	e049      	b.n	8014bfc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	899b      	ldrh	r3, [r3, #12]
 8014b70:	089b      	lsrs	r3, r3, #2
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	4619      	mov	r1, r3
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b7c:	4413      	add	r3, r2
 8014b7e:	4619      	mov	r1, r3
 8014b80:	68f8      	ldr	r0, [r7, #12]
 8014b82:	f7ff fd93 	bl	80146ac <move_window>
 8014b86:	4603      	mov	r3, r0
 8014b88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014b8a:	7ffb      	ldrb	r3, [r7, #31]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d134      	bne.n	8014bfa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	8992      	ldrh	r2, [r2, #12]
 8014ba4:	fbb3 f0f2 	udiv	r0, r3, r2
 8014ba8:	fb00 f202 	mul.w	r2, r0, r2
 8014bac:	1a9b      	subs	r3, r3, r2
 8014bae:	440b      	add	r3, r1
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7ff fae3 	bl	801417c <ld_dword>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014bbc:	4323      	orrs	r3, r4
 8014bbe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	009b      	lsls	r3, r3, #2
 8014bca:	68fa      	ldr	r2, [r7, #12]
 8014bcc:	8992      	ldrh	r2, [r2, #12]
 8014bce:	fbb3 f0f2 	udiv	r0, r3, r2
 8014bd2:	fb00 f202 	mul.w	r2, r0, r2
 8014bd6:	1a9b      	subs	r3, r3, r2
 8014bd8:	440b      	add	r3, r1
 8014bda:	6879      	ldr	r1, [r7, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7ff fb0b 	bl	80141f8 <st_dword>
			fs->wflag = 1;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2201      	movs	r2, #1
 8014be6:	70da      	strb	r2, [r3, #3]
			break;
 8014be8:	e008      	b.n	8014bfc <put_fat+0x22e>
		}
	}
 8014bea:	bf00      	nop
 8014bec:	e006      	b.n	8014bfc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bee:	bf00      	nop
 8014bf0:	e004      	b.n	8014bfc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bf2:	bf00      	nop
 8014bf4:	e002      	b.n	8014bfc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bf6:	bf00      	nop
 8014bf8:	e000      	b.n	8014bfc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bfa:	bf00      	nop
	return res;
 8014bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3724      	adds	r7, #36	; 0x24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd90      	pop	{r4, r7, pc}

08014c06 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b088      	sub	sp, #32
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	60f8      	str	r0, [r7, #12]
 8014c0e:	60b9      	str	r1, [r7, #8]
 8014c10:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014c12:	2300      	movs	r3, #0
 8014c14:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d904      	bls.n	8014c2c <remove_chain+0x26>
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	69db      	ldr	r3, [r3, #28]
 8014c26:	68ba      	ldr	r2, [r7, #8]
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d301      	bcc.n	8014c30 <remove_chain+0x2a>
 8014c2c:	2302      	movs	r3, #2
 8014c2e:	e04b      	b.n	8014cc8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d00c      	beq.n	8014c50 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014c36:	f04f 32ff 	mov.w	r2, #4294967295
 8014c3a:	6879      	ldr	r1, [r7, #4]
 8014c3c:	69b8      	ldr	r0, [r7, #24]
 8014c3e:	f7ff fec6 	bl	80149ce <put_fat>
 8014c42:	4603      	mov	r3, r0
 8014c44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014c46:	7ffb      	ldrb	r3, [r7, #31]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d001      	beq.n	8014c50 <remove_chain+0x4a>
 8014c4c:	7ffb      	ldrb	r3, [r7, #31]
 8014c4e:	e03b      	b.n	8014cc8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014c50:	68b9      	ldr	r1, [r7, #8]
 8014c52:	68f8      	ldr	r0, [r7, #12]
 8014c54:	f7ff fde7 	bl	8014826 <get_fat>
 8014c58:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d031      	beq.n	8014cc4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d101      	bne.n	8014c6a <remove_chain+0x64>
 8014c66:	2302      	movs	r3, #2
 8014c68:	e02e      	b.n	8014cc8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c70:	d101      	bne.n	8014c76 <remove_chain+0x70>
 8014c72:	2301      	movs	r3, #1
 8014c74:	e028      	b.n	8014cc8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014c76:	2200      	movs	r2, #0
 8014c78:	68b9      	ldr	r1, [r7, #8]
 8014c7a:	69b8      	ldr	r0, [r7, #24]
 8014c7c:	f7ff fea7 	bl	80149ce <put_fat>
 8014c80:	4603      	mov	r3, r0
 8014c82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014c84:	7ffb      	ldrb	r3, [r7, #31]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d001      	beq.n	8014c8e <remove_chain+0x88>
 8014c8a:	7ffb      	ldrb	r3, [r7, #31]
 8014c8c:	e01c      	b.n	8014cc8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014c8e:	69bb      	ldr	r3, [r7, #24]
 8014c90:	699a      	ldr	r2, [r3, #24]
 8014c92:	69bb      	ldr	r3, [r7, #24]
 8014c94:	69db      	ldr	r3, [r3, #28]
 8014c96:	3b02      	subs	r3, #2
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d20b      	bcs.n	8014cb4 <remove_chain+0xae>
			fs->free_clst++;
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	699b      	ldr	r3, [r3, #24]
 8014ca0:	1c5a      	adds	r2, r3, #1
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	791b      	ldrb	r3, [r3, #4]
 8014caa:	f043 0301 	orr.w	r3, r3, #1
 8014cae:	b2da      	uxtb	r2, r3
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	69db      	ldr	r3, [r3, #28]
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d3c6      	bcc.n	8014c50 <remove_chain+0x4a>
 8014cc2:	e000      	b.n	8014cc6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014cc4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014cc6:	2300      	movs	r3, #0
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3720      	adds	r7, #32
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b088      	sub	sp, #32
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d10d      	bne.n	8014d02 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	695b      	ldr	r3, [r3, #20]
 8014cea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d004      	beq.n	8014cfc <create_chain+0x2c>
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	69ba      	ldr	r2, [r7, #24]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d31b      	bcc.n	8014d34 <create_chain+0x64>
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	61bb      	str	r3, [r7, #24]
 8014d00:	e018      	b.n	8014d34 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014d02:	6839      	ldr	r1, [r7, #0]
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7ff fd8e 	bl	8014826 <get_fat>
 8014d0a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d801      	bhi.n	8014d16 <create_chain+0x46>
 8014d12:	2301      	movs	r3, #1
 8014d14:	e070      	b.n	8014df8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d1c:	d101      	bne.n	8014d22 <create_chain+0x52>
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	e06a      	b.n	8014df8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	69db      	ldr	r3, [r3, #28]
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d201      	bcs.n	8014d30 <create_chain+0x60>
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	e063      	b.n	8014df8 <create_chain+0x128>
		scl = clst;
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014d38:	69fb      	ldr	r3, [r7, #28]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	69db      	ldr	r3, [r3, #28]
 8014d42:	69fa      	ldr	r2, [r7, #28]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d307      	bcc.n	8014d58 <create_chain+0x88>
				ncl = 2;
 8014d48:	2302      	movs	r3, #2
 8014d4a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014d4c:	69fa      	ldr	r2, [r7, #28]
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d901      	bls.n	8014d58 <create_chain+0x88>
 8014d54:	2300      	movs	r3, #0
 8014d56:	e04f      	b.n	8014df8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014d58:	69f9      	ldr	r1, [r7, #28]
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f7ff fd63 	bl	8014826 <get_fat>
 8014d60:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d00e      	beq.n	8014d86 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2b01      	cmp	r3, #1
 8014d6c:	d003      	beq.n	8014d76 <create_chain+0xa6>
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d74:	d101      	bne.n	8014d7a <create_chain+0xaa>
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	e03e      	b.n	8014df8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014d7a:	69fa      	ldr	r2, [r7, #28]
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d1da      	bne.n	8014d38 <create_chain+0x68>
 8014d82:	2300      	movs	r3, #0
 8014d84:	e038      	b.n	8014df8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014d86:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014d88:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8c:	69f9      	ldr	r1, [r7, #28]
 8014d8e:	6938      	ldr	r0, [r7, #16]
 8014d90:	f7ff fe1d 	bl	80149ce <put_fat>
 8014d94:	4603      	mov	r3, r0
 8014d96:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014d98:	7dfb      	ldrb	r3, [r7, #23]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d109      	bne.n	8014db2 <create_chain+0xe2>
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d006      	beq.n	8014db2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014da4:	69fa      	ldr	r2, [r7, #28]
 8014da6:	6839      	ldr	r1, [r7, #0]
 8014da8:	6938      	ldr	r0, [r7, #16]
 8014daa:	f7ff fe10 	bl	80149ce <put_fat>
 8014dae:	4603      	mov	r3, r0
 8014db0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014db2:	7dfb      	ldrb	r3, [r7, #23]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d116      	bne.n	8014de6 <create_chain+0x116>
		fs->last_clst = ncl;
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	69fa      	ldr	r2, [r7, #28]
 8014dbc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	699a      	ldr	r2, [r3, #24]
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	69db      	ldr	r3, [r3, #28]
 8014dc6:	3b02      	subs	r3, #2
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d804      	bhi.n	8014dd6 <create_chain+0x106>
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	699b      	ldr	r3, [r3, #24]
 8014dd0:	1e5a      	subs	r2, r3, #1
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	791b      	ldrb	r3, [r3, #4]
 8014dda:	f043 0301 	orr.w	r3, r3, #1
 8014dde:	b2da      	uxtb	r2, r3
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	711a      	strb	r2, [r3, #4]
 8014de4:	e007      	b.n	8014df6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014de6:	7dfb      	ldrb	r3, [r7, #23]
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d102      	bne.n	8014df2 <create_chain+0x122>
 8014dec:	f04f 33ff 	mov.w	r3, #4294967295
 8014df0:	e000      	b.n	8014df4 <create_chain+0x124>
 8014df2:	2301      	movs	r3, #1
 8014df4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014df6:	69fb      	ldr	r3, [r7, #28]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3720      	adds	r7, #32
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014e00:	b480      	push	{r7}
 8014e02:	b087      	sub	sp, #28
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e14:	3304      	adds	r3, #4
 8014e16:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	899b      	ldrh	r3, [r3, #12]
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e24:	68fa      	ldr	r2, [r7, #12]
 8014e26:	8952      	ldrh	r2, [r2, #10]
 8014e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	1d1a      	adds	r2, r3, #4
 8014e32:	613a      	str	r2, [r7, #16]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d101      	bne.n	8014e42 <clmt_clust+0x42>
 8014e3e:	2300      	movs	r3, #0
 8014e40:	e010      	b.n	8014e64 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8014e42:	697a      	ldr	r2, [r7, #20]
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d307      	bcc.n	8014e5a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8014e4a:	697a      	ldr	r2, [r7, #20]
 8014e4c:	68bb      	ldr	r3, [r7, #8]
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	617b      	str	r3, [r7, #20]
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	3304      	adds	r3, #4
 8014e56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014e58:	e7e9      	b.n	8014e2e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8014e5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014e5c:	693b      	ldr	r3, [r7, #16]
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	4413      	add	r3, r2
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	371c      	adds	r7, #28
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr

08014e70 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014e86:	d204      	bcs.n	8014e92 <dir_sdi+0x22>
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	f003 031f 	and.w	r3, r3, #31
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d001      	beq.n	8014e96 <dir_sdi+0x26>
		return FR_INT_ERR;
 8014e92:	2302      	movs	r3, #2
 8014e94:	e071      	b.n	8014f7a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	683a      	ldr	r2, [r7, #0]
 8014e9a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	689b      	ldr	r3, [r3, #8]
 8014ea0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d106      	bne.n	8014eb6 <dir_sdi+0x46>
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	2b02      	cmp	r3, #2
 8014eae:	d902      	bls.n	8014eb6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d10c      	bne.n	8014ed6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	095b      	lsrs	r3, r3, #5
 8014ec0:	693a      	ldr	r2, [r7, #16]
 8014ec2:	8912      	ldrh	r2, [r2, #8]
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d301      	bcc.n	8014ecc <dir_sdi+0x5c>
 8014ec8:	2302      	movs	r3, #2
 8014eca:	e056      	b.n	8014f7a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	61da      	str	r2, [r3, #28]
 8014ed4:	e02d      	b.n	8014f32 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	895b      	ldrh	r3, [r3, #10]
 8014eda:	461a      	mov	r2, r3
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	899b      	ldrh	r3, [r3, #12]
 8014ee0:	fb02 f303 	mul.w	r3, r2, r3
 8014ee4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014ee6:	e019      	b.n	8014f1c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6979      	ldr	r1, [r7, #20]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7ff fc9a 	bl	8014826 <get_fat>
 8014ef2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014efa:	d101      	bne.n	8014f00 <dir_sdi+0x90>
 8014efc:	2301      	movs	r3, #1
 8014efe:	e03c      	b.n	8014f7a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d904      	bls.n	8014f10 <dir_sdi+0xa0>
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	69db      	ldr	r3, [r3, #28]
 8014f0a:	697a      	ldr	r2, [r7, #20]
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d301      	bcc.n	8014f14 <dir_sdi+0xa4>
 8014f10:	2302      	movs	r3, #2
 8014f12:	e032      	b.n	8014f7a <dir_sdi+0x10a>
			ofs -= csz;
 8014f14:	683a      	ldr	r2, [r7, #0]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	1ad3      	subs	r3, r2, r3
 8014f1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014f1c:	683a      	ldr	r2, [r7, #0]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d2e1      	bcs.n	8014ee8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8014f24:	6979      	ldr	r1, [r7, #20]
 8014f26:	6938      	ldr	r0, [r7, #16]
 8014f28:	f7ff fc5e 	bl	80147e8 <clust2sect>
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	697a      	ldr	r2, [r7, #20]
 8014f36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	69db      	ldr	r3, [r3, #28]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d101      	bne.n	8014f44 <dir_sdi+0xd4>
 8014f40:	2302      	movs	r3, #2
 8014f42:	e01a      	b.n	8014f7a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	69da      	ldr	r2, [r3, #28]
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	899b      	ldrh	r3, [r3, #12]
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f54:	441a      	add	r2, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	899b      	ldrh	r3, [r3, #12]
 8014f64:	461a      	mov	r2, r3
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f6c:	fb00 f202 	mul.w	r2, r0, r2
 8014f70:	1a9b      	subs	r3, r3, r2
 8014f72:	18ca      	adds	r2, r1, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014f78:	2300      	movs	r3, #0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3718      	adds	r7, #24
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b086      	sub	sp, #24
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
 8014f8a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	695b      	ldr	r3, [r3, #20]
 8014f96:	3320      	adds	r3, #32
 8014f98:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	69db      	ldr	r3, [r3, #28]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d003      	beq.n	8014faa <dir_next+0x28>
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014fa8:	d301      	bcc.n	8014fae <dir_next+0x2c>
 8014faa:	2304      	movs	r3, #4
 8014fac:	e0bb      	b.n	8015126 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	899b      	ldrh	r3, [r3, #12]
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8014fba:	fb01 f202 	mul.w	r2, r1, r2
 8014fbe:	1a9b      	subs	r3, r3, r2
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f040 809d 	bne.w	8015100 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	69db      	ldr	r3, [r3, #28]
 8014fca:	1c5a      	adds	r2, r3, #1
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	699b      	ldr	r3, [r3, #24]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d10b      	bne.n	8014ff0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	095b      	lsrs	r3, r3, #5
 8014fdc:	68fa      	ldr	r2, [r7, #12]
 8014fde:	8912      	ldrh	r2, [r2, #8]
 8014fe0:	4293      	cmp	r3, r2
 8014fe2:	f0c0 808d 	bcc.w	8015100 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	61da      	str	r2, [r3, #28]
 8014fec:	2304      	movs	r3, #4
 8014fee:	e09a      	b.n	8015126 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	899b      	ldrh	r3, [r3, #12]
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ffc:	68fa      	ldr	r2, [r7, #12]
 8014ffe:	8952      	ldrh	r2, [r2, #10]
 8015000:	3a01      	subs	r2, #1
 8015002:	4013      	ands	r3, r2
 8015004:	2b00      	cmp	r3, #0
 8015006:	d17b      	bne.n	8015100 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	699b      	ldr	r3, [r3, #24]
 801500e:	4619      	mov	r1, r3
 8015010:	4610      	mov	r0, r2
 8015012:	f7ff fc08 	bl	8014826 <get_fat>
 8015016:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	2b01      	cmp	r3, #1
 801501c:	d801      	bhi.n	8015022 <dir_next+0xa0>
 801501e:	2302      	movs	r3, #2
 8015020:	e081      	b.n	8015126 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015028:	d101      	bne.n	801502e <dir_next+0xac>
 801502a:	2301      	movs	r3, #1
 801502c:	e07b      	b.n	8015126 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	69db      	ldr	r3, [r3, #28]
 8015032:	697a      	ldr	r2, [r7, #20]
 8015034:	429a      	cmp	r2, r3
 8015036:	d359      	bcc.n	80150ec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d104      	bne.n	8015048 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2200      	movs	r2, #0
 8015042:	61da      	str	r2, [r3, #28]
 8015044:	2304      	movs	r3, #4
 8015046:	e06e      	b.n	8015126 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	699b      	ldr	r3, [r3, #24]
 801504e:	4619      	mov	r1, r3
 8015050:	4610      	mov	r0, r2
 8015052:	f7ff fe3d 	bl	8014cd0 <create_chain>
 8015056:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d101      	bne.n	8015062 <dir_next+0xe0>
 801505e:	2307      	movs	r3, #7
 8015060:	e061      	b.n	8015126 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	2b01      	cmp	r3, #1
 8015066:	d101      	bne.n	801506c <dir_next+0xea>
 8015068:	2302      	movs	r3, #2
 801506a:	e05c      	b.n	8015126 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015072:	d101      	bne.n	8015078 <dir_next+0xf6>
 8015074:	2301      	movs	r3, #1
 8015076:	e056      	b.n	8015126 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015078:	68f8      	ldr	r0, [r7, #12]
 801507a:	f7ff fad3 	bl	8014624 <sync_window>
 801507e:	4603      	mov	r3, r0
 8015080:	2b00      	cmp	r3, #0
 8015082:	d001      	beq.n	8015088 <dir_next+0x106>
 8015084:	2301      	movs	r3, #1
 8015086:	e04e      	b.n	8015126 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	899b      	ldrh	r3, [r3, #12]
 8015092:	461a      	mov	r2, r3
 8015094:	2100      	movs	r1, #0
 8015096:	f7ff f8fc 	bl	8014292 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801509a:	2300      	movs	r3, #0
 801509c:	613b      	str	r3, [r7, #16]
 801509e:	6979      	ldr	r1, [r7, #20]
 80150a0:	68f8      	ldr	r0, [r7, #12]
 80150a2:	f7ff fba1 	bl	80147e8 <clust2sect>
 80150a6:	4602      	mov	r2, r0
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	635a      	str	r2, [r3, #52]	; 0x34
 80150ac:	e012      	b.n	80150d4 <dir_next+0x152>
						fs->wflag = 1;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	2201      	movs	r2, #1
 80150b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80150b4:	68f8      	ldr	r0, [r7, #12]
 80150b6:	f7ff fab5 	bl	8014624 <sync_window>
 80150ba:	4603      	mov	r3, r0
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d001      	beq.n	80150c4 <dir_next+0x142>
 80150c0:	2301      	movs	r3, #1
 80150c2:	e030      	b.n	8015126 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	3301      	adds	r3, #1
 80150c8:	613b      	str	r3, [r7, #16]
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150ce:	1c5a      	adds	r2, r3, #1
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	635a      	str	r2, [r3, #52]	; 0x34
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	895b      	ldrh	r3, [r3, #10]
 80150d8:	461a      	mov	r2, r3
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	4293      	cmp	r3, r2
 80150de:	d3e6      	bcc.n	80150ae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	1ad2      	subs	r2, r2, r3
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	697a      	ldr	r2, [r7, #20]
 80150f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80150f2:	6979      	ldr	r1, [r7, #20]
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f7ff fb77 	bl	80147e8 <clust2sect>
 80150fa:	4602      	mov	r2, r0
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	68ba      	ldr	r2, [r7, #8]
 8015104:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	899b      	ldrh	r3, [r3, #12]
 8015110:	461a      	mov	r2, r3
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	fbb3 f0f2 	udiv	r0, r3, r2
 8015118:	fb00 f202 	mul.w	r2, r0, r2
 801511c:	1a9b      	subs	r3, r3, r2
 801511e:	18ca      	adds	r2, r1, r3
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015124:	2300      	movs	r3, #0
}
 8015126:	4618      	mov	r0, r3
 8015128:	3718      	adds	r7, #24
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801512e:	b580      	push	{r7, lr}
 8015130:	b086      	sub	sp, #24
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
 8015136:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801513e:	2100      	movs	r1, #0
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f7ff fe95 	bl	8014e70 <dir_sdi>
 8015146:	4603      	mov	r3, r0
 8015148:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801514a:	7dfb      	ldrb	r3, [r7, #23]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d12b      	bne.n	80151a8 <dir_alloc+0x7a>
		n = 0;
 8015150:	2300      	movs	r3, #0
 8015152:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	69db      	ldr	r3, [r3, #28]
 8015158:	4619      	mov	r1, r3
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f7ff faa6 	bl	80146ac <move_window>
 8015160:	4603      	mov	r3, r0
 8015162:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015164:	7dfb      	ldrb	r3, [r7, #23]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d11d      	bne.n	80151a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6a1b      	ldr	r3, [r3, #32]
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	2be5      	cmp	r3, #229	; 0xe5
 8015172:	d004      	beq.n	801517e <dir_alloc+0x50>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6a1b      	ldr	r3, [r3, #32]
 8015178:	781b      	ldrb	r3, [r3, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d107      	bne.n	801518e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	3301      	adds	r3, #1
 8015182:	613b      	str	r3, [r7, #16]
 8015184:	693a      	ldr	r2, [r7, #16]
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	429a      	cmp	r2, r3
 801518a:	d102      	bne.n	8015192 <dir_alloc+0x64>
 801518c:	e00c      	b.n	80151a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801518e:	2300      	movs	r3, #0
 8015190:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015192:	2101      	movs	r1, #1
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7ff fef4 	bl	8014f82 <dir_next>
 801519a:	4603      	mov	r3, r0
 801519c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801519e:	7dfb      	ldrb	r3, [r7, #23]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d0d7      	beq.n	8015154 <dir_alloc+0x26>
 80151a4:	e000      	b.n	80151a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80151a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80151a8:	7dfb      	ldrb	r3, [r7, #23]
 80151aa:	2b04      	cmp	r3, #4
 80151ac:	d101      	bne.n	80151b2 <dir_alloc+0x84>
 80151ae:	2307      	movs	r3, #7
 80151b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80151b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3718      	adds	r7, #24
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	331a      	adds	r3, #26
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fe ffbe 	bl	801414c <ld_word>
 80151d0:	4603      	mov	r3, r0
 80151d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	2b03      	cmp	r3, #3
 80151da:	d109      	bne.n	80151f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	3314      	adds	r3, #20
 80151e0:	4618      	mov	r0, r3
 80151e2:	f7fe ffb3 	bl	801414c <ld_word>
 80151e6:	4603      	mov	r3, r0
 80151e8:	041b      	lsls	r3, r3, #16
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	4313      	orrs	r3, r2
 80151ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80151f0:	68fb      	ldr	r3, [r7, #12]
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3710      	adds	r7, #16
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}

080151fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80151fa:	b580      	push	{r7, lr}
 80151fc:	b084      	sub	sp, #16
 80151fe:	af00      	add	r7, sp, #0
 8015200:	60f8      	str	r0, [r7, #12]
 8015202:	60b9      	str	r1, [r7, #8]
 8015204:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	331a      	adds	r3, #26
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	b292      	uxth	r2, r2
 801520e:	4611      	mov	r1, r2
 8015210:	4618      	mov	r0, r3
 8015212:	f7fe ffd6 	bl	80141c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	2b03      	cmp	r3, #3
 801521c:	d109      	bne.n	8015232 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	f103 0214 	add.w	r2, r3, #20
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	0c1b      	lsrs	r3, r3, #16
 8015228:	b29b      	uxth	r3, r3
 801522a:	4619      	mov	r1, r3
 801522c:	4610      	mov	r0, r2
 801522e:	f7fe ffc8 	bl	80141c2 <st_word>
	}
}
 8015232:	bf00      	nop
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
	...

0801523c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801523c:	b590      	push	{r4, r7, lr}
 801523e:	b087      	sub	sp, #28
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	331a      	adds	r3, #26
 801524a:	4618      	mov	r0, r3
 801524c:	f7fe ff7e 	bl	801414c <ld_word>
 8015250:	4603      	mov	r3, r0
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <cmp_lfn+0x1e>
 8015256:	2300      	movs	r3, #0
 8015258:	e059      	b.n	801530e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015262:	1e5a      	subs	r2, r3, #1
 8015264:	4613      	mov	r3, r2
 8015266:	005b      	lsls	r3, r3, #1
 8015268:	4413      	add	r3, r2
 801526a:	009b      	lsls	r3, r3, #2
 801526c:	4413      	add	r3, r2
 801526e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015270:	2301      	movs	r3, #1
 8015272:	81fb      	strh	r3, [r7, #14]
 8015274:	2300      	movs	r3, #0
 8015276:	613b      	str	r3, [r7, #16]
 8015278:	e033      	b.n	80152e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801527a:	4a27      	ldr	r2, [pc, #156]	; (8015318 <cmp_lfn+0xdc>)
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	4413      	add	r3, r2
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	461a      	mov	r2, r3
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	4413      	add	r3, r2
 8015288:	4618      	mov	r0, r3
 801528a:	f7fe ff5f 	bl	801414c <ld_word>
 801528e:	4603      	mov	r3, r0
 8015290:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015292:	89fb      	ldrh	r3, [r7, #14]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d01a      	beq.n	80152ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	2bfe      	cmp	r3, #254	; 0xfe
 801529c:	d812      	bhi.n	80152c4 <cmp_lfn+0x88>
 801529e:	89bb      	ldrh	r3, [r7, #12]
 80152a0:	4618      	mov	r0, r3
 80152a2:	f003 f969 	bl	8018578 <ff_wtoupper>
 80152a6:	4603      	mov	r3, r0
 80152a8:	461c      	mov	r4, r3
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	1c5a      	adds	r2, r3, #1
 80152ae:	617a      	str	r2, [r7, #20]
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	4413      	add	r3, r2
 80152b6:	881b      	ldrh	r3, [r3, #0]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f003 f95d 	bl	8018578 <ff_wtoupper>
 80152be:	4603      	mov	r3, r0
 80152c0:	429c      	cmp	r4, r3
 80152c2:	d001      	beq.n	80152c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80152c4:	2300      	movs	r3, #0
 80152c6:	e022      	b.n	801530e <cmp_lfn+0xd2>
			}
			wc = uc;
 80152c8:	89bb      	ldrh	r3, [r7, #12]
 80152ca:	81fb      	strh	r3, [r7, #14]
 80152cc:	e006      	b.n	80152dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80152ce:	89bb      	ldrh	r3, [r7, #12]
 80152d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152d4:	4293      	cmp	r3, r2
 80152d6:	d001      	beq.n	80152dc <cmp_lfn+0xa0>
 80152d8:	2300      	movs	r3, #0
 80152da:	e018      	b.n	801530e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	3301      	adds	r3, #1
 80152e0:	613b      	str	r3, [r7, #16]
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	2b0c      	cmp	r3, #12
 80152e6:	d9c8      	bls.n	801527a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	781b      	ldrb	r3, [r3, #0]
 80152ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00b      	beq.n	801530c <cmp_lfn+0xd0>
 80152f4:	89fb      	ldrh	r3, [r7, #14]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d008      	beq.n	801530c <cmp_lfn+0xd0>
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	005b      	lsls	r3, r3, #1
 80152fe:	687a      	ldr	r2, [r7, #4]
 8015300:	4413      	add	r3, r2
 8015302:	881b      	ldrh	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d001      	beq.n	801530c <cmp_lfn+0xd0>
 8015308:	2300      	movs	r3, #0
 801530a:	e000      	b.n	801530e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801530c:	2301      	movs	r3, #1
}
 801530e:	4618      	mov	r0, r3
 8015310:	371c      	adds	r7, #28
 8015312:	46bd      	mov	sp, r7
 8015314:	bd90      	pop	{r4, r7, pc}
 8015316:	bf00      	nop
 8015318:	0801b838 	.word	0x0801b838

0801531c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b086      	sub	sp, #24
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	331a      	adds	r3, #26
 801532a:	4618      	mov	r0, r3
 801532c:	f7fe ff0e 	bl	801414c <ld_word>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <pick_lfn+0x1e>
 8015336:	2300      	movs	r3, #0
 8015338:	e04d      	b.n	80153d6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015342:	1e5a      	subs	r2, r3, #1
 8015344:	4613      	mov	r3, r2
 8015346:	005b      	lsls	r3, r3, #1
 8015348:	4413      	add	r3, r2
 801534a:	009b      	lsls	r3, r3, #2
 801534c:	4413      	add	r3, r2
 801534e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015350:	2301      	movs	r3, #1
 8015352:	81fb      	strh	r3, [r7, #14]
 8015354:	2300      	movs	r3, #0
 8015356:	613b      	str	r3, [r7, #16]
 8015358:	e028      	b.n	80153ac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801535a:	4a21      	ldr	r2, [pc, #132]	; (80153e0 <pick_lfn+0xc4>)
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	4413      	add	r3, r2
 8015360:	781b      	ldrb	r3, [r3, #0]
 8015362:	461a      	mov	r2, r3
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	4413      	add	r3, r2
 8015368:	4618      	mov	r0, r3
 801536a:	f7fe feef 	bl	801414c <ld_word>
 801536e:	4603      	mov	r3, r0
 8015370:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015372:	89fb      	ldrh	r3, [r7, #14]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00f      	beq.n	8015398 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	2bfe      	cmp	r3, #254	; 0xfe
 801537c:	d901      	bls.n	8015382 <pick_lfn+0x66>
 801537e:	2300      	movs	r3, #0
 8015380:	e029      	b.n	80153d6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015382:	89bb      	ldrh	r3, [r7, #12]
 8015384:	81fb      	strh	r3, [r7, #14]
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	1c5a      	adds	r2, r3, #1
 801538a:	617a      	str	r2, [r7, #20]
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	4413      	add	r3, r2
 8015392:	89fa      	ldrh	r2, [r7, #14]
 8015394:	801a      	strh	r2, [r3, #0]
 8015396:	e006      	b.n	80153a6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015398:	89bb      	ldrh	r3, [r7, #12]
 801539a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801539e:	4293      	cmp	r3, r2
 80153a0:	d001      	beq.n	80153a6 <pick_lfn+0x8a>
 80153a2:	2300      	movs	r3, #0
 80153a4:	e017      	b.n	80153d6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	3301      	adds	r3, #1
 80153aa:	613b      	str	r3, [r7, #16]
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	2b0c      	cmp	r3, #12
 80153b0:	d9d3      	bls.n	801535a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	781b      	ldrb	r3, [r3, #0]
 80153b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d00a      	beq.n	80153d4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	2bfe      	cmp	r3, #254	; 0xfe
 80153c2:	d901      	bls.n	80153c8 <pick_lfn+0xac>
 80153c4:	2300      	movs	r3, #0
 80153c6:	e006      	b.n	80153d6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	4413      	add	r3, r2
 80153d0:	2200      	movs	r2, #0
 80153d2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80153d4:	2301      	movs	r3, #1
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3718      	adds	r7, #24
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	0801b838 	.word	0x0801b838

080153e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b088      	sub	sp, #32
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	4611      	mov	r1, r2
 80153f0:	461a      	mov	r2, r3
 80153f2:	460b      	mov	r3, r1
 80153f4:	71fb      	strb	r3, [r7, #7]
 80153f6:	4613      	mov	r3, r2
 80153f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	330d      	adds	r3, #13
 80153fe:	79ba      	ldrb	r2, [r7, #6]
 8015400:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	330b      	adds	r3, #11
 8015406:	220f      	movs	r2, #15
 8015408:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	330c      	adds	r3, #12
 801540e:	2200      	movs	r2, #0
 8015410:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015412:	68bb      	ldr	r3, [r7, #8]
 8015414:	331a      	adds	r3, #26
 8015416:	2100      	movs	r1, #0
 8015418:	4618      	mov	r0, r3
 801541a:	f7fe fed2 	bl	80141c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801541e:	79fb      	ldrb	r3, [r7, #7]
 8015420:	1e5a      	subs	r2, r3, #1
 8015422:	4613      	mov	r3, r2
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	4413      	add	r3, r2
 8015428:	009b      	lsls	r3, r3, #2
 801542a:	4413      	add	r3, r2
 801542c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801542e:	2300      	movs	r3, #0
 8015430:	82fb      	strh	r3, [r7, #22]
 8015432:	2300      	movs	r3, #0
 8015434:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015436:	8afb      	ldrh	r3, [r7, #22]
 8015438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801543c:	4293      	cmp	r3, r2
 801543e:	d007      	beq.n	8015450 <put_lfn+0x6c>
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	1c5a      	adds	r2, r3, #1
 8015444:	61fa      	str	r2, [r7, #28]
 8015446:	005b      	lsls	r3, r3, #1
 8015448:	68fa      	ldr	r2, [r7, #12]
 801544a:	4413      	add	r3, r2
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015450:	4a17      	ldr	r2, [pc, #92]	; (80154b0 <put_lfn+0xcc>)
 8015452:	69bb      	ldr	r3, [r7, #24]
 8015454:	4413      	add	r3, r2
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	461a      	mov	r2, r3
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	4413      	add	r3, r2
 801545e:	8afa      	ldrh	r2, [r7, #22]
 8015460:	4611      	mov	r1, r2
 8015462:	4618      	mov	r0, r3
 8015464:	f7fe fead 	bl	80141c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015468:	8afb      	ldrh	r3, [r7, #22]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d102      	bne.n	8015474 <put_lfn+0x90>
 801546e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015472:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	3301      	adds	r3, #1
 8015478:	61bb      	str	r3, [r7, #24]
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	2b0c      	cmp	r3, #12
 801547e:	d9da      	bls.n	8015436 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015480:	8afb      	ldrh	r3, [r7, #22]
 8015482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015486:	4293      	cmp	r3, r2
 8015488:	d006      	beq.n	8015498 <put_lfn+0xb4>
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	005b      	lsls	r3, r3, #1
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	4413      	add	r3, r2
 8015492:	881b      	ldrh	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d103      	bne.n	80154a0 <put_lfn+0xbc>
 8015498:	79fb      	ldrb	r3, [r7, #7]
 801549a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801549e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	79fa      	ldrb	r2, [r7, #7]
 80154a4:	701a      	strb	r2, [r3, #0]
}
 80154a6:	bf00      	nop
 80154a8:	3720      	adds	r7, #32
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}
 80154ae:	bf00      	nop
 80154b0:	0801b838 	.word	0x0801b838

080154b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b08c      	sub	sp, #48	; 0x30
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	607a      	str	r2, [r7, #4]
 80154c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80154c2:	220b      	movs	r2, #11
 80154c4:	68b9      	ldr	r1, [r7, #8]
 80154c6:	68f8      	ldr	r0, [r7, #12]
 80154c8:	f7fe fec2 	bl	8014250 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	2b05      	cmp	r3, #5
 80154d0:	d92b      	bls.n	801552a <gen_numname+0x76>
		sr = seq;
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80154d6:	e022      	b.n	801551e <gen_numname+0x6a>
			wc = *lfn++;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	1c9a      	adds	r2, r3, #2
 80154dc:	607a      	str	r2, [r7, #4]
 80154de:	881b      	ldrh	r3, [r3, #0]
 80154e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80154e2:	2300      	movs	r3, #0
 80154e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80154e6:	e017      	b.n	8015518 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	005a      	lsls	r2, r3, #1
 80154ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154ee:	f003 0301 	and.w	r3, r3, #1
 80154f2:	4413      	add	r3, r2
 80154f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80154f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154f8:	085b      	lsrs	r3, r3, #1
 80154fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015502:	2b00      	cmp	r3, #0
 8015504:	d005      	beq.n	8015512 <gen_numname+0x5e>
 8015506:	69fb      	ldr	r3, [r7, #28]
 8015508:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801550c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8015510:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8015512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015514:	3301      	adds	r3, #1
 8015516:	62bb      	str	r3, [r7, #40]	; 0x28
 8015518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551a:	2b0f      	cmp	r3, #15
 801551c:	d9e4      	bls.n	80154e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	881b      	ldrh	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d1d8      	bne.n	80154d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801552a:	2307      	movs	r3, #7
 801552c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	b2db      	uxtb	r3, r3
 8015532:	f003 030f 	and.w	r3, r3, #15
 8015536:	b2db      	uxtb	r3, r3
 8015538:	3330      	adds	r3, #48	; 0x30
 801553a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801553e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015542:	2b39      	cmp	r3, #57	; 0x39
 8015544:	d904      	bls.n	8015550 <gen_numname+0x9c>
 8015546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801554a:	3307      	adds	r3, #7
 801554c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015552:	1e5a      	subs	r2, r3, #1
 8015554:	62ba      	str	r2, [r7, #40]	; 0x28
 8015556:	3330      	adds	r3, #48	; 0x30
 8015558:	443b      	add	r3, r7
 801555a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801555e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	091b      	lsrs	r3, r3, #4
 8015566:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d1df      	bne.n	801552e <gen_numname+0x7a>
	ns[i] = '~';
 801556e:	f107 0214 	add.w	r2, r7, #20
 8015572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015574:	4413      	add	r3, r2
 8015576:	227e      	movs	r2, #126	; 0x7e
 8015578:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801557a:	2300      	movs	r3, #0
 801557c:	627b      	str	r3, [r7, #36]	; 0x24
 801557e:	e002      	b.n	8015586 <gen_numname+0xd2>
 8015580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015582:	3301      	adds	r3, #1
 8015584:	627b      	str	r3, [r7, #36]	; 0x24
 8015586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558a:	429a      	cmp	r2, r3
 801558c:	d205      	bcs.n	801559a <gen_numname+0xe6>
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015592:	4413      	add	r3, r2
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	2b20      	cmp	r3, #32
 8015598:	d1f2      	bne.n	8015580 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559c:	2b07      	cmp	r3, #7
 801559e:	d807      	bhi.n	80155b0 <gen_numname+0xfc>
 80155a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a2:	1c5a      	adds	r2, r3, #1
 80155a4:	62ba      	str	r2, [r7, #40]	; 0x28
 80155a6:	3330      	adds	r3, #48	; 0x30
 80155a8:	443b      	add	r3, r7
 80155aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80155ae:	e000      	b.n	80155b2 <gen_numname+0xfe>
 80155b0:	2120      	movs	r1, #32
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	1c5a      	adds	r2, r3, #1
 80155b6:	627a      	str	r2, [r7, #36]	; 0x24
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	4413      	add	r3, r2
 80155bc:	460a      	mov	r2, r1
 80155be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80155c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c2:	2b07      	cmp	r3, #7
 80155c4:	d9e9      	bls.n	801559a <gen_numname+0xe6>
}
 80155c6:	bf00      	nop
 80155c8:	bf00      	nop
 80155ca:	3730      	adds	r7, #48	; 0x30
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80155d0:	b480      	push	{r7}
 80155d2:	b085      	sub	sp, #20
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80155d8:	2300      	movs	r3, #0
 80155da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80155dc:	230b      	movs	r3, #11
 80155de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80155e0:	7bfb      	ldrb	r3, [r7, #15]
 80155e2:	b2da      	uxtb	r2, r3
 80155e4:	0852      	lsrs	r2, r2, #1
 80155e6:	01db      	lsls	r3, r3, #7
 80155e8:	4313      	orrs	r3, r2
 80155ea:	b2da      	uxtb	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	1c59      	adds	r1, r3, #1
 80155f0:	6079      	str	r1, [r7, #4]
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	4413      	add	r3, r2
 80155f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	3b01      	subs	r3, #1
 80155fc:	60bb      	str	r3, [r7, #8]
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d1ed      	bne.n	80155e0 <sum_sfn+0x10>
	return sum;
 8015604:	7bfb      	ldrb	r3, [r7, #15]
}
 8015606:	4618      	mov	r0, r3
 8015608:	3714      	adds	r7, #20
 801560a:	46bd      	mov	sp, r7
 801560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015610:	4770      	bx	lr

08015612 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b086      	sub	sp, #24
 8015616:	af00      	add	r7, sp, #0
 8015618:	6078      	str	r0, [r7, #4]
 801561a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801561c:	2304      	movs	r3, #4
 801561e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8015626:	23ff      	movs	r3, #255	; 0xff
 8015628:	757b      	strb	r3, [r7, #21]
 801562a:	23ff      	movs	r3, #255	; 0xff
 801562c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801562e:	e081      	b.n	8015734 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	69db      	ldr	r3, [r3, #28]
 8015634:	4619      	mov	r1, r3
 8015636:	6938      	ldr	r0, [r7, #16]
 8015638:	f7ff f838 	bl	80146ac <move_window>
 801563c:	4603      	mov	r3, r0
 801563e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015640:	7dfb      	ldrb	r3, [r7, #23]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d17c      	bne.n	8015740 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6a1b      	ldr	r3, [r3, #32]
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801564e:	7dbb      	ldrb	r3, [r7, #22]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d102      	bne.n	801565a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8015654:	2304      	movs	r3, #4
 8015656:	75fb      	strb	r3, [r7, #23]
 8015658:	e077      	b.n	801574a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6a1b      	ldr	r3, [r3, #32]
 801565e:	330b      	adds	r3, #11
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015666:	73fb      	strb	r3, [r7, #15]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	7bfa      	ldrb	r2, [r7, #15]
 801566c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801566e:	7dbb      	ldrb	r3, [r7, #22]
 8015670:	2be5      	cmp	r3, #229	; 0xe5
 8015672:	d00e      	beq.n	8015692 <dir_read+0x80>
 8015674:	7dbb      	ldrb	r3, [r7, #22]
 8015676:	2b2e      	cmp	r3, #46	; 0x2e
 8015678:	d00b      	beq.n	8015692 <dir_read+0x80>
 801567a:	7bfb      	ldrb	r3, [r7, #15]
 801567c:	f023 0320 	bic.w	r3, r3, #32
 8015680:	2b08      	cmp	r3, #8
 8015682:	bf0c      	ite	eq
 8015684:	2301      	moveq	r3, #1
 8015686:	2300      	movne	r3, #0
 8015688:	b2db      	uxtb	r3, r3
 801568a:	461a      	mov	r2, r3
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	4293      	cmp	r3, r2
 8015690:	d002      	beq.n	8015698 <dir_read+0x86>
				ord = 0xFF;
 8015692:	23ff      	movs	r3, #255	; 0xff
 8015694:	757b      	strb	r3, [r7, #21]
 8015696:	e044      	b.n	8015722 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8015698:	7bfb      	ldrb	r3, [r7, #15]
 801569a:	2b0f      	cmp	r3, #15
 801569c:	d12f      	bne.n	80156fe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801569e:	7dbb      	ldrb	r3, [r7, #22]
 80156a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d00d      	beq.n	80156c4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6a1b      	ldr	r3, [r3, #32]
 80156ac:	7b5b      	ldrb	r3, [r3, #13]
 80156ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80156b0:	7dbb      	ldrb	r3, [r7, #22]
 80156b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80156b6:	75bb      	strb	r3, [r7, #22]
 80156b8:	7dbb      	ldrb	r3, [r7, #22]
 80156ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	695a      	ldr	r2, [r3, #20]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80156c4:	7dba      	ldrb	r2, [r7, #22]
 80156c6:	7d7b      	ldrb	r3, [r7, #21]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d115      	bne.n	80156f8 <dir_read+0xe6>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6a1b      	ldr	r3, [r3, #32]
 80156d0:	330d      	adds	r3, #13
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	7d3a      	ldrb	r2, [r7, #20]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d10e      	bne.n	80156f8 <dir_read+0xe6>
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	691a      	ldr	r2, [r3, #16]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6a1b      	ldr	r3, [r3, #32]
 80156e2:	4619      	mov	r1, r3
 80156e4:	4610      	mov	r0, r2
 80156e6:	f7ff fe19 	bl	801531c <pick_lfn>
 80156ea:	4603      	mov	r3, r0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d003      	beq.n	80156f8 <dir_read+0xe6>
 80156f0:	7d7b      	ldrb	r3, [r7, #21]
 80156f2:	3b01      	subs	r3, #1
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	e000      	b.n	80156fa <dir_read+0xe8>
 80156f8:	23ff      	movs	r3, #255	; 0xff
 80156fa:	757b      	strb	r3, [r7, #21]
 80156fc:	e011      	b.n	8015722 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80156fe:	7d7b      	ldrb	r3, [r7, #21]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d109      	bne.n	8015718 <dir_read+0x106>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6a1b      	ldr	r3, [r3, #32]
 8015708:	4618      	mov	r0, r3
 801570a:	f7ff ff61 	bl	80155d0 <sum_sfn>
 801570e:	4603      	mov	r3, r0
 8015710:	461a      	mov	r2, r3
 8015712:	7d3b      	ldrb	r3, [r7, #20]
 8015714:	4293      	cmp	r3, r2
 8015716:	d015      	beq.n	8015744 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f04f 32ff 	mov.w	r2, #4294967295
 801571e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8015720:	e010      	b.n	8015744 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8015722:	2100      	movs	r1, #0
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7ff fc2c 	bl	8014f82 <dir_next>
 801572a:	4603      	mov	r3, r0
 801572c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801572e:	7dfb      	ldrb	r3, [r7, #23]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d109      	bne.n	8015748 <dir_read+0x136>
	while (dp->sect) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	69db      	ldr	r3, [r3, #28]
 8015738:	2b00      	cmp	r3, #0
 801573a:	f47f af79 	bne.w	8015630 <dir_read+0x1e>
 801573e:	e004      	b.n	801574a <dir_read+0x138>
		if (res != FR_OK) break;
 8015740:	bf00      	nop
 8015742:	e002      	b.n	801574a <dir_read+0x138>
					break;
 8015744:	bf00      	nop
 8015746:	e000      	b.n	801574a <dir_read+0x138>
		if (res != FR_OK) break;
 8015748:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801574a:	7dfb      	ldrb	r3, [r7, #23]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d002      	beq.n	8015756 <dir_read+0x144>
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2200      	movs	r2, #0
 8015754:	61da      	str	r2, [r3, #28]
	return res;
 8015756:	7dfb      	ldrb	r3, [r7, #23]
}
 8015758:	4618      	mov	r0, r3
 801575a:	3718      	adds	r7, #24
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}

08015760 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b086      	sub	sp, #24
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801576e:	2100      	movs	r1, #0
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f7ff fb7d 	bl	8014e70 <dir_sdi>
 8015776:	4603      	mov	r3, r0
 8015778:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801577a:	7dfb      	ldrb	r3, [r7, #23]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d001      	beq.n	8015784 <dir_find+0x24>
 8015780:	7dfb      	ldrb	r3, [r7, #23]
 8015782:	e0a9      	b.n	80158d8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015784:	23ff      	movs	r3, #255	; 0xff
 8015786:	753b      	strb	r3, [r7, #20]
 8015788:	7d3b      	ldrb	r3, [r7, #20]
 801578a:	757b      	strb	r3, [r7, #21]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f04f 32ff 	mov.w	r2, #4294967295
 8015792:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	69db      	ldr	r3, [r3, #28]
 8015798:	4619      	mov	r1, r3
 801579a:	6938      	ldr	r0, [r7, #16]
 801579c:	f7fe ff86 	bl	80146ac <move_window>
 80157a0:	4603      	mov	r3, r0
 80157a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80157a4:	7dfb      	ldrb	r3, [r7, #23]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f040 8090 	bne.w	80158cc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6a1b      	ldr	r3, [r3, #32]
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80157b4:	7dbb      	ldrb	r3, [r7, #22]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d102      	bne.n	80157c0 <dir_find+0x60>
 80157ba:	2304      	movs	r3, #4
 80157bc:	75fb      	strb	r3, [r7, #23]
 80157be:	e08a      	b.n	80158d6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6a1b      	ldr	r3, [r3, #32]
 80157c4:	330b      	adds	r3, #11
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80157cc:	73fb      	strb	r3, [r7, #15]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	7bfa      	ldrb	r2, [r7, #15]
 80157d2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80157d4:	7dbb      	ldrb	r3, [r7, #22]
 80157d6:	2be5      	cmp	r3, #229	; 0xe5
 80157d8:	d007      	beq.n	80157ea <dir_find+0x8a>
 80157da:	7bfb      	ldrb	r3, [r7, #15]
 80157dc:	f003 0308 	and.w	r3, r3, #8
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d009      	beq.n	80157f8 <dir_find+0x98>
 80157e4:	7bfb      	ldrb	r3, [r7, #15]
 80157e6:	2b0f      	cmp	r3, #15
 80157e8:	d006      	beq.n	80157f8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80157ea:	23ff      	movs	r3, #255	; 0xff
 80157ec:	757b      	strb	r3, [r7, #21]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f04f 32ff 	mov.w	r2, #4294967295
 80157f4:	631a      	str	r2, [r3, #48]	; 0x30
 80157f6:	e05e      	b.n	80158b6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80157f8:	7bfb      	ldrb	r3, [r7, #15]
 80157fa:	2b0f      	cmp	r3, #15
 80157fc:	d136      	bne.n	801586c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015808:	2b00      	cmp	r3, #0
 801580a:	d154      	bne.n	80158b6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801580c:	7dbb      	ldrb	r3, [r7, #22]
 801580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015812:	2b00      	cmp	r3, #0
 8015814:	d00d      	beq.n	8015832 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6a1b      	ldr	r3, [r3, #32]
 801581a:	7b5b      	ldrb	r3, [r3, #13]
 801581c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801581e:	7dbb      	ldrb	r3, [r7, #22]
 8015820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015824:	75bb      	strb	r3, [r7, #22]
 8015826:	7dbb      	ldrb	r3, [r7, #22]
 8015828:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	695a      	ldr	r2, [r3, #20]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015832:	7dba      	ldrb	r2, [r7, #22]
 8015834:	7d7b      	ldrb	r3, [r7, #21]
 8015836:	429a      	cmp	r2, r3
 8015838:	d115      	bne.n	8015866 <dir_find+0x106>
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6a1b      	ldr	r3, [r3, #32]
 801583e:	330d      	adds	r3, #13
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	7d3a      	ldrb	r2, [r7, #20]
 8015844:	429a      	cmp	r2, r3
 8015846:	d10e      	bne.n	8015866 <dir_find+0x106>
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	691a      	ldr	r2, [r3, #16]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6a1b      	ldr	r3, [r3, #32]
 8015850:	4619      	mov	r1, r3
 8015852:	4610      	mov	r0, r2
 8015854:	f7ff fcf2 	bl	801523c <cmp_lfn>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d003      	beq.n	8015866 <dir_find+0x106>
 801585e:	7d7b      	ldrb	r3, [r7, #21]
 8015860:	3b01      	subs	r3, #1
 8015862:	b2db      	uxtb	r3, r3
 8015864:	e000      	b.n	8015868 <dir_find+0x108>
 8015866:	23ff      	movs	r3, #255	; 0xff
 8015868:	757b      	strb	r3, [r7, #21]
 801586a:	e024      	b.n	80158b6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801586c:	7d7b      	ldrb	r3, [r7, #21]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d109      	bne.n	8015886 <dir_find+0x126>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6a1b      	ldr	r3, [r3, #32]
 8015876:	4618      	mov	r0, r3
 8015878:	f7ff feaa 	bl	80155d0 <sum_sfn>
 801587c:	4603      	mov	r3, r0
 801587e:	461a      	mov	r2, r3
 8015880:	7d3b      	ldrb	r3, [r7, #20]
 8015882:	4293      	cmp	r3, r2
 8015884:	d024      	beq.n	80158d0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801588c:	f003 0301 	and.w	r3, r3, #1
 8015890:	2b00      	cmp	r3, #0
 8015892:	d10a      	bne.n	80158aa <dir_find+0x14a>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	6a18      	ldr	r0, [r3, #32]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	3324      	adds	r3, #36	; 0x24
 801589c:	220b      	movs	r2, #11
 801589e:	4619      	mov	r1, r3
 80158a0:	f7fe fd12 	bl	80142c8 <mem_cmp>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d014      	beq.n	80158d4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80158aa:	23ff      	movs	r3, #255	; 0xff
 80158ac:	757b      	strb	r3, [r7, #21]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f04f 32ff 	mov.w	r2, #4294967295
 80158b4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80158b6:	2100      	movs	r1, #0
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f7ff fb62 	bl	8014f82 <dir_next>
 80158be:	4603      	mov	r3, r0
 80158c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f43f af65 	beq.w	8015794 <dir_find+0x34>
 80158ca:	e004      	b.n	80158d6 <dir_find+0x176>
		if (res != FR_OK) break;
 80158cc:	bf00      	nop
 80158ce:	e002      	b.n	80158d6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80158d0:	bf00      	nop
 80158d2:	e000      	b.n	80158d6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80158d4:	bf00      	nop

	return res;
 80158d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3718      	adds	r7, #24
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b08c      	sub	sp, #48	; 0x30
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80158f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d001      	beq.n	8015900 <dir_register+0x20>
 80158fc:	2306      	movs	r3, #6
 80158fe:	e0e0      	b.n	8015ac2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015900:	2300      	movs	r3, #0
 8015902:	627b      	str	r3, [r7, #36]	; 0x24
 8015904:	e002      	b.n	801590c <dir_register+0x2c>
 8015906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015908:	3301      	adds	r3, #1
 801590a:	627b      	str	r3, [r7, #36]	; 0x24
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	691a      	ldr	r2, [r3, #16]
 8015910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	4413      	add	r3, r2
 8015916:	881b      	ldrh	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d1f4      	bne.n	8015906 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015922:	f107 030c 	add.w	r3, r7, #12
 8015926:	220c      	movs	r2, #12
 8015928:	4618      	mov	r0, r3
 801592a:	f7fe fc91 	bl	8014250 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801592e:	7dfb      	ldrb	r3, [r7, #23]
 8015930:	f003 0301 	and.w	r3, r3, #1
 8015934:	2b00      	cmp	r3, #0
 8015936:	d032      	beq.n	801599e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2240      	movs	r2, #64	; 0x40
 801593c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015940:	2301      	movs	r3, #1
 8015942:	62bb      	str	r3, [r7, #40]	; 0x28
 8015944:	e016      	b.n	8015974 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	691a      	ldr	r2, [r3, #16]
 8015950:	f107 010c 	add.w	r1, r7, #12
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	f7ff fdad 	bl	80154b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f7ff ff00 	bl	8015760 <dir_find>
 8015960:	4603      	mov	r3, r0
 8015962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801596a:	2b00      	cmp	r3, #0
 801596c:	d106      	bne.n	801597c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015970:	3301      	adds	r3, #1
 8015972:	62bb      	str	r3, [r7, #40]	; 0x28
 8015974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015976:	2b63      	cmp	r3, #99	; 0x63
 8015978:	d9e5      	bls.n	8015946 <dir_register+0x66>
 801597a:	e000      	b.n	801597e <dir_register+0x9e>
			if (res != FR_OK) break;
 801597c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015980:	2b64      	cmp	r3, #100	; 0x64
 8015982:	d101      	bne.n	8015988 <dir_register+0xa8>
 8015984:	2307      	movs	r3, #7
 8015986:	e09c      	b.n	8015ac2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801598c:	2b04      	cmp	r3, #4
 801598e:	d002      	beq.n	8015996 <dir_register+0xb6>
 8015990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015994:	e095      	b.n	8015ac2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015996:	7dfa      	ldrb	r2, [r7, #23]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801599e:	7dfb      	ldrb	r3, [r7, #23]
 80159a0:	f003 0302 	and.w	r3, r3, #2
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d007      	beq.n	80159b8 <dir_register+0xd8>
 80159a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159aa:	330c      	adds	r3, #12
 80159ac:	4a47      	ldr	r2, [pc, #284]	; (8015acc <dir_register+0x1ec>)
 80159ae:	fba2 2303 	umull	r2, r3, r2, r3
 80159b2:	089b      	lsrs	r3, r3, #2
 80159b4:	3301      	adds	r3, #1
 80159b6:	e000      	b.n	80159ba <dir_register+0xda>
 80159b8:	2301      	movs	r3, #1
 80159ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80159bc:	6a39      	ldr	r1, [r7, #32]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f7ff fbb5 	bl	801512e <dir_alloc>
 80159c4:	4603      	mov	r3, r0
 80159c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80159ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d148      	bne.n	8015a64 <dir_register+0x184>
 80159d2:	6a3b      	ldr	r3, [r7, #32]
 80159d4:	3b01      	subs	r3, #1
 80159d6:	623b      	str	r3, [r7, #32]
 80159d8:	6a3b      	ldr	r3, [r7, #32]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d042      	beq.n	8015a64 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	695a      	ldr	r2, [r3, #20]
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	015b      	lsls	r3, r3, #5
 80159e6:	1ad3      	subs	r3, r2, r3
 80159e8:	4619      	mov	r1, r3
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f7ff fa40 	bl	8014e70 <dir_sdi>
 80159f0:	4603      	mov	r3, r0
 80159f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80159f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d132      	bne.n	8015a64 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	3324      	adds	r3, #36	; 0x24
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7ff fde4 	bl	80155d0 <sum_sfn>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	69db      	ldr	r3, [r3, #28]
 8015a10:	4619      	mov	r1, r3
 8015a12:	69f8      	ldr	r0, [r7, #28]
 8015a14:	f7fe fe4a 	bl	80146ac <move_window>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d11d      	bne.n	8015a62 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	6918      	ldr	r0, [r3, #16]
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6a19      	ldr	r1, [r3, #32]
 8015a2e:	6a3b      	ldr	r3, [r7, #32]
 8015a30:	b2da      	uxtb	r2, r3
 8015a32:	7efb      	ldrb	r3, [r7, #27]
 8015a34:	f7ff fcd6 	bl	80153e4 <put_lfn>
				fs->wflag = 1;
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015a3e:	2100      	movs	r1, #0
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7ff fa9e 	bl	8014f82 <dir_next>
 8015a46:	4603      	mov	r3, r0
 8015a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d107      	bne.n	8015a64 <dir_register+0x184>
 8015a54:	6a3b      	ldr	r3, [r7, #32]
 8015a56:	3b01      	subs	r3, #1
 8015a58:	623b      	str	r3, [r7, #32]
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d1d5      	bne.n	8015a0c <dir_register+0x12c>
 8015a60:	e000      	b.n	8015a64 <dir_register+0x184>
				if (res != FR_OK) break;
 8015a62:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d128      	bne.n	8015abe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	69db      	ldr	r3, [r3, #28]
 8015a70:	4619      	mov	r1, r3
 8015a72:	69f8      	ldr	r0, [r7, #28]
 8015a74:	f7fe fe1a 	bl	80146ac <move_window>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d11b      	bne.n	8015abe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6a1b      	ldr	r3, [r3, #32]
 8015a8a:	2220      	movs	r2, #32
 8015a8c:	2100      	movs	r1, #0
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7fe fbff 	bl	8014292 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6a18      	ldr	r0, [r3, #32]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	3324      	adds	r3, #36	; 0x24
 8015a9c:	220b      	movs	r2, #11
 8015a9e:	4619      	mov	r1, r3
 8015aa0:	f7fe fbd6 	bl	8014250 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6a1b      	ldr	r3, [r3, #32]
 8015aae:	330c      	adds	r3, #12
 8015ab0:	f002 0218 	and.w	r2, r2, #24
 8015ab4:	b2d2      	uxtb	r2, r2
 8015ab6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	2201      	movs	r2, #1
 8015abc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3730      	adds	r7, #48	; 0x30
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	4ec4ec4f 	.word	0x4ec4ec4f

08015ad0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b086      	sub	sp, #24
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	695b      	ldr	r3, [r3, #20]
 8015ae2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015aec:	d007      	beq.n	8015afe <dir_remove+0x2e>
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015af2:	4619      	mov	r1, r3
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f7ff f9bb 	bl	8014e70 <dir_sdi>
 8015afa:	4603      	mov	r3, r0
 8015afc:	e000      	b.n	8015b00 <dir_remove+0x30>
 8015afe:	2300      	movs	r3, #0
 8015b00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b02:	7dfb      	ldrb	r3, [r7, #23]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d128      	bne.n	8015b5a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	69db      	ldr	r3, [r3, #28]
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	6938      	ldr	r0, [r7, #16]
 8015b10:	f7fe fdcc 	bl	80146ac <move_window>
 8015b14:	4603      	mov	r3, r0
 8015b16:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015b18:	7dfb      	ldrb	r3, [r7, #23]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d115      	bne.n	8015b4a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6a1b      	ldr	r3, [r3, #32]
 8015b22:	22e5      	movs	r2, #229	; 0xe5
 8015b24:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	2201      	movs	r2, #1
 8015b2a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	695b      	ldr	r3, [r3, #20]
 8015b30:	68fa      	ldr	r2, [r7, #12]
 8015b32:	429a      	cmp	r2, r3
 8015b34:	d90b      	bls.n	8015b4e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8015b36:	2100      	movs	r1, #0
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f7ff fa22 	bl	8014f82 <dir_next>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8015b42:	7dfb      	ldrb	r3, [r7, #23]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d0df      	beq.n	8015b08 <dir_remove+0x38>
 8015b48:	e002      	b.n	8015b50 <dir_remove+0x80>
			if (res != FR_OK) break;
 8015b4a:	bf00      	nop
 8015b4c:	e000      	b.n	8015b50 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8015b4e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8015b50:	7dfb      	ldrb	r3, [r7, #23]
 8015b52:	2b04      	cmp	r3, #4
 8015b54:	d101      	bne.n	8015b5a <dir_remove+0x8a>
 8015b56:	2302      	movs	r3, #2
 8015b58:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8015b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3718      	adds	r7, #24
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b088      	sub	sp, #32
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	2200      	movs	r2, #0
 8015b78:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	69db      	ldr	r3, [r3, #28]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f000 80c9 	beq.w	8015d16 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b8c:	d032      	beq.n	8015bf4 <get_fileinfo+0x90>
			i = j = 0;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	61bb      	str	r3, [r7, #24]
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015b96:	e01b      	b.n	8015bd0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8015b98:	89fb      	ldrh	r3, [r7, #14]
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f002 fcaf 	bl	8018500 <ff_convert>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8015ba6:	89fb      	ldrh	r3, [r7, #14]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d102      	bne.n	8015bb2 <get_fileinfo+0x4e>
 8015bac:	2300      	movs	r3, #0
 8015bae:	61fb      	str	r3, [r7, #28]
 8015bb0:	e01a      	b.n	8015be8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8015bb2:	69fb      	ldr	r3, [r7, #28]
 8015bb4:	2bfe      	cmp	r3, #254	; 0xfe
 8015bb6:	d902      	bls.n	8015bbe <get_fileinfo+0x5a>
 8015bb8:	2300      	movs	r3, #0
 8015bba:	61fb      	str	r3, [r7, #28]
 8015bbc:	e014      	b.n	8015be8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8015bbe:	69fb      	ldr	r3, [r7, #28]
 8015bc0:	1c5a      	adds	r2, r3, #1
 8015bc2:	61fa      	str	r2, [r7, #28]
 8015bc4:	89fa      	ldrh	r2, [r7, #14]
 8015bc6:	b2d1      	uxtb	r1, r2
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	4413      	add	r3, r2
 8015bcc:	460a      	mov	r2, r1
 8015bce:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	691a      	ldr	r2, [r3, #16]
 8015bd4:	69bb      	ldr	r3, [r7, #24]
 8015bd6:	1c59      	adds	r1, r3, #1
 8015bd8:	61b9      	str	r1, [r7, #24]
 8015bda:	005b      	lsls	r3, r3, #1
 8015bdc:	4413      	add	r3, r2
 8015bde:	881b      	ldrh	r3, [r3, #0]
 8015be0:	81fb      	strh	r3, [r7, #14]
 8015be2:	89fb      	ldrh	r3, [r7, #14]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d1d7      	bne.n	8015b98 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8015be8:	683a      	ldr	r2, [r7, #0]
 8015bea:	69fb      	ldr	r3, [r7, #28]
 8015bec:	4413      	add	r3, r2
 8015bee:	3316      	adds	r3, #22
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	61bb      	str	r3, [r7, #24]
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8015bfc:	683a      	ldr	r2, [r7, #0]
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	4413      	add	r3, r2
 8015c02:	3316      	adds	r3, #22
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8015c08:	e04c      	b.n	8015ca4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6a1a      	ldr	r2, [r3, #32]
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	1c59      	adds	r1, r3, #1
 8015c12:	61f9      	str	r1, [r7, #28]
 8015c14:	4413      	add	r3, r2
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8015c1a:	7dfb      	ldrb	r3, [r7, #23]
 8015c1c:	2b20      	cmp	r3, #32
 8015c1e:	d100      	bne.n	8015c22 <get_fileinfo+0xbe>
 8015c20:	e040      	b.n	8015ca4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8015c22:	7dfb      	ldrb	r3, [r7, #23]
 8015c24:	2b05      	cmp	r3, #5
 8015c26:	d101      	bne.n	8015c2c <get_fileinfo+0xc8>
 8015c28:	23e5      	movs	r3, #229	; 0xe5
 8015c2a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	2b09      	cmp	r3, #9
 8015c30:	d10f      	bne.n	8015c52 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8015c32:	89bb      	ldrh	r3, [r7, #12]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d105      	bne.n	8015c44 <get_fileinfo+0xe0>
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	69bb      	ldr	r3, [r7, #24]
 8015c3c:	4413      	add	r3, r2
 8015c3e:	3316      	adds	r3, #22
 8015c40:	222e      	movs	r2, #46	; 0x2e
 8015c42:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8015c44:	69bb      	ldr	r3, [r7, #24]
 8015c46:	1c5a      	adds	r2, r3, #1
 8015c48:	61ba      	str	r2, [r7, #24]
 8015c4a:	683a      	ldr	r2, [r7, #0]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	222e      	movs	r2, #46	; 0x2e
 8015c50:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8015c52:	683a      	ldr	r2, [r7, #0]
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	4413      	add	r3, r2
 8015c58:	3309      	adds	r3, #9
 8015c5a:	7dfa      	ldrb	r2, [r7, #23]
 8015c5c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8015c5e:	89bb      	ldrh	r3, [r7, #12]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d11c      	bne.n	8015c9e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8015c64:	7dfb      	ldrb	r3, [r7, #23]
 8015c66:	2b40      	cmp	r3, #64	; 0x40
 8015c68:	d913      	bls.n	8015c92 <get_fileinfo+0x12e>
 8015c6a:	7dfb      	ldrb	r3, [r7, #23]
 8015c6c:	2b5a      	cmp	r3, #90	; 0x5a
 8015c6e:	d810      	bhi.n	8015c92 <get_fileinfo+0x12e>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6a1b      	ldr	r3, [r3, #32]
 8015c74:	330c      	adds	r3, #12
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	461a      	mov	r2, r3
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	2b08      	cmp	r3, #8
 8015c7e:	d901      	bls.n	8015c84 <get_fileinfo+0x120>
 8015c80:	2310      	movs	r3, #16
 8015c82:	e000      	b.n	8015c86 <get_fileinfo+0x122>
 8015c84:	2308      	movs	r3, #8
 8015c86:	4013      	ands	r3, r2
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d002      	beq.n	8015c92 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8015c8c:	7dfb      	ldrb	r3, [r7, #23]
 8015c8e:	3320      	adds	r3, #32
 8015c90:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8015c92:	683a      	ldr	r2, [r7, #0]
 8015c94:	69bb      	ldr	r3, [r7, #24]
 8015c96:	4413      	add	r3, r2
 8015c98:	3316      	adds	r3, #22
 8015c9a:	7dfa      	ldrb	r2, [r7, #23]
 8015c9c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8015c9e:	69bb      	ldr	r3, [r7, #24]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	2b0a      	cmp	r3, #10
 8015ca8:	d9af      	bls.n	8015c0a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8015caa:	89bb      	ldrh	r3, [r7, #12]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d10d      	bne.n	8015ccc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8015cb0:	683a      	ldr	r2, [r7, #0]
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	3316      	adds	r3, #22
 8015cb8:	2200      	movs	r2, #0
 8015cba:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6a1b      	ldr	r3, [r3, #32]
 8015cc0:	330c      	adds	r3, #12
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d101      	bne.n	8015ccc <get_fileinfo+0x168>
 8015cc8:	2300      	movs	r3, #0
 8015cca:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8015ccc:	683a      	ldr	r2, [r7, #0]
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	3309      	adds	r3, #9
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6a1b      	ldr	r3, [r3, #32]
 8015cdc:	7ada      	ldrb	r2, [r3, #11]
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	6a1b      	ldr	r3, [r3, #32]
 8015ce6:	331c      	adds	r3, #28
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7fe fa47 	bl	801417c <ld_dword>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	6a1b      	ldr	r3, [r3, #32]
 8015cf8:	3316      	adds	r3, #22
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fe fa3e 	bl	801417c <ld_dword>
 8015d00:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8015d02:	68bb      	ldr	r3, [r7, #8]
 8015d04:	b29a      	uxth	r2, r3
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	80da      	strh	r2, [r3, #6]
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	0c1b      	lsrs	r3, r3, #16
 8015d0e:	b29a      	uxth	r2, r3
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	809a      	strh	r2, [r3, #4]
 8015d14:	e000      	b.n	8015d18 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015d16:	bf00      	nop
}
 8015d18:	3720      	adds	r7, #32
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
	...

08015d20 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8015d20:	b480      	push	{r7}
 8015d22:	b085      	sub	sp, #20
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	1c59      	adds	r1, r3, #1
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	6011      	str	r1, [r2, #0]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8015d36:	89fb      	ldrh	r3, [r7, #14]
 8015d38:	2b60      	cmp	r3, #96	; 0x60
 8015d3a:	d905      	bls.n	8015d48 <get_achar+0x28>
 8015d3c:	89fb      	ldrh	r3, [r7, #14]
 8015d3e:	2b7a      	cmp	r3, #122	; 0x7a
 8015d40:	d802      	bhi.n	8015d48 <get_achar+0x28>
 8015d42:	89fb      	ldrh	r3, [r7, #14]
 8015d44:	3b20      	subs	r3, #32
 8015d46:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8015d48:	89fb      	ldrh	r3, [r7, #14]
 8015d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8015d4c:	d904      	bls.n	8015d58 <get_achar+0x38>
 8015d4e:	89fb      	ldrh	r3, [r7, #14]
 8015d50:	3b80      	subs	r3, #128	; 0x80
 8015d52:	4a05      	ldr	r2, [pc, #20]	; (8015d68 <get_achar+0x48>)
 8015d54:	5cd3      	ldrb	r3, [r2, r3]
 8015d56:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8015d58:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	3714      	adds	r7, #20
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d64:	4770      	bx	lr
 8015d66:	bf00      	nop
 8015d68:	0801b7b8 	.word	0x0801b7b8

08015d6c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b08a      	sub	sp, #40	; 0x28
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	60f8      	str	r0, [r7, #12]
 8015d74:	60b9      	str	r1, [r7, #8]
 8015d76:	607a      	str	r2, [r7, #4]
 8015d78:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8015d7a:	e009      	b.n	8015d90 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8015d7c:	f107 0308 	add.w	r3, r7, #8
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7ff ffcd 	bl	8015d20 <get_achar>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d101      	bne.n	8015d90 <pattern_matching+0x24>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	e064      	b.n	8015e5a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	1e5a      	subs	r2, r3, #1
 8015d94:	607a      	str	r2, [r7, #4]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d1f0      	bne.n	8015d7c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d104      	bne.n	8015dac <pattern_matching+0x40>
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d001      	beq.n	8015dac <pattern_matching+0x40>
 8015da8:	2301      	movs	r3, #1
 8015daa:	e056      	b.n	8015e5a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	617b      	str	r3, [r7, #20]
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	2b3f      	cmp	r3, #63	; 0x3f
 8015dba:	d003      	beq.n	8015dc4 <pattern_matching+0x58>
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8015dc2:	d126      	bne.n	8015e12 <pattern_matching+0xa6>
				nm = nx = 0;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	61fb      	str	r3, [r7, #28]
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	1c5a      	adds	r2, r3, #1
 8015dd0:	617a      	str	r2, [r7, #20]
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	2b3f      	cmp	r3, #63	; 0x3f
 8015dd6:	d103      	bne.n	8015de0 <pattern_matching+0x74>
 8015dd8:	6a3b      	ldr	r3, [r7, #32]
 8015dda:	3301      	adds	r3, #1
 8015ddc:	623b      	str	r3, [r7, #32]
 8015dde:	e001      	b.n	8015de4 <pattern_matching+0x78>
 8015de0:	2301      	movs	r3, #1
 8015de2:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	2b3f      	cmp	r3, #63	; 0x3f
 8015dea:	d0ef      	beq.n	8015dcc <pattern_matching+0x60>
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	781b      	ldrb	r3, [r3, #0]
 8015df0:	2b2a      	cmp	r3, #42	; 0x2a
 8015df2:	d0eb      	beq.n	8015dcc <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8015df4:	6978      	ldr	r0, [r7, #20]
 8015df6:	6939      	ldr	r1, [r7, #16]
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	6a3a      	ldr	r2, [r7, #32]
 8015dfc:	f7ff ffb6 	bl	8015d6c <pattern_matching>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <pattern_matching+0x9e>
 8015e06:	2301      	movs	r3, #1
 8015e08:	e027      	b.n	8015e5a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015e10:	e017      	b.n	8015e42 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8015e12:	f107 0314 	add.w	r3, r7, #20
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7ff ff82 	bl	8015d20 <get_achar>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8015e20:	f107 0310 	add.w	r3, r7, #16
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7ff ff7b 	bl	8015d20 <get_achar>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8015e2e:	8b7a      	ldrh	r2, [r7, #26]
 8015e30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d104      	bne.n	8015e40 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8015e36:	8b7b      	ldrh	r3, [r7, #26]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d1bb      	bne.n	8015db4 <pattern_matching+0x48>
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	e00c      	b.n	8015e5a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8015e40:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8015e42:	f107 0308 	add.w	r3, r7, #8
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7ff ff6a 	bl	8015d20 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d002      	beq.n	8015e58 <pattern_matching+0xec>
 8015e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d1a9      	bne.n	8015dac <pattern_matching+0x40>

	return 0;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3728      	adds	r7, #40	; 0x28
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
	...

08015e64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b08a      	sub	sp, #40	; 0x28
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	613b      	str	r3, [r7, #16]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	691b      	ldr	r3, [r3, #16]
 8015e7a:	60fb      	str	r3, [r7, #12]
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	617b      	str	r3, [r7, #20]
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015e84:	69bb      	ldr	r3, [r7, #24]
 8015e86:	1c5a      	adds	r2, r3, #1
 8015e88:	61ba      	str	r2, [r7, #24]
 8015e8a:	693a      	ldr	r2, [r7, #16]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e94:	2b1f      	cmp	r3, #31
 8015e96:	d940      	bls.n	8015f1a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e9a:	2b2f      	cmp	r3, #47	; 0x2f
 8015e9c:	d006      	beq.n	8015eac <create_name+0x48>
 8015e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ea0:	2b5c      	cmp	r3, #92	; 0x5c
 8015ea2:	d110      	bne.n	8015ec6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015ea4:	e002      	b.n	8015eac <create_name+0x48>
 8015ea6:	69bb      	ldr	r3, [r7, #24]
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	61bb      	str	r3, [r7, #24]
 8015eac:	693a      	ldr	r2, [r7, #16]
 8015eae:	69bb      	ldr	r3, [r7, #24]
 8015eb0:	4413      	add	r3, r2
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b2f      	cmp	r3, #47	; 0x2f
 8015eb6:	d0f6      	beq.n	8015ea6 <create_name+0x42>
 8015eb8:	693a      	ldr	r2, [r7, #16]
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	4413      	add	r3, r2
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8015ec2:	d0f0      	beq.n	8015ea6 <create_name+0x42>
			break;
 8015ec4:	e02a      	b.n	8015f1c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	2bfe      	cmp	r3, #254	; 0xfe
 8015eca:	d901      	bls.n	8015ed0 <create_name+0x6c>
 8015ecc:	2306      	movs	r3, #6
 8015ece:	e17d      	b.n	80161cc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ed8:	2101      	movs	r1, #1
 8015eda:	4618      	mov	r0, r3
 8015edc:	f002 fb10 	bl	8018500 <ff_convert>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d101      	bne.n	8015eee <create_name+0x8a>
 8015eea:	2306      	movs	r3, #6
 8015eec:	e16e      	b.n	80161cc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8015ef2:	d809      	bhi.n	8015f08 <create_name+0xa4>
 8015ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	488d      	ldr	r0, [pc, #564]	; (8016130 <create_name+0x2cc>)
 8015efa:	f7fe fa0c 	bl	8014316 <chk_chr>
 8015efe:	4603      	mov	r3, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d001      	beq.n	8015f08 <create_name+0xa4>
 8015f04:	2306      	movs	r3, #6
 8015f06:	e161      	b.n	80161cc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	1c5a      	adds	r2, r3, #1
 8015f0c:	617a      	str	r2, [r7, #20]
 8015f0e:	005b      	lsls	r3, r3, #1
 8015f10:	68fa      	ldr	r2, [r7, #12]
 8015f12:	4413      	add	r3, r2
 8015f14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f16:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015f18:	e7b4      	b.n	8015e84 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015f1a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015f1c:	693a      	ldr	r2, [r7, #16]
 8015f1e:	69bb      	ldr	r3, [r7, #24]
 8015f20:	441a      	add	r2, r3
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f28:	2b1f      	cmp	r3, #31
 8015f2a:	d801      	bhi.n	8015f30 <create_name+0xcc>
 8015f2c:	2304      	movs	r3, #4
 8015f2e:	e000      	b.n	8015f32 <create_name+0xce>
 8015f30:	2300      	movs	r3, #0
 8015f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015f36:	e011      	b.n	8015f5c <create_name+0xf8>
		w = lfn[di - 1];
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015f3e:	3b01      	subs	r3, #1
 8015f40:	005b      	lsls	r3, r3, #1
 8015f42:	68fa      	ldr	r2, [r7, #12]
 8015f44:	4413      	add	r3, r2
 8015f46:	881b      	ldrh	r3, [r3, #0]
 8015f48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f4c:	2b20      	cmp	r3, #32
 8015f4e:	d002      	beq.n	8015f56 <create_name+0xf2>
 8015f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f52:	2b2e      	cmp	r3, #46	; 0x2e
 8015f54:	d106      	bne.n	8015f64 <create_name+0x100>
		di--;
 8015f56:	697b      	ldr	r3, [r7, #20]
 8015f58:	3b01      	subs	r3, #1
 8015f5a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1ea      	bne.n	8015f38 <create_name+0xd4>
 8015f62:	e000      	b.n	8015f66 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015f64:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	005b      	lsls	r3, r3, #1
 8015f6a:	68fa      	ldr	r2, [r7, #12]
 8015f6c:	4413      	add	r3, r2
 8015f6e:	2200      	movs	r2, #0
 8015f70:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d101      	bne.n	8015f7c <create_name+0x118>
 8015f78:	2306      	movs	r3, #6
 8015f7a:	e127      	b.n	80161cc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	3324      	adds	r3, #36	; 0x24
 8015f80:	220b      	movs	r2, #11
 8015f82:	2120      	movs	r1, #32
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fe f984 	bl	8014292 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	61bb      	str	r3, [r7, #24]
 8015f8e:	e002      	b.n	8015f96 <create_name+0x132>
 8015f90:	69bb      	ldr	r3, [r7, #24]
 8015f92:	3301      	adds	r3, #1
 8015f94:	61bb      	str	r3, [r7, #24]
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	005b      	lsls	r3, r3, #1
 8015f9a:	68fa      	ldr	r2, [r7, #12]
 8015f9c:	4413      	add	r3, r2
 8015f9e:	881b      	ldrh	r3, [r3, #0]
 8015fa0:	2b20      	cmp	r3, #32
 8015fa2:	d0f5      	beq.n	8015f90 <create_name+0x12c>
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	005b      	lsls	r3, r3, #1
 8015fa8:	68fa      	ldr	r2, [r7, #12]
 8015faa:	4413      	add	r3, r2
 8015fac:	881b      	ldrh	r3, [r3, #0]
 8015fae:	2b2e      	cmp	r3, #46	; 0x2e
 8015fb0:	d0ee      	beq.n	8015f90 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d009      	beq.n	8015fcc <create_name+0x168>
 8015fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fbc:	f043 0303 	orr.w	r3, r3, #3
 8015fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015fc4:	e002      	b.n	8015fcc <create_name+0x168>
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	617b      	str	r3, [r7, #20]
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d009      	beq.n	8015fe6 <create_name+0x182>
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	68fa      	ldr	r2, [r7, #12]
 8015fde:	4413      	add	r3, r2
 8015fe0:	881b      	ldrh	r3, [r3, #0]
 8015fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8015fe4:	d1ef      	bne.n	8015fc6 <create_name+0x162>

	i = b = 0; ni = 8;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015fec:	2300      	movs	r3, #0
 8015fee:	623b      	str	r3, [r7, #32]
 8015ff0:	2308      	movs	r3, #8
 8015ff2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	1c5a      	adds	r2, r3, #1
 8015ff8:	61ba      	str	r2, [r7, #24]
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	4413      	add	r3, r2
 8016000:	881b      	ldrh	r3, [r3, #0]
 8016002:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016006:	2b00      	cmp	r3, #0
 8016008:	f000 8090 	beq.w	801612c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801600c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801600e:	2b20      	cmp	r3, #32
 8016010:	d006      	beq.n	8016020 <create_name+0x1bc>
 8016012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016014:	2b2e      	cmp	r3, #46	; 0x2e
 8016016:	d10a      	bne.n	801602e <create_name+0x1ca>
 8016018:	69ba      	ldr	r2, [r7, #24]
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	429a      	cmp	r2, r3
 801601e:	d006      	beq.n	801602e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016024:	f043 0303 	orr.w	r3, r3, #3
 8016028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801602c:	e07d      	b.n	801612a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801602e:	6a3a      	ldr	r2, [r7, #32]
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	429a      	cmp	r2, r3
 8016034:	d203      	bcs.n	801603e <create_name+0x1da>
 8016036:	69ba      	ldr	r2, [r7, #24]
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	429a      	cmp	r2, r3
 801603c:	d123      	bne.n	8016086 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801603e:	69fb      	ldr	r3, [r7, #28]
 8016040:	2b0b      	cmp	r3, #11
 8016042:	d106      	bne.n	8016052 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016048:	f043 0303 	orr.w	r3, r3, #3
 801604c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016050:	e075      	b.n	801613e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016052:	69ba      	ldr	r2, [r7, #24]
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	429a      	cmp	r2, r3
 8016058:	d005      	beq.n	8016066 <create_name+0x202>
 801605a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801605e:	f043 0303 	orr.w	r3, r3, #3
 8016062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016066:	69ba      	ldr	r2, [r7, #24]
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	429a      	cmp	r2, r3
 801606c:	d866      	bhi.n	801613c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	61bb      	str	r3, [r7, #24]
 8016072:	2308      	movs	r3, #8
 8016074:	623b      	str	r3, [r7, #32]
 8016076:	230b      	movs	r3, #11
 8016078:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801607a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016084:	e051      	b.n	801612a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016088:	2b7f      	cmp	r3, #127	; 0x7f
 801608a:	d914      	bls.n	80160b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801608c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801608e:	2100      	movs	r1, #0
 8016090:	4618      	mov	r0, r3
 8016092:	f002 fa35 	bl	8018500 <ff_convert>
 8016096:	4603      	mov	r3, r0
 8016098:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801609a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801609c:	2b00      	cmp	r3, #0
 801609e:	d004      	beq.n	80160aa <create_name+0x246>
 80160a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a2:	3b80      	subs	r3, #128	; 0x80
 80160a4:	4a23      	ldr	r2, [pc, #140]	; (8016134 <create_name+0x2d0>)
 80160a6:	5cd3      	ldrb	r3, [r2, r3]
 80160a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80160aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160ae:	f043 0302 	orr.w	r3, r3, #2
 80160b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80160b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d007      	beq.n	80160cc <create_name+0x268>
 80160bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160be:	4619      	mov	r1, r3
 80160c0:	481d      	ldr	r0, [pc, #116]	; (8016138 <create_name+0x2d4>)
 80160c2:	f7fe f928 	bl	8014316 <chk_chr>
 80160c6:	4603      	mov	r3, r0
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d008      	beq.n	80160de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80160cc:	235f      	movs	r3, #95	; 0x5f
 80160ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80160d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d4:	f043 0303 	orr.w	r3, r3, #3
 80160d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160dc:	e01b      	b.n	8016116 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80160de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160e0:	2b40      	cmp	r3, #64	; 0x40
 80160e2:	d909      	bls.n	80160f8 <create_name+0x294>
 80160e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160e6:	2b5a      	cmp	r3, #90	; 0x5a
 80160e8:	d806      	bhi.n	80160f8 <create_name+0x294>
					b |= 2;
 80160ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160ee:	f043 0302 	orr.w	r3, r3, #2
 80160f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80160f6:	e00e      	b.n	8016116 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80160f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160fa:	2b60      	cmp	r3, #96	; 0x60
 80160fc:	d90b      	bls.n	8016116 <create_name+0x2b2>
 80160fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016100:	2b7a      	cmp	r3, #122	; 0x7a
 8016102:	d808      	bhi.n	8016116 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016104:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016108:	f043 0301 	orr.w	r3, r3, #1
 801610c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016112:	3b20      	subs	r3, #32
 8016114:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016116:	6a3b      	ldr	r3, [r7, #32]
 8016118:	1c5a      	adds	r2, r3, #1
 801611a:	623a      	str	r2, [r7, #32]
 801611c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801611e:	b2d1      	uxtb	r1, r2
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	4413      	add	r3, r2
 8016124:	460a      	mov	r2, r1
 8016126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801612a:	e763      	b.n	8015ff4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801612c:	bf00      	nop
 801612e:	e006      	b.n	801613e <create_name+0x2da>
 8016130:	0801b62c 	.word	0x0801b62c
 8016134:	0801b7b8 	.word	0x0801b7b8
 8016138:	0801b638 	.word	0x0801b638
			if (si > di) break;			/* No extension */
 801613c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016144:	2be5      	cmp	r3, #229	; 0xe5
 8016146:	d103      	bne.n	8016150 <create_name+0x2ec>
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2205      	movs	r2, #5
 801614c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	2b08      	cmp	r3, #8
 8016154:	d104      	bne.n	8016160 <create_name+0x2fc>
 8016156:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016164:	f003 030c 	and.w	r3, r3, #12
 8016168:	2b0c      	cmp	r3, #12
 801616a:	d005      	beq.n	8016178 <create_name+0x314>
 801616c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016170:	f003 0303 	and.w	r3, r3, #3
 8016174:	2b03      	cmp	r3, #3
 8016176:	d105      	bne.n	8016184 <create_name+0x320>
 8016178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801617c:	f043 0302 	orr.w	r3, r3, #2
 8016180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016188:	f003 0302 	and.w	r3, r3, #2
 801618c:	2b00      	cmp	r3, #0
 801618e:	d117      	bne.n	80161c0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016194:	f003 0303 	and.w	r3, r3, #3
 8016198:	2b01      	cmp	r3, #1
 801619a:	d105      	bne.n	80161a8 <create_name+0x344>
 801619c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161a0:	f043 0310 	orr.w	r3, r3, #16
 80161a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80161a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161ac:	f003 030c 	and.w	r3, r3, #12
 80161b0:	2b04      	cmp	r3, #4
 80161b2:	d105      	bne.n	80161c0 <create_name+0x35c>
 80161b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161b8:	f043 0308 	orr.w	r3, r3, #8
 80161bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80161c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80161ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3728      	adds	r7, #40	; 0x28
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b086      	sub	sp, #24
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80161e8:	e002      	b.n	80161f0 <follow_path+0x1c>
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	3301      	adds	r3, #1
 80161ee:	603b      	str	r3, [r7, #0]
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	2b2f      	cmp	r3, #47	; 0x2f
 80161f6:	d0f8      	beq.n	80161ea <follow_path+0x16>
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	2b5c      	cmp	r3, #92	; 0x5c
 80161fe:	d0f4      	beq.n	80161ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016200:	693b      	ldr	r3, [r7, #16]
 8016202:	2200      	movs	r2, #0
 8016204:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	2b1f      	cmp	r3, #31
 801620c:	d80a      	bhi.n	8016224 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2280      	movs	r2, #128	; 0x80
 8016212:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016216:	2100      	movs	r1, #0
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f7fe fe29 	bl	8014e70 <dir_sdi>
 801621e:	4603      	mov	r3, r0
 8016220:	75fb      	strb	r3, [r7, #23]
 8016222:	e048      	b.n	80162b6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016224:	463b      	mov	r3, r7
 8016226:	4619      	mov	r1, r3
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7ff fe1b 	bl	8015e64 <create_name>
 801622e:	4603      	mov	r3, r0
 8016230:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d139      	bne.n	80162ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7ff fa91 	bl	8015760 <dir_find>
 801623e:	4603      	mov	r3, r0
 8016240:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016248:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00a      	beq.n	8016266 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016250:	7dfb      	ldrb	r3, [r7, #23]
 8016252:	2b04      	cmp	r3, #4
 8016254:	d12c      	bne.n	80162b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016256:	7afb      	ldrb	r3, [r7, #11]
 8016258:	f003 0304 	and.w	r3, r3, #4
 801625c:	2b00      	cmp	r3, #0
 801625e:	d127      	bne.n	80162b0 <follow_path+0xdc>
 8016260:	2305      	movs	r3, #5
 8016262:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016264:	e024      	b.n	80162b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016266:	7afb      	ldrb	r3, [r7, #11]
 8016268:	f003 0304 	and.w	r3, r3, #4
 801626c:	2b00      	cmp	r3, #0
 801626e:	d121      	bne.n	80162b4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	799b      	ldrb	r3, [r3, #6]
 8016274:	f003 0310 	and.w	r3, r3, #16
 8016278:	2b00      	cmp	r3, #0
 801627a:	d102      	bne.n	8016282 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801627c:	2305      	movs	r3, #5
 801627e:	75fb      	strb	r3, [r7, #23]
 8016280:	e019      	b.n	80162b6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	695b      	ldr	r3, [r3, #20]
 801628c:	68fa      	ldr	r2, [r7, #12]
 801628e:	8992      	ldrh	r2, [r2, #12]
 8016290:	fbb3 f0f2 	udiv	r0, r3, r2
 8016294:	fb00 f202 	mul.w	r2, r0, r2
 8016298:	1a9b      	subs	r3, r3, r2
 801629a:	440b      	add	r3, r1
 801629c:	4619      	mov	r1, r3
 801629e:	68f8      	ldr	r0, [r7, #12]
 80162a0:	f7fe ff8c 	bl	80151bc <ld_clust>
 80162a4:	4602      	mov	r2, r0
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80162aa:	e7bb      	b.n	8016224 <follow_path+0x50>
			if (res != FR_OK) break;
 80162ac:	bf00      	nop
 80162ae:	e002      	b.n	80162b6 <follow_path+0xe2>
				break;
 80162b0:	bf00      	nop
 80162b2:	e000      	b.n	80162b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80162b4:	bf00      	nop
			}
		}
	}

	return res;
 80162b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3718      	adds	r7, #24
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80162c0:	b480      	push	{r7}
 80162c2:	b087      	sub	sp, #28
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80162c8:	f04f 33ff 	mov.w	r3, #4294967295
 80162cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d031      	beq.n	801633a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	617b      	str	r3, [r7, #20]
 80162dc:	e002      	b.n	80162e4 <get_ldnumber+0x24>
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	3301      	adds	r3, #1
 80162e2:	617b      	str	r3, [r7, #20]
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	2b1f      	cmp	r3, #31
 80162ea:	d903      	bls.n	80162f4 <get_ldnumber+0x34>
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	2b3a      	cmp	r3, #58	; 0x3a
 80162f2:	d1f4      	bne.n	80162de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b3a      	cmp	r3, #58	; 0x3a
 80162fa:	d11c      	bne.n	8016336 <get_ldnumber+0x76>
			tp = *path;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	1c5a      	adds	r2, r3, #1
 8016306:	60fa      	str	r2, [r7, #12]
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	3b30      	subs	r3, #48	; 0x30
 801630c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2b09      	cmp	r3, #9
 8016312:	d80e      	bhi.n	8016332 <get_ldnumber+0x72>
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	429a      	cmp	r2, r3
 801631a:	d10a      	bne.n	8016332 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d107      	bne.n	8016332 <get_ldnumber+0x72>
					vol = (int)i;
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	3301      	adds	r3, #1
 801632a:	617b      	str	r3, [r7, #20]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	697a      	ldr	r2, [r7, #20]
 8016330:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	e002      	b.n	801633c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016336:	2300      	movs	r3, #0
 8016338:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801633a:	693b      	ldr	r3, [r7, #16]
}
 801633c:	4618      	mov	r0, r3
 801633e:	371c      	adds	r7, #28
 8016340:	46bd      	mov	sp, r7
 8016342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016346:	4770      	bx	lr

08016348 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
 8016350:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2200      	movs	r2, #0
 8016356:	70da      	strb	r2, [r3, #3]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f04f 32ff 	mov.w	r2, #4294967295
 801635e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016360:	6839      	ldr	r1, [r7, #0]
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7fe f9a2 	bl	80146ac <move_window>
 8016368:	4603      	mov	r3, r0
 801636a:	2b00      	cmp	r3, #0
 801636c:	d001      	beq.n	8016372 <check_fs+0x2a>
 801636e:	2304      	movs	r3, #4
 8016370:	e038      	b.n	80163e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	3338      	adds	r3, #56	; 0x38
 8016376:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801637a:	4618      	mov	r0, r3
 801637c:	f7fd fee6 	bl	801414c <ld_word>
 8016380:	4603      	mov	r3, r0
 8016382:	461a      	mov	r2, r3
 8016384:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016388:	429a      	cmp	r2, r3
 801638a:	d001      	beq.n	8016390 <check_fs+0x48>
 801638c:	2303      	movs	r3, #3
 801638e:	e029      	b.n	80163e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016396:	2be9      	cmp	r3, #233	; 0xe9
 8016398:	d009      	beq.n	80163ae <check_fs+0x66>
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80163a0:	2beb      	cmp	r3, #235	; 0xeb
 80163a2:	d11e      	bne.n	80163e2 <check_fs+0x9a>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80163aa:	2b90      	cmp	r3, #144	; 0x90
 80163ac:	d119      	bne.n	80163e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	3338      	adds	r3, #56	; 0x38
 80163b2:	3336      	adds	r3, #54	; 0x36
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7fd fee1 	bl	801417c <ld_dword>
 80163ba:	4603      	mov	r3, r0
 80163bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80163c0:	4a0a      	ldr	r2, [pc, #40]	; (80163ec <check_fs+0xa4>)
 80163c2:	4293      	cmp	r3, r2
 80163c4:	d101      	bne.n	80163ca <check_fs+0x82>
 80163c6:	2300      	movs	r3, #0
 80163c8:	e00c      	b.n	80163e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	3338      	adds	r3, #56	; 0x38
 80163ce:	3352      	adds	r3, #82	; 0x52
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7fd fed3 	bl	801417c <ld_dword>
 80163d6:	4603      	mov	r3, r0
 80163d8:	4a05      	ldr	r2, [pc, #20]	; (80163f0 <check_fs+0xa8>)
 80163da:	4293      	cmp	r3, r2
 80163dc:	d101      	bne.n	80163e2 <check_fs+0x9a>
 80163de:	2300      	movs	r3, #0
 80163e0:	e000      	b.n	80163e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80163e2:	2302      	movs	r3, #2
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3708      	adds	r7, #8
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	00544146 	.word	0x00544146
 80163f0:	33544146 	.word	0x33544146

080163f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b096      	sub	sp, #88	; 0x58
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	4613      	mov	r3, r2
 8016400:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	2200      	movs	r2, #0
 8016406:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7ff ff59 	bl	80162c0 <get_ldnumber>
 801640e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016412:	2b00      	cmp	r3, #0
 8016414:	da01      	bge.n	801641a <find_volume+0x26>
 8016416:	230b      	movs	r3, #11
 8016418:	e262      	b.n	80168e0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801641a:	4a9f      	ldr	r2, [pc, #636]	; (8016698 <find_volume+0x2a4>)
 801641c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801641e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016422:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016426:	2b00      	cmp	r3, #0
 8016428:	d101      	bne.n	801642e <find_volume+0x3a>
 801642a:	230c      	movs	r3, #12
 801642c:	e258      	b.n	80168e0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016432:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016434:	79fb      	ldrb	r3, [r7, #7]
 8016436:	f023 0301 	bic.w	r3, r3, #1
 801643a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d01a      	beq.n	801647a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016446:	785b      	ldrb	r3, [r3, #1]
 8016448:	4618      	mov	r0, r3
 801644a:	f7fd fde1 	bl	8014010 <disk_status>
 801644e:	4603      	mov	r3, r0
 8016450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016458:	f003 0301 	and.w	r3, r3, #1
 801645c:	2b00      	cmp	r3, #0
 801645e:	d10c      	bne.n	801647a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016460:	79fb      	ldrb	r3, [r7, #7]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d007      	beq.n	8016476 <find_volume+0x82>
 8016466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801646a:	f003 0304 	and.w	r3, r3, #4
 801646e:	2b00      	cmp	r3, #0
 8016470:	d001      	beq.n	8016476 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016472:	230a      	movs	r3, #10
 8016474:	e234      	b.n	80168e0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8016476:	2300      	movs	r3, #0
 8016478:	e232      	b.n	80168e0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647c:	2200      	movs	r2, #0
 801647e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016482:	b2da      	uxtb	r2, r3
 8016484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016486:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801648a:	785b      	ldrb	r3, [r3, #1]
 801648c:	4618      	mov	r0, r3
 801648e:	f7fd fdd9 	bl	8014044 <disk_initialize>
 8016492:	4603      	mov	r3, r0
 8016494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016498:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801649c:	f003 0301 	and.w	r3, r3, #1
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d001      	beq.n	80164a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80164a4:	2303      	movs	r3, #3
 80164a6:	e21b      	b.n	80168e0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80164a8:	79fb      	ldrb	r3, [r7, #7]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d007      	beq.n	80164be <find_volume+0xca>
 80164ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164b2:	f003 0304 	and.w	r3, r3, #4
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d001      	beq.n	80164be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80164ba:	230a      	movs	r3, #10
 80164bc:	e210      	b.n	80168e0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80164be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c0:	7858      	ldrb	r0, [r3, #1]
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	330c      	adds	r3, #12
 80164c6:	461a      	mov	r2, r3
 80164c8:	2102      	movs	r1, #2
 80164ca:	f7fd fe21 	bl	8014110 <disk_ioctl>
 80164ce:	4603      	mov	r3, r0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d001      	beq.n	80164d8 <find_volume+0xe4>
 80164d4:	2301      	movs	r3, #1
 80164d6:	e203      	b.n	80168e0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80164d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164da:	899b      	ldrh	r3, [r3, #12]
 80164dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164e0:	d80d      	bhi.n	80164fe <find_volume+0x10a>
 80164e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e4:	899b      	ldrh	r3, [r3, #12]
 80164e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164ea:	d308      	bcc.n	80164fe <find_volume+0x10a>
 80164ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ee:	899b      	ldrh	r3, [r3, #12]
 80164f0:	461a      	mov	r2, r3
 80164f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f4:	899b      	ldrh	r3, [r3, #12]
 80164f6:	3b01      	subs	r3, #1
 80164f8:	4013      	ands	r3, r2
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d001      	beq.n	8016502 <find_volume+0x10e>
 80164fe:	2301      	movs	r3, #1
 8016500:	e1ee      	b.n	80168e0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016502:	2300      	movs	r3, #0
 8016504:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016506:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801650a:	f7ff ff1d 	bl	8016348 <check_fs>
 801650e:	4603      	mov	r3, r0
 8016510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016518:	2b02      	cmp	r3, #2
 801651a:	d149      	bne.n	80165b0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801651c:	2300      	movs	r3, #0
 801651e:	643b      	str	r3, [r7, #64]	; 0x40
 8016520:	e01e      	b.n	8016560 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016524:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801652a:	011b      	lsls	r3, r3, #4
 801652c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016530:	4413      	add	r3, r2
 8016532:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016536:	3304      	adds	r3, #4
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d006      	beq.n	801654c <find_volume+0x158>
 801653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016540:	3308      	adds	r3, #8
 8016542:	4618      	mov	r0, r3
 8016544:	f7fd fe1a 	bl	801417c <ld_dword>
 8016548:	4602      	mov	r2, r0
 801654a:	e000      	b.n	801654e <find_volume+0x15a>
 801654c:	2200      	movs	r2, #0
 801654e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	3358      	adds	r3, #88	; 0x58
 8016554:	443b      	add	r3, r7
 8016556:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801655a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801655c:	3301      	adds	r3, #1
 801655e:	643b      	str	r3, [r7, #64]	; 0x40
 8016560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016562:	2b03      	cmp	r3, #3
 8016564:	d9dd      	bls.n	8016522 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016566:	2300      	movs	r3, #0
 8016568:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801656a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801656c:	2b00      	cmp	r3, #0
 801656e:	d002      	beq.n	8016576 <find_volume+0x182>
 8016570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016572:	3b01      	subs	r3, #1
 8016574:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	3358      	adds	r3, #88	; 0x58
 801657c:	443b      	add	r3, r7
 801657e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016582:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016586:	2b00      	cmp	r3, #0
 8016588:	d005      	beq.n	8016596 <find_volume+0x1a2>
 801658a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801658c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801658e:	f7ff fedb 	bl	8016348 <check_fs>
 8016592:	4603      	mov	r3, r0
 8016594:	e000      	b.n	8016598 <find_volume+0x1a4>
 8016596:	2303      	movs	r3, #3
 8016598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801659c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	d905      	bls.n	80165b0 <find_volume+0x1bc>
 80165a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165a6:	3301      	adds	r3, #1
 80165a8:	643b      	str	r3, [r7, #64]	; 0x40
 80165aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165ac:	2b03      	cmp	r3, #3
 80165ae:	d9e2      	bls.n	8016576 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80165b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80165b4:	2b04      	cmp	r3, #4
 80165b6:	d101      	bne.n	80165bc <find_volume+0x1c8>
 80165b8:	2301      	movs	r3, #1
 80165ba:	e191      	b.n	80168e0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80165bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d901      	bls.n	80165c8 <find_volume+0x1d4>
 80165c4:	230d      	movs	r3, #13
 80165c6:	e18b      	b.n	80168e0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80165c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ca:	3338      	adds	r3, #56	; 0x38
 80165cc:	330b      	adds	r3, #11
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7fd fdbc 	bl	801414c <ld_word>
 80165d4:	4603      	mov	r3, r0
 80165d6:	461a      	mov	r2, r3
 80165d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165da:	899b      	ldrh	r3, [r3, #12]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d001      	beq.n	80165e4 <find_volume+0x1f0>
 80165e0:	230d      	movs	r3, #13
 80165e2:	e17d      	b.n	80168e0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80165e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e6:	3338      	adds	r3, #56	; 0x38
 80165e8:	3316      	adds	r3, #22
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7fd fdae 	bl	801414c <ld_word>
 80165f0:	4603      	mov	r3, r0
 80165f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80165f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d106      	bne.n	8016608 <find_volume+0x214>
 80165fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165fc:	3338      	adds	r3, #56	; 0x38
 80165fe:	3324      	adds	r3, #36	; 0x24
 8016600:	4618      	mov	r0, r3
 8016602:	f7fd fdbb 	bl	801417c <ld_dword>
 8016606:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801660c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016610:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016616:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801661a:	789b      	ldrb	r3, [r3, #2]
 801661c:	2b01      	cmp	r3, #1
 801661e:	d005      	beq.n	801662c <find_volume+0x238>
 8016620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016622:	789b      	ldrb	r3, [r3, #2]
 8016624:	2b02      	cmp	r3, #2
 8016626:	d001      	beq.n	801662c <find_volume+0x238>
 8016628:	230d      	movs	r3, #13
 801662a:	e159      	b.n	80168e0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662e:	789b      	ldrb	r3, [r3, #2]
 8016630:	461a      	mov	r2, r3
 8016632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016634:	fb02 f303 	mul.w	r3, r2, r3
 8016638:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801663c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016640:	b29a      	uxth	r2, r3
 8016642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016644:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016648:	895b      	ldrh	r3, [r3, #10]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d008      	beq.n	8016660 <find_volume+0x26c>
 801664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016650:	895b      	ldrh	r3, [r3, #10]
 8016652:	461a      	mov	r2, r3
 8016654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016656:	895b      	ldrh	r3, [r3, #10]
 8016658:	3b01      	subs	r3, #1
 801665a:	4013      	ands	r3, r2
 801665c:	2b00      	cmp	r3, #0
 801665e:	d001      	beq.n	8016664 <find_volume+0x270>
 8016660:	230d      	movs	r3, #13
 8016662:	e13d      	b.n	80168e0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016666:	3338      	adds	r3, #56	; 0x38
 8016668:	3311      	adds	r3, #17
 801666a:	4618      	mov	r0, r3
 801666c:	f7fd fd6e 	bl	801414c <ld_word>
 8016670:	4603      	mov	r3, r0
 8016672:	461a      	mov	r2, r3
 8016674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016676:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801667a:	891b      	ldrh	r3, [r3, #8]
 801667c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801667e:	8992      	ldrh	r2, [r2, #12]
 8016680:	0952      	lsrs	r2, r2, #5
 8016682:	b292      	uxth	r2, r2
 8016684:	fbb3 f1f2 	udiv	r1, r3, r2
 8016688:	fb01 f202 	mul.w	r2, r1, r2
 801668c:	1a9b      	subs	r3, r3, r2
 801668e:	b29b      	uxth	r3, r3
 8016690:	2b00      	cmp	r3, #0
 8016692:	d003      	beq.n	801669c <find_volume+0x2a8>
 8016694:	230d      	movs	r3, #13
 8016696:	e123      	b.n	80168e0 <find_volume+0x4ec>
 8016698:	200039c8 	.word	0x200039c8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669e:	3338      	adds	r3, #56	; 0x38
 80166a0:	3313      	adds	r3, #19
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7fd fd52 	bl	801414c <ld_word>
 80166a8:	4603      	mov	r3, r0
 80166aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80166ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d106      	bne.n	80166c0 <find_volume+0x2cc>
 80166b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166b4:	3338      	adds	r3, #56	; 0x38
 80166b6:	3320      	adds	r3, #32
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7fd fd5f 	bl	801417c <ld_dword>
 80166be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80166c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166c2:	3338      	adds	r3, #56	; 0x38
 80166c4:	330e      	adds	r3, #14
 80166c6:	4618      	mov	r0, r3
 80166c8:	f7fd fd40 	bl	801414c <ld_word>
 80166cc:	4603      	mov	r3, r0
 80166ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80166d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d101      	bne.n	80166da <find_volume+0x2e6>
 80166d6:	230d      	movs	r3, #13
 80166d8:	e102      	b.n	80168e0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80166da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80166dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166de:	4413      	add	r3, r2
 80166e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166e2:	8911      	ldrh	r1, [r2, #8]
 80166e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166e6:	8992      	ldrh	r2, [r2, #12]
 80166e8:	0952      	lsrs	r2, r2, #5
 80166ea:	b292      	uxth	r2, r2
 80166ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80166f0:	b292      	uxth	r2, r2
 80166f2:	4413      	add	r3, r2
 80166f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80166f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d201      	bcs.n	8016702 <find_volume+0x30e>
 80166fe:	230d      	movs	r3, #13
 8016700:	e0ee      	b.n	80168e0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016706:	1ad3      	subs	r3, r2, r3
 8016708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801670a:	8952      	ldrh	r2, [r2, #10]
 801670c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016710:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016714:	2b00      	cmp	r3, #0
 8016716:	d101      	bne.n	801671c <find_volume+0x328>
 8016718:	230d      	movs	r3, #13
 801671a:	e0e1      	b.n	80168e0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 801671c:	2303      	movs	r3, #3
 801671e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016724:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016728:	4293      	cmp	r3, r2
 801672a:	d802      	bhi.n	8016732 <find_volume+0x33e>
 801672c:	2302      	movs	r3, #2
 801672e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016734:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016738:	4293      	cmp	r3, r2
 801673a:	d802      	bhi.n	8016742 <find_volume+0x34e>
 801673c:	2301      	movs	r3, #1
 801673e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016744:	1c9a      	adds	r2, r3, #2
 8016746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016748:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801674c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801674e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016754:	441a      	add	r2, r3
 8016756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016758:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801675a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	441a      	add	r2, r3
 8016760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016762:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8016764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016768:	2b03      	cmp	r3, #3
 801676a:	d11e      	bne.n	80167aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676e:	3338      	adds	r3, #56	; 0x38
 8016770:	332a      	adds	r3, #42	; 0x2a
 8016772:	4618      	mov	r0, r3
 8016774:	f7fd fcea 	bl	801414c <ld_word>
 8016778:	4603      	mov	r3, r0
 801677a:	2b00      	cmp	r3, #0
 801677c:	d001      	beq.n	8016782 <find_volume+0x38e>
 801677e:	230d      	movs	r3, #13
 8016780:	e0ae      	b.n	80168e0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016784:	891b      	ldrh	r3, [r3, #8]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d001      	beq.n	801678e <find_volume+0x39a>
 801678a:	230d      	movs	r3, #13
 801678c:	e0a8      	b.n	80168e0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016790:	3338      	adds	r3, #56	; 0x38
 8016792:	332c      	adds	r3, #44	; 0x2c
 8016794:	4618      	mov	r0, r3
 8016796:	f7fd fcf1 	bl	801417c <ld_dword>
 801679a:	4602      	mov	r2, r0
 801679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801679e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80167a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a2:	69db      	ldr	r3, [r3, #28]
 80167a4:	009b      	lsls	r3, r3, #2
 80167a6:	647b      	str	r3, [r7, #68]	; 0x44
 80167a8:	e01f      	b.n	80167ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80167aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ac:	891b      	ldrh	r3, [r3, #8]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d101      	bne.n	80167b6 <find_volume+0x3c2>
 80167b2:	230d      	movs	r3, #13
 80167b4:	e094      	b.n	80168e0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80167b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80167ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167bc:	441a      	add	r2, r3
 80167be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80167c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167c6:	2b02      	cmp	r3, #2
 80167c8:	d103      	bne.n	80167d2 <find_volume+0x3de>
 80167ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167cc:	69db      	ldr	r3, [r3, #28]
 80167ce:	005b      	lsls	r3, r3, #1
 80167d0:	e00a      	b.n	80167e8 <find_volume+0x3f4>
 80167d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d4:	69da      	ldr	r2, [r3, #28]
 80167d6:	4613      	mov	r3, r2
 80167d8:	005b      	lsls	r3, r3, #1
 80167da:	4413      	add	r3, r2
 80167dc:	085a      	lsrs	r2, r3, #1
 80167de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e0:	69db      	ldr	r3, [r3, #28]
 80167e2:	f003 0301 	and.w	r3, r3, #1
 80167e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80167e8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80167ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ec:	6a1a      	ldr	r2, [r3, #32]
 80167ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f0:	899b      	ldrh	r3, [r3, #12]
 80167f2:	4619      	mov	r1, r3
 80167f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167f6:	440b      	add	r3, r1
 80167f8:	3b01      	subs	r3, #1
 80167fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80167fc:	8989      	ldrh	r1, [r1, #12]
 80167fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8016802:	429a      	cmp	r2, r3
 8016804:	d201      	bcs.n	801680a <find_volume+0x416>
 8016806:	230d      	movs	r3, #13
 8016808:	e06a      	b.n	80168e0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680c:	f04f 32ff 	mov.w	r2, #4294967295
 8016810:	619a      	str	r2, [r3, #24]
 8016812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016814:	699a      	ldr	r2, [r3, #24]
 8016816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016818:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801681c:	2280      	movs	r2, #128	; 0x80
 801681e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016824:	2b03      	cmp	r3, #3
 8016826:	d149      	bne.n	80168bc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801682a:	3338      	adds	r3, #56	; 0x38
 801682c:	3330      	adds	r3, #48	; 0x30
 801682e:	4618      	mov	r0, r3
 8016830:	f7fd fc8c 	bl	801414c <ld_word>
 8016834:	4603      	mov	r3, r0
 8016836:	2b01      	cmp	r3, #1
 8016838:	d140      	bne.n	80168bc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801683c:	3301      	adds	r3, #1
 801683e:	4619      	mov	r1, r3
 8016840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016842:	f7fd ff33 	bl	80146ac <move_window>
 8016846:	4603      	mov	r3, r0
 8016848:	2b00      	cmp	r3, #0
 801684a:	d137      	bne.n	80168bc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684e:	2200      	movs	r2, #0
 8016850:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016854:	3338      	adds	r3, #56	; 0x38
 8016856:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801685a:	4618      	mov	r0, r3
 801685c:	f7fd fc76 	bl	801414c <ld_word>
 8016860:	4603      	mov	r3, r0
 8016862:	461a      	mov	r2, r3
 8016864:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016868:	429a      	cmp	r2, r3
 801686a:	d127      	bne.n	80168bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686e:	3338      	adds	r3, #56	; 0x38
 8016870:	4618      	mov	r0, r3
 8016872:	f7fd fc83 	bl	801417c <ld_dword>
 8016876:	4603      	mov	r3, r0
 8016878:	4a1b      	ldr	r2, [pc, #108]	; (80168e8 <find_volume+0x4f4>)
 801687a:	4293      	cmp	r3, r2
 801687c:	d11e      	bne.n	80168bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016880:	3338      	adds	r3, #56	; 0x38
 8016882:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016886:	4618      	mov	r0, r3
 8016888:	f7fd fc78 	bl	801417c <ld_dword>
 801688c:	4603      	mov	r3, r0
 801688e:	4a17      	ldr	r2, [pc, #92]	; (80168ec <find_volume+0x4f8>)
 8016890:	4293      	cmp	r3, r2
 8016892:	d113      	bne.n	80168bc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016896:	3338      	adds	r3, #56	; 0x38
 8016898:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801689c:	4618      	mov	r0, r3
 801689e:	f7fd fc6d 	bl	801417c <ld_dword>
 80168a2:	4602      	mov	r2, r0
 80168a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168a6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80168a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168aa:	3338      	adds	r3, #56	; 0x38
 80168ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7fd fc63 	bl	801417c <ld_dword>
 80168b6:	4602      	mov	r2, r0
 80168b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ba:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80168bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80168c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80168c4:	4b0a      	ldr	r3, [pc, #40]	; (80168f0 <find_volume+0x4fc>)
 80168c6:	881b      	ldrh	r3, [r3, #0]
 80168c8:	3301      	adds	r3, #1
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	4b08      	ldr	r3, [pc, #32]	; (80168f0 <find_volume+0x4fc>)
 80168ce:	801a      	strh	r2, [r3, #0]
 80168d0:	4b07      	ldr	r3, [pc, #28]	; (80168f0 <find_volume+0x4fc>)
 80168d2:	881a      	ldrh	r2, [r3, #0]
 80168d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168d6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80168d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80168da:	f7fd fe7f 	bl	80145dc <clear_lock>
#endif
	return FR_OK;
 80168de:	2300      	movs	r3, #0
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3758      	adds	r7, #88	; 0x58
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	41615252 	.word	0x41615252
 80168ec:	61417272 	.word	0x61417272
 80168f0:	200039cc 	.word	0x200039cc

080168f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b084      	sub	sp, #16
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80168fe:	2309      	movs	r3, #9
 8016900:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d01c      	beq.n	8016942 <validate+0x4e>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d018      	beq.n	8016942 <validate+0x4e>
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	781b      	ldrb	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d013      	beq.n	8016942 <validate+0x4e>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	889a      	ldrh	r2, [r3, #4]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	88db      	ldrh	r3, [r3, #6]
 8016924:	429a      	cmp	r2, r3
 8016926:	d10c      	bne.n	8016942 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	785b      	ldrb	r3, [r3, #1]
 801692e:	4618      	mov	r0, r3
 8016930:	f7fd fb6e 	bl	8014010 <disk_status>
 8016934:	4603      	mov	r3, r0
 8016936:	f003 0301 	and.w	r3, r3, #1
 801693a:	2b00      	cmp	r3, #0
 801693c:	d101      	bne.n	8016942 <validate+0x4e>
			res = FR_OK;
 801693e:	2300      	movs	r3, #0
 8016940:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016942:	7bfb      	ldrb	r3, [r7, #15]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d102      	bne.n	801694e <validate+0x5a>
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	e000      	b.n	8016950 <validate+0x5c>
 801694e:	2300      	movs	r3, #0
 8016950:	683a      	ldr	r2, [r7, #0]
 8016952:	6013      	str	r3, [r2, #0]
	return res;
 8016954:	7bfb      	ldrb	r3, [r7, #15]
}
 8016956:	4618      	mov	r0, r3
 8016958:	3710      	adds	r7, #16
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}
	...

08016960 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b088      	sub	sp, #32
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	4613      	mov	r3, r2
 801696c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016972:	f107 0310 	add.w	r3, r7, #16
 8016976:	4618      	mov	r0, r3
 8016978:	f7ff fca2 	bl	80162c0 <get_ldnumber>
 801697c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801697e:	69fb      	ldr	r3, [r7, #28]
 8016980:	2b00      	cmp	r3, #0
 8016982:	da01      	bge.n	8016988 <f_mount+0x28>
 8016984:	230b      	movs	r3, #11
 8016986:	e02b      	b.n	80169e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016988:	4a17      	ldr	r2, [pc, #92]	; (80169e8 <f_mount+0x88>)
 801698a:	69fb      	ldr	r3, [r7, #28]
 801698c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016990:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d005      	beq.n	80169a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016998:	69b8      	ldr	r0, [r7, #24]
 801699a:	f7fd fe1f 	bl	80145dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801699e:	69bb      	ldr	r3, [r7, #24]
 80169a0:	2200      	movs	r2, #0
 80169a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d002      	beq.n	80169b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2200      	movs	r2, #0
 80169ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80169b0:	68fa      	ldr	r2, [r7, #12]
 80169b2:	490d      	ldr	r1, [pc, #52]	; (80169e8 <f_mount+0x88>)
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d002      	beq.n	80169c6 <f_mount+0x66>
 80169c0:	79fb      	ldrb	r3, [r7, #7]
 80169c2:	2b01      	cmp	r3, #1
 80169c4:	d001      	beq.n	80169ca <f_mount+0x6a>
 80169c6:	2300      	movs	r3, #0
 80169c8:	e00a      	b.n	80169e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80169ca:	f107 010c 	add.w	r1, r7, #12
 80169ce:	f107 0308 	add.w	r3, r7, #8
 80169d2:	2200      	movs	r2, #0
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7ff fd0d 	bl	80163f4 <find_volume>
 80169da:	4603      	mov	r3, r0
 80169dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80169de:	7dfb      	ldrb	r3, [r7, #23]
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3720      	adds	r7, #32
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}
 80169e8:	200039c8 	.word	0x200039c8

080169ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80169fc:	6018      	str	r0, [r3, #0]
 80169fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8016a06:	6019      	str	r1, [r3, #0]
 8016a08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a0c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a10:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016a12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a16:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d101      	bne.n	8016a24 <f_open+0x38>
 8016a20:	2309      	movs	r3, #9
 8016a22:	e2a6      	b.n	8016f72 <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016a24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a28:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a2c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016a30:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016a34:	7812      	ldrb	r2, [r2, #0]
 8016a36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016a3a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8016a3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a40:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a44:	781a      	ldrb	r2, [r3, #0]
 8016a46:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8016a4a:	f107 0308 	add.w	r3, r7, #8
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7ff fcd0 	bl	80163f4 <find_volume>
 8016a54:	4603      	mov	r3, r0
 8016a56:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8016a5a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	f040 827a 	bne.w	8016f58 <f_open+0x56c>
		dj.obj.fs = fs;
 8016a64:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016a68:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8016a6c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016a70:	f107 0210 	add.w	r2, r7, #16
 8016a74:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016a76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a7a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8016a84:	4611      	mov	r1, r2
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7ff fba4 	bl	80161d4 <follow_path>
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016a92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d11e      	bne.n	8016ad8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016a9a:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8016a9e:	b25b      	sxtb	r3, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	da03      	bge.n	8016aac <f_open+0xc0>
				res = FR_INVALID_NAME;
 8016aa4:	2306      	movs	r3, #6
 8016aa6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016aaa:	e015      	b.n	8016ad8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016aac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ab0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	f023 0301 	bic.w	r3, r3, #1
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	bf14      	ite	ne
 8016abe:	2301      	movne	r3, #1
 8016ac0:	2300      	moveq	r3, #0
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8016aca:	4611      	mov	r1, r2
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7fd fc3d 	bl	801434c <chk_lock>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016ad8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016adc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	f003 031c 	and.w	r3, r3, #28
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	f000 80a7 	beq.w	8016c3a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8016aec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d01f      	beq.n	8016b34 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016af4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016af8:	2b04      	cmp	r3, #4
 8016afa:	d10e      	bne.n	8016b1a <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016afc:	f7fd fc82 	bl	8014404 <enq_lock>
 8016b00:	4603      	mov	r3, r0
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d006      	beq.n	8016b14 <f_open+0x128>
 8016b06:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fe fee8 	bl	80158e0 <dir_register>
 8016b10:	4603      	mov	r3, r0
 8016b12:	e000      	b.n	8016b16 <f_open+0x12a>
 8016b14:	2312      	movs	r3, #18
 8016b16:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016b1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016b1e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016b22:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016b26:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016b2a:	7812      	ldrb	r2, [r2, #0]
 8016b2c:	f042 0208 	orr.w	r2, r2, #8
 8016b30:	701a      	strb	r2, [r3, #0]
 8016b32:	e015      	b.n	8016b60 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016b34:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8016b38:	f003 0311 	and.w	r3, r3, #17
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d003      	beq.n	8016b48 <f_open+0x15c>
					res = FR_DENIED;
 8016b40:	2307      	movs	r3, #7
 8016b42:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016b46:	e00b      	b.n	8016b60 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016b48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016b4c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	f003 0304 	and.w	r3, r3, #4
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d002      	beq.n	8016b60 <f_open+0x174>
 8016b5a:	2308      	movs	r3, #8
 8016b5c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016b60:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	f040 8088 	bne.w	8016c7a <f_open+0x28e>
 8016b6a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016b6e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	f003 0308 	and.w	r3, r3, #8
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d07e      	beq.n	8016c7a <f_open+0x28e>
				dw = GET_FATTIME();
 8016b7c:	f7f8 f84c 	bl	800ec18 <get_fattime>
 8016b80:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016b84:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016b88:	330e      	adds	r3, #14
 8016b8a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7fd fb32 	bl	80141f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016b94:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016b98:	3316      	adds	r3, #22
 8016b9a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7fd fb2a 	bl	80141f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016ba4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016ba8:	330b      	adds	r3, #11
 8016baa:	2220      	movs	r2, #32
 8016bac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016bae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016bb2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fe faff 	bl	80151bc <ld_clust>
 8016bbe:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016bc2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016bc6:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8016bca:	2200      	movs	r2, #0
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7fe fb14 	bl	80151fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016bd2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016bd6:	331c      	adds	r3, #28
 8016bd8:	2100      	movs	r1, #0
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7fd fb0c 	bl	80141f8 <st_dword>
					fs->wflag = 1;
 8016be0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016be4:	2201      	movs	r2, #1
 8016be6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016be8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d044      	beq.n	8016c7a <f_open+0x28e>
						dw = fs->winsect;
 8016bf0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bf6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8016bfa:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8016bfe:	2200      	movs	r2, #0
 8016c00:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7fd fffe 	bl	8014c06 <remove_chain>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8016c10:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d130      	bne.n	8016c7a <f_open+0x28e>
							res = move_window(fs, dw);
 8016c18:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016c1c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7fd fd43 	bl	80146ac <move_window>
 8016c26:	4603      	mov	r3, r0
 8016c28:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016c2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016c30:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8016c34:	3a01      	subs	r2, #1
 8016c36:	615a      	str	r2, [r3, #20]
 8016c38:	e01f      	b.n	8016c7a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016c3a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d11b      	bne.n	8016c7a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016c42:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8016c46:	f003 0310 	and.w	r3, r3, #16
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d003      	beq.n	8016c56 <f_open+0x26a>
					res = FR_NO_FILE;
 8016c4e:	2304      	movs	r3, #4
 8016c50:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016c54:	e011      	b.n	8016c7a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016c56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c5a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	f003 0302 	and.w	r3, r3, #2
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d008      	beq.n	8016c7a <f_open+0x28e>
 8016c68:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8016c6c:	f003 0301 	and.w	r3, r3, #1
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d002      	beq.n	8016c7a <f_open+0x28e>
						res = FR_DENIED;
 8016c74:	2307      	movs	r3, #7
 8016c76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8016c7a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d14a      	bne.n	8016d18 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016c82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c86:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	f003 0308 	and.w	r3, r3, #8
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d00b      	beq.n	8016cac <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8016c94:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c98:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c9c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016ca0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016ca4:	7812      	ldrb	r2, [r2, #0]
 8016ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016caa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016cac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016cb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cb6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016cbe:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8016cc2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cc6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016cce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cd2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	f023 0301 	bic.w	r3, r3, #1
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	bf14      	ite	ne
 8016ce0:	2301      	movne	r3, #1
 8016ce2:	2300      	moveq	r3, #0
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8016cec:	4611      	mov	r1, r2
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7fd fbaa 	bl	8014448 <inc_lock>
 8016cf4:	4602      	mov	r2, r0
 8016cf6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cfa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016d02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	691b      	ldr	r3, [r3, #16]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d102      	bne.n	8016d18 <f_open+0x32c>
 8016d12:	2302      	movs	r3, #2
 8016d14:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016d18:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	f040 811b 	bne.w	8016f58 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016d22:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016d26:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8016d2a:	4611      	mov	r1, r2
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7fe fa45 	bl	80151bc <ld_clust>
 8016d32:	4602      	mov	r2, r0
 8016d34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016d40:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016d44:	331c      	adds	r3, #28
 8016d46:	4618      	mov	r0, r3
 8016d48:	f7fd fa18 	bl	801417c <ld_dword>
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016d5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	2200      	movs	r2, #0
 8016d66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016d68:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8016d6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d70:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016d78:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016d7c:	88da      	ldrh	r2, [r3, #6]
 8016d7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016d8a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016d98:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016d9c:	7812      	ldrb	r2, [r2, #0]
 8016d9e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016da0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016da4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	2200      	movs	r2, #0
 8016dac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016dae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016db2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2200      	movs	r2, #0
 8016dba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016dbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dc0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016dca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	3330      	adds	r3, #48	; 0x30
 8016dd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016dda:	2100      	movs	r1, #0
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7fd fa58 	bl	8014292 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016de2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016de6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	f003 0320 	and.w	r3, r3, #32
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f000 80b1 	beq.w	8016f58 <f_open+0x56c>
 8016df6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dfa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	68db      	ldr	r3, [r3, #12]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	f000 80a8 	beq.w	8016f58 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016e08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	68da      	ldr	r2, [r3, #12]
 8016e14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016e20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016e24:	895b      	ldrh	r3, [r3, #10]
 8016e26:	461a      	mov	r2, r3
 8016e28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016e2c:	899b      	ldrh	r3, [r3, #12]
 8016e2e:	fb02 f303 	mul.w	r3, r2, r3
 8016e32:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016e36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e3a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	689b      	ldr	r3, [r3, #8]
 8016e42:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	68db      	ldr	r3, [r3, #12]
 8016e52:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016e56:	e021      	b.n	8016e9c <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8016e58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7fd fcdd 	bl	8014826 <get_fat>
 8016e6c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8016e70:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d802      	bhi.n	8016e7e <f_open+0x492>
 8016e78:	2302      	movs	r3, #2
 8016e7a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016e7e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e86:	d102      	bne.n	8016e8e <f_open+0x4a2>
 8016e88:	2301      	movs	r3, #1
 8016e8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e8e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016e92:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016e96:	1ad3      	subs	r3, r2, r3
 8016e98:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016e9c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d105      	bne.n	8016eb0 <f_open+0x4c4>
 8016ea4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016ea8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d8d3      	bhi.n	8016e58 <f_open+0x46c>
				}
				fp->clust = clst;
 8016eb0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016eb4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8016ebe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016ec0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d147      	bne.n	8016f58 <f_open+0x56c>
 8016ec8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016ecc:	899b      	ldrh	r3, [r3, #12]
 8016ece:	461a      	mov	r2, r3
 8016ed0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016ed4:	fbb3 f1f2 	udiv	r1, r3, r2
 8016ed8:	fb01 f202 	mul.w	r2, r1, r2
 8016edc:	1a9b      	subs	r3, r3, r2
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d03a      	beq.n	8016f58 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016ee2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016ee6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7fd fc7c 	bl	80147e8 <clust2sect>
 8016ef0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8016ef4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d103      	bne.n	8016f04 <f_open+0x518>
						res = FR_INT_ERR;
 8016efc:	2302      	movs	r3, #2
 8016efe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016f02:	e029      	b.n	8016f58 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016f04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016f08:	899b      	ldrh	r3, [r3, #12]
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016f10:	fbb3 f2f2 	udiv	r2, r3, r2
 8016f14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016f18:	441a      	add	r2, r3
 8016f1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016f1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016f26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016f2a:	7858      	ldrb	r0, [r3, #1]
 8016f2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016f30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016f3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016f3e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	6a1a      	ldr	r2, [r3, #32]
 8016f46:	2301      	movs	r3, #1
 8016f48:	f7fd f8a2 	bl	8014090 <disk_read>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d002      	beq.n	8016f58 <f_open+0x56c>
 8016f52:	2301      	movs	r3, #1
 8016f54:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016f58:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d006      	beq.n	8016f6e <f_open+0x582>
 8016f60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016f64:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016f6e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b08e      	sub	sp, #56	; 0x38
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
 8016f88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	2200      	movs	r2, #0
 8016f92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f107 0214 	add.w	r2, r7, #20
 8016f9a:	4611      	mov	r1, r2
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7ff fca9 	bl	80168f4 <validate>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016fa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d107      	bne.n	8016fc0 <f_read+0x44>
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	7d5b      	ldrb	r3, [r3, #21]
 8016fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d002      	beq.n	8016fc6 <f_read+0x4a>
 8016fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fc4:	e135      	b.n	8017232 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	7d1b      	ldrb	r3, [r3, #20]
 8016fca:	f003 0301 	and.w	r3, r3, #1
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d101      	bne.n	8016fd6 <f_read+0x5a>
 8016fd2:	2307      	movs	r3, #7
 8016fd4:	e12d      	b.n	8017232 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	68da      	ldr	r2, [r3, #12]
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	699b      	ldr	r3, [r3, #24]
 8016fde:	1ad3      	subs	r3, r2, r3
 8016fe0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016fe2:	687a      	ldr	r2, [r7, #4]
 8016fe4:	6a3b      	ldr	r3, [r7, #32]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	f240 811e 	bls.w	8017228 <f_read+0x2ac>
 8016fec:	6a3b      	ldr	r3, [r7, #32]
 8016fee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016ff0:	e11a      	b.n	8017228 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	699b      	ldr	r3, [r3, #24]
 8016ff6:	697a      	ldr	r2, [r7, #20]
 8016ff8:	8992      	ldrh	r2, [r2, #12]
 8016ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8016ffe:	fb01 f202 	mul.w	r2, r1, r2
 8017002:	1a9b      	subs	r3, r3, r2
 8017004:	2b00      	cmp	r3, #0
 8017006:	f040 80d5 	bne.w	80171b4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	699b      	ldr	r3, [r3, #24]
 801700e:	697a      	ldr	r2, [r7, #20]
 8017010:	8992      	ldrh	r2, [r2, #12]
 8017012:	fbb3 f3f2 	udiv	r3, r3, r2
 8017016:	697a      	ldr	r2, [r7, #20]
 8017018:	8952      	ldrh	r2, [r2, #10]
 801701a:	3a01      	subs	r2, #1
 801701c:	4013      	ands	r3, r2
 801701e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d12f      	bne.n	8017086 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	699b      	ldr	r3, [r3, #24]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d103      	bne.n	8017036 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	689b      	ldr	r3, [r3, #8]
 8017032:	633b      	str	r3, [r7, #48]	; 0x30
 8017034:	e013      	b.n	801705e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801703a:	2b00      	cmp	r3, #0
 801703c:	d007      	beq.n	801704e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	699b      	ldr	r3, [r3, #24]
 8017042:	4619      	mov	r1, r3
 8017044:	68f8      	ldr	r0, [r7, #12]
 8017046:	f7fd fedb 	bl	8014e00 <clmt_clust>
 801704a:	6338      	str	r0, [r7, #48]	; 0x30
 801704c:	e007      	b.n	801705e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801704e:	68fa      	ldr	r2, [r7, #12]
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	69db      	ldr	r3, [r3, #28]
 8017054:	4619      	mov	r1, r3
 8017056:	4610      	mov	r0, r2
 8017058:	f7fd fbe5 	bl	8014826 <get_fat>
 801705c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017060:	2b01      	cmp	r3, #1
 8017062:	d804      	bhi.n	801706e <f_read+0xf2>
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2202      	movs	r2, #2
 8017068:	755a      	strb	r2, [r3, #21]
 801706a:	2302      	movs	r3, #2
 801706c:	e0e1      	b.n	8017232 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017074:	d104      	bne.n	8017080 <f_read+0x104>
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	2201      	movs	r2, #1
 801707a:	755a      	strb	r2, [r3, #21]
 801707c:	2301      	movs	r3, #1
 801707e:	e0d8      	b.n	8017232 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017084:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017086:	697a      	ldr	r2, [r7, #20]
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	69db      	ldr	r3, [r3, #28]
 801708c:	4619      	mov	r1, r3
 801708e:	4610      	mov	r0, r2
 8017090:	f7fd fbaa 	bl	80147e8 <clust2sect>
 8017094:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017096:	69bb      	ldr	r3, [r7, #24]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d104      	bne.n	80170a6 <f_read+0x12a>
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2202      	movs	r2, #2
 80170a0:	755a      	strb	r2, [r3, #21]
 80170a2:	2302      	movs	r3, #2
 80170a4:	e0c5      	b.n	8017232 <f_read+0x2b6>
			sect += csect;
 80170a6:	69ba      	ldr	r2, [r7, #24]
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	4413      	add	r3, r2
 80170ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	899b      	ldrh	r3, [r3, #12]
 80170b2:	461a      	mov	r2, r3
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80170ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80170bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d041      	beq.n	8017146 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80170c2:	69fa      	ldr	r2, [r7, #28]
 80170c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c6:	4413      	add	r3, r2
 80170c8:	697a      	ldr	r2, [r7, #20]
 80170ca:	8952      	ldrh	r2, [r2, #10]
 80170cc:	4293      	cmp	r3, r2
 80170ce:	d905      	bls.n	80170dc <f_read+0x160>
					cc = fs->csize - csect;
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	895b      	ldrh	r3, [r3, #10]
 80170d4:	461a      	mov	r2, r3
 80170d6:	69fb      	ldr	r3, [r7, #28]
 80170d8:	1ad3      	subs	r3, r2, r3
 80170da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	7858      	ldrb	r0, [r3, #1]
 80170e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e2:	69ba      	ldr	r2, [r7, #24]
 80170e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170e6:	f7fc ffd3 	bl	8014090 <disk_read>
 80170ea:	4603      	mov	r3, r0
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d004      	beq.n	80170fa <f_read+0x17e>
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	2201      	movs	r2, #1
 80170f4:	755a      	strb	r2, [r3, #21]
 80170f6:	2301      	movs	r3, #1
 80170f8:	e09b      	b.n	8017232 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	7d1b      	ldrb	r3, [r3, #20]
 80170fe:	b25b      	sxtb	r3, r3
 8017100:	2b00      	cmp	r3, #0
 8017102:	da18      	bge.n	8017136 <f_read+0x1ba>
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	6a1a      	ldr	r2, [r3, #32]
 8017108:	69bb      	ldr	r3, [r7, #24]
 801710a:	1ad3      	subs	r3, r2, r3
 801710c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801710e:	429a      	cmp	r2, r3
 8017110:	d911      	bls.n	8017136 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	6a1a      	ldr	r2, [r3, #32]
 8017116:	69bb      	ldr	r3, [r7, #24]
 8017118:	1ad3      	subs	r3, r2, r3
 801711a:	697a      	ldr	r2, [r7, #20]
 801711c:	8992      	ldrh	r2, [r2, #12]
 801711e:	fb02 f303 	mul.w	r3, r2, r3
 8017122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017124:	18d0      	adds	r0, r2, r3
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	899b      	ldrh	r3, [r3, #12]
 8017130:	461a      	mov	r2, r3
 8017132:	f7fd f88d 	bl	8014250 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	899b      	ldrh	r3, [r3, #12]
 801713a:	461a      	mov	r2, r3
 801713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801713e:	fb02 f303 	mul.w	r3, r2, r3
 8017142:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017144:	e05c      	b.n	8017200 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	6a1b      	ldr	r3, [r3, #32]
 801714a:	69ba      	ldr	r2, [r7, #24]
 801714c:	429a      	cmp	r2, r3
 801714e:	d02e      	beq.n	80171ae <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	7d1b      	ldrb	r3, [r3, #20]
 8017154:	b25b      	sxtb	r3, r3
 8017156:	2b00      	cmp	r3, #0
 8017158:	da18      	bge.n	801718c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	7858      	ldrb	r0, [r3, #1]
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	6a1a      	ldr	r2, [r3, #32]
 8017168:	2301      	movs	r3, #1
 801716a:	f7fc ffb1 	bl	80140d0 <disk_write>
 801716e:	4603      	mov	r3, r0
 8017170:	2b00      	cmp	r3, #0
 8017172:	d004      	beq.n	801717e <f_read+0x202>
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2201      	movs	r2, #1
 8017178:	755a      	strb	r2, [r3, #21]
 801717a:	2301      	movs	r3, #1
 801717c:	e059      	b.n	8017232 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	7d1b      	ldrb	r3, [r3, #20]
 8017182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017186:	b2da      	uxtb	r2, r3
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	7858      	ldrb	r0, [r3, #1]
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017196:	2301      	movs	r3, #1
 8017198:	69ba      	ldr	r2, [r7, #24]
 801719a:	f7fc ff79 	bl	8014090 <disk_read>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d004      	beq.n	80171ae <f_read+0x232>
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2201      	movs	r2, #1
 80171a8:	755a      	strb	r2, [r3, #21]
 80171aa:	2301      	movs	r3, #1
 80171ac:	e041      	b.n	8017232 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	69ba      	ldr	r2, [r7, #24]
 80171b2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	899b      	ldrh	r3, [r3, #12]
 80171b8:	4618      	mov	r0, r3
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	699b      	ldr	r3, [r3, #24]
 80171be:	697a      	ldr	r2, [r7, #20]
 80171c0:	8992      	ldrh	r2, [r2, #12]
 80171c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80171c6:	fb01 f202 	mul.w	r2, r1, r2
 80171ca:	1a9b      	subs	r3, r3, r2
 80171cc:	1ac3      	subs	r3, r0, r3
 80171ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80171d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d901      	bls.n	80171dc <f_read+0x260>
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	699b      	ldr	r3, [r3, #24]
 80171e6:	697a      	ldr	r2, [r7, #20]
 80171e8:	8992      	ldrh	r2, [r2, #12]
 80171ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80171ee:	fb00 f202 	mul.w	r2, r0, r2
 80171f2:	1a9b      	subs	r3, r3, r2
 80171f4:	440b      	add	r3, r1
 80171f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171f8:	4619      	mov	r1, r3
 80171fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171fc:	f7fd f828 	bl	8014250 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017204:	4413      	add	r3, r2
 8017206:	627b      	str	r3, [r7, #36]	; 0x24
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	699a      	ldr	r2, [r3, #24]
 801720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801720e:	441a      	add	r2, r3
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	619a      	str	r2, [r3, #24]
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	681a      	ldr	r2, [r3, #0]
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	441a      	add	r2, r3
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	601a      	str	r2, [r3, #0]
 8017220:	687a      	ldr	r2, [r7, #4]
 8017222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2b00      	cmp	r3, #0
 801722c:	f47f aee1 	bne.w	8016ff2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017230:	2300      	movs	r3, #0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3738      	adds	r7, #56	; 0x38
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}

0801723a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801723a:	b580      	push	{r7, lr}
 801723c:	b08c      	sub	sp, #48	; 0x30
 801723e:	af00      	add	r7, sp, #0
 8017240:	60f8      	str	r0, [r7, #12]
 8017242:	60b9      	str	r1, [r7, #8]
 8017244:	607a      	str	r2, [r7, #4]
 8017246:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	2200      	movs	r2, #0
 8017250:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f107 0210 	add.w	r2, r7, #16
 8017258:	4611      	mov	r1, r2
 801725a:	4618      	mov	r0, r3
 801725c:	f7ff fb4a 	bl	80168f4 <validate>
 8017260:	4603      	mov	r3, r0
 8017262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801726a:	2b00      	cmp	r3, #0
 801726c:	d107      	bne.n	801727e <f_write+0x44>
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	7d5b      	ldrb	r3, [r3, #21]
 8017272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801727a:	2b00      	cmp	r3, #0
 801727c:	d002      	beq.n	8017284 <f_write+0x4a>
 801727e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017282:	e16a      	b.n	801755a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	7d1b      	ldrb	r3, [r3, #20]
 8017288:	f003 0302 	and.w	r3, r3, #2
 801728c:	2b00      	cmp	r3, #0
 801728e:	d101      	bne.n	8017294 <f_write+0x5a>
 8017290:	2307      	movs	r3, #7
 8017292:	e162      	b.n	801755a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	699a      	ldr	r2, [r3, #24]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	441a      	add	r2, r3
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	699b      	ldr	r3, [r3, #24]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	f080 814c 	bcs.w	801753e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	699b      	ldr	r3, [r3, #24]
 80172aa:	43db      	mvns	r3, r3
 80172ac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80172ae:	e146      	b.n	801753e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	699b      	ldr	r3, [r3, #24]
 80172b4:	693a      	ldr	r2, [r7, #16]
 80172b6:	8992      	ldrh	r2, [r2, #12]
 80172b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80172bc:	fb01 f202 	mul.w	r2, r1, r2
 80172c0:	1a9b      	subs	r3, r3, r2
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	f040 80f1 	bne.w	80174aa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	699b      	ldr	r3, [r3, #24]
 80172cc:	693a      	ldr	r2, [r7, #16]
 80172ce:	8992      	ldrh	r2, [r2, #12]
 80172d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80172d4:	693a      	ldr	r2, [r7, #16]
 80172d6:	8952      	ldrh	r2, [r2, #10]
 80172d8:	3a01      	subs	r2, #1
 80172da:	4013      	ands	r3, r2
 80172dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80172de:	69bb      	ldr	r3, [r7, #24]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d143      	bne.n	801736c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	699b      	ldr	r3, [r3, #24]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d10c      	bne.n	8017306 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	689b      	ldr	r3, [r3, #8]
 80172f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80172f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d11a      	bne.n	801732e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2100      	movs	r1, #0
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7fd fce7 	bl	8014cd0 <create_chain>
 8017302:	62b8      	str	r0, [r7, #40]	; 0x28
 8017304:	e013      	b.n	801732e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801730a:	2b00      	cmp	r3, #0
 801730c:	d007      	beq.n	801731e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	699b      	ldr	r3, [r3, #24]
 8017312:	4619      	mov	r1, r3
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f7fd fd73 	bl	8014e00 <clmt_clust>
 801731a:	62b8      	str	r0, [r7, #40]	; 0x28
 801731c:	e007      	b.n	801732e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801731e:	68fa      	ldr	r2, [r7, #12]
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	69db      	ldr	r3, [r3, #28]
 8017324:	4619      	mov	r1, r3
 8017326:	4610      	mov	r0, r2
 8017328:	f7fd fcd2 	bl	8014cd0 <create_chain>
 801732c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017330:	2b00      	cmp	r3, #0
 8017332:	f000 8109 	beq.w	8017548 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017338:	2b01      	cmp	r3, #1
 801733a:	d104      	bne.n	8017346 <f_write+0x10c>
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	2202      	movs	r2, #2
 8017340:	755a      	strb	r2, [r3, #21]
 8017342:	2302      	movs	r3, #2
 8017344:	e109      	b.n	801755a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801734c:	d104      	bne.n	8017358 <f_write+0x11e>
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	2201      	movs	r2, #1
 8017352:	755a      	strb	r2, [r3, #21]
 8017354:	2301      	movs	r3, #1
 8017356:	e100      	b.n	801755a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801735c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	689b      	ldr	r3, [r3, #8]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d102      	bne.n	801736c <f_write+0x132>
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801736a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	7d1b      	ldrb	r3, [r3, #20]
 8017370:	b25b      	sxtb	r3, r3
 8017372:	2b00      	cmp	r3, #0
 8017374:	da18      	bge.n	80173a8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017376:	693b      	ldr	r3, [r7, #16]
 8017378:	7858      	ldrb	r0, [r3, #1]
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	6a1a      	ldr	r2, [r3, #32]
 8017384:	2301      	movs	r3, #1
 8017386:	f7fc fea3 	bl	80140d0 <disk_write>
 801738a:	4603      	mov	r3, r0
 801738c:	2b00      	cmp	r3, #0
 801738e:	d004      	beq.n	801739a <f_write+0x160>
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2201      	movs	r2, #1
 8017394:	755a      	strb	r2, [r3, #21]
 8017396:	2301      	movs	r3, #1
 8017398:	e0df      	b.n	801755a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	7d1b      	ldrb	r3, [r3, #20]
 801739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80173a2:	b2da      	uxtb	r2, r3
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80173a8:	693a      	ldr	r2, [r7, #16]
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	69db      	ldr	r3, [r3, #28]
 80173ae:	4619      	mov	r1, r3
 80173b0:	4610      	mov	r0, r2
 80173b2:	f7fd fa19 	bl	80147e8 <clust2sect>
 80173b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d104      	bne.n	80173c8 <f_write+0x18e>
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	2202      	movs	r2, #2
 80173c2:	755a      	strb	r2, [r3, #21]
 80173c4:	2302      	movs	r3, #2
 80173c6:	e0c8      	b.n	801755a <f_write+0x320>
			sect += csect;
 80173c8:	697a      	ldr	r2, [r7, #20]
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	4413      	add	r3, r2
 80173ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80173d0:	693b      	ldr	r3, [r7, #16]
 80173d2:	899b      	ldrh	r3, [r3, #12]
 80173d4:	461a      	mov	r2, r3
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80173dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80173de:	6a3b      	ldr	r3, [r7, #32]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d043      	beq.n	801746c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80173e4:	69ba      	ldr	r2, [r7, #24]
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	4413      	add	r3, r2
 80173ea:	693a      	ldr	r2, [r7, #16]
 80173ec:	8952      	ldrh	r2, [r2, #10]
 80173ee:	4293      	cmp	r3, r2
 80173f0:	d905      	bls.n	80173fe <f_write+0x1c4>
					cc = fs->csize - csect;
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	895b      	ldrh	r3, [r3, #10]
 80173f6:	461a      	mov	r2, r3
 80173f8:	69bb      	ldr	r3, [r7, #24]
 80173fa:	1ad3      	subs	r3, r2, r3
 80173fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80173fe:	693b      	ldr	r3, [r7, #16]
 8017400:	7858      	ldrb	r0, [r3, #1]
 8017402:	6a3b      	ldr	r3, [r7, #32]
 8017404:	697a      	ldr	r2, [r7, #20]
 8017406:	69f9      	ldr	r1, [r7, #28]
 8017408:	f7fc fe62 	bl	80140d0 <disk_write>
 801740c:	4603      	mov	r3, r0
 801740e:	2b00      	cmp	r3, #0
 8017410:	d004      	beq.n	801741c <f_write+0x1e2>
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	2201      	movs	r2, #1
 8017416:	755a      	strb	r2, [r3, #21]
 8017418:	2301      	movs	r3, #1
 801741a:	e09e      	b.n	801755a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	6a1a      	ldr	r2, [r3, #32]
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	1ad3      	subs	r3, r2, r3
 8017424:	6a3a      	ldr	r2, [r7, #32]
 8017426:	429a      	cmp	r2, r3
 8017428:	d918      	bls.n	801745c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	6a1a      	ldr	r2, [r3, #32]
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	1ad3      	subs	r3, r2, r3
 8017438:	693a      	ldr	r2, [r7, #16]
 801743a:	8992      	ldrh	r2, [r2, #12]
 801743c:	fb02 f303 	mul.w	r3, r2, r3
 8017440:	69fa      	ldr	r2, [r7, #28]
 8017442:	18d1      	adds	r1, r2, r3
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	899b      	ldrh	r3, [r3, #12]
 8017448:	461a      	mov	r2, r3
 801744a:	f7fc ff01 	bl	8014250 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	7d1b      	ldrb	r3, [r3, #20]
 8017452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017456:	b2da      	uxtb	r2, r3
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	899b      	ldrh	r3, [r3, #12]
 8017460:	461a      	mov	r2, r3
 8017462:	6a3b      	ldr	r3, [r7, #32]
 8017464:	fb02 f303 	mul.w	r3, r2, r3
 8017468:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801746a:	e04b      	b.n	8017504 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	6a1b      	ldr	r3, [r3, #32]
 8017470:	697a      	ldr	r2, [r7, #20]
 8017472:	429a      	cmp	r2, r3
 8017474:	d016      	beq.n	80174a4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	699a      	ldr	r2, [r3, #24]
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801747e:	429a      	cmp	r2, r3
 8017480:	d210      	bcs.n	80174a4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	7858      	ldrb	r0, [r3, #1]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801748c:	2301      	movs	r3, #1
 801748e:	697a      	ldr	r2, [r7, #20]
 8017490:	f7fc fdfe 	bl	8014090 <disk_read>
 8017494:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017496:	2b00      	cmp	r3, #0
 8017498:	d004      	beq.n	80174a4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	2201      	movs	r2, #1
 801749e:	755a      	strb	r2, [r3, #21]
 80174a0:	2301      	movs	r3, #1
 80174a2:	e05a      	b.n	801755a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	697a      	ldr	r2, [r7, #20]
 80174a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	899b      	ldrh	r3, [r3, #12]
 80174ae:	4618      	mov	r0, r3
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	699b      	ldr	r3, [r3, #24]
 80174b4:	693a      	ldr	r2, [r7, #16]
 80174b6:	8992      	ldrh	r2, [r2, #12]
 80174b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80174bc:	fb01 f202 	mul.w	r2, r1, r2
 80174c0:	1a9b      	subs	r3, r3, r2
 80174c2:	1ac3      	subs	r3, r0, r3
 80174c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80174c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d901      	bls.n	80174d2 <f_write+0x298>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	699b      	ldr	r3, [r3, #24]
 80174dc:	693a      	ldr	r2, [r7, #16]
 80174de:	8992      	ldrh	r2, [r2, #12]
 80174e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80174e4:	fb00 f202 	mul.w	r2, r0, r2
 80174e8:	1a9b      	subs	r3, r3, r2
 80174ea:	440b      	add	r3, r1
 80174ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ee:	69f9      	ldr	r1, [r7, #28]
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7fc fead 	bl	8014250 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	7d1b      	ldrb	r3, [r3, #20]
 80174fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80174fe:	b2da      	uxtb	r2, r3
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017504:	69fa      	ldr	r2, [r7, #28]
 8017506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017508:	4413      	add	r3, r2
 801750a:	61fb      	str	r3, [r7, #28]
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	699a      	ldr	r2, [r3, #24]
 8017510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017512:	441a      	add	r2, r3
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	619a      	str	r2, [r3, #24]
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	68da      	ldr	r2, [r3, #12]
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	699b      	ldr	r3, [r3, #24]
 8017520:	429a      	cmp	r2, r3
 8017522:	bf38      	it	cc
 8017524:	461a      	movcc	r2, r3
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	60da      	str	r2, [r3, #12]
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017530:	441a      	add	r2, r3
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	601a      	str	r2, [r3, #0]
 8017536:	687a      	ldr	r2, [r7, #4]
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753a:	1ad3      	subs	r3, r2, r3
 801753c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2b00      	cmp	r3, #0
 8017542:	f47f aeb5 	bne.w	80172b0 <f_write+0x76>
 8017546:	e000      	b.n	801754a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017548:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	7d1b      	ldrb	r3, [r3, #20]
 801754e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017552:	b2da      	uxtb	r2, r3
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017558:	2300      	movs	r3, #0
}
 801755a:	4618      	mov	r0, r3
 801755c:	3730      	adds	r7, #48	; 0x30
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017562:	b580      	push	{r7, lr}
 8017564:	b086      	sub	sp, #24
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f107 0208 	add.w	r2, r7, #8
 8017570:	4611      	mov	r1, r2
 8017572:	4618      	mov	r0, r3
 8017574:	f7ff f9be 	bl	80168f4 <validate>
 8017578:	4603      	mov	r3, r0
 801757a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801757c:	7dfb      	ldrb	r3, [r7, #23]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d168      	bne.n	8017654 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	7d1b      	ldrb	r3, [r3, #20]
 8017586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801758a:	2b00      	cmp	r3, #0
 801758c:	d062      	beq.n	8017654 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	7d1b      	ldrb	r3, [r3, #20]
 8017592:	b25b      	sxtb	r3, r3
 8017594:	2b00      	cmp	r3, #0
 8017596:	da15      	bge.n	80175c4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017598:	68bb      	ldr	r3, [r7, #8]
 801759a:	7858      	ldrb	r0, [r3, #1]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6a1a      	ldr	r2, [r3, #32]
 80175a6:	2301      	movs	r3, #1
 80175a8:	f7fc fd92 	bl	80140d0 <disk_write>
 80175ac:	4603      	mov	r3, r0
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d001      	beq.n	80175b6 <f_sync+0x54>
 80175b2:	2301      	movs	r3, #1
 80175b4:	e04f      	b.n	8017656 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	7d1b      	ldrb	r3, [r3, #20]
 80175ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175be:	b2da      	uxtb	r2, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80175c4:	f7f7 fb28 	bl	800ec18 <get_fattime>
 80175c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80175ca:	68ba      	ldr	r2, [r7, #8]
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175d0:	4619      	mov	r1, r3
 80175d2:	4610      	mov	r0, r2
 80175d4:	f7fd f86a 	bl	80146ac <move_window>
 80175d8:	4603      	mov	r3, r0
 80175da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80175dc:	7dfb      	ldrb	r3, [r7, #23]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d138      	bne.n	8017654 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	330b      	adds	r3, #11
 80175ec:	781a      	ldrb	r2, [r3, #0]
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	330b      	adds	r3, #11
 80175f2:	f042 0220 	orr.w	r2, r2, #32
 80175f6:	b2d2      	uxtb	r2, r2
 80175f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6818      	ldr	r0, [r3, #0]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	689b      	ldr	r3, [r3, #8]
 8017602:	461a      	mov	r2, r3
 8017604:	68f9      	ldr	r1, [r7, #12]
 8017606:	f7fd fdf8 	bl	80151fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	f103 021c 	add.w	r2, r3, #28
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	4619      	mov	r1, r3
 8017616:	4610      	mov	r0, r2
 8017618:	f7fc fdee 	bl	80141f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	3316      	adds	r3, #22
 8017620:	6939      	ldr	r1, [r7, #16]
 8017622:	4618      	mov	r0, r3
 8017624:	f7fc fde8 	bl	80141f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	3312      	adds	r3, #18
 801762c:	2100      	movs	r1, #0
 801762e:	4618      	mov	r0, r3
 8017630:	f7fc fdc7 	bl	80141c2 <st_word>
					fs->wflag = 1;
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	2201      	movs	r2, #1
 8017638:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	4618      	mov	r0, r3
 801763e:	f7fd f863 	bl	8014708 <sync_fs>
 8017642:	4603      	mov	r3, r0
 8017644:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	7d1b      	ldrb	r3, [r3, #20]
 801764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801764e:	b2da      	uxtb	r2, r3
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017654:	7dfb      	ldrb	r3, [r7, #23]
}
 8017656:	4618      	mov	r0, r3
 8017658:	3718      	adds	r7, #24
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}

0801765e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801765e:	b580      	push	{r7, lr}
 8017660:	b084      	sub	sp, #16
 8017662:	af00      	add	r7, sp, #0
 8017664:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f7ff ff7b 	bl	8017562 <f_sync>
 801766c:	4603      	mov	r3, r0
 801766e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017670:	7bfb      	ldrb	r3, [r7, #15]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d118      	bne.n	80176a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f107 0208 	add.w	r2, r7, #8
 801767c:	4611      	mov	r1, r2
 801767e:	4618      	mov	r0, r3
 8017680:	f7ff f938 	bl	80168f4 <validate>
 8017684:	4603      	mov	r3, r0
 8017686:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017688:	7bfb      	ldrb	r3, [r7, #15]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d10c      	bne.n	80176a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	691b      	ldr	r3, [r3, #16]
 8017692:	4618      	mov	r0, r3
 8017694:	f7fc ff66 	bl	8014564 <dec_lock>
 8017698:	4603      	mov	r3, r0
 801769a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801769c:	7bfb      	ldrb	r3, [r7, #15]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d102      	bne.n	80176a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2200      	movs	r2, #0
 80176a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80176a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3710      	adds	r7, #16
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}

080176b2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80176b2:	b580      	push	{r7, lr}
 80176b4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80176be:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80176c2:	6018      	str	r0, [r3, #0]
 80176c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80176c8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80176cc:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80176ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80176d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d101      	bne.n	80176e0 <f_opendir+0x2e>
 80176dc:	2309      	movs	r3, #9
 80176de:	e0a0      	b.n	8017822 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 80176e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80176e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80176ee:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80176f2:	463b      	mov	r3, r7
 80176f4:	2200      	movs	r2, #0
 80176f6:	4618      	mov	r0, r3
 80176f8:	f7fe fe7c 	bl	80163f4 <find_volume>
 80176fc:	4603      	mov	r3, r0
 80176fe:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8017702:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8017706:	2b00      	cmp	r3, #0
 8017708:	f040 8081 	bne.w	801780e <f_opendir+0x15c>
		obj->fs = fs;
 801770c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8017710:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8017714:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8017716:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801771a:	f107 020c 	add.w	r2, r7, #12
 801771e:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017720:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017724:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017728:	681a      	ldr	r2, [r3, #0]
 801772a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801772e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017732:	4611      	mov	r1, r2
 8017734:	6818      	ldr	r0, [r3, #0]
 8017736:	f7fe fd4d 	bl	80161d4 <follow_path>
 801773a:	4603      	mov	r3, r0
 801773c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8017740:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8017744:	2b00      	cmp	r3, #0
 8017746:	d15b      	bne.n	8017800 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017748:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801774c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017756:	b25b      	sxtb	r3, r3
 8017758:	2b00      	cmp	r3, #0
 801775a:	db1a      	blt.n	8017792 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801775c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8017760:	799b      	ldrb	r3, [r3, #6]
 8017762:	f003 0310 	and.w	r3, r3, #16
 8017766:	2b00      	cmp	r3, #0
 8017768:	d010      	beq.n	801778c <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801776a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801776e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017772:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	6a1b      	ldr	r3, [r3, #32]
 801777a:	4619      	mov	r1, r3
 801777c:	4610      	mov	r0, r2
 801777e:	f7fd fd1d 	bl	80151bc <ld_clust>
 8017782:	4602      	mov	r2, r0
 8017784:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8017788:	609a      	str	r2, [r3, #8]
 801778a:	e002      	b.n	8017792 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801778c:	2305      	movs	r3, #5
 801778e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8017792:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8017796:	2b00      	cmp	r3, #0
 8017798:	d132      	bne.n	8017800 <f_opendir+0x14e>
				obj->id = fs->id;
 801779a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801779e:	88da      	ldrh	r2, [r3, #6]
 80177a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80177a4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80177a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80177aa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80177ae:	2100      	movs	r1, #0
 80177b0:	6818      	ldr	r0, [r3, #0]
 80177b2:	f7fd fb5d 	bl	8014e70 <dir_sdi>
 80177b6:	4603      	mov	r3, r0
 80177b8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80177bc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d11d      	bne.n	8017800 <f_opendir+0x14e>
					if (obj->sclust) {
 80177c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80177c8:	689b      	ldr	r3, [r3, #8]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d014      	beq.n	80177f8 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80177ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80177d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80177d6:	2100      	movs	r1, #0
 80177d8:	6818      	ldr	r0, [r3, #0]
 80177da:	f7fc fe35 	bl	8014448 <inc_lock>
 80177de:	4602      	mov	r2, r0
 80177e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80177e4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80177e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80177ea:	691b      	ldr	r3, [r3, #16]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d107      	bne.n	8017800 <f_opendir+0x14e>
 80177f0:	2312      	movs	r3, #18
 80177f2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80177f6:	e003      	b.n	8017800 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80177f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80177fc:	2200      	movs	r2, #0
 80177fe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017800:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8017804:	2b04      	cmp	r3, #4
 8017806:	d102      	bne.n	801780e <f_opendir+0x15c>
 8017808:	2305      	movs	r3, #5
 801780a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801780e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8017812:	2b00      	cmp	r3, #0
 8017814:	d003      	beq.n	801781e <f_opendir+0x16c>
 8017816:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801781a:	2200      	movs	r2, #0
 801781c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801781e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8017822:	4618      	mov	r0, r3
 8017824:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}

0801782c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8017832:	af00      	add	r7, sp, #0
 8017834:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017838:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801783c:	6018      	str	r0, [r3, #0]
 801783e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017842:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017846:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8017848:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801784c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8017856:	4611      	mov	r1, r2
 8017858:	4618      	mov	r0, r3
 801785a:	f7ff f84b 	bl	80168f4 <validate>
 801785e:	4603      	mov	r3, r0
 8017860:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8017864:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8017868:	2b00      	cmp	r3, #0
 801786a:	d14b      	bne.n	8017904 <f_readdir+0xd8>
		if (!fno) {
 801786c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017870:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d10b      	bne.n	8017892 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801787a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801787e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017882:	2100      	movs	r1, #0
 8017884:	6818      	ldr	r0, [r3, #0]
 8017886:	f7fd faf3 	bl	8014e70 <dir_sdi>
 801788a:	4603      	mov	r3, r0
 801788c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8017890:	e038      	b.n	8017904 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8017892:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8017896:	f107 0208 	add.w	r2, r7, #8
 801789a:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 801789c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80178a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80178a4:	2100      	movs	r1, #0
 80178a6:	6818      	ldr	r0, [r3, #0]
 80178a8:	f7fd feb3 	bl	8015612 <dir_read>
 80178ac:	4603      	mov	r3, r0
 80178ae:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80178b2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80178b6:	2b04      	cmp	r3, #4
 80178b8:	d102      	bne.n	80178c0 <f_readdir+0x94>
 80178ba:	2300      	movs	r3, #0
 80178bc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 80178c0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d11d      	bne.n	8017904 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 80178c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80178cc:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80178d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80178d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80178d8:	6811      	ldr	r1, [r2, #0]
 80178da:	6818      	ldr	r0, [r3, #0]
 80178dc:	f7fe f942 	bl	8015b64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80178e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80178e4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80178e8:	2100      	movs	r1, #0
 80178ea:	6818      	ldr	r0, [r3, #0]
 80178ec:	f7fd fb49 	bl	8014f82 <dir_next>
 80178f0:	4603      	mov	r3, r0
 80178f2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80178f6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80178fa:	2b04      	cmp	r3, #4
 80178fc:	d102      	bne.n	8017904 <f_readdir+0xd8>
 80178fe:	2300      	movs	r3, #0
 8017900:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8017904:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8017908:	4618      	mov	r0, r3
 801790a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}

08017912 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8017912:	b580      	push	{r7, lr}
 8017914:	b084      	sub	sp, #16
 8017916:	af00      	add	r7, sp, #0
 8017918:	6078      	str	r0, [r7, #4]
 801791a:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801791c:	6839      	ldr	r1, [r7, #0]
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f7ff ff84 	bl	801782c <f_readdir>
 8017924:	4603      	mov	r3, r0
 8017926:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8017928:	7bfb      	ldrb	r3, [r7, #15]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d114      	bne.n	8017958 <f_findnext+0x46>
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d011      	beq.n	8017958 <f_findnext+0x46>
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	7d9b      	ldrb	r3, [r3, #22]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d00d      	beq.n	8017958 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	f103 0116 	add.w	r1, r3, #22
 8017946:	2300      	movs	r3, #0
 8017948:	2200      	movs	r2, #0
 801794a:	f7fe fa0f 	bl	8015d6c <pattern_matching>
 801794e:	4603      	mov	r3, r0
 8017950:	2b00      	cmp	r3, #0
 8017952:	d100      	bne.n	8017956 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8017954:	e7e2      	b.n	801791c <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8017956:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8017958:	7bfb      	ldrb	r3, [r7, #15]
}
 801795a:	4618      	mov	r0, r3
 801795c:	3710      	adds	r7, #16
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}

08017962 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8017962:	b580      	push	{r7, lr}
 8017964:	b086      	sub	sp, #24
 8017966:	af00      	add	r7, sp, #0
 8017968:	60f8      	str	r0, [r7, #12]
 801796a:	60b9      	str	r1, [r7, #8]
 801796c:	607a      	str	r2, [r7, #4]
 801796e:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	683a      	ldr	r2, [r7, #0]
 8017974:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8017976:	6879      	ldr	r1, [r7, #4]
 8017978:	68f8      	ldr	r0, [r7, #12]
 801797a:	f7ff fe9a 	bl	80176b2 <f_opendir>
 801797e:	4603      	mov	r3, r0
 8017980:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017982:	7dfb      	ldrb	r3, [r7, #23]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d105      	bne.n	8017994 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8017988:	68b9      	ldr	r1, [r7, #8]
 801798a:	68f8      	ldr	r0, [r7, #12]
 801798c:	f7ff ffc1 	bl	8017912 <f_findnext>
 8017990:	4603      	mov	r3, r0
 8017992:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8017994:	7dfb      	ldrb	r3, [r7, #23]
}
 8017996:	4618      	mov	r0, r3
 8017998:	3718      	adds	r7, #24
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}

0801799e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801799e:	b580      	push	{r7, lr}
 80179a0:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80179aa:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80179ae:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80179b0:	2300      	movs	r3, #0
 80179b2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80179b6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80179ba:	1d3b      	adds	r3, r7, #4
 80179bc:	2202      	movs	r2, #2
 80179be:	4618      	mov	r0, r3
 80179c0:	f7fe fd18 	bl	80163f4 <find_volume>
 80179c4:	4603      	mov	r3, r0
 80179c6:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
	dj.obj.fs = fs;
 80179ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80179ce:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	if (res == FR_OK) {
 80179d2:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	f040 80a1 	bne.w	8017b1e <f_unlink+0x180>
		INIT_NAMBUF(fs);
 80179dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80179e0:	f107 020c 	add.w	r2, r7, #12
 80179e4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 80179e6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80179ea:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80179f4:	4611      	mov	r1, r2
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7fe fbec 	bl	80161d4 <follow_path>
 80179fc:	4603      	mov	r3, r0
 80179fe:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8017a02:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d108      	bne.n	8017a1c <f_unlink+0x7e>
 8017a0a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8017a0e:	2102      	movs	r1, #2
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7fc fc9b 	bl	801434c <chk_lock>
 8017a16:	4603      	mov	r3, r0
 8017a18:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8017a1c:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d17c      	bne.n	8017b1e <f_unlink+0x180>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8017a24:	f897 3277 	ldrb.w	r3, [r7, #631]	; 0x277
 8017a28:	b25b      	sxtb	r3, r3
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	da03      	bge.n	8017a36 <f_unlink+0x98>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8017a2e:	2306      	movs	r3, #6
 8017a30:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
 8017a34:	e008      	b.n	8017a48 <f_unlink+0xaa>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8017a36:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8017a3a:	f003 0301 	and.w	r3, r3, #1
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d002      	beq.n	8017a48 <f_unlink+0xaa>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8017a42:	2307      	movs	r3, #7
 8017a44:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				}
			}
			if (res == FR_OK) {
 8017a48:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d13b      	bne.n	8017ac8 <f_unlink+0x12a>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8017a50:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8017a54:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8017a58:	4611      	mov	r1, r2
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7fd fbae 	bl	80151bc <ld_clust>
 8017a60:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8017a64:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8017a68:	f003 0310 	and.w	r3, r3, #16
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d02b      	beq.n	8017ac8 <f_unlink+0x12a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8017a70:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8017a74:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8017a78:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8017a7c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8017a80:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017a84:	2100      	movs	r1, #0
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7fd f9f2 	bl	8014e70 <dir_sdi>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
						if (res == FR_OK) {
 8017a92:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d116      	bne.n	8017ac8 <f_unlink+0x12a>
							res = dir_read(&sdj, 0);			/* Read an item */
 8017a9a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017a9e:	2100      	movs	r1, #0
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7fd fdb6 	bl	8015612 <dir_read>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8017aac:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d102      	bne.n	8017aba <f_unlink+0x11c>
 8017ab4:	2307      	movs	r3, #7
 8017ab6:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8017aba:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017abe:	2b04      	cmp	r3, #4
 8017ac0:	d102      	bne.n	8017ac8 <f_unlink+0x12a>
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
						}
					}
				}
			}
			if (res == FR_OK) {
 8017ac8:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d126      	bne.n	8017b1e <f_unlink+0x180>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8017ad0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f7fd fffb 	bl	8015ad0 <dir_remove>
 8017ada:	4603      	mov	r3, r0
 8017adc:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8017ae0:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d10e      	bne.n	8017b06 <f_unlink+0x168>
 8017ae8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d00a      	beq.n	8017b06 <f_unlink+0x168>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8017af0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8017af4:	2200      	movs	r2, #0
 8017af6:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7fd f883 	bl	8014c06 <remove_chain>
 8017b00:	4603      	mov	r3, r0
 8017b02:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8017b06:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d107      	bne.n	8017b1e <f_unlink+0x180>
 8017b0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7fc fdf8 	bl	8014708 <sync_fs>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8017b1e:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}

08017b2c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8017b2c:	b590      	push	{r4, r7, lr}
 8017b2e:	b09d      	sub	sp, #116	; 0x74
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	607a      	str	r2, [r7, #4]
 8017b36:	603b      	str	r3, [r7, #0]
 8017b38:	460b      	mov	r3, r1
 8017b3a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8017b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b44:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8017b46:	f107 030c 	add.w	r3, r7, #12
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f7fe fbb8 	bl	80162c0 <get_ldnumber>
 8017b50:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	da02      	bge.n	8017b5e <f_mkfs+0x32>
 8017b58:	230b      	movs	r3, #11
 8017b5a:	f000 bc31 	b.w	80183c0 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8017b5e:	4aa5      	ldr	r2, [pc, #660]	; (8017df4 <f_mkfs+0x2c8>)
 8017b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d005      	beq.n	8017b76 <f_mkfs+0x4a>
 8017b6a:	4aa2      	ldr	r2, [pc, #648]	; (8017df4 <f_mkfs+0x2c8>)
 8017b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b72:	2200      	movs	r2, #0
 8017b74:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8017b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8017b82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7fc fa5c 	bl	8014044 <disk_initialize>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8017b92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017b96:	f003 0301 	and.w	r3, r3, #1
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d002      	beq.n	8017ba4 <f_mkfs+0x78>
 8017b9e:	2303      	movs	r3, #3
 8017ba0:	f000 bc0e 	b.w	80183c0 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8017ba4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017ba8:	f003 0304 	and.w	r3, r3, #4
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d002      	beq.n	8017bb6 <f_mkfs+0x8a>
 8017bb0:	230a      	movs	r3, #10
 8017bb2:	f000 bc05 	b.w	80183c0 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8017bb6:	f107 0214 	add.w	r2, r7, #20
 8017bba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017bbe:	2103      	movs	r1, #3
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7fc faa5 	bl	8014110 <disk_ioctl>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d10c      	bne.n	8017be6 <f_mkfs+0xba>
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d009      	beq.n	8017be6 <f_mkfs+0xba>
 8017bd2:	697b      	ldr	r3, [r7, #20]
 8017bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017bd8:	d805      	bhi.n	8017be6 <f_mkfs+0xba>
 8017bda:	697b      	ldr	r3, [r7, #20]
 8017bdc:	1e5a      	subs	r2, r3, #1
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	4013      	ands	r3, r2
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d001      	beq.n	8017bea <f_mkfs+0xbe>
 8017be6:	2301      	movs	r3, #1
 8017be8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8017bea:	f107 021a 	add.w	r2, r7, #26
 8017bee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017bf2:	2102      	movs	r1, #2
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fc fa8b 	bl	8014110 <disk_ioctl>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d001      	beq.n	8017c04 <f_mkfs+0xd8>
 8017c00:	2301      	movs	r3, #1
 8017c02:	e3dd      	b.n	80183c0 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8017c04:	8b7b      	ldrh	r3, [r7, #26]
 8017c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c0a:	d80a      	bhi.n	8017c22 <f_mkfs+0xf6>
 8017c0c:	8b7b      	ldrh	r3, [r7, #26]
 8017c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c12:	d306      	bcc.n	8017c22 <f_mkfs+0xf6>
 8017c14:	8b7b      	ldrh	r3, [r7, #26]
 8017c16:	461a      	mov	r2, r3
 8017c18:	8b7b      	ldrh	r3, [r7, #26]
 8017c1a:	3b01      	subs	r3, #1
 8017c1c:	4013      	ands	r3, r2
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d001      	beq.n	8017c26 <f_mkfs+0xfa>
 8017c22:	2301      	movs	r3, #1
 8017c24:	e3cc      	b.n	80183c0 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d004      	beq.n	8017c36 <f_mkfs+0x10a>
 8017c2c:	8b7b      	ldrh	r3, [r7, #26]
 8017c2e:	461a      	mov	r2, r3
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d309      	bcc.n	8017c4a <f_mkfs+0x11e>
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017c3c:	d805      	bhi.n	8017c4a <f_mkfs+0x11e>
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	1e5a      	subs	r2, r3, #1
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	4013      	ands	r3, r2
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d001      	beq.n	8017c4e <f_mkfs+0x122>
 8017c4a:	2313      	movs	r3, #19
 8017c4c:	e3b8      	b.n	80183c0 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 8017c4e:	8b7b      	ldrh	r3, [r7, #26]
 8017c50:	461a      	mov	r2, r3
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c58:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8017c5e:	8b7b      	ldrh	r3, [r7, #26]
 8017c60:	461a      	mov	r2, r3
 8017c62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c6a:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8017c6c:	8b7b      	ldrh	r3, [r7, #26]
 8017c6e:	461a      	mov	r2, r3
 8017c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c72:	fb02 f303 	mul.w	r3, r2, r3
 8017c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 8017c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d101      	bne.n	8017c82 <f_mkfs+0x156>
 8017c7e:	230e      	movs	r3, #14
 8017c80:	e39e      	b.n	80183c0 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8017c82:	f107 0210 	add.w	r2, r7, #16
 8017c86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017c8a:	2101      	movs	r1, #1
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f7fc fa3f 	bl	8014110 <disk_ioctl>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d001      	beq.n	8017c9c <f_mkfs+0x170>
 8017c98:	2301      	movs	r3, #1
 8017c9a:	e391      	b.n	80183c0 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8017c9c:	7afb      	ldrb	r3, [r7, #11]
 8017c9e:	f003 0308 	and.w	r3, r3, #8
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <f_mkfs+0x17e>
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	e000      	b.n	8017cac <f_mkfs+0x180>
 8017caa:	233f      	movs	r3, #63	; 0x3f
 8017cac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8017cae:	693b      	ldr	r3, [r7, #16]
 8017cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d901      	bls.n	8017cba <f_mkfs+0x18e>
 8017cb6:	230e      	movs	r3, #14
 8017cb8:	e382      	b.n	80183c0 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 8017cba:	693a      	ldr	r2, [r7, #16]
 8017cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cbe:	1ad3      	subs	r3, r2, r3
 8017cc0:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8017cc2:	693b      	ldr	r3, [r7, #16]
 8017cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8017cc6:	d801      	bhi.n	8017ccc <f_mkfs+0x1a0>
 8017cc8:	230e      	movs	r3, #14
 8017cca:	e379      	b.n	80183c0 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2b80      	cmp	r3, #128	; 0x80
 8017cd0:	d901      	bls.n	8017cd6 <f_mkfs+0x1aa>
 8017cd2:	2313      	movs	r3, #19
 8017cd4:	e374      	b.n	80183c0 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8017cd6:	7afb      	ldrb	r3, [r7, #11]
 8017cd8:	f003 0302 	and.w	r3, r3, #2
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d00d      	beq.n	8017cfc <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8017ce0:	7afb      	ldrb	r3, [r7, #11]
 8017ce2:	f003 0307 	and.w	r3, r3, #7
 8017ce6:	2b02      	cmp	r3, #2
 8017ce8:	d004      	beq.n	8017cf4 <f_mkfs+0x1c8>
 8017cea:	7afb      	ldrb	r3, [r7, #11]
 8017cec:	f003 0301 	and.w	r3, r3, #1
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d103      	bne.n	8017cfc <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8017cf4:	2303      	movs	r3, #3
 8017cf6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017cfa:	e009      	b.n	8017d10 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8017cfc:	7afb      	ldrb	r3, [r7, #11]
 8017cfe:	f003 0301 	and.w	r3, r3, #1
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d101      	bne.n	8017d0a <f_mkfs+0x1de>
 8017d06:	2313      	movs	r3, #19
 8017d08:	e35a      	b.n	80183c0 <f_mkfs+0x894>
		fmt = FS_FAT16;
 8017d0a:	2302      	movs	r3, #2
 8017d0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8017d14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017d18:	2b03      	cmp	r3, #3
 8017d1a:	d13c      	bne.n	8017d96 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8017d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d11b      	bne.n	8017d5a <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8017d22:	693b      	ldr	r3, [r7, #16]
 8017d24:	0c5b      	lsrs	r3, r3, #17
 8017d26:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017d28:	2300      	movs	r3, #0
 8017d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8017d30:	e005      	b.n	8017d3e <f_mkfs+0x212>
 8017d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d34:	3301      	adds	r3, #1
 8017d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8017d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d3a:	005b      	lsls	r3, r3, #1
 8017d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8017d3e:	4a2e      	ldr	r2, [pc, #184]	; (8017df8 <f_mkfs+0x2cc>)
 8017d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d007      	beq.n	8017d5a <f_mkfs+0x22e>
 8017d4a:	4a2b      	ldr	r2, [pc, #172]	; (8017df8 <f_mkfs+0x2cc>)
 8017d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017d52:	461a      	mov	r2, r3
 8017d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017d56:	4293      	cmp	r3, r2
 8017d58:	d2eb      	bcs.n	8017d32 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8017d5a:	693a      	ldr	r2, [r7, #16]
 8017d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d62:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8017d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d66:	3302      	adds	r3, #2
 8017d68:	009b      	lsls	r3, r3, #2
 8017d6a:	8b7a      	ldrh	r2, [r7, #26]
 8017d6c:	4413      	add	r3, r2
 8017d6e:	3b01      	subs	r3, #1
 8017d70:	8b7a      	ldrh	r2, [r7, #26]
 8017d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8017d76:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8017d78:	2320      	movs	r3, #32
 8017d7a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8017d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d82:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017d86:	4293      	cmp	r3, r2
 8017d88:	d903      	bls.n	8017d92 <f_mkfs+0x266>
 8017d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8c:	4a1b      	ldr	r2, [pc, #108]	; (8017dfc <f_mkfs+0x2d0>)
 8017d8e:	4293      	cmp	r3, r2
 8017d90:	d954      	bls.n	8017e3c <f_mkfs+0x310>
 8017d92:	230e      	movs	r3, #14
 8017d94:	e314      	b.n	80183c0 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8017d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d11b      	bne.n	8017dd4 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	0b1b      	lsrs	r3, r3, #12
 8017da0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017da2:	2300      	movs	r3, #0
 8017da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8017da6:	2301      	movs	r3, #1
 8017da8:	653b      	str	r3, [r7, #80]	; 0x50
 8017daa:	e005      	b.n	8017db8 <f_mkfs+0x28c>
 8017dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dae:	3301      	adds	r3, #1
 8017db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8017db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017db4:	005b      	lsls	r3, r3, #1
 8017db6:	653b      	str	r3, [r7, #80]	; 0x50
 8017db8:	4a11      	ldr	r2, [pc, #68]	; (8017e00 <f_mkfs+0x2d4>)
 8017dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d007      	beq.n	8017dd4 <f_mkfs+0x2a8>
 8017dc4:	4a0e      	ldr	r2, [pc, #56]	; (8017e00 <f_mkfs+0x2d4>)
 8017dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017dcc:	461a      	mov	r2, r3
 8017dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017dd0:	4293      	cmp	r3, r2
 8017dd2:	d2eb      	bcs.n	8017dac <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8017dd4:	693a      	ldr	r2, [r7, #16]
 8017dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ddc:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8017dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017de4:	4293      	cmp	r3, r2
 8017de6:	d90d      	bls.n	8017e04 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8017de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dea:	3302      	adds	r3, #2
 8017dec:	005b      	lsls	r3, r3, #1
 8017dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017df0:	e013      	b.n	8017e1a <f_mkfs+0x2ee>
 8017df2:	bf00      	nop
 8017df4:	200039c8 	.word	0x200039c8
 8017df8:	0801b848 	.word	0x0801b848
 8017dfc:	0ffffff5 	.word	0x0ffffff5
 8017e00:	0801b858 	.word	0x0801b858
				} else {
					fmt = FS_FAT12;
 8017e04:	2301      	movs	r3, #1
 8017e06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8017e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	005b      	lsls	r3, r3, #1
 8017e10:	4413      	add	r3, r2
 8017e12:	3301      	adds	r3, #1
 8017e14:	085b      	lsrs	r3, r3, #1
 8017e16:	3303      	adds	r3, #3
 8017e18:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8017e1a:	8b7b      	ldrh	r3, [r7, #26]
 8017e1c:	461a      	mov	r2, r3
 8017e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017e20:	4413      	add	r3, r2
 8017e22:	3b01      	subs	r3, #1
 8017e24:	8b7a      	ldrh	r2, [r7, #26]
 8017e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8017e2a:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8017e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e32:	015b      	lsls	r3, r3, #5
 8017e34:	8b7a      	ldrh	r2, [r7, #26]
 8017e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8017e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8017e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e40:	4413      	add	r3, r2
 8017e42:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8017e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e48:	fb03 f202 	mul.w	r2, r3, r2
 8017e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017e4e:	4413      	add	r3, r2
 8017e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017e52:	4413      	add	r3, r2
 8017e54:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8017e56:	697a      	ldr	r2, [r7, #20]
 8017e58:	6a3b      	ldr	r3, [r7, #32]
 8017e5a:	4413      	add	r3, r2
 8017e5c:	1e5a      	subs	r2, r3, #1
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	425b      	negs	r3, r3
 8017e62:	401a      	ands	r2, r3
 8017e64:	6a3b      	ldr	r3, [r7, #32]
 8017e66:	1ad3      	subs	r3, r2, r3
 8017e68:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8017e6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017e6e:	2b03      	cmp	r3, #3
 8017e70:	d108      	bne.n	8017e84 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8017e72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017e76:	4413      	add	r3, r2
 8017e78:	657b      	str	r3, [r7, #84]	; 0x54
 8017e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017e7e:	4413      	add	r3, r2
 8017e80:	65bb      	str	r3, [r7, #88]	; 0x58
 8017e82:	e006      	b.n	8017e92 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8017e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017e8e:	4413      	add	r3, r2
 8017e90:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8017e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e94:	011a      	lsls	r2, r3, #4
 8017e96:	6a3b      	ldr	r3, [r7, #32]
 8017e98:	441a      	add	r2, r3
 8017e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9c:	1ad2      	subs	r2, r2, r3
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d901      	bls.n	8017ea8 <f_mkfs+0x37c>
 8017ea4:	230e      	movs	r3, #14
 8017ea6:	e28b      	b.n	80183c0 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8017ea8:	693a      	ldr	r2, [r7, #16]
 8017eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017eac:	1ad2      	subs	r2, r2, r3
 8017eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017eb2:	fb01 f303 	mul.w	r3, r1, r3
 8017eb6:	1ad2      	subs	r2, r2, r3
 8017eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017eba:	1ad2      	subs	r2, r2, r3
 8017ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ec2:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8017ec4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ec8:	2b03      	cmp	r3, #3
 8017eca:	d10f      	bne.n	8017eec <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8017ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ece:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017ed2:	4293      	cmp	r3, r2
 8017ed4:	d80a      	bhi.n	8017eec <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d105      	bne.n	8017ee8 <f_mkfs+0x3bc>
 8017edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ede:	085b      	lsrs	r3, r3, #1
 8017ee0:	607b      	str	r3, [r7, #4]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d144      	bne.n	8017f72 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8017ee8:	230e      	movs	r3, #14
 8017eea:	e269      	b.n	80183c0 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8017eec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ef0:	2b02      	cmp	r3, #2
 8017ef2:	d133      	bne.n	8017f5c <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8017ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017efa:	4293      	cmp	r3, r2
 8017efc:	d91e      	bls.n	8017f3c <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d107      	bne.n	8017f14 <f_mkfs+0x3e8>
 8017f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f06:	005b      	lsls	r3, r3, #1
 8017f08:	2b40      	cmp	r3, #64	; 0x40
 8017f0a:	d803      	bhi.n	8017f14 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8017f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f0e:	005b      	lsls	r3, r3, #1
 8017f10:	607b      	str	r3, [r7, #4]
 8017f12:	e033      	b.n	8017f7c <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8017f14:	7afb      	ldrb	r3, [r7, #11]
 8017f16:	f003 0302 	and.w	r3, r3, #2
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d003      	beq.n	8017f26 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8017f1e:	2303      	movs	r3, #3
 8017f20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017f24:	e02a      	b.n	8017f7c <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d105      	bne.n	8017f38 <f_mkfs+0x40c>
 8017f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f2e:	005b      	lsls	r3, r3, #1
 8017f30:	607b      	str	r3, [r7, #4]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2b80      	cmp	r3, #128	; 0x80
 8017f36:	d91e      	bls.n	8017f76 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8017f38:	230e      	movs	r3, #14
 8017f3a:	e241      	b.n	80183c0 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8017f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017f42:	4293      	cmp	r3, r2
 8017f44:	d80a      	bhi.n	8017f5c <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d105      	bne.n	8017f58 <f_mkfs+0x42c>
 8017f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	607b      	str	r3, [r7, #4]
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2b80      	cmp	r3, #128	; 0x80
 8017f56:	d910      	bls.n	8017f7a <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8017f58:	230e      	movs	r3, #14
 8017f5a:	e231      	b.n	80183c0 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8017f5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017f60:	2b01      	cmp	r3, #1
 8017f62:	d10c      	bne.n	8017f7e <f_mkfs+0x452>
 8017f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f66:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017f6a:	4293      	cmp	r3, r2
 8017f6c:	d907      	bls.n	8017f7e <f_mkfs+0x452>
 8017f6e:	230e      	movs	r3, #14
 8017f70:	e226      	b.n	80183c0 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8017f72:	bf00      	nop
 8017f74:	e6cc      	b.n	8017d10 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017f76:	bf00      	nop
 8017f78:	e6ca      	b.n	8017d10 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017f7a:	bf00      	nop
			pau = au;
 8017f7c:	e6c8      	b.n	8017d10 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8017f7e:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8017f80:	8b7b      	ldrh	r3, [r7, #26]
 8017f82:	461a      	mov	r2, r3
 8017f84:	2100      	movs	r1, #0
 8017f86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017f88:	f7fc f983 	bl	8014292 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8017f8c:	220b      	movs	r2, #11
 8017f8e:	49b3      	ldr	r1, [pc, #716]	; (801825c <f_mkfs+0x730>)
 8017f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017f92:	f7fc f95d 	bl	8014250 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8017f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f98:	330b      	adds	r3, #11
 8017f9a:	8b7a      	ldrh	r2, [r7, #26]
 8017f9c:	4611      	mov	r1, r2
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7fc f90f 	bl	80141c2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8017fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fa6:	330d      	adds	r3, #13
 8017fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017faa:	b2d2      	uxtb	r2, r2
 8017fac:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8017fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fb0:	330e      	adds	r3, #14
 8017fb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017fb4:	b292      	uxth	r2, r2
 8017fb6:	4611      	mov	r1, r2
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7fc f902 	bl	80141c2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8017fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fc0:	3310      	adds	r3, #16
 8017fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017fc4:	b2d2      	uxtb	r2, r2
 8017fc6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8017fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fca:	f103 0211 	add.w	r2, r3, #17
 8017fce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017fd2:	2b03      	cmp	r3, #3
 8017fd4:	d002      	beq.n	8017fdc <f_mkfs+0x4b0>
 8017fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fd8:	b29b      	uxth	r3, r3
 8017fda:	e000      	b.n	8017fde <f_mkfs+0x4b2>
 8017fdc:	2300      	movs	r3, #0
 8017fde:	4619      	mov	r1, r3
 8017fe0:	4610      	mov	r0, r2
 8017fe2:	f7fc f8ee 	bl	80141c2 <st_word>
		if (sz_vol < 0x10000) {
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017fec:	d208      	bcs.n	8018000 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8017fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ff0:	3313      	adds	r3, #19
 8017ff2:	693a      	ldr	r2, [r7, #16]
 8017ff4:	b292      	uxth	r2, r2
 8017ff6:	4611      	mov	r1, r2
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7fc f8e2 	bl	80141c2 <st_word>
 8017ffe:	e006      	b.n	801800e <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8018000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018002:	3320      	adds	r3, #32
 8018004:	693a      	ldr	r2, [r7, #16]
 8018006:	4611      	mov	r1, r2
 8018008:	4618      	mov	r0, r3
 801800a:	f7fc f8f5 	bl	80141f8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018010:	3315      	adds	r3, #21
 8018012:	22f8      	movs	r2, #248	; 0xf8
 8018014:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8018016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018018:	3318      	adds	r3, #24
 801801a:	213f      	movs	r1, #63	; 0x3f
 801801c:	4618      	mov	r0, r3
 801801e:	f7fc f8d0 	bl	80141c2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8018022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018024:	331a      	adds	r3, #26
 8018026:	21ff      	movs	r1, #255	; 0xff
 8018028:	4618      	mov	r0, r3
 801802a:	f7fc f8ca 	bl	80141c2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018030:	331c      	adds	r3, #28
 8018032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018034:	4618      	mov	r0, r3
 8018036:	f7fc f8df 	bl	80141f8 <st_dword>
		if (fmt == FS_FAT32) {
 801803a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801803e:	2b03      	cmp	r3, #3
 8018040:	d131      	bne.n	80180a6 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8018042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018044:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8018048:	f7f6 fde6 	bl	800ec18 <get_fattime>
 801804c:	4603      	mov	r3, r0
 801804e:	4619      	mov	r1, r3
 8018050:	4620      	mov	r0, r4
 8018052:	f7fc f8d1 	bl	80141f8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8018056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018058:	3324      	adds	r3, #36	; 0x24
 801805a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801805c:	4618      	mov	r0, r3
 801805e:	f7fc f8cb 	bl	80141f8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8018062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018064:	332c      	adds	r3, #44	; 0x2c
 8018066:	2102      	movs	r1, #2
 8018068:	4618      	mov	r0, r3
 801806a:	f7fc f8c5 	bl	80141f8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801806e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018070:	3330      	adds	r3, #48	; 0x30
 8018072:	2101      	movs	r1, #1
 8018074:	4618      	mov	r0, r3
 8018076:	f7fc f8a4 	bl	80141c2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 801807a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801807c:	3332      	adds	r3, #50	; 0x32
 801807e:	2106      	movs	r1, #6
 8018080:	4618      	mov	r0, r3
 8018082:	f7fc f89e 	bl	80141c2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8018086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018088:	3340      	adds	r3, #64	; 0x40
 801808a:	2280      	movs	r2, #128	; 0x80
 801808c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 801808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018090:	3342      	adds	r3, #66	; 0x42
 8018092:	2229      	movs	r2, #41	; 0x29
 8018094:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8018096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018098:	3347      	adds	r3, #71	; 0x47
 801809a:	2213      	movs	r2, #19
 801809c:	4970      	ldr	r1, [pc, #448]	; (8018260 <f_mkfs+0x734>)
 801809e:	4618      	mov	r0, r3
 80180a0:	f7fc f8d6 	bl	8014250 <mem_cpy>
 80180a4:	e020      	b.n	80180e8 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80180a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180a8:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80180ac:	f7f6 fdb4 	bl	800ec18 <get_fattime>
 80180b0:	4603      	mov	r3, r0
 80180b2:	4619      	mov	r1, r3
 80180b4:	4620      	mov	r0, r4
 80180b6:	f7fc f89f 	bl	80141f8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80180ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180bc:	3316      	adds	r3, #22
 80180be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80180c0:	b292      	uxth	r2, r2
 80180c2:	4611      	mov	r1, r2
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7fc f87c 	bl	80141c2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80180ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180cc:	3324      	adds	r3, #36	; 0x24
 80180ce:	2280      	movs	r2, #128	; 0x80
 80180d0:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80180d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180d4:	3326      	adds	r3, #38	; 0x26
 80180d6:	2229      	movs	r2, #41	; 0x29
 80180d8:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80180da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180dc:	332b      	adds	r3, #43	; 0x2b
 80180de:	2213      	movs	r2, #19
 80180e0:	4960      	ldr	r1, [pc, #384]	; (8018264 <f_mkfs+0x738>)
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fc f8b4 	bl	8014250 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80180e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80180ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fc f865 	bl	80141c2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80180f8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80180fc:	2301      	movs	r3, #1
 80180fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018100:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018102:	f7fb ffe5 	bl	80140d0 <disk_write>
 8018106:	4603      	mov	r3, r0
 8018108:	2b00      	cmp	r3, #0
 801810a:	d001      	beq.n	8018110 <f_mkfs+0x5e4>
 801810c:	2301      	movs	r3, #1
 801810e:	e157      	b.n	80183c0 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8018110:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018114:	2b03      	cmp	r3, #3
 8018116:	d140      	bne.n	801819a <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8018118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801811a:	1d9a      	adds	r2, r3, #6
 801811c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8018120:	2301      	movs	r3, #1
 8018122:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018124:	f7fb ffd4 	bl	80140d0 <disk_write>
			mem_set(buf, 0, ss);
 8018128:	8b7b      	ldrh	r3, [r7, #26]
 801812a:	461a      	mov	r2, r3
 801812c:	2100      	movs	r1, #0
 801812e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018130:	f7fc f8af 	bl	8014292 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8018134:	494c      	ldr	r1, [pc, #304]	; (8018268 <f_mkfs+0x73c>)
 8018136:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018138:	f7fc f85e 	bl	80141f8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801813e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018142:	494a      	ldr	r1, [pc, #296]	; (801826c <f_mkfs+0x740>)
 8018144:	4618      	mov	r0, r3
 8018146:	f7fc f857 	bl	80141f8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 801814a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801814c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8018150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018152:	3b01      	subs	r3, #1
 8018154:	4619      	mov	r1, r3
 8018156:	4610      	mov	r0, r2
 8018158:	f7fc f84e 	bl	80141f8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801815e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018162:	2102      	movs	r1, #2
 8018164:	4618      	mov	r0, r3
 8018166:	f7fc f847 	bl	80141f8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 801816a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801816c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018170:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8018174:	4618      	mov	r0, r3
 8018176:	f7fc f824 	bl	80141c2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	1dda      	adds	r2, r3, #7
 801817e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8018182:	2301      	movs	r3, #1
 8018184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018186:	f7fb ffa3 	bl	80140d0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 801818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801818c:	1c5a      	adds	r2, r3, #1
 801818e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8018192:	2301      	movs	r3, #1
 8018194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018196:	f7fb ff9b 	bl	80140d0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 801819a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801819c:	2100      	movs	r1, #0
 801819e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80181a0:	f7fc f877 	bl	8014292 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80181a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80181a6:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80181a8:	2300      	movs	r3, #0
 80181aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80181ac:	e04b      	b.n	8018246 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 80181ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80181b2:	2b03      	cmp	r3, #3
 80181b4:	d113      	bne.n	80181de <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80181b6:	f06f 0107 	mvn.w	r1, #7
 80181ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80181bc:	f7fc f81c 	bl	80141f8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80181c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181c2:	3304      	adds	r3, #4
 80181c4:	f04f 31ff 	mov.w	r1, #4294967295
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7fc f815 	bl	80141f8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80181ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181d0:	3308      	adds	r3, #8
 80181d2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7fc f80e 	bl	80141f8 <st_dword>
 80181dc:	e00b      	b.n	80181f6 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80181de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80181e2:	2b01      	cmp	r3, #1
 80181e4:	d101      	bne.n	80181ea <f_mkfs+0x6be>
 80181e6:	4b22      	ldr	r3, [pc, #136]	; (8018270 <f_mkfs+0x744>)
 80181e8:	e001      	b.n	80181ee <f_mkfs+0x6c2>
 80181ea:	f06f 0307 	mvn.w	r3, #7
 80181ee:	4619      	mov	r1, r3
 80181f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80181f2:	f7fc f801 	bl	80141f8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80181f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80181f8:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80181fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80181fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fe:	4293      	cmp	r3, r2
 8018200:	bf28      	it	cs
 8018202:	4613      	movcs	r3, r2
 8018204:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8018206:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801820a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801820c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801820e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018210:	f7fb ff5e 	bl	80140d0 <disk_write>
 8018214:	4603      	mov	r3, r0
 8018216:	2b00      	cmp	r3, #0
 8018218:	d001      	beq.n	801821e <f_mkfs+0x6f2>
 801821a:	2301      	movs	r3, #1
 801821c:	e0d0      	b.n	80183c0 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 801821e:	8b7b      	ldrh	r3, [r7, #26]
 8018220:	461a      	mov	r2, r3
 8018222:	2100      	movs	r1, #0
 8018224:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018226:	f7fc f834 	bl	8014292 <mem_set>
				sect += n; nsect -= n;
 801822a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801822c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801822e:	4413      	add	r3, r2
 8018230:	667b      	str	r3, [r7, #100]	; 0x64
 8018232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018236:	1ad3      	subs	r3, r2, r3
 8018238:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 801823a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801823c:	2b00      	cmp	r3, #0
 801823e:	d1dc      	bne.n	80181fa <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8018240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018242:	3301      	adds	r3, #1
 8018244:	64bb      	str	r3, [r7, #72]	; 0x48
 8018246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801824a:	429a      	cmp	r2, r3
 801824c:	d3af      	bcc.n	80181ae <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801824e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018252:	2b03      	cmp	r3, #3
 8018254:	d10e      	bne.n	8018274 <f_mkfs+0x748>
 8018256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018258:	e00d      	b.n	8018276 <f_mkfs+0x74a>
 801825a:	bf00      	nop
 801825c:	0801b640 	.word	0x0801b640
 8018260:	0801b64c 	.word	0x0801b64c
 8018264:	0801b660 	.word	0x0801b660
 8018268:	41615252 	.word	0x41615252
 801826c:	61417272 	.word	0x61417272
 8018270:	00fffff8 	.word	0x00fffff8
 8018274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018276:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8018278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827c:	4293      	cmp	r3, r2
 801827e:	bf28      	it	cs
 8018280:	4613      	movcs	r3, r2
 8018282:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8018284:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8018288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801828a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801828c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801828e:	f7fb ff1f 	bl	80140d0 <disk_write>
 8018292:	4603      	mov	r3, r0
 8018294:	2b00      	cmp	r3, #0
 8018296:	d001      	beq.n	801829c <f_mkfs+0x770>
 8018298:	2301      	movs	r3, #1
 801829a:	e091      	b.n	80183c0 <f_mkfs+0x894>
			sect += n; nsect -= n;
 801829c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801829e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182a0:	4413      	add	r3, r2
 80182a2:	667b      	str	r3, [r7, #100]	; 0x64
 80182a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80182a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182a8:	1ad3      	subs	r3, r2, r3
 80182aa:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80182ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d1e2      	bne.n	8018278 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80182b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80182b6:	2b03      	cmp	r3, #3
 80182b8:	d103      	bne.n	80182c2 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 80182ba:	230c      	movs	r3, #12
 80182bc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80182c0:	e010      	b.n	80182e4 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80182c8:	d303      	bcc.n	80182d2 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80182ca:	2306      	movs	r3, #6
 80182cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80182d0:	e008      	b.n	80182e4 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80182d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80182d6:	2b02      	cmp	r3, #2
 80182d8:	d101      	bne.n	80182de <f_mkfs+0x7b2>
 80182da:	2304      	movs	r3, #4
 80182dc:	e000      	b.n	80182e0 <f_mkfs+0x7b4>
 80182de:	2301      	movs	r3, #1
 80182e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80182e4:	7afb      	ldrb	r3, [r7, #11]
 80182e6:	f003 0308 	and.w	r3, r3, #8
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d15b      	bne.n	80183a6 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 80182ee:	8b7b      	ldrh	r3, [r7, #26]
 80182f0:	461a      	mov	r2, r3
 80182f2:	2100      	movs	r1, #0
 80182f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80182f6:	f7fb ffcc 	bl	8014292 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80182fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018300:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8018304:	4618      	mov	r0, r3
 8018306:	f7fb ff5c 	bl	80141c2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801830c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018310:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8018312:	69fb      	ldr	r3, [r7, #28]
 8018314:	2200      	movs	r2, #0
 8018316:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8018318:	69fb      	ldr	r3, [r7, #28]
 801831a:	3301      	adds	r3, #1
 801831c:	2201      	movs	r2, #1
 801831e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8018320:	69fb      	ldr	r3, [r7, #28]
 8018322:	3302      	adds	r3, #2
 8018324:	2201      	movs	r2, #1
 8018326:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	3303      	adds	r3, #3
 801832c:	2200      	movs	r2, #0
 801832e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8018330:	69fb      	ldr	r3, [r7, #28]
 8018332:	3304      	adds	r3, #4
 8018334:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8018338:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801833a:	693a      	ldr	r2, [r7, #16]
 801833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801833e:	441a      	add	r2, r3
 8018340:	4b21      	ldr	r3, [pc, #132]	; (80183c8 <f_mkfs+0x89c>)
 8018342:	fba3 1302 	umull	r1, r3, r3, r2
 8018346:	1ad2      	subs	r2, r2, r3
 8018348:	0852      	lsrs	r2, r2, #1
 801834a:	4413      	add	r3, r2
 801834c:	0b5b      	lsrs	r3, r3, #13
 801834e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8018350:	69fb      	ldr	r3, [r7, #28]
 8018352:	3305      	adds	r3, #5
 8018354:	22fe      	movs	r2, #254	; 0xfe
 8018356:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8018358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801835a:	089b      	lsrs	r3, r3, #2
 801835c:	b2da      	uxtb	r2, r3
 801835e:	69fb      	ldr	r3, [r7, #28]
 8018360:	3306      	adds	r3, #6
 8018362:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8018366:	b2d2      	uxtb	r2, r2
 8018368:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	3307      	adds	r3, #7
 801836e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018370:	b2d2      	uxtb	r2, r2
 8018372:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8018374:	69fb      	ldr	r3, [r7, #28]
 8018376:	3308      	adds	r3, #8
 8018378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801837a:	4618      	mov	r0, r3
 801837c:	f7fb ff3c 	bl	80141f8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8018380:	69fb      	ldr	r3, [r7, #28]
 8018382:	330c      	adds	r3, #12
 8018384:	693a      	ldr	r2, [r7, #16]
 8018386:	4611      	mov	r1, r2
 8018388:	4618      	mov	r0, r3
 801838a:	f7fb ff35 	bl	80141f8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801838e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8018392:	2301      	movs	r3, #1
 8018394:	2200      	movs	r2, #0
 8018396:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018398:	f7fb fe9a 	bl	80140d0 <disk_write>
 801839c:	4603      	mov	r3, r0
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d001      	beq.n	80183a6 <f_mkfs+0x87a>
 80183a2:	2301      	movs	r3, #1
 80183a4:	e00c      	b.n	80183c0 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80183a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80183aa:	2200      	movs	r2, #0
 80183ac:	2100      	movs	r1, #0
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7fb feae 	bl	8014110 <disk_ioctl>
 80183b4:	4603      	mov	r3, r0
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d001      	beq.n	80183be <f_mkfs+0x892>
 80183ba:	2301      	movs	r3, #1
 80183bc:	e000      	b.n	80183c0 <f_mkfs+0x894>

	return FR_OK;
 80183be:	2300      	movs	r3, #0
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	3774      	adds	r7, #116	; 0x74
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bd90      	pop	{r4, r7, pc}
 80183c8:	0515565b 	.word	0x0515565b

080183cc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b088      	sub	sp, #32
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80183d8:	2300      	movs	r3, #0
 80183da:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80183e0:	e01b      	b.n	801841a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80183e2:	f107 0310 	add.w	r3, r7, #16
 80183e6:	f107 0114 	add.w	r1, r7, #20
 80183ea:	2201      	movs	r2, #1
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f7fe fdc5 	bl	8016f7c <f_read>
		if (rc != 1) break;
 80183f2:	693b      	ldr	r3, [r7, #16]
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	d116      	bne.n	8018426 <f_gets+0x5a>
		c = s[0];
 80183f8:	7d3b      	ldrb	r3, [r7, #20]
 80183fa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80183fc:	7dfb      	ldrb	r3, [r7, #23]
 80183fe:	2b0d      	cmp	r3, #13
 8018400:	d100      	bne.n	8018404 <f_gets+0x38>
 8018402:	e00a      	b.n	801841a <f_gets+0x4e>
		*p++ = c;
 8018404:	69bb      	ldr	r3, [r7, #24]
 8018406:	1c5a      	adds	r2, r3, #1
 8018408:	61ba      	str	r2, [r7, #24]
 801840a:	7dfa      	ldrb	r2, [r7, #23]
 801840c:	701a      	strb	r2, [r3, #0]
		n++;
 801840e:	69fb      	ldr	r3, [r7, #28]
 8018410:	3301      	adds	r3, #1
 8018412:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8018414:	7dfb      	ldrb	r3, [r7, #23]
 8018416:	2b0a      	cmp	r3, #10
 8018418:	d007      	beq.n	801842a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	3b01      	subs	r3, #1
 801841e:	69fa      	ldr	r2, [r7, #28]
 8018420:	429a      	cmp	r2, r3
 8018422:	dbde      	blt.n	80183e2 <f_gets+0x16>
 8018424:	e002      	b.n	801842c <f_gets+0x60>
		if (rc != 1) break;
 8018426:	bf00      	nop
 8018428:	e000      	b.n	801842c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801842a:	bf00      	nop
	}
	*p = 0;
 801842c:	69bb      	ldr	r3, [r7, #24]
 801842e:	2200      	movs	r2, #0
 8018430:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d001      	beq.n	801843c <f_gets+0x70>
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	e000      	b.n	801843e <f_gets+0x72>
 801843c:	2300      	movs	r3, #0
}
 801843e:	4618      	mov	r0, r3
 8018440:	3720      	adds	r7, #32
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}
	...

08018448 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018448:	b480      	push	{r7}
 801844a:	b087      	sub	sp, #28
 801844c:	af00      	add	r7, sp, #0
 801844e:	60f8      	str	r0, [r7, #12]
 8018450:	60b9      	str	r1, [r7, #8]
 8018452:	4613      	mov	r3, r2
 8018454:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018456:	2301      	movs	r3, #1
 8018458:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801845a:	2300      	movs	r3, #0
 801845c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801845e:	4b1f      	ldr	r3, [pc, #124]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 8018460:	7a5b      	ldrb	r3, [r3, #9]
 8018462:	b2db      	uxtb	r3, r3
 8018464:	2b00      	cmp	r3, #0
 8018466:	d131      	bne.n	80184cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018468:	4b1c      	ldr	r3, [pc, #112]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 801846a:	7a5b      	ldrb	r3, [r3, #9]
 801846c:	b2db      	uxtb	r3, r3
 801846e:	461a      	mov	r2, r3
 8018470:	4b1a      	ldr	r3, [pc, #104]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 8018472:	2100      	movs	r1, #0
 8018474:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018476:	4b19      	ldr	r3, [pc, #100]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 8018478:	7a5b      	ldrb	r3, [r3, #9]
 801847a:	b2db      	uxtb	r3, r3
 801847c:	4a17      	ldr	r2, [pc, #92]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 801847e:	009b      	lsls	r3, r3, #2
 8018480:	4413      	add	r3, r2
 8018482:	68fa      	ldr	r2, [r7, #12]
 8018484:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018486:	4b15      	ldr	r3, [pc, #84]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 8018488:	7a5b      	ldrb	r3, [r3, #9]
 801848a:	b2db      	uxtb	r3, r3
 801848c:	461a      	mov	r2, r3
 801848e:	4b13      	ldr	r3, [pc, #76]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 8018490:	4413      	add	r3, r2
 8018492:	79fa      	ldrb	r2, [r7, #7]
 8018494:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018496:	4b11      	ldr	r3, [pc, #68]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 8018498:	7a5b      	ldrb	r3, [r3, #9]
 801849a:	b2db      	uxtb	r3, r3
 801849c:	1c5a      	adds	r2, r3, #1
 801849e:	b2d1      	uxtb	r1, r2
 80184a0:	4a0e      	ldr	r2, [pc, #56]	; (80184dc <FATFS_LinkDriverEx+0x94>)
 80184a2:	7251      	strb	r1, [r2, #9]
 80184a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80184a6:	7dbb      	ldrb	r3, [r7, #22]
 80184a8:	3330      	adds	r3, #48	; 0x30
 80184aa:	b2da      	uxtb	r2, r3
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	3301      	adds	r3, #1
 80184b4:	223a      	movs	r2, #58	; 0x3a
 80184b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	3302      	adds	r3, #2
 80184bc:	222f      	movs	r2, #47	; 0x2f
 80184be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	3303      	adds	r3, #3
 80184c4:	2200      	movs	r2, #0
 80184c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80184c8:	2300      	movs	r3, #0
 80184ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80184cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	371c      	adds	r7, #28
 80184d2:	46bd      	mov	sp, r7
 80184d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d8:	4770      	bx	lr
 80184da:	bf00      	nop
 80184dc:	200039f0 	.word	0x200039f0

080184e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b082      	sub	sp, #8
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
 80184e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80184ea:	2200      	movs	r2, #0
 80184ec:	6839      	ldr	r1, [r7, #0]
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f7ff ffaa 	bl	8018448 <FATFS_LinkDriverEx>
 80184f4:	4603      	mov	r3, r0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3708      	adds	r7, #8
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
	...

08018500 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018500:	b480      	push	{r7}
 8018502:	b085      	sub	sp, #20
 8018504:	af00      	add	r7, sp, #0
 8018506:	4603      	mov	r3, r0
 8018508:	6039      	str	r1, [r7, #0]
 801850a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801850c:	88fb      	ldrh	r3, [r7, #6]
 801850e:	2b7f      	cmp	r3, #127	; 0x7f
 8018510:	d802      	bhi.n	8018518 <ff_convert+0x18>
		c = chr;
 8018512:	88fb      	ldrh	r3, [r7, #6]
 8018514:	81fb      	strh	r3, [r7, #14]
 8018516:	e025      	b.n	8018564 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d00b      	beq.n	8018536 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801851e:	88fb      	ldrh	r3, [r7, #6]
 8018520:	2bff      	cmp	r3, #255	; 0xff
 8018522:	d805      	bhi.n	8018530 <ff_convert+0x30>
 8018524:	88fb      	ldrh	r3, [r7, #6]
 8018526:	3b80      	subs	r3, #128	; 0x80
 8018528:	4a12      	ldr	r2, [pc, #72]	; (8018574 <ff_convert+0x74>)
 801852a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801852e:	e000      	b.n	8018532 <ff_convert+0x32>
 8018530:	2300      	movs	r3, #0
 8018532:	81fb      	strh	r3, [r7, #14]
 8018534:	e016      	b.n	8018564 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018536:	2300      	movs	r3, #0
 8018538:	81fb      	strh	r3, [r7, #14]
 801853a:	e009      	b.n	8018550 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801853c:	89fb      	ldrh	r3, [r7, #14]
 801853e:	4a0d      	ldr	r2, [pc, #52]	; (8018574 <ff_convert+0x74>)
 8018540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018544:	88fa      	ldrh	r2, [r7, #6]
 8018546:	429a      	cmp	r2, r3
 8018548:	d006      	beq.n	8018558 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801854a:	89fb      	ldrh	r3, [r7, #14]
 801854c:	3301      	adds	r3, #1
 801854e:	81fb      	strh	r3, [r7, #14]
 8018550:	89fb      	ldrh	r3, [r7, #14]
 8018552:	2b7f      	cmp	r3, #127	; 0x7f
 8018554:	d9f2      	bls.n	801853c <ff_convert+0x3c>
 8018556:	e000      	b.n	801855a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018558:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801855a:	89fb      	ldrh	r3, [r7, #14]
 801855c:	3380      	adds	r3, #128	; 0x80
 801855e:	b29b      	uxth	r3, r3
 8018560:	b2db      	uxtb	r3, r3
 8018562:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018564:	89fb      	ldrh	r3, [r7, #14]
}
 8018566:	4618      	mov	r0, r3
 8018568:	3714      	adds	r7, #20
 801856a:	46bd      	mov	sp, r7
 801856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018570:	4770      	bx	lr
 8018572:	bf00      	nop
 8018574:	0801b868 	.word	0x0801b868

08018578 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018578:	b480      	push	{r7}
 801857a:	b087      	sub	sp, #28
 801857c:	af00      	add	r7, sp, #0
 801857e:	4603      	mov	r3, r0
 8018580:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018582:	88fb      	ldrh	r3, [r7, #6]
 8018584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018588:	d201      	bcs.n	801858e <ff_wtoupper+0x16>
 801858a:	4b3e      	ldr	r3, [pc, #248]	; (8018684 <ff_wtoupper+0x10c>)
 801858c:	e000      	b.n	8018590 <ff_wtoupper+0x18>
 801858e:	4b3e      	ldr	r3, [pc, #248]	; (8018688 <ff_wtoupper+0x110>)
 8018590:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018592:	697b      	ldr	r3, [r7, #20]
 8018594:	1c9a      	adds	r2, r3, #2
 8018596:	617a      	str	r2, [r7, #20]
 8018598:	881b      	ldrh	r3, [r3, #0]
 801859a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801859c:	8a7b      	ldrh	r3, [r7, #18]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d068      	beq.n	8018674 <ff_wtoupper+0xfc>
 80185a2:	88fa      	ldrh	r2, [r7, #6]
 80185a4:	8a7b      	ldrh	r3, [r7, #18]
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d364      	bcc.n	8018674 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80185aa:	697b      	ldr	r3, [r7, #20]
 80185ac:	1c9a      	adds	r2, r3, #2
 80185ae:	617a      	str	r2, [r7, #20]
 80185b0:	881b      	ldrh	r3, [r3, #0]
 80185b2:	823b      	strh	r3, [r7, #16]
 80185b4:	8a3b      	ldrh	r3, [r7, #16]
 80185b6:	0a1b      	lsrs	r3, r3, #8
 80185b8:	81fb      	strh	r3, [r7, #14]
 80185ba:	8a3b      	ldrh	r3, [r7, #16]
 80185bc:	b2db      	uxtb	r3, r3
 80185be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80185c0:	88fa      	ldrh	r2, [r7, #6]
 80185c2:	8a79      	ldrh	r1, [r7, #18]
 80185c4:	8a3b      	ldrh	r3, [r7, #16]
 80185c6:	440b      	add	r3, r1
 80185c8:	429a      	cmp	r2, r3
 80185ca:	da49      	bge.n	8018660 <ff_wtoupper+0xe8>
			switch (cmd) {
 80185cc:	89fb      	ldrh	r3, [r7, #14]
 80185ce:	2b08      	cmp	r3, #8
 80185d0:	d84f      	bhi.n	8018672 <ff_wtoupper+0xfa>
 80185d2:	a201      	add	r2, pc, #4	; (adr r2, 80185d8 <ff_wtoupper+0x60>)
 80185d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185d8:	080185fd 	.word	0x080185fd
 80185dc:	0801860f 	.word	0x0801860f
 80185e0:	08018625 	.word	0x08018625
 80185e4:	0801862d 	.word	0x0801862d
 80185e8:	08018635 	.word	0x08018635
 80185ec:	0801863d 	.word	0x0801863d
 80185f0:	08018645 	.word	0x08018645
 80185f4:	0801864d 	.word	0x0801864d
 80185f8:	08018655 	.word	0x08018655
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80185fc:	88fa      	ldrh	r2, [r7, #6]
 80185fe:	8a7b      	ldrh	r3, [r7, #18]
 8018600:	1ad3      	subs	r3, r2, r3
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	697a      	ldr	r2, [r7, #20]
 8018606:	4413      	add	r3, r2
 8018608:	881b      	ldrh	r3, [r3, #0]
 801860a:	80fb      	strh	r3, [r7, #6]
 801860c:	e027      	b.n	801865e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801860e:	88fa      	ldrh	r2, [r7, #6]
 8018610:	8a7b      	ldrh	r3, [r7, #18]
 8018612:	1ad3      	subs	r3, r2, r3
 8018614:	b29b      	uxth	r3, r3
 8018616:	f003 0301 	and.w	r3, r3, #1
 801861a:	b29b      	uxth	r3, r3
 801861c:	88fa      	ldrh	r2, [r7, #6]
 801861e:	1ad3      	subs	r3, r2, r3
 8018620:	80fb      	strh	r3, [r7, #6]
 8018622:	e01c      	b.n	801865e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018624:	88fb      	ldrh	r3, [r7, #6]
 8018626:	3b10      	subs	r3, #16
 8018628:	80fb      	strh	r3, [r7, #6]
 801862a:	e018      	b.n	801865e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801862c:	88fb      	ldrh	r3, [r7, #6]
 801862e:	3b20      	subs	r3, #32
 8018630:	80fb      	strh	r3, [r7, #6]
 8018632:	e014      	b.n	801865e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018634:	88fb      	ldrh	r3, [r7, #6]
 8018636:	3b30      	subs	r3, #48	; 0x30
 8018638:	80fb      	strh	r3, [r7, #6]
 801863a:	e010      	b.n	801865e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801863c:	88fb      	ldrh	r3, [r7, #6]
 801863e:	3b1a      	subs	r3, #26
 8018640:	80fb      	strh	r3, [r7, #6]
 8018642:	e00c      	b.n	801865e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018644:	88fb      	ldrh	r3, [r7, #6]
 8018646:	3308      	adds	r3, #8
 8018648:	80fb      	strh	r3, [r7, #6]
 801864a:	e008      	b.n	801865e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801864c:	88fb      	ldrh	r3, [r7, #6]
 801864e:	3b50      	subs	r3, #80	; 0x50
 8018650:	80fb      	strh	r3, [r7, #6]
 8018652:	e004      	b.n	801865e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018654:	88fb      	ldrh	r3, [r7, #6]
 8018656:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801865a:	80fb      	strh	r3, [r7, #6]
 801865c:	bf00      	nop
			}
			break;
 801865e:	e008      	b.n	8018672 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018660:	89fb      	ldrh	r3, [r7, #14]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d195      	bne.n	8018592 <ff_wtoupper+0x1a>
 8018666:	8a3b      	ldrh	r3, [r7, #16]
 8018668:	005b      	lsls	r3, r3, #1
 801866a:	697a      	ldr	r2, [r7, #20]
 801866c:	4413      	add	r3, r2
 801866e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018670:	e78f      	b.n	8018592 <ff_wtoupper+0x1a>
			break;
 8018672:	bf00      	nop
	}

	return chr;
 8018674:	88fb      	ldrh	r3, [r7, #6]
}
 8018676:	4618      	mov	r0, r3
 8018678:	371c      	adds	r7, #28
 801867a:	46bd      	mov	sp, r7
 801867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	0801b968 	.word	0x0801b968
 8018688:	0801bb5c 	.word	0x0801bb5c

0801868c <atoi>:
 801868c:	220a      	movs	r2, #10
 801868e:	2100      	movs	r1, #0
 8018690:	f000 bd14 	b.w	80190bc <strtol>

08018694 <__errno>:
 8018694:	4b01      	ldr	r3, [pc, #4]	; (801869c <__errno+0x8>)
 8018696:	6818      	ldr	r0, [r3, #0]
 8018698:	4770      	bx	lr
 801869a:	bf00      	nop
 801869c:	2000039c 	.word	0x2000039c

080186a0 <__sflush_r>:
 80186a0:	898a      	ldrh	r2, [r1, #12]
 80186a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186a6:	4605      	mov	r5, r0
 80186a8:	0710      	lsls	r0, r2, #28
 80186aa:	460c      	mov	r4, r1
 80186ac:	d458      	bmi.n	8018760 <__sflush_r+0xc0>
 80186ae:	684b      	ldr	r3, [r1, #4]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	dc05      	bgt.n	80186c0 <__sflush_r+0x20>
 80186b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	dc02      	bgt.n	80186c0 <__sflush_r+0x20>
 80186ba:	2000      	movs	r0, #0
 80186bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186c2:	2e00      	cmp	r6, #0
 80186c4:	d0f9      	beq.n	80186ba <__sflush_r+0x1a>
 80186c6:	2300      	movs	r3, #0
 80186c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80186cc:	682f      	ldr	r7, [r5, #0]
 80186ce:	602b      	str	r3, [r5, #0]
 80186d0:	d032      	beq.n	8018738 <__sflush_r+0x98>
 80186d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80186d4:	89a3      	ldrh	r3, [r4, #12]
 80186d6:	075a      	lsls	r2, r3, #29
 80186d8:	d505      	bpl.n	80186e6 <__sflush_r+0x46>
 80186da:	6863      	ldr	r3, [r4, #4]
 80186dc:	1ac0      	subs	r0, r0, r3
 80186de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80186e0:	b10b      	cbz	r3, 80186e6 <__sflush_r+0x46>
 80186e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80186e4:	1ac0      	subs	r0, r0, r3
 80186e6:	2300      	movs	r3, #0
 80186e8:	4602      	mov	r2, r0
 80186ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186ec:	6a21      	ldr	r1, [r4, #32]
 80186ee:	4628      	mov	r0, r5
 80186f0:	47b0      	blx	r6
 80186f2:	1c43      	adds	r3, r0, #1
 80186f4:	89a3      	ldrh	r3, [r4, #12]
 80186f6:	d106      	bne.n	8018706 <__sflush_r+0x66>
 80186f8:	6829      	ldr	r1, [r5, #0]
 80186fa:	291d      	cmp	r1, #29
 80186fc:	d82c      	bhi.n	8018758 <__sflush_r+0xb8>
 80186fe:	4a2a      	ldr	r2, [pc, #168]	; (80187a8 <__sflush_r+0x108>)
 8018700:	40ca      	lsrs	r2, r1
 8018702:	07d6      	lsls	r6, r2, #31
 8018704:	d528      	bpl.n	8018758 <__sflush_r+0xb8>
 8018706:	2200      	movs	r2, #0
 8018708:	6062      	str	r2, [r4, #4]
 801870a:	04d9      	lsls	r1, r3, #19
 801870c:	6922      	ldr	r2, [r4, #16]
 801870e:	6022      	str	r2, [r4, #0]
 8018710:	d504      	bpl.n	801871c <__sflush_r+0x7c>
 8018712:	1c42      	adds	r2, r0, #1
 8018714:	d101      	bne.n	801871a <__sflush_r+0x7a>
 8018716:	682b      	ldr	r3, [r5, #0]
 8018718:	b903      	cbnz	r3, 801871c <__sflush_r+0x7c>
 801871a:	6560      	str	r0, [r4, #84]	; 0x54
 801871c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801871e:	602f      	str	r7, [r5, #0]
 8018720:	2900      	cmp	r1, #0
 8018722:	d0ca      	beq.n	80186ba <__sflush_r+0x1a>
 8018724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018728:	4299      	cmp	r1, r3
 801872a:	d002      	beq.n	8018732 <__sflush_r+0x92>
 801872c:	4628      	mov	r0, r5
 801872e:	f000 fa21 	bl	8018b74 <_free_r>
 8018732:	2000      	movs	r0, #0
 8018734:	6360      	str	r0, [r4, #52]	; 0x34
 8018736:	e7c1      	b.n	80186bc <__sflush_r+0x1c>
 8018738:	6a21      	ldr	r1, [r4, #32]
 801873a:	2301      	movs	r3, #1
 801873c:	4628      	mov	r0, r5
 801873e:	47b0      	blx	r6
 8018740:	1c41      	adds	r1, r0, #1
 8018742:	d1c7      	bne.n	80186d4 <__sflush_r+0x34>
 8018744:	682b      	ldr	r3, [r5, #0]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d0c4      	beq.n	80186d4 <__sflush_r+0x34>
 801874a:	2b1d      	cmp	r3, #29
 801874c:	d001      	beq.n	8018752 <__sflush_r+0xb2>
 801874e:	2b16      	cmp	r3, #22
 8018750:	d101      	bne.n	8018756 <__sflush_r+0xb6>
 8018752:	602f      	str	r7, [r5, #0]
 8018754:	e7b1      	b.n	80186ba <__sflush_r+0x1a>
 8018756:	89a3      	ldrh	r3, [r4, #12]
 8018758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801875c:	81a3      	strh	r3, [r4, #12]
 801875e:	e7ad      	b.n	80186bc <__sflush_r+0x1c>
 8018760:	690f      	ldr	r7, [r1, #16]
 8018762:	2f00      	cmp	r7, #0
 8018764:	d0a9      	beq.n	80186ba <__sflush_r+0x1a>
 8018766:	0793      	lsls	r3, r2, #30
 8018768:	680e      	ldr	r6, [r1, #0]
 801876a:	bf08      	it	eq
 801876c:	694b      	ldreq	r3, [r1, #20]
 801876e:	600f      	str	r7, [r1, #0]
 8018770:	bf18      	it	ne
 8018772:	2300      	movne	r3, #0
 8018774:	eba6 0807 	sub.w	r8, r6, r7
 8018778:	608b      	str	r3, [r1, #8]
 801877a:	f1b8 0f00 	cmp.w	r8, #0
 801877e:	dd9c      	ble.n	80186ba <__sflush_r+0x1a>
 8018780:	6a21      	ldr	r1, [r4, #32]
 8018782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018784:	4643      	mov	r3, r8
 8018786:	463a      	mov	r2, r7
 8018788:	4628      	mov	r0, r5
 801878a:	47b0      	blx	r6
 801878c:	2800      	cmp	r0, #0
 801878e:	dc06      	bgt.n	801879e <__sflush_r+0xfe>
 8018790:	89a3      	ldrh	r3, [r4, #12]
 8018792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018796:	81a3      	strh	r3, [r4, #12]
 8018798:	f04f 30ff 	mov.w	r0, #4294967295
 801879c:	e78e      	b.n	80186bc <__sflush_r+0x1c>
 801879e:	4407      	add	r7, r0
 80187a0:	eba8 0800 	sub.w	r8, r8, r0
 80187a4:	e7e9      	b.n	801877a <__sflush_r+0xda>
 80187a6:	bf00      	nop
 80187a8:	20400001 	.word	0x20400001

080187ac <_fflush_r>:
 80187ac:	b538      	push	{r3, r4, r5, lr}
 80187ae:	690b      	ldr	r3, [r1, #16]
 80187b0:	4605      	mov	r5, r0
 80187b2:	460c      	mov	r4, r1
 80187b4:	b913      	cbnz	r3, 80187bc <_fflush_r+0x10>
 80187b6:	2500      	movs	r5, #0
 80187b8:	4628      	mov	r0, r5
 80187ba:	bd38      	pop	{r3, r4, r5, pc}
 80187bc:	b118      	cbz	r0, 80187c6 <_fflush_r+0x1a>
 80187be:	6983      	ldr	r3, [r0, #24]
 80187c0:	b90b      	cbnz	r3, 80187c6 <_fflush_r+0x1a>
 80187c2:	f000 f887 	bl	80188d4 <__sinit>
 80187c6:	4b14      	ldr	r3, [pc, #80]	; (8018818 <_fflush_r+0x6c>)
 80187c8:	429c      	cmp	r4, r3
 80187ca:	d11b      	bne.n	8018804 <_fflush_r+0x58>
 80187cc:	686c      	ldr	r4, [r5, #4]
 80187ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d0ef      	beq.n	80187b6 <_fflush_r+0xa>
 80187d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80187d8:	07d0      	lsls	r0, r2, #31
 80187da:	d404      	bmi.n	80187e6 <_fflush_r+0x3a>
 80187dc:	0599      	lsls	r1, r3, #22
 80187de:	d402      	bmi.n	80187e6 <_fflush_r+0x3a>
 80187e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187e2:	f000 f93a 	bl	8018a5a <__retarget_lock_acquire_recursive>
 80187e6:	4628      	mov	r0, r5
 80187e8:	4621      	mov	r1, r4
 80187ea:	f7ff ff59 	bl	80186a0 <__sflush_r>
 80187ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80187f0:	07da      	lsls	r2, r3, #31
 80187f2:	4605      	mov	r5, r0
 80187f4:	d4e0      	bmi.n	80187b8 <_fflush_r+0xc>
 80187f6:	89a3      	ldrh	r3, [r4, #12]
 80187f8:	059b      	lsls	r3, r3, #22
 80187fa:	d4dd      	bmi.n	80187b8 <_fflush_r+0xc>
 80187fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187fe:	f000 f92d 	bl	8018a5c <__retarget_lock_release_recursive>
 8018802:	e7d9      	b.n	80187b8 <_fflush_r+0xc>
 8018804:	4b05      	ldr	r3, [pc, #20]	; (801881c <_fflush_r+0x70>)
 8018806:	429c      	cmp	r4, r3
 8018808:	d101      	bne.n	801880e <_fflush_r+0x62>
 801880a:	68ac      	ldr	r4, [r5, #8]
 801880c:	e7df      	b.n	80187ce <_fflush_r+0x22>
 801880e:	4b04      	ldr	r3, [pc, #16]	; (8018820 <_fflush_r+0x74>)
 8018810:	429c      	cmp	r4, r3
 8018812:	bf08      	it	eq
 8018814:	68ec      	ldreq	r4, [r5, #12]
 8018816:	e7da      	b.n	80187ce <_fflush_r+0x22>
 8018818:	0801bd3c 	.word	0x0801bd3c
 801881c:	0801bd5c 	.word	0x0801bd5c
 8018820:	0801bd1c 	.word	0x0801bd1c

08018824 <std>:
 8018824:	2300      	movs	r3, #0
 8018826:	b510      	push	{r4, lr}
 8018828:	4604      	mov	r4, r0
 801882a:	e9c0 3300 	strd	r3, r3, [r0]
 801882e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018832:	6083      	str	r3, [r0, #8]
 8018834:	8181      	strh	r1, [r0, #12]
 8018836:	6643      	str	r3, [r0, #100]	; 0x64
 8018838:	81c2      	strh	r2, [r0, #14]
 801883a:	6183      	str	r3, [r0, #24]
 801883c:	4619      	mov	r1, r3
 801883e:	2208      	movs	r2, #8
 8018840:	305c      	adds	r0, #92	; 0x5c
 8018842:	f000 f98f 	bl	8018b64 <memset>
 8018846:	4b05      	ldr	r3, [pc, #20]	; (801885c <std+0x38>)
 8018848:	6263      	str	r3, [r4, #36]	; 0x24
 801884a:	4b05      	ldr	r3, [pc, #20]	; (8018860 <std+0x3c>)
 801884c:	62a3      	str	r3, [r4, #40]	; 0x28
 801884e:	4b05      	ldr	r3, [pc, #20]	; (8018864 <std+0x40>)
 8018850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018852:	4b05      	ldr	r3, [pc, #20]	; (8018868 <std+0x44>)
 8018854:	6224      	str	r4, [r4, #32]
 8018856:	6323      	str	r3, [r4, #48]	; 0x30
 8018858:	bd10      	pop	{r4, pc}
 801885a:	bf00      	nop
 801885c:	08018f19 	.word	0x08018f19
 8018860:	08018f3b 	.word	0x08018f3b
 8018864:	08018f73 	.word	0x08018f73
 8018868:	08018f97 	.word	0x08018f97

0801886c <_cleanup_r>:
 801886c:	4901      	ldr	r1, [pc, #4]	; (8018874 <_cleanup_r+0x8>)
 801886e:	f000 b8af 	b.w	80189d0 <_fwalk_reent>
 8018872:	bf00      	nop
 8018874:	080187ad 	.word	0x080187ad

08018878 <__sfmoreglue>:
 8018878:	b570      	push	{r4, r5, r6, lr}
 801887a:	2268      	movs	r2, #104	; 0x68
 801887c:	1e4d      	subs	r5, r1, #1
 801887e:	4355      	muls	r5, r2
 8018880:	460e      	mov	r6, r1
 8018882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018886:	f000 f9e1 	bl	8018c4c <_malloc_r>
 801888a:	4604      	mov	r4, r0
 801888c:	b140      	cbz	r0, 80188a0 <__sfmoreglue+0x28>
 801888e:	2100      	movs	r1, #0
 8018890:	e9c0 1600 	strd	r1, r6, [r0]
 8018894:	300c      	adds	r0, #12
 8018896:	60a0      	str	r0, [r4, #8]
 8018898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801889c:	f000 f962 	bl	8018b64 <memset>
 80188a0:	4620      	mov	r0, r4
 80188a2:	bd70      	pop	{r4, r5, r6, pc}

080188a4 <__sfp_lock_acquire>:
 80188a4:	4801      	ldr	r0, [pc, #4]	; (80188ac <__sfp_lock_acquire+0x8>)
 80188a6:	f000 b8d8 	b.w	8018a5a <__retarget_lock_acquire_recursive>
 80188aa:	bf00      	nop
 80188ac:	200039fd 	.word	0x200039fd

080188b0 <__sfp_lock_release>:
 80188b0:	4801      	ldr	r0, [pc, #4]	; (80188b8 <__sfp_lock_release+0x8>)
 80188b2:	f000 b8d3 	b.w	8018a5c <__retarget_lock_release_recursive>
 80188b6:	bf00      	nop
 80188b8:	200039fd 	.word	0x200039fd

080188bc <__sinit_lock_acquire>:
 80188bc:	4801      	ldr	r0, [pc, #4]	; (80188c4 <__sinit_lock_acquire+0x8>)
 80188be:	f000 b8cc 	b.w	8018a5a <__retarget_lock_acquire_recursive>
 80188c2:	bf00      	nop
 80188c4:	200039fe 	.word	0x200039fe

080188c8 <__sinit_lock_release>:
 80188c8:	4801      	ldr	r0, [pc, #4]	; (80188d0 <__sinit_lock_release+0x8>)
 80188ca:	f000 b8c7 	b.w	8018a5c <__retarget_lock_release_recursive>
 80188ce:	bf00      	nop
 80188d0:	200039fe 	.word	0x200039fe

080188d4 <__sinit>:
 80188d4:	b510      	push	{r4, lr}
 80188d6:	4604      	mov	r4, r0
 80188d8:	f7ff fff0 	bl	80188bc <__sinit_lock_acquire>
 80188dc:	69a3      	ldr	r3, [r4, #24]
 80188de:	b11b      	cbz	r3, 80188e8 <__sinit+0x14>
 80188e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188e4:	f7ff bff0 	b.w	80188c8 <__sinit_lock_release>
 80188e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80188ec:	6523      	str	r3, [r4, #80]	; 0x50
 80188ee:	4b13      	ldr	r3, [pc, #76]	; (801893c <__sinit+0x68>)
 80188f0:	4a13      	ldr	r2, [pc, #76]	; (8018940 <__sinit+0x6c>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80188f6:	42a3      	cmp	r3, r4
 80188f8:	bf04      	itt	eq
 80188fa:	2301      	moveq	r3, #1
 80188fc:	61a3      	streq	r3, [r4, #24]
 80188fe:	4620      	mov	r0, r4
 8018900:	f000 f820 	bl	8018944 <__sfp>
 8018904:	6060      	str	r0, [r4, #4]
 8018906:	4620      	mov	r0, r4
 8018908:	f000 f81c 	bl	8018944 <__sfp>
 801890c:	60a0      	str	r0, [r4, #8]
 801890e:	4620      	mov	r0, r4
 8018910:	f000 f818 	bl	8018944 <__sfp>
 8018914:	2200      	movs	r2, #0
 8018916:	60e0      	str	r0, [r4, #12]
 8018918:	2104      	movs	r1, #4
 801891a:	6860      	ldr	r0, [r4, #4]
 801891c:	f7ff ff82 	bl	8018824 <std>
 8018920:	68a0      	ldr	r0, [r4, #8]
 8018922:	2201      	movs	r2, #1
 8018924:	2109      	movs	r1, #9
 8018926:	f7ff ff7d 	bl	8018824 <std>
 801892a:	68e0      	ldr	r0, [r4, #12]
 801892c:	2202      	movs	r2, #2
 801892e:	2112      	movs	r1, #18
 8018930:	f7ff ff78 	bl	8018824 <std>
 8018934:	2301      	movs	r3, #1
 8018936:	61a3      	str	r3, [r4, #24]
 8018938:	e7d2      	b.n	80188e0 <__sinit+0xc>
 801893a:	bf00      	nop
 801893c:	0801bd7c 	.word	0x0801bd7c
 8018940:	0801886d 	.word	0x0801886d

08018944 <__sfp>:
 8018944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018946:	4607      	mov	r7, r0
 8018948:	f7ff ffac 	bl	80188a4 <__sfp_lock_acquire>
 801894c:	4b1e      	ldr	r3, [pc, #120]	; (80189c8 <__sfp+0x84>)
 801894e:	681e      	ldr	r6, [r3, #0]
 8018950:	69b3      	ldr	r3, [r6, #24]
 8018952:	b913      	cbnz	r3, 801895a <__sfp+0x16>
 8018954:	4630      	mov	r0, r6
 8018956:	f7ff ffbd 	bl	80188d4 <__sinit>
 801895a:	3648      	adds	r6, #72	; 0x48
 801895c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018960:	3b01      	subs	r3, #1
 8018962:	d503      	bpl.n	801896c <__sfp+0x28>
 8018964:	6833      	ldr	r3, [r6, #0]
 8018966:	b30b      	cbz	r3, 80189ac <__sfp+0x68>
 8018968:	6836      	ldr	r6, [r6, #0]
 801896a:	e7f7      	b.n	801895c <__sfp+0x18>
 801896c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018970:	b9d5      	cbnz	r5, 80189a8 <__sfp+0x64>
 8018972:	4b16      	ldr	r3, [pc, #88]	; (80189cc <__sfp+0x88>)
 8018974:	60e3      	str	r3, [r4, #12]
 8018976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801897a:	6665      	str	r5, [r4, #100]	; 0x64
 801897c:	f000 f86c 	bl	8018a58 <__retarget_lock_init_recursive>
 8018980:	f7ff ff96 	bl	80188b0 <__sfp_lock_release>
 8018984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801898c:	6025      	str	r5, [r4, #0]
 801898e:	61a5      	str	r5, [r4, #24]
 8018990:	2208      	movs	r2, #8
 8018992:	4629      	mov	r1, r5
 8018994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018998:	f000 f8e4 	bl	8018b64 <memset>
 801899c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80189a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80189a4:	4620      	mov	r0, r4
 80189a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189a8:	3468      	adds	r4, #104	; 0x68
 80189aa:	e7d9      	b.n	8018960 <__sfp+0x1c>
 80189ac:	2104      	movs	r1, #4
 80189ae:	4638      	mov	r0, r7
 80189b0:	f7ff ff62 	bl	8018878 <__sfmoreglue>
 80189b4:	4604      	mov	r4, r0
 80189b6:	6030      	str	r0, [r6, #0]
 80189b8:	2800      	cmp	r0, #0
 80189ba:	d1d5      	bne.n	8018968 <__sfp+0x24>
 80189bc:	f7ff ff78 	bl	80188b0 <__sfp_lock_release>
 80189c0:	230c      	movs	r3, #12
 80189c2:	603b      	str	r3, [r7, #0]
 80189c4:	e7ee      	b.n	80189a4 <__sfp+0x60>
 80189c6:	bf00      	nop
 80189c8:	0801bd7c 	.word	0x0801bd7c
 80189cc:	ffff0001 	.word	0xffff0001

080189d0 <_fwalk_reent>:
 80189d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189d4:	4606      	mov	r6, r0
 80189d6:	4688      	mov	r8, r1
 80189d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80189dc:	2700      	movs	r7, #0
 80189de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80189e2:	f1b9 0901 	subs.w	r9, r9, #1
 80189e6:	d505      	bpl.n	80189f4 <_fwalk_reent+0x24>
 80189e8:	6824      	ldr	r4, [r4, #0]
 80189ea:	2c00      	cmp	r4, #0
 80189ec:	d1f7      	bne.n	80189de <_fwalk_reent+0xe>
 80189ee:	4638      	mov	r0, r7
 80189f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189f4:	89ab      	ldrh	r3, [r5, #12]
 80189f6:	2b01      	cmp	r3, #1
 80189f8:	d907      	bls.n	8018a0a <_fwalk_reent+0x3a>
 80189fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80189fe:	3301      	adds	r3, #1
 8018a00:	d003      	beq.n	8018a0a <_fwalk_reent+0x3a>
 8018a02:	4629      	mov	r1, r5
 8018a04:	4630      	mov	r0, r6
 8018a06:	47c0      	blx	r8
 8018a08:	4307      	orrs	r7, r0
 8018a0a:	3568      	adds	r5, #104	; 0x68
 8018a0c:	e7e9      	b.n	80189e2 <_fwalk_reent+0x12>
	...

08018a10 <__libc_init_array>:
 8018a10:	b570      	push	{r4, r5, r6, lr}
 8018a12:	4d0d      	ldr	r5, [pc, #52]	; (8018a48 <__libc_init_array+0x38>)
 8018a14:	4c0d      	ldr	r4, [pc, #52]	; (8018a4c <__libc_init_array+0x3c>)
 8018a16:	1b64      	subs	r4, r4, r5
 8018a18:	10a4      	asrs	r4, r4, #2
 8018a1a:	2600      	movs	r6, #0
 8018a1c:	42a6      	cmp	r6, r4
 8018a1e:	d109      	bne.n	8018a34 <__libc_init_array+0x24>
 8018a20:	4d0b      	ldr	r5, [pc, #44]	; (8018a50 <__libc_init_array+0x40>)
 8018a22:	4c0c      	ldr	r4, [pc, #48]	; (8018a54 <__libc_init_array+0x44>)
 8018a24:	f002 f9c2 	bl	801adac <_init>
 8018a28:	1b64      	subs	r4, r4, r5
 8018a2a:	10a4      	asrs	r4, r4, #2
 8018a2c:	2600      	movs	r6, #0
 8018a2e:	42a6      	cmp	r6, r4
 8018a30:	d105      	bne.n	8018a3e <__libc_init_array+0x2e>
 8018a32:	bd70      	pop	{r4, r5, r6, pc}
 8018a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a38:	4798      	blx	r3
 8018a3a:	3601      	adds	r6, #1
 8018a3c:	e7ee      	b.n	8018a1c <__libc_init_array+0xc>
 8018a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a42:	4798      	blx	r3
 8018a44:	3601      	adds	r6, #1
 8018a46:	e7f2      	b.n	8018a2e <__libc_init_array+0x1e>
 8018a48:	0801bf98 	.word	0x0801bf98
 8018a4c:	0801bf98 	.word	0x0801bf98
 8018a50:	0801bf98 	.word	0x0801bf98
 8018a54:	0801bf9c 	.word	0x0801bf9c

08018a58 <__retarget_lock_init_recursive>:
 8018a58:	4770      	bx	lr

08018a5a <__retarget_lock_acquire_recursive>:
 8018a5a:	4770      	bx	lr

08018a5c <__retarget_lock_release_recursive>:
 8018a5c:	4770      	bx	lr

08018a5e <__swhatbuf_r>:
 8018a5e:	b570      	push	{r4, r5, r6, lr}
 8018a60:	460e      	mov	r6, r1
 8018a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a66:	2900      	cmp	r1, #0
 8018a68:	b096      	sub	sp, #88	; 0x58
 8018a6a:	4614      	mov	r4, r2
 8018a6c:	461d      	mov	r5, r3
 8018a6e:	da08      	bge.n	8018a82 <__swhatbuf_r+0x24>
 8018a70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018a74:	2200      	movs	r2, #0
 8018a76:	602a      	str	r2, [r5, #0]
 8018a78:	061a      	lsls	r2, r3, #24
 8018a7a:	d410      	bmi.n	8018a9e <__swhatbuf_r+0x40>
 8018a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a80:	e00e      	b.n	8018aa0 <__swhatbuf_r+0x42>
 8018a82:	466a      	mov	r2, sp
 8018a84:	f000 fc06 	bl	8019294 <_fstat_r>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	dbf1      	blt.n	8018a70 <__swhatbuf_r+0x12>
 8018a8c:	9a01      	ldr	r2, [sp, #4]
 8018a8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018a92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018a96:	425a      	negs	r2, r3
 8018a98:	415a      	adcs	r2, r3
 8018a9a:	602a      	str	r2, [r5, #0]
 8018a9c:	e7ee      	b.n	8018a7c <__swhatbuf_r+0x1e>
 8018a9e:	2340      	movs	r3, #64	; 0x40
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	6023      	str	r3, [r4, #0]
 8018aa4:	b016      	add	sp, #88	; 0x58
 8018aa6:	bd70      	pop	{r4, r5, r6, pc}

08018aa8 <__smakebuf_r>:
 8018aa8:	898b      	ldrh	r3, [r1, #12]
 8018aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018aac:	079d      	lsls	r5, r3, #30
 8018aae:	4606      	mov	r6, r0
 8018ab0:	460c      	mov	r4, r1
 8018ab2:	d507      	bpl.n	8018ac4 <__smakebuf_r+0x1c>
 8018ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018ab8:	6023      	str	r3, [r4, #0]
 8018aba:	6123      	str	r3, [r4, #16]
 8018abc:	2301      	movs	r3, #1
 8018abe:	6163      	str	r3, [r4, #20]
 8018ac0:	b002      	add	sp, #8
 8018ac2:	bd70      	pop	{r4, r5, r6, pc}
 8018ac4:	ab01      	add	r3, sp, #4
 8018ac6:	466a      	mov	r2, sp
 8018ac8:	f7ff ffc9 	bl	8018a5e <__swhatbuf_r>
 8018acc:	9900      	ldr	r1, [sp, #0]
 8018ace:	4605      	mov	r5, r0
 8018ad0:	4630      	mov	r0, r6
 8018ad2:	f000 f8bb 	bl	8018c4c <_malloc_r>
 8018ad6:	b948      	cbnz	r0, 8018aec <__smakebuf_r+0x44>
 8018ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018adc:	059a      	lsls	r2, r3, #22
 8018ade:	d4ef      	bmi.n	8018ac0 <__smakebuf_r+0x18>
 8018ae0:	f023 0303 	bic.w	r3, r3, #3
 8018ae4:	f043 0302 	orr.w	r3, r3, #2
 8018ae8:	81a3      	strh	r3, [r4, #12]
 8018aea:	e7e3      	b.n	8018ab4 <__smakebuf_r+0xc>
 8018aec:	4b0d      	ldr	r3, [pc, #52]	; (8018b24 <__smakebuf_r+0x7c>)
 8018aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8018af0:	89a3      	ldrh	r3, [r4, #12]
 8018af2:	6020      	str	r0, [r4, #0]
 8018af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018af8:	81a3      	strh	r3, [r4, #12]
 8018afa:	9b00      	ldr	r3, [sp, #0]
 8018afc:	6163      	str	r3, [r4, #20]
 8018afe:	9b01      	ldr	r3, [sp, #4]
 8018b00:	6120      	str	r0, [r4, #16]
 8018b02:	b15b      	cbz	r3, 8018b1c <__smakebuf_r+0x74>
 8018b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b08:	4630      	mov	r0, r6
 8018b0a:	f000 fbd5 	bl	80192b8 <_isatty_r>
 8018b0e:	b128      	cbz	r0, 8018b1c <__smakebuf_r+0x74>
 8018b10:	89a3      	ldrh	r3, [r4, #12]
 8018b12:	f023 0303 	bic.w	r3, r3, #3
 8018b16:	f043 0301 	orr.w	r3, r3, #1
 8018b1a:	81a3      	strh	r3, [r4, #12]
 8018b1c:	89a0      	ldrh	r0, [r4, #12]
 8018b1e:	4305      	orrs	r5, r0
 8018b20:	81a5      	strh	r5, [r4, #12]
 8018b22:	e7cd      	b.n	8018ac0 <__smakebuf_r+0x18>
 8018b24:	0801886d 	.word	0x0801886d

08018b28 <malloc>:
 8018b28:	4b02      	ldr	r3, [pc, #8]	; (8018b34 <malloc+0xc>)
 8018b2a:	4601      	mov	r1, r0
 8018b2c:	6818      	ldr	r0, [r3, #0]
 8018b2e:	f000 b88d 	b.w	8018c4c <_malloc_r>
 8018b32:	bf00      	nop
 8018b34:	2000039c 	.word	0x2000039c

08018b38 <free>:
 8018b38:	4b02      	ldr	r3, [pc, #8]	; (8018b44 <free+0xc>)
 8018b3a:	4601      	mov	r1, r0
 8018b3c:	6818      	ldr	r0, [r3, #0]
 8018b3e:	f000 b819 	b.w	8018b74 <_free_r>
 8018b42:	bf00      	nop
 8018b44:	2000039c 	.word	0x2000039c

08018b48 <memcpy>:
 8018b48:	440a      	add	r2, r1
 8018b4a:	4291      	cmp	r1, r2
 8018b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018b50:	d100      	bne.n	8018b54 <memcpy+0xc>
 8018b52:	4770      	bx	lr
 8018b54:	b510      	push	{r4, lr}
 8018b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b5e:	4291      	cmp	r1, r2
 8018b60:	d1f9      	bne.n	8018b56 <memcpy+0xe>
 8018b62:	bd10      	pop	{r4, pc}

08018b64 <memset>:
 8018b64:	4402      	add	r2, r0
 8018b66:	4603      	mov	r3, r0
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	d100      	bne.n	8018b6e <memset+0xa>
 8018b6c:	4770      	bx	lr
 8018b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8018b72:	e7f9      	b.n	8018b68 <memset+0x4>

08018b74 <_free_r>:
 8018b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b76:	2900      	cmp	r1, #0
 8018b78:	d044      	beq.n	8018c04 <_free_r+0x90>
 8018b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b7e:	9001      	str	r0, [sp, #4]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	f1a1 0404 	sub.w	r4, r1, #4
 8018b86:	bfb8      	it	lt
 8018b88:	18e4      	addlt	r4, r4, r3
 8018b8a:	f000 fbb7 	bl	80192fc <__malloc_lock>
 8018b8e:	4a1e      	ldr	r2, [pc, #120]	; (8018c08 <_free_r+0x94>)
 8018b90:	9801      	ldr	r0, [sp, #4]
 8018b92:	6813      	ldr	r3, [r2, #0]
 8018b94:	b933      	cbnz	r3, 8018ba4 <_free_r+0x30>
 8018b96:	6063      	str	r3, [r4, #4]
 8018b98:	6014      	str	r4, [r2, #0]
 8018b9a:	b003      	add	sp, #12
 8018b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ba0:	f000 bbb2 	b.w	8019308 <__malloc_unlock>
 8018ba4:	42a3      	cmp	r3, r4
 8018ba6:	d908      	bls.n	8018bba <_free_r+0x46>
 8018ba8:	6825      	ldr	r5, [r4, #0]
 8018baa:	1961      	adds	r1, r4, r5
 8018bac:	428b      	cmp	r3, r1
 8018bae:	bf01      	itttt	eq
 8018bb0:	6819      	ldreq	r1, [r3, #0]
 8018bb2:	685b      	ldreq	r3, [r3, #4]
 8018bb4:	1949      	addeq	r1, r1, r5
 8018bb6:	6021      	streq	r1, [r4, #0]
 8018bb8:	e7ed      	b.n	8018b96 <_free_r+0x22>
 8018bba:	461a      	mov	r2, r3
 8018bbc:	685b      	ldr	r3, [r3, #4]
 8018bbe:	b10b      	cbz	r3, 8018bc4 <_free_r+0x50>
 8018bc0:	42a3      	cmp	r3, r4
 8018bc2:	d9fa      	bls.n	8018bba <_free_r+0x46>
 8018bc4:	6811      	ldr	r1, [r2, #0]
 8018bc6:	1855      	adds	r5, r2, r1
 8018bc8:	42a5      	cmp	r5, r4
 8018bca:	d10b      	bne.n	8018be4 <_free_r+0x70>
 8018bcc:	6824      	ldr	r4, [r4, #0]
 8018bce:	4421      	add	r1, r4
 8018bd0:	1854      	adds	r4, r2, r1
 8018bd2:	42a3      	cmp	r3, r4
 8018bd4:	6011      	str	r1, [r2, #0]
 8018bd6:	d1e0      	bne.n	8018b9a <_free_r+0x26>
 8018bd8:	681c      	ldr	r4, [r3, #0]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	6053      	str	r3, [r2, #4]
 8018bde:	4421      	add	r1, r4
 8018be0:	6011      	str	r1, [r2, #0]
 8018be2:	e7da      	b.n	8018b9a <_free_r+0x26>
 8018be4:	d902      	bls.n	8018bec <_free_r+0x78>
 8018be6:	230c      	movs	r3, #12
 8018be8:	6003      	str	r3, [r0, #0]
 8018bea:	e7d6      	b.n	8018b9a <_free_r+0x26>
 8018bec:	6825      	ldr	r5, [r4, #0]
 8018bee:	1961      	adds	r1, r4, r5
 8018bf0:	428b      	cmp	r3, r1
 8018bf2:	bf04      	itt	eq
 8018bf4:	6819      	ldreq	r1, [r3, #0]
 8018bf6:	685b      	ldreq	r3, [r3, #4]
 8018bf8:	6063      	str	r3, [r4, #4]
 8018bfa:	bf04      	itt	eq
 8018bfc:	1949      	addeq	r1, r1, r5
 8018bfe:	6021      	streq	r1, [r4, #0]
 8018c00:	6054      	str	r4, [r2, #4]
 8018c02:	e7ca      	b.n	8018b9a <_free_r+0x26>
 8018c04:	b003      	add	sp, #12
 8018c06:	bd30      	pop	{r4, r5, pc}
 8018c08:	20003a00 	.word	0x20003a00

08018c0c <sbrk_aligned>:
 8018c0c:	b570      	push	{r4, r5, r6, lr}
 8018c0e:	4e0e      	ldr	r6, [pc, #56]	; (8018c48 <sbrk_aligned+0x3c>)
 8018c10:	460c      	mov	r4, r1
 8018c12:	6831      	ldr	r1, [r6, #0]
 8018c14:	4605      	mov	r5, r0
 8018c16:	b911      	cbnz	r1, 8018c1e <sbrk_aligned+0x12>
 8018c18:	f000 f91a 	bl	8018e50 <_sbrk_r>
 8018c1c:	6030      	str	r0, [r6, #0]
 8018c1e:	4621      	mov	r1, r4
 8018c20:	4628      	mov	r0, r5
 8018c22:	f000 f915 	bl	8018e50 <_sbrk_r>
 8018c26:	1c43      	adds	r3, r0, #1
 8018c28:	d00a      	beq.n	8018c40 <sbrk_aligned+0x34>
 8018c2a:	1cc4      	adds	r4, r0, #3
 8018c2c:	f024 0403 	bic.w	r4, r4, #3
 8018c30:	42a0      	cmp	r0, r4
 8018c32:	d007      	beq.n	8018c44 <sbrk_aligned+0x38>
 8018c34:	1a21      	subs	r1, r4, r0
 8018c36:	4628      	mov	r0, r5
 8018c38:	f000 f90a 	bl	8018e50 <_sbrk_r>
 8018c3c:	3001      	adds	r0, #1
 8018c3e:	d101      	bne.n	8018c44 <sbrk_aligned+0x38>
 8018c40:	f04f 34ff 	mov.w	r4, #4294967295
 8018c44:	4620      	mov	r0, r4
 8018c46:	bd70      	pop	{r4, r5, r6, pc}
 8018c48:	20003a04 	.word	0x20003a04

08018c4c <_malloc_r>:
 8018c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c50:	1ccd      	adds	r5, r1, #3
 8018c52:	f025 0503 	bic.w	r5, r5, #3
 8018c56:	3508      	adds	r5, #8
 8018c58:	2d0c      	cmp	r5, #12
 8018c5a:	bf38      	it	cc
 8018c5c:	250c      	movcc	r5, #12
 8018c5e:	2d00      	cmp	r5, #0
 8018c60:	4607      	mov	r7, r0
 8018c62:	db01      	blt.n	8018c68 <_malloc_r+0x1c>
 8018c64:	42a9      	cmp	r1, r5
 8018c66:	d905      	bls.n	8018c74 <_malloc_r+0x28>
 8018c68:	230c      	movs	r3, #12
 8018c6a:	603b      	str	r3, [r7, #0]
 8018c6c:	2600      	movs	r6, #0
 8018c6e:	4630      	mov	r0, r6
 8018c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c74:	4e2e      	ldr	r6, [pc, #184]	; (8018d30 <_malloc_r+0xe4>)
 8018c76:	f000 fb41 	bl	80192fc <__malloc_lock>
 8018c7a:	6833      	ldr	r3, [r6, #0]
 8018c7c:	461c      	mov	r4, r3
 8018c7e:	bb34      	cbnz	r4, 8018cce <_malloc_r+0x82>
 8018c80:	4629      	mov	r1, r5
 8018c82:	4638      	mov	r0, r7
 8018c84:	f7ff ffc2 	bl	8018c0c <sbrk_aligned>
 8018c88:	1c43      	adds	r3, r0, #1
 8018c8a:	4604      	mov	r4, r0
 8018c8c:	d14d      	bne.n	8018d2a <_malloc_r+0xde>
 8018c8e:	6834      	ldr	r4, [r6, #0]
 8018c90:	4626      	mov	r6, r4
 8018c92:	2e00      	cmp	r6, #0
 8018c94:	d140      	bne.n	8018d18 <_malloc_r+0xcc>
 8018c96:	6823      	ldr	r3, [r4, #0]
 8018c98:	4631      	mov	r1, r6
 8018c9a:	4638      	mov	r0, r7
 8018c9c:	eb04 0803 	add.w	r8, r4, r3
 8018ca0:	f000 f8d6 	bl	8018e50 <_sbrk_r>
 8018ca4:	4580      	cmp	r8, r0
 8018ca6:	d13a      	bne.n	8018d1e <_malloc_r+0xd2>
 8018ca8:	6821      	ldr	r1, [r4, #0]
 8018caa:	3503      	adds	r5, #3
 8018cac:	1a6d      	subs	r5, r5, r1
 8018cae:	f025 0503 	bic.w	r5, r5, #3
 8018cb2:	3508      	adds	r5, #8
 8018cb4:	2d0c      	cmp	r5, #12
 8018cb6:	bf38      	it	cc
 8018cb8:	250c      	movcc	r5, #12
 8018cba:	4629      	mov	r1, r5
 8018cbc:	4638      	mov	r0, r7
 8018cbe:	f7ff ffa5 	bl	8018c0c <sbrk_aligned>
 8018cc2:	3001      	adds	r0, #1
 8018cc4:	d02b      	beq.n	8018d1e <_malloc_r+0xd2>
 8018cc6:	6823      	ldr	r3, [r4, #0]
 8018cc8:	442b      	add	r3, r5
 8018cca:	6023      	str	r3, [r4, #0]
 8018ccc:	e00e      	b.n	8018cec <_malloc_r+0xa0>
 8018cce:	6822      	ldr	r2, [r4, #0]
 8018cd0:	1b52      	subs	r2, r2, r5
 8018cd2:	d41e      	bmi.n	8018d12 <_malloc_r+0xc6>
 8018cd4:	2a0b      	cmp	r2, #11
 8018cd6:	d916      	bls.n	8018d06 <_malloc_r+0xba>
 8018cd8:	1961      	adds	r1, r4, r5
 8018cda:	42a3      	cmp	r3, r4
 8018cdc:	6025      	str	r5, [r4, #0]
 8018cde:	bf18      	it	ne
 8018ce0:	6059      	strne	r1, [r3, #4]
 8018ce2:	6863      	ldr	r3, [r4, #4]
 8018ce4:	bf08      	it	eq
 8018ce6:	6031      	streq	r1, [r6, #0]
 8018ce8:	5162      	str	r2, [r4, r5]
 8018cea:	604b      	str	r3, [r1, #4]
 8018cec:	4638      	mov	r0, r7
 8018cee:	f104 060b 	add.w	r6, r4, #11
 8018cf2:	f000 fb09 	bl	8019308 <__malloc_unlock>
 8018cf6:	f026 0607 	bic.w	r6, r6, #7
 8018cfa:	1d23      	adds	r3, r4, #4
 8018cfc:	1af2      	subs	r2, r6, r3
 8018cfe:	d0b6      	beq.n	8018c6e <_malloc_r+0x22>
 8018d00:	1b9b      	subs	r3, r3, r6
 8018d02:	50a3      	str	r3, [r4, r2]
 8018d04:	e7b3      	b.n	8018c6e <_malloc_r+0x22>
 8018d06:	6862      	ldr	r2, [r4, #4]
 8018d08:	42a3      	cmp	r3, r4
 8018d0a:	bf0c      	ite	eq
 8018d0c:	6032      	streq	r2, [r6, #0]
 8018d0e:	605a      	strne	r2, [r3, #4]
 8018d10:	e7ec      	b.n	8018cec <_malloc_r+0xa0>
 8018d12:	4623      	mov	r3, r4
 8018d14:	6864      	ldr	r4, [r4, #4]
 8018d16:	e7b2      	b.n	8018c7e <_malloc_r+0x32>
 8018d18:	4634      	mov	r4, r6
 8018d1a:	6876      	ldr	r6, [r6, #4]
 8018d1c:	e7b9      	b.n	8018c92 <_malloc_r+0x46>
 8018d1e:	230c      	movs	r3, #12
 8018d20:	603b      	str	r3, [r7, #0]
 8018d22:	4638      	mov	r0, r7
 8018d24:	f000 faf0 	bl	8019308 <__malloc_unlock>
 8018d28:	e7a1      	b.n	8018c6e <_malloc_r+0x22>
 8018d2a:	6025      	str	r5, [r4, #0]
 8018d2c:	e7de      	b.n	8018cec <_malloc_r+0xa0>
 8018d2e:	bf00      	nop
 8018d30:	20003a00 	.word	0x20003a00

08018d34 <iprintf>:
 8018d34:	b40f      	push	{r0, r1, r2, r3}
 8018d36:	4b0a      	ldr	r3, [pc, #40]	; (8018d60 <iprintf+0x2c>)
 8018d38:	b513      	push	{r0, r1, r4, lr}
 8018d3a:	681c      	ldr	r4, [r3, #0]
 8018d3c:	b124      	cbz	r4, 8018d48 <iprintf+0x14>
 8018d3e:	69a3      	ldr	r3, [r4, #24]
 8018d40:	b913      	cbnz	r3, 8018d48 <iprintf+0x14>
 8018d42:	4620      	mov	r0, r4
 8018d44:	f7ff fdc6 	bl	80188d4 <__sinit>
 8018d48:	ab05      	add	r3, sp, #20
 8018d4a:	9a04      	ldr	r2, [sp, #16]
 8018d4c:	68a1      	ldr	r1, [r4, #8]
 8018d4e:	9301      	str	r3, [sp, #4]
 8018d50:	4620      	mov	r0, r4
 8018d52:	f000 fc65 	bl	8019620 <_vfiprintf_r>
 8018d56:	b002      	add	sp, #8
 8018d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d5c:	b004      	add	sp, #16
 8018d5e:	4770      	bx	lr
 8018d60:	2000039c 	.word	0x2000039c

08018d64 <_puts_r>:
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	460e      	mov	r6, r1
 8018d68:	4605      	mov	r5, r0
 8018d6a:	b118      	cbz	r0, 8018d74 <_puts_r+0x10>
 8018d6c:	6983      	ldr	r3, [r0, #24]
 8018d6e:	b90b      	cbnz	r3, 8018d74 <_puts_r+0x10>
 8018d70:	f7ff fdb0 	bl	80188d4 <__sinit>
 8018d74:	69ab      	ldr	r3, [r5, #24]
 8018d76:	68ac      	ldr	r4, [r5, #8]
 8018d78:	b913      	cbnz	r3, 8018d80 <_puts_r+0x1c>
 8018d7a:	4628      	mov	r0, r5
 8018d7c:	f7ff fdaa 	bl	80188d4 <__sinit>
 8018d80:	4b2c      	ldr	r3, [pc, #176]	; (8018e34 <_puts_r+0xd0>)
 8018d82:	429c      	cmp	r4, r3
 8018d84:	d120      	bne.n	8018dc8 <_puts_r+0x64>
 8018d86:	686c      	ldr	r4, [r5, #4]
 8018d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d8a:	07db      	lsls	r3, r3, #31
 8018d8c:	d405      	bmi.n	8018d9a <_puts_r+0x36>
 8018d8e:	89a3      	ldrh	r3, [r4, #12]
 8018d90:	0598      	lsls	r0, r3, #22
 8018d92:	d402      	bmi.n	8018d9a <_puts_r+0x36>
 8018d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d96:	f7ff fe60 	bl	8018a5a <__retarget_lock_acquire_recursive>
 8018d9a:	89a3      	ldrh	r3, [r4, #12]
 8018d9c:	0719      	lsls	r1, r3, #28
 8018d9e:	d51d      	bpl.n	8018ddc <_puts_r+0x78>
 8018da0:	6923      	ldr	r3, [r4, #16]
 8018da2:	b1db      	cbz	r3, 8018ddc <_puts_r+0x78>
 8018da4:	3e01      	subs	r6, #1
 8018da6:	68a3      	ldr	r3, [r4, #8]
 8018da8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018dac:	3b01      	subs	r3, #1
 8018dae:	60a3      	str	r3, [r4, #8]
 8018db0:	bb39      	cbnz	r1, 8018e02 <_puts_r+0x9e>
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	da38      	bge.n	8018e28 <_puts_r+0xc4>
 8018db6:	4622      	mov	r2, r4
 8018db8:	210a      	movs	r1, #10
 8018dba:	4628      	mov	r0, r5
 8018dbc:	f000 f988 	bl	80190d0 <__swbuf_r>
 8018dc0:	3001      	adds	r0, #1
 8018dc2:	d011      	beq.n	8018de8 <_puts_r+0x84>
 8018dc4:	250a      	movs	r5, #10
 8018dc6:	e011      	b.n	8018dec <_puts_r+0x88>
 8018dc8:	4b1b      	ldr	r3, [pc, #108]	; (8018e38 <_puts_r+0xd4>)
 8018dca:	429c      	cmp	r4, r3
 8018dcc:	d101      	bne.n	8018dd2 <_puts_r+0x6e>
 8018dce:	68ac      	ldr	r4, [r5, #8]
 8018dd0:	e7da      	b.n	8018d88 <_puts_r+0x24>
 8018dd2:	4b1a      	ldr	r3, [pc, #104]	; (8018e3c <_puts_r+0xd8>)
 8018dd4:	429c      	cmp	r4, r3
 8018dd6:	bf08      	it	eq
 8018dd8:	68ec      	ldreq	r4, [r5, #12]
 8018dda:	e7d5      	b.n	8018d88 <_puts_r+0x24>
 8018ddc:	4621      	mov	r1, r4
 8018dde:	4628      	mov	r0, r5
 8018de0:	f000 f9da 	bl	8019198 <__swsetup_r>
 8018de4:	2800      	cmp	r0, #0
 8018de6:	d0dd      	beq.n	8018da4 <_puts_r+0x40>
 8018de8:	f04f 35ff 	mov.w	r5, #4294967295
 8018dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018dee:	07da      	lsls	r2, r3, #31
 8018df0:	d405      	bmi.n	8018dfe <_puts_r+0x9a>
 8018df2:	89a3      	ldrh	r3, [r4, #12]
 8018df4:	059b      	lsls	r3, r3, #22
 8018df6:	d402      	bmi.n	8018dfe <_puts_r+0x9a>
 8018df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018dfa:	f7ff fe2f 	bl	8018a5c <__retarget_lock_release_recursive>
 8018dfe:	4628      	mov	r0, r5
 8018e00:	bd70      	pop	{r4, r5, r6, pc}
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	da04      	bge.n	8018e10 <_puts_r+0xac>
 8018e06:	69a2      	ldr	r2, [r4, #24]
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	dc06      	bgt.n	8018e1a <_puts_r+0xb6>
 8018e0c:	290a      	cmp	r1, #10
 8018e0e:	d004      	beq.n	8018e1a <_puts_r+0xb6>
 8018e10:	6823      	ldr	r3, [r4, #0]
 8018e12:	1c5a      	adds	r2, r3, #1
 8018e14:	6022      	str	r2, [r4, #0]
 8018e16:	7019      	strb	r1, [r3, #0]
 8018e18:	e7c5      	b.n	8018da6 <_puts_r+0x42>
 8018e1a:	4622      	mov	r2, r4
 8018e1c:	4628      	mov	r0, r5
 8018e1e:	f000 f957 	bl	80190d0 <__swbuf_r>
 8018e22:	3001      	adds	r0, #1
 8018e24:	d1bf      	bne.n	8018da6 <_puts_r+0x42>
 8018e26:	e7df      	b.n	8018de8 <_puts_r+0x84>
 8018e28:	6823      	ldr	r3, [r4, #0]
 8018e2a:	250a      	movs	r5, #10
 8018e2c:	1c5a      	adds	r2, r3, #1
 8018e2e:	6022      	str	r2, [r4, #0]
 8018e30:	701d      	strb	r5, [r3, #0]
 8018e32:	e7db      	b.n	8018dec <_puts_r+0x88>
 8018e34:	0801bd3c 	.word	0x0801bd3c
 8018e38:	0801bd5c 	.word	0x0801bd5c
 8018e3c:	0801bd1c 	.word	0x0801bd1c

08018e40 <puts>:
 8018e40:	4b02      	ldr	r3, [pc, #8]	; (8018e4c <puts+0xc>)
 8018e42:	4601      	mov	r1, r0
 8018e44:	6818      	ldr	r0, [r3, #0]
 8018e46:	f7ff bf8d 	b.w	8018d64 <_puts_r>
 8018e4a:	bf00      	nop
 8018e4c:	2000039c 	.word	0x2000039c

08018e50 <_sbrk_r>:
 8018e50:	b538      	push	{r3, r4, r5, lr}
 8018e52:	4d06      	ldr	r5, [pc, #24]	; (8018e6c <_sbrk_r+0x1c>)
 8018e54:	2300      	movs	r3, #0
 8018e56:	4604      	mov	r4, r0
 8018e58:	4608      	mov	r0, r1
 8018e5a:	602b      	str	r3, [r5, #0]
 8018e5c:	f7e9 fdc2 	bl	80029e4 <_sbrk>
 8018e60:	1c43      	adds	r3, r0, #1
 8018e62:	d102      	bne.n	8018e6a <_sbrk_r+0x1a>
 8018e64:	682b      	ldr	r3, [r5, #0]
 8018e66:	b103      	cbz	r3, 8018e6a <_sbrk_r+0x1a>
 8018e68:	6023      	str	r3, [r4, #0]
 8018e6a:	bd38      	pop	{r3, r4, r5, pc}
 8018e6c:	20003a08 	.word	0x20003a08

08018e70 <sniprintf>:
 8018e70:	b40c      	push	{r2, r3}
 8018e72:	b530      	push	{r4, r5, lr}
 8018e74:	4b17      	ldr	r3, [pc, #92]	; (8018ed4 <sniprintf+0x64>)
 8018e76:	1e0c      	subs	r4, r1, #0
 8018e78:	681d      	ldr	r5, [r3, #0]
 8018e7a:	b09d      	sub	sp, #116	; 0x74
 8018e7c:	da08      	bge.n	8018e90 <sniprintf+0x20>
 8018e7e:	238b      	movs	r3, #139	; 0x8b
 8018e80:	602b      	str	r3, [r5, #0]
 8018e82:	f04f 30ff 	mov.w	r0, #4294967295
 8018e86:	b01d      	add	sp, #116	; 0x74
 8018e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e8c:	b002      	add	sp, #8
 8018e8e:	4770      	bx	lr
 8018e90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018e94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018e98:	bf14      	ite	ne
 8018e9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018e9e:	4623      	moveq	r3, r4
 8018ea0:	9304      	str	r3, [sp, #16]
 8018ea2:	9307      	str	r3, [sp, #28]
 8018ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ea8:	9002      	str	r0, [sp, #8]
 8018eaa:	9006      	str	r0, [sp, #24]
 8018eac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018eb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018eb2:	ab21      	add	r3, sp, #132	; 0x84
 8018eb4:	a902      	add	r1, sp, #8
 8018eb6:	4628      	mov	r0, r5
 8018eb8:	9301      	str	r3, [sp, #4]
 8018eba:	f000 fa87 	bl	80193cc <_svfiprintf_r>
 8018ebe:	1c43      	adds	r3, r0, #1
 8018ec0:	bfbc      	itt	lt
 8018ec2:	238b      	movlt	r3, #139	; 0x8b
 8018ec4:	602b      	strlt	r3, [r5, #0]
 8018ec6:	2c00      	cmp	r4, #0
 8018ec8:	d0dd      	beq.n	8018e86 <sniprintf+0x16>
 8018eca:	9b02      	ldr	r3, [sp, #8]
 8018ecc:	2200      	movs	r2, #0
 8018ece:	701a      	strb	r2, [r3, #0]
 8018ed0:	e7d9      	b.n	8018e86 <sniprintf+0x16>
 8018ed2:	bf00      	nop
 8018ed4:	2000039c 	.word	0x2000039c

08018ed8 <siprintf>:
 8018ed8:	b40e      	push	{r1, r2, r3}
 8018eda:	b500      	push	{lr}
 8018edc:	b09c      	sub	sp, #112	; 0x70
 8018ede:	ab1d      	add	r3, sp, #116	; 0x74
 8018ee0:	9002      	str	r0, [sp, #8]
 8018ee2:	9006      	str	r0, [sp, #24]
 8018ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018ee8:	4809      	ldr	r0, [pc, #36]	; (8018f10 <siprintf+0x38>)
 8018eea:	9107      	str	r1, [sp, #28]
 8018eec:	9104      	str	r1, [sp, #16]
 8018eee:	4909      	ldr	r1, [pc, #36]	; (8018f14 <siprintf+0x3c>)
 8018ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ef4:	9105      	str	r1, [sp, #20]
 8018ef6:	6800      	ldr	r0, [r0, #0]
 8018ef8:	9301      	str	r3, [sp, #4]
 8018efa:	a902      	add	r1, sp, #8
 8018efc:	f000 fa66 	bl	80193cc <_svfiprintf_r>
 8018f00:	9b02      	ldr	r3, [sp, #8]
 8018f02:	2200      	movs	r2, #0
 8018f04:	701a      	strb	r2, [r3, #0]
 8018f06:	b01c      	add	sp, #112	; 0x70
 8018f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f0c:	b003      	add	sp, #12
 8018f0e:	4770      	bx	lr
 8018f10:	2000039c 	.word	0x2000039c
 8018f14:	ffff0208 	.word	0xffff0208

08018f18 <__sread>:
 8018f18:	b510      	push	{r4, lr}
 8018f1a:	460c      	mov	r4, r1
 8018f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f20:	f000 fe42 	bl	8019ba8 <_read_r>
 8018f24:	2800      	cmp	r0, #0
 8018f26:	bfab      	itete	ge
 8018f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8018f2c:	181b      	addge	r3, r3, r0
 8018f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018f32:	bfac      	ite	ge
 8018f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8018f36:	81a3      	strhlt	r3, [r4, #12]
 8018f38:	bd10      	pop	{r4, pc}

08018f3a <__swrite>:
 8018f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3e:	461f      	mov	r7, r3
 8018f40:	898b      	ldrh	r3, [r1, #12]
 8018f42:	05db      	lsls	r3, r3, #23
 8018f44:	4605      	mov	r5, r0
 8018f46:	460c      	mov	r4, r1
 8018f48:	4616      	mov	r6, r2
 8018f4a:	d505      	bpl.n	8018f58 <__swrite+0x1e>
 8018f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f50:	2302      	movs	r3, #2
 8018f52:	2200      	movs	r2, #0
 8018f54:	f000 f9c0 	bl	80192d8 <_lseek_r>
 8018f58:	89a3      	ldrh	r3, [r4, #12]
 8018f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f62:	81a3      	strh	r3, [r4, #12]
 8018f64:	4632      	mov	r2, r6
 8018f66:	463b      	mov	r3, r7
 8018f68:	4628      	mov	r0, r5
 8018f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f6e:	f000 b901 	b.w	8019174 <_write_r>

08018f72 <__sseek>:
 8018f72:	b510      	push	{r4, lr}
 8018f74:	460c      	mov	r4, r1
 8018f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f7a:	f000 f9ad 	bl	80192d8 <_lseek_r>
 8018f7e:	1c43      	adds	r3, r0, #1
 8018f80:	89a3      	ldrh	r3, [r4, #12]
 8018f82:	bf15      	itete	ne
 8018f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f8e:	81a3      	strheq	r3, [r4, #12]
 8018f90:	bf18      	it	ne
 8018f92:	81a3      	strhne	r3, [r4, #12]
 8018f94:	bd10      	pop	{r4, pc}

08018f96 <__sclose>:
 8018f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f9a:	f000 b96b 	b.w	8019274 <_close_r>

08018f9e <strchr>:
 8018f9e:	b2c9      	uxtb	r1, r1
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fa6:	b11a      	cbz	r2, 8018fb0 <strchr+0x12>
 8018fa8:	428a      	cmp	r2, r1
 8018faa:	d1f9      	bne.n	8018fa0 <strchr+0x2>
 8018fac:	4618      	mov	r0, r3
 8018fae:	4770      	bx	lr
 8018fb0:	2900      	cmp	r1, #0
 8018fb2:	bf18      	it	ne
 8018fb4:	2300      	movne	r3, #0
 8018fb6:	e7f9      	b.n	8018fac <strchr+0xe>

08018fb8 <_strtol_l.constprop.0>:
 8018fb8:	2b01      	cmp	r3, #1
 8018fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fbe:	d001      	beq.n	8018fc4 <_strtol_l.constprop.0+0xc>
 8018fc0:	2b24      	cmp	r3, #36	; 0x24
 8018fc2:	d906      	bls.n	8018fd2 <_strtol_l.constprop.0+0x1a>
 8018fc4:	f7ff fb66 	bl	8018694 <__errno>
 8018fc8:	2316      	movs	r3, #22
 8018fca:	6003      	str	r3, [r0, #0]
 8018fcc:	2000      	movs	r0, #0
 8018fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80190b8 <_strtol_l.constprop.0+0x100>
 8018fd6:	460d      	mov	r5, r1
 8018fd8:	462e      	mov	r6, r5
 8018fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018fde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8018fe2:	f017 0708 	ands.w	r7, r7, #8
 8018fe6:	d1f7      	bne.n	8018fd8 <_strtol_l.constprop.0+0x20>
 8018fe8:	2c2d      	cmp	r4, #45	; 0x2d
 8018fea:	d132      	bne.n	8019052 <_strtol_l.constprop.0+0x9a>
 8018fec:	782c      	ldrb	r4, [r5, #0]
 8018fee:	2701      	movs	r7, #1
 8018ff0:	1cb5      	adds	r5, r6, #2
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d05b      	beq.n	80190ae <_strtol_l.constprop.0+0xf6>
 8018ff6:	2b10      	cmp	r3, #16
 8018ff8:	d109      	bne.n	801900e <_strtol_l.constprop.0+0x56>
 8018ffa:	2c30      	cmp	r4, #48	; 0x30
 8018ffc:	d107      	bne.n	801900e <_strtol_l.constprop.0+0x56>
 8018ffe:	782c      	ldrb	r4, [r5, #0]
 8019000:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019004:	2c58      	cmp	r4, #88	; 0x58
 8019006:	d14d      	bne.n	80190a4 <_strtol_l.constprop.0+0xec>
 8019008:	786c      	ldrb	r4, [r5, #1]
 801900a:	2310      	movs	r3, #16
 801900c:	3502      	adds	r5, #2
 801900e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019012:	f108 38ff 	add.w	r8, r8, #4294967295
 8019016:	f04f 0c00 	mov.w	ip, #0
 801901a:	fbb8 f9f3 	udiv	r9, r8, r3
 801901e:	4666      	mov	r6, ip
 8019020:	fb03 8a19 	mls	sl, r3, r9, r8
 8019024:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019028:	f1be 0f09 	cmp.w	lr, #9
 801902c:	d816      	bhi.n	801905c <_strtol_l.constprop.0+0xa4>
 801902e:	4674      	mov	r4, lr
 8019030:	42a3      	cmp	r3, r4
 8019032:	dd24      	ble.n	801907e <_strtol_l.constprop.0+0xc6>
 8019034:	f1bc 0f00 	cmp.w	ip, #0
 8019038:	db1e      	blt.n	8019078 <_strtol_l.constprop.0+0xc0>
 801903a:	45b1      	cmp	r9, r6
 801903c:	d31c      	bcc.n	8019078 <_strtol_l.constprop.0+0xc0>
 801903e:	d101      	bne.n	8019044 <_strtol_l.constprop.0+0x8c>
 8019040:	45a2      	cmp	sl, r4
 8019042:	db19      	blt.n	8019078 <_strtol_l.constprop.0+0xc0>
 8019044:	fb06 4603 	mla	r6, r6, r3, r4
 8019048:	f04f 0c01 	mov.w	ip, #1
 801904c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019050:	e7e8      	b.n	8019024 <_strtol_l.constprop.0+0x6c>
 8019052:	2c2b      	cmp	r4, #43	; 0x2b
 8019054:	bf04      	itt	eq
 8019056:	782c      	ldrbeq	r4, [r5, #0]
 8019058:	1cb5      	addeq	r5, r6, #2
 801905a:	e7ca      	b.n	8018ff2 <_strtol_l.constprop.0+0x3a>
 801905c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8019060:	f1be 0f19 	cmp.w	lr, #25
 8019064:	d801      	bhi.n	801906a <_strtol_l.constprop.0+0xb2>
 8019066:	3c37      	subs	r4, #55	; 0x37
 8019068:	e7e2      	b.n	8019030 <_strtol_l.constprop.0+0x78>
 801906a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801906e:	f1be 0f19 	cmp.w	lr, #25
 8019072:	d804      	bhi.n	801907e <_strtol_l.constprop.0+0xc6>
 8019074:	3c57      	subs	r4, #87	; 0x57
 8019076:	e7db      	b.n	8019030 <_strtol_l.constprop.0+0x78>
 8019078:	f04f 3cff 	mov.w	ip, #4294967295
 801907c:	e7e6      	b.n	801904c <_strtol_l.constprop.0+0x94>
 801907e:	f1bc 0f00 	cmp.w	ip, #0
 8019082:	da05      	bge.n	8019090 <_strtol_l.constprop.0+0xd8>
 8019084:	2322      	movs	r3, #34	; 0x22
 8019086:	6003      	str	r3, [r0, #0]
 8019088:	4646      	mov	r6, r8
 801908a:	b942      	cbnz	r2, 801909e <_strtol_l.constprop.0+0xe6>
 801908c:	4630      	mov	r0, r6
 801908e:	e79e      	b.n	8018fce <_strtol_l.constprop.0+0x16>
 8019090:	b107      	cbz	r7, 8019094 <_strtol_l.constprop.0+0xdc>
 8019092:	4276      	negs	r6, r6
 8019094:	2a00      	cmp	r2, #0
 8019096:	d0f9      	beq.n	801908c <_strtol_l.constprop.0+0xd4>
 8019098:	f1bc 0f00 	cmp.w	ip, #0
 801909c:	d000      	beq.n	80190a0 <_strtol_l.constprop.0+0xe8>
 801909e:	1e69      	subs	r1, r5, #1
 80190a0:	6011      	str	r1, [r2, #0]
 80190a2:	e7f3      	b.n	801908c <_strtol_l.constprop.0+0xd4>
 80190a4:	2430      	movs	r4, #48	; 0x30
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d1b1      	bne.n	801900e <_strtol_l.constprop.0+0x56>
 80190aa:	2308      	movs	r3, #8
 80190ac:	e7af      	b.n	801900e <_strtol_l.constprop.0+0x56>
 80190ae:	2c30      	cmp	r4, #48	; 0x30
 80190b0:	d0a5      	beq.n	8018ffe <_strtol_l.constprop.0+0x46>
 80190b2:	230a      	movs	r3, #10
 80190b4:	e7ab      	b.n	801900e <_strtol_l.constprop.0+0x56>
 80190b6:	bf00      	nop
 80190b8:	0801bc19 	.word	0x0801bc19

080190bc <strtol>:
 80190bc:	4613      	mov	r3, r2
 80190be:	460a      	mov	r2, r1
 80190c0:	4601      	mov	r1, r0
 80190c2:	4802      	ldr	r0, [pc, #8]	; (80190cc <strtol+0x10>)
 80190c4:	6800      	ldr	r0, [r0, #0]
 80190c6:	f7ff bf77 	b.w	8018fb8 <_strtol_l.constprop.0>
 80190ca:	bf00      	nop
 80190cc:	2000039c 	.word	0x2000039c

080190d0 <__swbuf_r>:
 80190d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190d2:	460e      	mov	r6, r1
 80190d4:	4614      	mov	r4, r2
 80190d6:	4605      	mov	r5, r0
 80190d8:	b118      	cbz	r0, 80190e2 <__swbuf_r+0x12>
 80190da:	6983      	ldr	r3, [r0, #24]
 80190dc:	b90b      	cbnz	r3, 80190e2 <__swbuf_r+0x12>
 80190de:	f7ff fbf9 	bl	80188d4 <__sinit>
 80190e2:	4b21      	ldr	r3, [pc, #132]	; (8019168 <__swbuf_r+0x98>)
 80190e4:	429c      	cmp	r4, r3
 80190e6:	d12b      	bne.n	8019140 <__swbuf_r+0x70>
 80190e8:	686c      	ldr	r4, [r5, #4]
 80190ea:	69a3      	ldr	r3, [r4, #24]
 80190ec:	60a3      	str	r3, [r4, #8]
 80190ee:	89a3      	ldrh	r3, [r4, #12]
 80190f0:	071a      	lsls	r2, r3, #28
 80190f2:	d52f      	bpl.n	8019154 <__swbuf_r+0x84>
 80190f4:	6923      	ldr	r3, [r4, #16]
 80190f6:	b36b      	cbz	r3, 8019154 <__swbuf_r+0x84>
 80190f8:	6923      	ldr	r3, [r4, #16]
 80190fa:	6820      	ldr	r0, [r4, #0]
 80190fc:	1ac0      	subs	r0, r0, r3
 80190fe:	6963      	ldr	r3, [r4, #20]
 8019100:	b2f6      	uxtb	r6, r6
 8019102:	4283      	cmp	r3, r0
 8019104:	4637      	mov	r7, r6
 8019106:	dc04      	bgt.n	8019112 <__swbuf_r+0x42>
 8019108:	4621      	mov	r1, r4
 801910a:	4628      	mov	r0, r5
 801910c:	f7ff fb4e 	bl	80187ac <_fflush_r>
 8019110:	bb30      	cbnz	r0, 8019160 <__swbuf_r+0x90>
 8019112:	68a3      	ldr	r3, [r4, #8]
 8019114:	3b01      	subs	r3, #1
 8019116:	60a3      	str	r3, [r4, #8]
 8019118:	6823      	ldr	r3, [r4, #0]
 801911a:	1c5a      	adds	r2, r3, #1
 801911c:	6022      	str	r2, [r4, #0]
 801911e:	701e      	strb	r6, [r3, #0]
 8019120:	6963      	ldr	r3, [r4, #20]
 8019122:	3001      	adds	r0, #1
 8019124:	4283      	cmp	r3, r0
 8019126:	d004      	beq.n	8019132 <__swbuf_r+0x62>
 8019128:	89a3      	ldrh	r3, [r4, #12]
 801912a:	07db      	lsls	r3, r3, #31
 801912c:	d506      	bpl.n	801913c <__swbuf_r+0x6c>
 801912e:	2e0a      	cmp	r6, #10
 8019130:	d104      	bne.n	801913c <__swbuf_r+0x6c>
 8019132:	4621      	mov	r1, r4
 8019134:	4628      	mov	r0, r5
 8019136:	f7ff fb39 	bl	80187ac <_fflush_r>
 801913a:	b988      	cbnz	r0, 8019160 <__swbuf_r+0x90>
 801913c:	4638      	mov	r0, r7
 801913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019140:	4b0a      	ldr	r3, [pc, #40]	; (801916c <__swbuf_r+0x9c>)
 8019142:	429c      	cmp	r4, r3
 8019144:	d101      	bne.n	801914a <__swbuf_r+0x7a>
 8019146:	68ac      	ldr	r4, [r5, #8]
 8019148:	e7cf      	b.n	80190ea <__swbuf_r+0x1a>
 801914a:	4b09      	ldr	r3, [pc, #36]	; (8019170 <__swbuf_r+0xa0>)
 801914c:	429c      	cmp	r4, r3
 801914e:	bf08      	it	eq
 8019150:	68ec      	ldreq	r4, [r5, #12]
 8019152:	e7ca      	b.n	80190ea <__swbuf_r+0x1a>
 8019154:	4621      	mov	r1, r4
 8019156:	4628      	mov	r0, r5
 8019158:	f000 f81e 	bl	8019198 <__swsetup_r>
 801915c:	2800      	cmp	r0, #0
 801915e:	d0cb      	beq.n	80190f8 <__swbuf_r+0x28>
 8019160:	f04f 37ff 	mov.w	r7, #4294967295
 8019164:	e7ea      	b.n	801913c <__swbuf_r+0x6c>
 8019166:	bf00      	nop
 8019168:	0801bd3c 	.word	0x0801bd3c
 801916c:	0801bd5c 	.word	0x0801bd5c
 8019170:	0801bd1c 	.word	0x0801bd1c

08019174 <_write_r>:
 8019174:	b538      	push	{r3, r4, r5, lr}
 8019176:	4d07      	ldr	r5, [pc, #28]	; (8019194 <_write_r+0x20>)
 8019178:	4604      	mov	r4, r0
 801917a:	4608      	mov	r0, r1
 801917c:	4611      	mov	r1, r2
 801917e:	2200      	movs	r2, #0
 8019180:	602a      	str	r2, [r5, #0]
 8019182:	461a      	mov	r2, r3
 8019184:	f7e8 fb2e 	bl	80017e4 <_write>
 8019188:	1c43      	adds	r3, r0, #1
 801918a:	d102      	bne.n	8019192 <_write_r+0x1e>
 801918c:	682b      	ldr	r3, [r5, #0]
 801918e:	b103      	cbz	r3, 8019192 <_write_r+0x1e>
 8019190:	6023      	str	r3, [r4, #0]
 8019192:	bd38      	pop	{r3, r4, r5, pc}
 8019194:	20003a08 	.word	0x20003a08

08019198 <__swsetup_r>:
 8019198:	4b32      	ldr	r3, [pc, #200]	; (8019264 <__swsetup_r+0xcc>)
 801919a:	b570      	push	{r4, r5, r6, lr}
 801919c:	681d      	ldr	r5, [r3, #0]
 801919e:	4606      	mov	r6, r0
 80191a0:	460c      	mov	r4, r1
 80191a2:	b125      	cbz	r5, 80191ae <__swsetup_r+0x16>
 80191a4:	69ab      	ldr	r3, [r5, #24]
 80191a6:	b913      	cbnz	r3, 80191ae <__swsetup_r+0x16>
 80191a8:	4628      	mov	r0, r5
 80191aa:	f7ff fb93 	bl	80188d4 <__sinit>
 80191ae:	4b2e      	ldr	r3, [pc, #184]	; (8019268 <__swsetup_r+0xd0>)
 80191b0:	429c      	cmp	r4, r3
 80191b2:	d10f      	bne.n	80191d4 <__swsetup_r+0x3c>
 80191b4:	686c      	ldr	r4, [r5, #4]
 80191b6:	89a3      	ldrh	r3, [r4, #12]
 80191b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80191bc:	0719      	lsls	r1, r3, #28
 80191be:	d42c      	bmi.n	801921a <__swsetup_r+0x82>
 80191c0:	06dd      	lsls	r5, r3, #27
 80191c2:	d411      	bmi.n	80191e8 <__swsetup_r+0x50>
 80191c4:	2309      	movs	r3, #9
 80191c6:	6033      	str	r3, [r6, #0]
 80191c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80191cc:	81a3      	strh	r3, [r4, #12]
 80191ce:	f04f 30ff 	mov.w	r0, #4294967295
 80191d2:	e03e      	b.n	8019252 <__swsetup_r+0xba>
 80191d4:	4b25      	ldr	r3, [pc, #148]	; (801926c <__swsetup_r+0xd4>)
 80191d6:	429c      	cmp	r4, r3
 80191d8:	d101      	bne.n	80191de <__swsetup_r+0x46>
 80191da:	68ac      	ldr	r4, [r5, #8]
 80191dc:	e7eb      	b.n	80191b6 <__swsetup_r+0x1e>
 80191de:	4b24      	ldr	r3, [pc, #144]	; (8019270 <__swsetup_r+0xd8>)
 80191e0:	429c      	cmp	r4, r3
 80191e2:	bf08      	it	eq
 80191e4:	68ec      	ldreq	r4, [r5, #12]
 80191e6:	e7e6      	b.n	80191b6 <__swsetup_r+0x1e>
 80191e8:	0758      	lsls	r0, r3, #29
 80191ea:	d512      	bpl.n	8019212 <__swsetup_r+0x7a>
 80191ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80191ee:	b141      	cbz	r1, 8019202 <__swsetup_r+0x6a>
 80191f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80191f4:	4299      	cmp	r1, r3
 80191f6:	d002      	beq.n	80191fe <__swsetup_r+0x66>
 80191f8:	4630      	mov	r0, r6
 80191fa:	f7ff fcbb 	bl	8018b74 <_free_r>
 80191fe:	2300      	movs	r3, #0
 8019200:	6363      	str	r3, [r4, #52]	; 0x34
 8019202:	89a3      	ldrh	r3, [r4, #12]
 8019204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019208:	81a3      	strh	r3, [r4, #12]
 801920a:	2300      	movs	r3, #0
 801920c:	6063      	str	r3, [r4, #4]
 801920e:	6923      	ldr	r3, [r4, #16]
 8019210:	6023      	str	r3, [r4, #0]
 8019212:	89a3      	ldrh	r3, [r4, #12]
 8019214:	f043 0308 	orr.w	r3, r3, #8
 8019218:	81a3      	strh	r3, [r4, #12]
 801921a:	6923      	ldr	r3, [r4, #16]
 801921c:	b94b      	cbnz	r3, 8019232 <__swsetup_r+0x9a>
 801921e:	89a3      	ldrh	r3, [r4, #12]
 8019220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019228:	d003      	beq.n	8019232 <__swsetup_r+0x9a>
 801922a:	4621      	mov	r1, r4
 801922c:	4630      	mov	r0, r6
 801922e:	f7ff fc3b 	bl	8018aa8 <__smakebuf_r>
 8019232:	89a0      	ldrh	r0, [r4, #12]
 8019234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019238:	f010 0301 	ands.w	r3, r0, #1
 801923c:	d00a      	beq.n	8019254 <__swsetup_r+0xbc>
 801923e:	2300      	movs	r3, #0
 8019240:	60a3      	str	r3, [r4, #8]
 8019242:	6963      	ldr	r3, [r4, #20]
 8019244:	425b      	negs	r3, r3
 8019246:	61a3      	str	r3, [r4, #24]
 8019248:	6923      	ldr	r3, [r4, #16]
 801924a:	b943      	cbnz	r3, 801925e <__swsetup_r+0xc6>
 801924c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019250:	d1ba      	bne.n	80191c8 <__swsetup_r+0x30>
 8019252:	bd70      	pop	{r4, r5, r6, pc}
 8019254:	0781      	lsls	r1, r0, #30
 8019256:	bf58      	it	pl
 8019258:	6963      	ldrpl	r3, [r4, #20]
 801925a:	60a3      	str	r3, [r4, #8]
 801925c:	e7f4      	b.n	8019248 <__swsetup_r+0xb0>
 801925e:	2000      	movs	r0, #0
 8019260:	e7f7      	b.n	8019252 <__swsetup_r+0xba>
 8019262:	bf00      	nop
 8019264:	2000039c 	.word	0x2000039c
 8019268:	0801bd3c 	.word	0x0801bd3c
 801926c:	0801bd5c 	.word	0x0801bd5c
 8019270:	0801bd1c 	.word	0x0801bd1c

08019274 <_close_r>:
 8019274:	b538      	push	{r3, r4, r5, lr}
 8019276:	4d06      	ldr	r5, [pc, #24]	; (8019290 <_close_r+0x1c>)
 8019278:	2300      	movs	r3, #0
 801927a:	4604      	mov	r4, r0
 801927c:	4608      	mov	r0, r1
 801927e:	602b      	str	r3, [r5, #0]
 8019280:	f7e9 fb7b 	bl	800297a <_close>
 8019284:	1c43      	adds	r3, r0, #1
 8019286:	d102      	bne.n	801928e <_close_r+0x1a>
 8019288:	682b      	ldr	r3, [r5, #0]
 801928a:	b103      	cbz	r3, 801928e <_close_r+0x1a>
 801928c:	6023      	str	r3, [r4, #0]
 801928e:	bd38      	pop	{r3, r4, r5, pc}
 8019290:	20003a08 	.word	0x20003a08

08019294 <_fstat_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4d07      	ldr	r5, [pc, #28]	; (80192b4 <_fstat_r+0x20>)
 8019298:	2300      	movs	r3, #0
 801929a:	4604      	mov	r4, r0
 801929c:	4608      	mov	r0, r1
 801929e:	4611      	mov	r1, r2
 80192a0:	602b      	str	r3, [r5, #0]
 80192a2:	f7e9 fb76 	bl	8002992 <_fstat>
 80192a6:	1c43      	adds	r3, r0, #1
 80192a8:	d102      	bne.n	80192b0 <_fstat_r+0x1c>
 80192aa:	682b      	ldr	r3, [r5, #0]
 80192ac:	b103      	cbz	r3, 80192b0 <_fstat_r+0x1c>
 80192ae:	6023      	str	r3, [r4, #0]
 80192b0:	bd38      	pop	{r3, r4, r5, pc}
 80192b2:	bf00      	nop
 80192b4:	20003a08 	.word	0x20003a08

080192b8 <_isatty_r>:
 80192b8:	b538      	push	{r3, r4, r5, lr}
 80192ba:	4d06      	ldr	r5, [pc, #24]	; (80192d4 <_isatty_r+0x1c>)
 80192bc:	2300      	movs	r3, #0
 80192be:	4604      	mov	r4, r0
 80192c0:	4608      	mov	r0, r1
 80192c2:	602b      	str	r3, [r5, #0]
 80192c4:	f7e9 fb75 	bl	80029b2 <_isatty>
 80192c8:	1c43      	adds	r3, r0, #1
 80192ca:	d102      	bne.n	80192d2 <_isatty_r+0x1a>
 80192cc:	682b      	ldr	r3, [r5, #0]
 80192ce:	b103      	cbz	r3, 80192d2 <_isatty_r+0x1a>
 80192d0:	6023      	str	r3, [r4, #0]
 80192d2:	bd38      	pop	{r3, r4, r5, pc}
 80192d4:	20003a08 	.word	0x20003a08

080192d8 <_lseek_r>:
 80192d8:	b538      	push	{r3, r4, r5, lr}
 80192da:	4d07      	ldr	r5, [pc, #28]	; (80192f8 <_lseek_r+0x20>)
 80192dc:	4604      	mov	r4, r0
 80192de:	4608      	mov	r0, r1
 80192e0:	4611      	mov	r1, r2
 80192e2:	2200      	movs	r2, #0
 80192e4:	602a      	str	r2, [r5, #0]
 80192e6:	461a      	mov	r2, r3
 80192e8:	f7e9 fb6e 	bl	80029c8 <_lseek>
 80192ec:	1c43      	adds	r3, r0, #1
 80192ee:	d102      	bne.n	80192f6 <_lseek_r+0x1e>
 80192f0:	682b      	ldr	r3, [r5, #0]
 80192f2:	b103      	cbz	r3, 80192f6 <_lseek_r+0x1e>
 80192f4:	6023      	str	r3, [r4, #0]
 80192f6:	bd38      	pop	{r3, r4, r5, pc}
 80192f8:	20003a08 	.word	0x20003a08

080192fc <__malloc_lock>:
 80192fc:	4801      	ldr	r0, [pc, #4]	; (8019304 <__malloc_lock+0x8>)
 80192fe:	f7ff bbac 	b.w	8018a5a <__retarget_lock_acquire_recursive>
 8019302:	bf00      	nop
 8019304:	200039fc 	.word	0x200039fc

08019308 <__malloc_unlock>:
 8019308:	4801      	ldr	r0, [pc, #4]	; (8019310 <__malloc_unlock+0x8>)
 801930a:	f7ff bba7 	b.w	8018a5c <__retarget_lock_release_recursive>
 801930e:	bf00      	nop
 8019310:	200039fc 	.word	0x200039fc

08019314 <__ssputs_r>:
 8019314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019318:	688e      	ldr	r6, [r1, #8]
 801931a:	429e      	cmp	r6, r3
 801931c:	4682      	mov	sl, r0
 801931e:	460c      	mov	r4, r1
 8019320:	4690      	mov	r8, r2
 8019322:	461f      	mov	r7, r3
 8019324:	d838      	bhi.n	8019398 <__ssputs_r+0x84>
 8019326:	898a      	ldrh	r2, [r1, #12]
 8019328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801932c:	d032      	beq.n	8019394 <__ssputs_r+0x80>
 801932e:	6825      	ldr	r5, [r4, #0]
 8019330:	6909      	ldr	r1, [r1, #16]
 8019332:	eba5 0901 	sub.w	r9, r5, r1
 8019336:	6965      	ldr	r5, [r4, #20]
 8019338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801933c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019340:	3301      	adds	r3, #1
 8019342:	444b      	add	r3, r9
 8019344:	106d      	asrs	r5, r5, #1
 8019346:	429d      	cmp	r5, r3
 8019348:	bf38      	it	cc
 801934a:	461d      	movcc	r5, r3
 801934c:	0553      	lsls	r3, r2, #21
 801934e:	d531      	bpl.n	80193b4 <__ssputs_r+0xa0>
 8019350:	4629      	mov	r1, r5
 8019352:	f7ff fc7b 	bl	8018c4c <_malloc_r>
 8019356:	4606      	mov	r6, r0
 8019358:	b950      	cbnz	r0, 8019370 <__ssputs_r+0x5c>
 801935a:	230c      	movs	r3, #12
 801935c:	f8ca 3000 	str.w	r3, [sl]
 8019360:	89a3      	ldrh	r3, [r4, #12]
 8019362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019366:	81a3      	strh	r3, [r4, #12]
 8019368:	f04f 30ff 	mov.w	r0, #4294967295
 801936c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019370:	6921      	ldr	r1, [r4, #16]
 8019372:	464a      	mov	r2, r9
 8019374:	f7ff fbe8 	bl	8018b48 <memcpy>
 8019378:	89a3      	ldrh	r3, [r4, #12]
 801937a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801937e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019382:	81a3      	strh	r3, [r4, #12]
 8019384:	6126      	str	r6, [r4, #16]
 8019386:	6165      	str	r5, [r4, #20]
 8019388:	444e      	add	r6, r9
 801938a:	eba5 0509 	sub.w	r5, r5, r9
 801938e:	6026      	str	r6, [r4, #0]
 8019390:	60a5      	str	r5, [r4, #8]
 8019392:	463e      	mov	r6, r7
 8019394:	42be      	cmp	r6, r7
 8019396:	d900      	bls.n	801939a <__ssputs_r+0x86>
 8019398:	463e      	mov	r6, r7
 801939a:	6820      	ldr	r0, [r4, #0]
 801939c:	4632      	mov	r2, r6
 801939e:	4641      	mov	r1, r8
 80193a0:	f000 fc14 	bl	8019bcc <memmove>
 80193a4:	68a3      	ldr	r3, [r4, #8]
 80193a6:	1b9b      	subs	r3, r3, r6
 80193a8:	60a3      	str	r3, [r4, #8]
 80193aa:	6823      	ldr	r3, [r4, #0]
 80193ac:	4433      	add	r3, r6
 80193ae:	6023      	str	r3, [r4, #0]
 80193b0:	2000      	movs	r0, #0
 80193b2:	e7db      	b.n	801936c <__ssputs_r+0x58>
 80193b4:	462a      	mov	r2, r5
 80193b6:	f000 fc23 	bl	8019c00 <_realloc_r>
 80193ba:	4606      	mov	r6, r0
 80193bc:	2800      	cmp	r0, #0
 80193be:	d1e1      	bne.n	8019384 <__ssputs_r+0x70>
 80193c0:	6921      	ldr	r1, [r4, #16]
 80193c2:	4650      	mov	r0, sl
 80193c4:	f7ff fbd6 	bl	8018b74 <_free_r>
 80193c8:	e7c7      	b.n	801935a <__ssputs_r+0x46>
	...

080193cc <_svfiprintf_r>:
 80193cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d0:	4698      	mov	r8, r3
 80193d2:	898b      	ldrh	r3, [r1, #12]
 80193d4:	061b      	lsls	r3, r3, #24
 80193d6:	b09d      	sub	sp, #116	; 0x74
 80193d8:	4607      	mov	r7, r0
 80193da:	460d      	mov	r5, r1
 80193dc:	4614      	mov	r4, r2
 80193de:	d50e      	bpl.n	80193fe <_svfiprintf_r+0x32>
 80193e0:	690b      	ldr	r3, [r1, #16]
 80193e2:	b963      	cbnz	r3, 80193fe <_svfiprintf_r+0x32>
 80193e4:	2140      	movs	r1, #64	; 0x40
 80193e6:	f7ff fc31 	bl	8018c4c <_malloc_r>
 80193ea:	6028      	str	r0, [r5, #0]
 80193ec:	6128      	str	r0, [r5, #16]
 80193ee:	b920      	cbnz	r0, 80193fa <_svfiprintf_r+0x2e>
 80193f0:	230c      	movs	r3, #12
 80193f2:	603b      	str	r3, [r7, #0]
 80193f4:	f04f 30ff 	mov.w	r0, #4294967295
 80193f8:	e0d1      	b.n	801959e <_svfiprintf_r+0x1d2>
 80193fa:	2340      	movs	r3, #64	; 0x40
 80193fc:	616b      	str	r3, [r5, #20]
 80193fe:	2300      	movs	r3, #0
 8019400:	9309      	str	r3, [sp, #36]	; 0x24
 8019402:	2320      	movs	r3, #32
 8019404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019408:	f8cd 800c 	str.w	r8, [sp, #12]
 801940c:	2330      	movs	r3, #48	; 0x30
 801940e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80195b8 <_svfiprintf_r+0x1ec>
 8019412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019416:	f04f 0901 	mov.w	r9, #1
 801941a:	4623      	mov	r3, r4
 801941c:	469a      	mov	sl, r3
 801941e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019422:	b10a      	cbz	r2, 8019428 <_svfiprintf_r+0x5c>
 8019424:	2a25      	cmp	r2, #37	; 0x25
 8019426:	d1f9      	bne.n	801941c <_svfiprintf_r+0x50>
 8019428:	ebba 0b04 	subs.w	fp, sl, r4
 801942c:	d00b      	beq.n	8019446 <_svfiprintf_r+0x7a>
 801942e:	465b      	mov	r3, fp
 8019430:	4622      	mov	r2, r4
 8019432:	4629      	mov	r1, r5
 8019434:	4638      	mov	r0, r7
 8019436:	f7ff ff6d 	bl	8019314 <__ssputs_r>
 801943a:	3001      	adds	r0, #1
 801943c:	f000 80aa 	beq.w	8019594 <_svfiprintf_r+0x1c8>
 8019440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019442:	445a      	add	r2, fp
 8019444:	9209      	str	r2, [sp, #36]	; 0x24
 8019446:	f89a 3000 	ldrb.w	r3, [sl]
 801944a:	2b00      	cmp	r3, #0
 801944c:	f000 80a2 	beq.w	8019594 <_svfiprintf_r+0x1c8>
 8019450:	2300      	movs	r3, #0
 8019452:	f04f 32ff 	mov.w	r2, #4294967295
 8019456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801945a:	f10a 0a01 	add.w	sl, sl, #1
 801945e:	9304      	str	r3, [sp, #16]
 8019460:	9307      	str	r3, [sp, #28]
 8019462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019466:	931a      	str	r3, [sp, #104]	; 0x68
 8019468:	4654      	mov	r4, sl
 801946a:	2205      	movs	r2, #5
 801946c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019470:	4851      	ldr	r0, [pc, #324]	; (80195b8 <_svfiprintf_r+0x1ec>)
 8019472:	f7e6 feb5 	bl	80001e0 <memchr>
 8019476:	9a04      	ldr	r2, [sp, #16]
 8019478:	b9d8      	cbnz	r0, 80194b2 <_svfiprintf_r+0xe6>
 801947a:	06d0      	lsls	r0, r2, #27
 801947c:	bf44      	itt	mi
 801947e:	2320      	movmi	r3, #32
 8019480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019484:	0711      	lsls	r1, r2, #28
 8019486:	bf44      	itt	mi
 8019488:	232b      	movmi	r3, #43	; 0x2b
 801948a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801948e:	f89a 3000 	ldrb.w	r3, [sl]
 8019492:	2b2a      	cmp	r3, #42	; 0x2a
 8019494:	d015      	beq.n	80194c2 <_svfiprintf_r+0xf6>
 8019496:	9a07      	ldr	r2, [sp, #28]
 8019498:	4654      	mov	r4, sl
 801949a:	2000      	movs	r0, #0
 801949c:	f04f 0c0a 	mov.w	ip, #10
 80194a0:	4621      	mov	r1, r4
 80194a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194a6:	3b30      	subs	r3, #48	; 0x30
 80194a8:	2b09      	cmp	r3, #9
 80194aa:	d94e      	bls.n	801954a <_svfiprintf_r+0x17e>
 80194ac:	b1b0      	cbz	r0, 80194dc <_svfiprintf_r+0x110>
 80194ae:	9207      	str	r2, [sp, #28]
 80194b0:	e014      	b.n	80194dc <_svfiprintf_r+0x110>
 80194b2:	eba0 0308 	sub.w	r3, r0, r8
 80194b6:	fa09 f303 	lsl.w	r3, r9, r3
 80194ba:	4313      	orrs	r3, r2
 80194bc:	9304      	str	r3, [sp, #16]
 80194be:	46a2      	mov	sl, r4
 80194c0:	e7d2      	b.n	8019468 <_svfiprintf_r+0x9c>
 80194c2:	9b03      	ldr	r3, [sp, #12]
 80194c4:	1d19      	adds	r1, r3, #4
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	9103      	str	r1, [sp, #12]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	bfbb      	ittet	lt
 80194ce:	425b      	neglt	r3, r3
 80194d0:	f042 0202 	orrlt.w	r2, r2, #2
 80194d4:	9307      	strge	r3, [sp, #28]
 80194d6:	9307      	strlt	r3, [sp, #28]
 80194d8:	bfb8      	it	lt
 80194da:	9204      	strlt	r2, [sp, #16]
 80194dc:	7823      	ldrb	r3, [r4, #0]
 80194de:	2b2e      	cmp	r3, #46	; 0x2e
 80194e0:	d10c      	bne.n	80194fc <_svfiprintf_r+0x130>
 80194e2:	7863      	ldrb	r3, [r4, #1]
 80194e4:	2b2a      	cmp	r3, #42	; 0x2a
 80194e6:	d135      	bne.n	8019554 <_svfiprintf_r+0x188>
 80194e8:	9b03      	ldr	r3, [sp, #12]
 80194ea:	1d1a      	adds	r2, r3, #4
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	9203      	str	r2, [sp, #12]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	bfb8      	it	lt
 80194f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80194f8:	3402      	adds	r4, #2
 80194fa:	9305      	str	r3, [sp, #20]
 80194fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80195c8 <_svfiprintf_r+0x1fc>
 8019500:	7821      	ldrb	r1, [r4, #0]
 8019502:	2203      	movs	r2, #3
 8019504:	4650      	mov	r0, sl
 8019506:	f7e6 fe6b 	bl	80001e0 <memchr>
 801950a:	b140      	cbz	r0, 801951e <_svfiprintf_r+0x152>
 801950c:	2340      	movs	r3, #64	; 0x40
 801950e:	eba0 000a 	sub.w	r0, r0, sl
 8019512:	fa03 f000 	lsl.w	r0, r3, r0
 8019516:	9b04      	ldr	r3, [sp, #16]
 8019518:	4303      	orrs	r3, r0
 801951a:	3401      	adds	r4, #1
 801951c:	9304      	str	r3, [sp, #16]
 801951e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019522:	4826      	ldr	r0, [pc, #152]	; (80195bc <_svfiprintf_r+0x1f0>)
 8019524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019528:	2206      	movs	r2, #6
 801952a:	f7e6 fe59 	bl	80001e0 <memchr>
 801952e:	2800      	cmp	r0, #0
 8019530:	d038      	beq.n	80195a4 <_svfiprintf_r+0x1d8>
 8019532:	4b23      	ldr	r3, [pc, #140]	; (80195c0 <_svfiprintf_r+0x1f4>)
 8019534:	bb1b      	cbnz	r3, 801957e <_svfiprintf_r+0x1b2>
 8019536:	9b03      	ldr	r3, [sp, #12]
 8019538:	3307      	adds	r3, #7
 801953a:	f023 0307 	bic.w	r3, r3, #7
 801953e:	3308      	adds	r3, #8
 8019540:	9303      	str	r3, [sp, #12]
 8019542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019544:	4433      	add	r3, r6
 8019546:	9309      	str	r3, [sp, #36]	; 0x24
 8019548:	e767      	b.n	801941a <_svfiprintf_r+0x4e>
 801954a:	fb0c 3202 	mla	r2, ip, r2, r3
 801954e:	460c      	mov	r4, r1
 8019550:	2001      	movs	r0, #1
 8019552:	e7a5      	b.n	80194a0 <_svfiprintf_r+0xd4>
 8019554:	2300      	movs	r3, #0
 8019556:	3401      	adds	r4, #1
 8019558:	9305      	str	r3, [sp, #20]
 801955a:	4619      	mov	r1, r3
 801955c:	f04f 0c0a 	mov.w	ip, #10
 8019560:	4620      	mov	r0, r4
 8019562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019566:	3a30      	subs	r2, #48	; 0x30
 8019568:	2a09      	cmp	r2, #9
 801956a:	d903      	bls.n	8019574 <_svfiprintf_r+0x1a8>
 801956c:	2b00      	cmp	r3, #0
 801956e:	d0c5      	beq.n	80194fc <_svfiprintf_r+0x130>
 8019570:	9105      	str	r1, [sp, #20]
 8019572:	e7c3      	b.n	80194fc <_svfiprintf_r+0x130>
 8019574:	fb0c 2101 	mla	r1, ip, r1, r2
 8019578:	4604      	mov	r4, r0
 801957a:	2301      	movs	r3, #1
 801957c:	e7f0      	b.n	8019560 <_svfiprintf_r+0x194>
 801957e:	ab03      	add	r3, sp, #12
 8019580:	9300      	str	r3, [sp, #0]
 8019582:	462a      	mov	r2, r5
 8019584:	4b0f      	ldr	r3, [pc, #60]	; (80195c4 <_svfiprintf_r+0x1f8>)
 8019586:	a904      	add	r1, sp, #16
 8019588:	4638      	mov	r0, r7
 801958a:	f3af 8000 	nop.w
 801958e:	1c42      	adds	r2, r0, #1
 8019590:	4606      	mov	r6, r0
 8019592:	d1d6      	bne.n	8019542 <_svfiprintf_r+0x176>
 8019594:	89ab      	ldrh	r3, [r5, #12]
 8019596:	065b      	lsls	r3, r3, #25
 8019598:	f53f af2c 	bmi.w	80193f4 <_svfiprintf_r+0x28>
 801959c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801959e:	b01d      	add	sp, #116	; 0x74
 80195a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a4:	ab03      	add	r3, sp, #12
 80195a6:	9300      	str	r3, [sp, #0]
 80195a8:	462a      	mov	r2, r5
 80195aa:	4b06      	ldr	r3, [pc, #24]	; (80195c4 <_svfiprintf_r+0x1f8>)
 80195ac:	a904      	add	r1, sp, #16
 80195ae:	4638      	mov	r0, r7
 80195b0:	f000 f9d4 	bl	801995c <_printf_i>
 80195b4:	e7eb      	b.n	801958e <_svfiprintf_r+0x1c2>
 80195b6:	bf00      	nop
 80195b8:	0801bd80 	.word	0x0801bd80
 80195bc:	0801bd8a 	.word	0x0801bd8a
 80195c0:	00000000 	.word	0x00000000
 80195c4:	08019315 	.word	0x08019315
 80195c8:	0801bd86 	.word	0x0801bd86

080195cc <__sfputc_r>:
 80195cc:	6893      	ldr	r3, [r2, #8]
 80195ce:	3b01      	subs	r3, #1
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	b410      	push	{r4}
 80195d4:	6093      	str	r3, [r2, #8]
 80195d6:	da08      	bge.n	80195ea <__sfputc_r+0x1e>
 80195d8:	6994      	ldr	r4, [r2, #24]
 80195da:	42a3      	cmp	r3, r4
 80195dc:	db01      	blt.n	80195e2 <__sfputc_r+0x16>
 80195de:	290a      	cmp	r1, #10
 80195e0:	d103      	bne.n	80195ea <__sfputc_r+0x1e>
 80195e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195e6:	f7ff bd73 	b.w	80190d0 <__swbuf_r>
 80195ea:	6813      	ldr	r3, [r2, #0]
 80195ec:	1c58      	adds	r0, r3, #1
 80195ee:	6010      	str	r0, [r2, #0]
 80195f0:	7019      	strb	r1, [r3, #0]
 80195f2:	4608      	mov	r0, r1
 80195f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195f8:	4770      	bx	lr

080195fa <__sfputs_r>:
 80195fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195fc:	4606      	mov	r6, r0
 80195fe:	460f      	mov	r7, r1
 8019600:	4614      	mov	r4, r2
 8019602:	18d5      	adds	r5, r2, r3
 8019604:	42ac      	cmp	r4, r5
 8019606:	d101      	bne.n	801960c <__sfputs_r+0x12>
 8019608:	2000      	movs	r0, #0
 801960a:	e007      	b.n	801961c <__sfputs_r+0x22>
 801960c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019610:	463a      	mov	r2, r7
 8019612:	4630      	mov	r0, r6
 8019614:	f7ff ffda 	bl	80195cc <__sfputc_r>
 8019618:	1c43      	adds	r3, r0, #1
 801961a:	d1f3      	bne.n	8019604 <__sfputs_r+0xa>
 801961c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019620 <_vfiprintf_r>:
 8019620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019624:	460d      	mov	r5, r1
 8019626:	b09d      	sub	sp, #116	; 0x74
 8019628:	4614      	mov	r4, r2
 801962a:	4698      	mov	r8, r3
 801962c:	4606      	mov	r6, r0
 801962e:	b118      	cbz	r0, 8019638 <_vfiprintf_r+0x18>
 8019630:	6983      	ldr	r3, [r0, #24]
 8019632:	b90b      	cbnz	r3, 8019638 <_vfiprintf_r+0x18>
 8019634:	f7ff f94e 	bl	80188d4 <__sinit>
 8019638:	4b89      	ldr	r3, [pc, #548]	; (8019860 <_vfiprintf_r+0x240>)
 801963a:	429d      	cmp	r5, r3
 801963c:	d11b      	bne.n	8019676 <_vfiprintf_r+0x56>
 801963e:	6875      	ldr	r5, [r6, #4]
 8019640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019642:	07d9      	lsls	r1, r3, #31
 8019644:	d405      	bmi.n	8019652 <_vfiprintf_r+0x32>
 8019646:	89ab      	ldrh	r3, [r5, #12]
 8019648:	059a      	lsls	r2, r3, #22
 801964a:	d402      	bmi.n	8019652 <_vfiprintf_r+0x32>
 801964c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801964e:	f7ff fa04 	bl	8018a5a <__retarget_lock_acquire_recursive>
 8019652:	89ab      	ldrh	r3, [r5, #12]
 8019654:	071b      	lsls	r3, r3, #28
 8019656:	d501      	bpl.n	801965c <_vfiprintf_r+0x3c>
 8019658:	692b      	ldr	r3, [r5, #16]
 801965a:	b9eb      	cbnz	r3, 8019698 <_vfiprintf_r+0x78>
 801965c:	4629      	mov	r1, r5
 801965e:	4630      	mov	r0, r6
 8019660:	f7ff fd9a 	bl	8019198 <__swsetup_r>
 8019664:	b1c0      	cbz	r0, 8019698 <_vfiprintf_r+0x78>
 8019666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019668:	07dc      	lsls	r4, r3, #31
 801966a:	d50e      	bpl.n	801968a <_vfiprintf_r+0x6a>
 801966c:	f04f 30ff 	mov.w	r0, #4294967295
 8019670:	b01d      	add	sp, #116	; 0x74
 8019672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019676:	4b7b      	ldr	r3, [pc, #492]	; (8019864 <_vfiprintf_r+0x244>)
 8019678:	429d      	cmp	r5, r3
 801967a:	d101      	bne.n	8019680 <_vfiprintf_r+0x60>
 801967c:	68b5      	ldr	r5, [r6, #8]
 801967e:	e7df      	b.n	8019640 <_vfiprintf_r+0x20>
 8019680:	4b79      	ldr	r3, [pc, #484]	; (8019868 <_vfiprintf_r+0x248>)
 8019682:	429d      	cmp	r5, r3
 8019684:	bf08      	it	eq
 8019686:	68f5      	ldreq	r5, [r6, #12]
 8019688:	e7da      	b.n	8019640 <_vfiprintf_r+0x20>
 801968a:	89ab      	ldrh	r3, [r5, #12]
 801968c:	0598      	lsls	r0, r3, #22
 801968e:	d4ed      	bmi.n	801966c <_vfiprintf_r+0x4c>
 8019690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019692:	f7ff f9e3 	bl	8018a5c <__retarget_lock_release_recursive>
 8019696:	e7e9      	b.n	801966c <_vfiprintf_r+0x4c>
 8019698:	2300      	movs	r3, #0
 801969a:	9309      	str	r3, [sp, #36]	; 0x24
 801969c:	2320      	movs	r3, #32
 801969e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80196a6:	2330      	movs	r3, #48	; 0x30
 80196a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801986c <_vfiprintf_r+0x24c>
 80196ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80196b0:	f04f 0901 	mov.w	r9, #1
 80196b4:	4623      	mov	r3, r4
 80196b6:	469a      	mov	sl, r3
 80196b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196bc:	b10a      	cbz	r2, 80196c2 <_vfiprintf_r+0xa2>
 80196be:	2a25      	cmp	r2, #37	; 0x25
 80196c0:	d1f9      	bne.n	80196b6 <_vfiprintf_r+0x96>
 80196c2:	ebba 0b04 	subs.w	fp, sl, r4
 80196c6:	d00b      	beq.n	80196e0 <_vfiprintf_r+0xc0>
 80196c8:	465b      	mov	r3, fp
 80196ca:	4622      	mov	r2, r4
 80196cc:	4629      	mov	r1, r5
 80196ce:	4630      	mov	r0, r6
 80196d0:	f7ff ff93 	bl	80195fa <__sfputs_r>
 80196d4:	3001      	adds	r0, #1
 80196d6:	f000 80aa 	beq.w	801982e <_vfiprintf_r+0x20e>
 80196da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196dc:	445a      	add	r2, fp
 80196de:	9209      	str	r2, [sp, #36]	; 0x24
 80196e0:	f89a 3000 	ldrb.w	r3, [sl]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	f000 80a2 	beq.w	801982e <_vfiprintf_r+0x20e>
 80196ea:	2300      	movs	r3, #0
 80196ec:	f04f 32ff 	mov.w	r2, #4294967295
 80196f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196f4:	f10a 0a01 	add.w	sl, sl, #1
 80196f8:	9304      	str	r3, [sp, #16]
 80196fa:	9307      	str	r3, [sp, #28]
 80196fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019700:	931a      	str	r3, [sp, #104]	; 0x68
 8019702:	4654      	mov	r4, sl
 8019704:	2205      	movs	r2, #5
 8019706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801970a:	4858      	ldr	r0, [pc, #352]	; (801986c <_vfiprintf_r+0x24c>)
 801970c:	f7e6 fd68 	bl	80001e0 <memchr>
 8019710:	9a04      	ldr	r2, [sp, #16]
 8019712:	b9d8      	cbnz	r0, 801974c <_vfiprintf_r+0x12c>
 8019714:	06d1      	lsls	r1, r2, #27
 8019716:	bf44      	itt	mi
 8019718:	2320      	movmi	r3, #32
 801971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801971e:	0713      	lsls	r3, r2, #28
 8019720:	bf44      	itt	mi
 8019722:	232b      	movmi	r3, #43	; 0x2b
 8019724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019728:	f89a 3000 	ldrb.w	r3, [sl]
 801972c:	2b2a      	cmp	r3, #42	; 0x2a
 801972e:	d015      	beq.n	801975c <_vfiprintf_r+0x13c>
 8019730:	9a07      	ldr	r2, [sp, #28]
 8019732:	4654      	mov	r4, sl
 8019734:	2000      	movs	r0, #0
 8019736:	f04f 0c0a 	mov.w	ip, #10
 801973a:	4621      	mov	r1, r4
 801973c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019740:	3b30      	subs	r3, #48	; 0x30
 8019742:	2b09      	cmp	r3, #9
 8019744:	d94e      	bls.n	80197e4 <_vfiprintf_r+0x1c4>
 8019746:	b1b0      	cbz	r0, 8019776 <_vfiprintf_r+0x156>
 8019748:	9207      	str	r2, [sp, #28]
 801974a:	e014      	b.n	8019776 <_vfiprintf_r+0x156>
 801974c:	eba0 0308 	sub.w	r3, r0, r8
 8019750:	fa09 f303 	lsl.w	r3, r9, r3
 8019754:	4313      	orrs	r3, r2
 8019756:	9304      	str	r3, [sp, #16]
 8019758:	46a2      	mov	sl, r4
 801975a:	e7d2      	b.n	8019702 <_vfiprintf_r+0xe2>
 801975c:	9b03      	ldr	r3, [sp, #12]
 801975e:	1d19      	adds	r1, r3, #4
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	9103      	str	r1, [sp, #12]
 8019764:	2b00      	cmp	r3, #0
 8019766:	bfbb      	ittet	lt
 8019768:	425b      	neglt	r3, r3
 801976a:	f042 0202 	orrlt.w	r2, r2, #2
 801976e:	9307      	strge	r3, [sp, #28]
 8019770:	9307      	strlt	r3, [sp, #28]
 8019772:	bfb8      	it	lt
 8019774:	9204      	strlt	r2, [sp, #16]
 8019776:	7823      	ldrb	r3, [r4, #0]
 8019778:	2b2e      	cmp	r3, #46	; 0x2e
 801977a:	d10c      	bne.n	8019796 <_vfiprintf_r+0x176>
 801977c:	7863      	ldrb	r3, [r4, #1]
 801977e:	2b2a      	cmp	r3, #42	; 0x2a
 8019780:	d135      	bne.n	80197ee <_vfiprintf_r+0x1ce>
 8019782:	9b03      	ldr	r3, [sp, #12]
 8019784:	1d1a      	adds	r2, r3, #4
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	9203      	str	r2, [sp, #12]
 801978a:	2b00      	cmp	r3, #0
 801978c:	bfb8      	it	lt
 801978e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019792:	3402      	adds	r4, #2
 8019794:	9305      	str	r3, [sp, #20]
 8019796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801987c <_vfiprintf_r+0x25c>
 801979a:	7821      	ldrb	r1, [r4, #0]
 801979c:	2203      	movs	r2, #3
 801979e:	4650      	mov	r0, sl
 80197a0:	f7e6 fd1e 	bl	80001e0 <memchr>
 80197a4:	b140      	cbz	r0, 80197b8 <_vfiprintf_r+0x198>
 80197a6:	2340      	movs	r3, #64	; 0x40
 80197a8:	eba0 000a 	sub.w	r0, r0, sl
 80197ac:	fa03 f000 	lsl.w	r0, r3, r0
 80197b0:	9b04      	ldr	r3, [sp, #16]
 80197b2:	4303      	orrs	r3, r0
 80197b4:	3401      	adds	r4, #1
 80197b6:	9304      	str	r3, [sp, #16]
 80197b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197bc:	482c      	ldr	r0, [pc, #176]	; (8019870 <_vfiprintf_r+0x250>)
 80197be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80197c2:	2206      	movs	r2, #6
 80197c4:	f7e6 fd0c 	bl	80001e0 <memchr>
 80197c8:	2800      	cmp	r0, #0
 80197ca:	d03f      	beq.n	801984c <_vfiprintf_r+0x22c>
 80197cc:	4b29      	ldr	r3, [pc, #164]	; (8019874 <_vfiprintf_r+0x254>)
 80197ce:	bb1b      	cbnz	r3, 8019818 <_vfiprintf_r+0x1f8>
 80197d0:	9b03      	ldr	r3, [sp, #12]
 80197d2:	3307      	adds	r3, #7
 80197d4:	f023 0307 	bic.w	r3, r3, #7
 80197d8:	3308      	adds	r3, #8
 80197da:	9303      	str	r3, [sp, #12]
 80197dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197de:	443b      	add	r3, r7
 80197e0:	9309      	str	r3, [sp, #36]	; 0x24
 80197e2:	e767      	b.n	80196b4 <_vfiprintf_r+0x94>
 80197e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80197e8:	460c      	mov	r4, r1
 80197ea:	2001      	movs	r0, #1
 80197ec:	e7a5      	b.n	801973a <_vfiprintf_r+0x11a>
 80197ee:	2300      	movs	r3, #0
 80197f0:	3401      	adds	r4, #1
 80197f2:	9305      	str	r3, [sp, #20]
 80197f4:	4619      	mov	r1, r3
 80197f6:	f04f 0c0a 	mov.w	ip, #10
 80197fa:	4620      	mov	r0, r4
 80197fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019800:	3a30      	subs	r2, #48	; 0x30
 8019802:	2a09      	cmp	r2, #9
 8019804:	d903      	bls.n	801980e <_vfiprintf_r+0x1ee>
 8019806:	2b00      	cmp	r3, #0
 8019808:	d0c5      	beq.n	8019796 <_vfiprintf_r+0x176>
 801980a:	9105      	str	r1, [sp, #20]
 801980c:	e7c3      	b.n	8019796 <_vfiprintf_r+0x176>
 801980e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019812:	4604      	mov	r4, r0
 8019814:	2301      	movs	r3, #1
 8019816:	e7f0      	b.n	80197fa <_vfiprintf_r+0x1da>
 8019818:	ab03      	add	r3, sp, #12
 801981a:	9300      	str	r3, [sp, #0]
 801981c:	462a      	mov	r2, r5
 801981e:	4b16      	ldr	r3, [pc, #88]	; (8019878 <_vfiprintf_r+0x258>)
 8019820:	a904      	add	r1, sp, #16
 8019822:	4630      	mov	r0, r6
 8019824:	f3af 8000 	nop.w
 8019828:	4607      	mov	r7, r0
 801982a:	1c78      	adds	r0, r7, #1
 801982c:	d1d6      	bne.n	80197dc <_vfiprintf_r+0x1bc>
 801982e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019830:	07d9      	lsls	r1, r3, #31
 8019832:	d405      	bmi.n	8019840 <_vfiprintf_r+0x220>
 8019834:	89ab      	ldrh	r3, [r5, #12]
 8019836:	059a      	lsls	r2, r3, #22
 8019838:	d402      	bmi.n	8019840 <_vfiprintf_r+0x220>
 801983a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801983c:	f7ff f90e 	bl	8018a5c <__retarget_lock_release_recursive>
 8019840:	89ab      	ldrh	r3, [r5, #12]
 8019842:	065b      	lsls	r3, r3, #25
 8019844:	f53f af12 	bmi.w	801966c <_vfiprintf_r+0x4c>
 8019848:	9809      	ldr	r0, [sp, #36]	; 0x24
 801984a:	e711      	b.n	8019670 <_vfiprintf_r+0x50>
 801984c:	ab03      	add	r3, sp, #12
 801984e:	9300      	str	r3, [sp, #0]
 8019850:	462a      	mov	r2, r5
 8019852:	4b09      	ldr	r3, [pc, #36]	; (8019878 <_vfiprintf_r+0x258>)
 8019854:	a904      	add	r1, sp, #16
 8019856:	4630      	mov	r0, r6
 8019858:	f000 f880 	bl	801995c <_printf_i>
 801985c:	e7e4      	b.n	8019828 <_vfiprintf_r+0x208>
 801985e:	bf00      	nop
 8019860:	0801bd3c 	.word	0x0801bd3c
 8019864:	0801bd5c 	.word	0x0801bd5c
 8019868:	0801bd1c 	.word	0x0801bd1c
 801986c:	0801bd80 	.word	0x0801bd80
 8019870:	0801bd8a 	.word	0x0801bd8a
 8019874:	00000000 	.word	0x00000000
 8019878:	080195fb 	.word	0x080195fb
 801987c:	0801bd86 	.word	0x0801bd86

08019880 <_printf_common>:
 8019880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019884:	4616      	mov	r6, r2
 8019886:	4699      	mov	r9, r3
 8019888:	688a      	ldr	r2, [r1, #8]
 801988a:	690b      	ldr	r3, [r1, #16]
 801988c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019890:	4293      	cmp	r3, r2
 8019892:	bfb8      	it	lt
 8019894:	4613      	movlt	r3, r2
 8019896:	6033      	str	r3, [r6, #0]
 8019898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801989c:	4607      	mov	r7, r0
 801989e:	460c      	mov	r4, r1
 80198a0:	b10a      	cbz	r2, 80198a6 <_printf_common+0x26>
 80198a2:	3301      	adds	r3, #1
 80198a4:	6033      	str	r3, [r6, #0]
 80198a6:	6823      	ldr	r3, [r4, #0]
 80198a8:	0699      	lsls	r1, r3, #26
 80198aa:	bf42      	ittt	mi
 80198ac:	6833      	ldrmi	r3, [r6, #0]
 80198ae:	3302      	addmi	r3, #2
 80198b0:	6033      	strmi	r3, [r6, #0]
 80198b2:	6825      	ldr	r5, [r4, #0]
 80198b4:	f015 0506 	ands.w	r5, r5, #6
 80198b8:	d106      	bne.n	80198c8 <_printf_common+0x48>
 80198ba:	f104 0a19 	add.w	sl, r4, #25
 80198be:	68e3      	ldr	r3, [r4, #12]
 80198c0:	6832      	ldr	r2, [r6, #0]
 80198c2:	1a9b      	subs	r3, r3, r2
 80198c4:	42ab      	cmp	r3, r5
 80198c6:	dc26      	bgt.n	8019916 <_printf_common+0x96>
 80198c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80198cc:	1e13      	subs	r3, r2, #0
 80198ce:	6822      	ldr	r2, [r4, #0]
 80198d0:	bf18      	it	ne
 80198d2:	2301      	movne	r3, #1
 80198d4:	0692      	lsls	r2, r2, #26
 80198d6:	d42b      	bmi.n	8019930 <_printf_common+0xb0>
 80198d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80198dc:	4649      	mov	r1, r9
 80198de:	4638      	mov	r0, r7
 80198e0:	47c0      	blx	r8
 80198e2:	3001      	adds	r0, #1
 80198e4:	d01e      	beq.n	8019924 <_printf_common+0xa4>
 80198e6:	6823      	ldr	r3, [r4, #0]
 80198e8:	68e5      	ldr	r5, [r4, #12]
 80198ea:	6832      	ldr	r2, [r6, #0]
 80198ec:	f003 0306 	and.w	r3, r3, #6
 80198f0:	2b04      	cmp	r3, #4
 80198f2:	bf08      	it	eq
 80198f4:	1aad      	subeq	r5, r5, r2
 80198f6:	68a3      	ldr	r3, [r4, #8]
 80198f8:	6922      	ldr	r2, [r4, #16]
 80198fa:	bf0c      	ite	eq
 80198fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019900:	2500      	movne	r5, #0
 8019902:	4293      	cmp	r3, r2
 8019904:	bfc4      	itt	gt
 8019906:	1a9b      	subgt	r3, r3, r2
 8019908:	18ed      	addgt	r5, r5, r3
 801990a:	2600      	movs	r6, #0
 801990c:	341a      	adds	r4, #26
 801990e:	42b5      	cmp	r5, r6
 8019910:	d11a      	bne.n	8019948 <_printf_common+0xc8>
 8019912:	2000      	movs	r0, #0
 8019914:	e008      	b.n	8019928 <_printf_common+0xa8>
 8019916:	2301      	movs	r3, #1
 8019918:	4652      	mov	r2, sl
 801991a:	4649      	mov	r1, r9
 801991c:	4638      	mov	r0, r7
 801991e:	47c0      	blx	r8
 8019920:	3001      	adds	r0, #1
 8019922:	d103      	bne.n	801992c <_printf_common+0xac>
 8019924:	f04f 30ff 	mov.w	r0, #4294967295
 8019928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801992c:	3501      	adds	r5, #1
 801992e:	e7c6      	b.n	80198be <_printf_common+0x3e>
 8019930:	18e1      	adds	r1, r4, r3
 8019932:	1c5a      	adds	r2, r3, #1
 8019934:	2030      	movs	r0, #48	; 0x30
 8019936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801993a:	4422      	add	r2, r4
 801993c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019944:	3302      	adds	r3, #2
 8019946:	e7c7      	b.n	80198d8 <_printf_common+0x58>
 8019948:	2301      	movs	r3, #1
 801994a:	4622      	mov	r2, r4
 801994c:	4649      	mov	r1, r9
 801994e:	4638      	mov	r0, r7
 8019950:	47c0      	blx	r8
 8019952:	3001      	adds	r0, #1
 8019954:	d0e6      	beq.n	8019924 <_printf_common+0xa4>
 8019956:	3601      	adds	r6, #1
 8019958:	e7d9      	b.n	801990e <_printf_common+0x8e>
	...

0801995c <_printf_i>:
 801995c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019960:	7e0f      	ldrb	r7, [r1, #24]
 8019962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019964:	2f78      	cmp	r7, #120	; 0x78
 8019966:	4691      	mov	r9, r2
 8019968:	4680      	mov	r8, r0
 801996a:	460c      	mov	r4, r1
 801996c:	469a      	mov	sl, r3
 801996e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019972:	d807      	bhi.n	8019984 <_printf_i+0x28>
 8019974:	2f62      	cmp	r7, #98	; 0x62
 8019976:	d80a      	bhi.n	801998e <_printf_i+0x32>
 8019978:	2f00      	cmp	r7, #0
 801997a:	f000 80d8 	beq.w	8019b2e <_printf_i+0x1d2>
 801997e:	2f58      	cmp	r7, #88	; 0x58
 8019980:	f000 80a3 	beq.w	8019aca <_printf_i+0x16e>
 8019984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801998c:	e03a      	b.n	8019a04 <_printf_i+0xa8>
 801998e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019992:	2b15      	cmp	r3, #21
 8019994:	d8f6      	bhi.n	8019984 <_printf_i+0x28>
 8019996:	a101      	add	r1, pc, #4	; (adr r1, 801999c <_printf_i+0x40>)
 8019998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801999c:	080199f5 	.word	0x080199f5
 80199a0:	08019a09 	.word	0x08019a09
 80199a4:	08019985 	.word	0x08019985
 80199a8:	08019985 	.word	0x08019985
 80199ac:	08019985 	.word	0x08019985
 80199b0:	08019985 	.word	0x08019985
 80199b4:	08019a09 	.word	0x08019a09
 80199b8:	08019985 	.word	0x08019985
 80199bc:	08019985 	.word	0x08019985
 80199c0:	08019985 	.word	0x08019985
 80199c4:	08019985 	.word	0x08019985
 80199c8:	08019b15 	.word	0x08019b15
 80199cc:	08019a39 	.word	0x08019a39
 80199d0:	08019af7 	.word	0x08019af7
 80199d4:	08019985 	.word	0x08019985
 80199d8:	08019985 	.word	0x08019985
 80199dc:	08019b37 	.word	0x08019b37
 80199e0:	08019985 	.word	0x08019985
 80199e4:	08019a39 	.word	0x08019a39
 80199e8:	08019985 	.word	0x08019985
 80199ec:	08019985 	.word	0x08019985
 80199f0:	08019aff 	.word	0x08019aff
 80199f4:	682b      	ldr	r3, [r5, #0]
 80199f6:	1d1a      	adds	r2, r3, #4
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	602a      	str	r2, [r5, #0]
 80199fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a04:	2301      	movs	r3, #1
 8019a06:	e0a3      	b.n	8019b50 <_printf_i+0x1f4>
 8019a08:	6820      	ldr	r0, [r4, #0]
 8019a0a:	6829      	ldr	r1, [r5, #0]
 8019a0c:	0606      	lsls	r6, r0, #24
 8019a0e:	f101 0304 	add.w	r3, r1, #4
 8019a12:	d50a      	bpl.n	8019a2a <_printf_i+0xce>
 8019a14:	680e      	ldr	r6, [r1, #0]
 8019a16:	602b      	str	r3, [r5, #0]
 8019a18:	2e00      	cmp	r6, #0
 8019a1a:	da03      	bge.n	8019a24 <_printf_i+0xc8>
 8019a1c:	232d      	movs	r3, #45	; 0x2d
 8019a1e:	4276      	negs	r6, r6
 8019a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a24:	485e      	ldr	r0, [pc, #376]	; (8019ba0 <_printf_i+0x244>)
 8019a26:	230a      	movs	r3, #10
 8019a28:	e019      	b.n	8019a5e <_printf_i+0x102>
 8019a2a:	680e      	ldr	r6, [r1, #0]
 8019a2c:	602b      	str	r3, [r5, #0]
 8019a2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019a32:	bf18      	it	ne
 8019a34:	b236      	sxthne	r6, r6
 8019a36:	e7ef      	b.n	8019a18 <_printf_i+0xbc>
 8019a38:	682b      	ldr	r3, [r5, #0]
 8019a3a:	6820      	ldr	r0, [r4, #0]
 8019a3c:	1d19      	adds	r1, r3, #4
 8019a3e:	6029      	str	r1, [r5, #0]
 8019a40:	0601      	lsls	r1, r0, #24
 8019a42:	d501      	bpl.n	8019a48 <_printf_i+0xec>
 8019a44:	681e      	ldr	r6, [r3, #0]
 8019a46:	e002      	b.n	8019a4e <_printf_i+0xf2>
 8019a48:	0646      	lsls	r6, r0, #25
 8019a4a:	d5fb      	bpl.n	8019a44 <_printf_i+0xe8>
 8019a4c:	881e      	ldrh	r6, [r3, #0]
 8019a4e:	4854      	ldr	r0, [pc, #336]	; (8019ba0 <_printf_i+0x244>)
 8019a50:	2f6f      	cmp	r7, #111	; 0x6f
 8019a52:	bf0c      	ite	eq
 8019a54:	2308      	moveq	r3, #8
 8019a56:	230a      	movne	r3, #10
 8019a58:	2100      	movs	r1, #0
 8019a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019a5e:	6865      	ldr	r5, [r4, #4]
 8019a60:	60a5      	str	r5, [r4, #8]
 8019a62:	2d00      	cmp	r5, #0
 8019a64:	bfa2      	ittt	ge
 8019a66:	6821      	ldrge	r1, [r4, #0]
 8019a68:	f021 0104 	bicge.w	r1, r1, #4
 8019a6c:	6021      	strge	r1, [r4, #0]
 8019a6e:	b90e      	cbnz	r6, 8019a74 <_printf_i+0x118>
 8019a70:	2d00      	cmp	r5, #0
 8019a72:	d04d      	beq.n	8019b10 <_printf_i+0x1b4>
 8019a74:	4615      	mov	r5, r2
 8019a76:	fbb6 f1f3 	udiv	r1, r6, r3
 8019a7a:	fb03 6711 	mls	r7, r3, r1, r6
 8019a7e:	5dc7      	ldrb	r7, [r0, r7]
 8019a80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019a84:	4637      	mov	r7, r6
 8019a86:	42bb      	cmp	r3, r7
 8019a88:	460e      	mov	r6, r1
 8019a8a:	d9f4      	bls.n	8019a76 <_printf_i+0x11a>
 8019a8c:	2b08      	cmp	r3, #8
 8019a8e:	d10b      	bne.n	8019aa8 <_printf_i+0x14c>
 8019a90:	6823      	ldr	r3, [r4, #0]
 8019a92:	07de      	lsls	r6, r3, #31
 8019a94:	d508      	bpl.n	8019aa8 <_printf_i+0x14c>
 8019a96:	6923      	ldr	r3, [r4, #16]
 8019a98:	6861      	ldr	r1, [r4, #4]
 8019a9a:	4299      	cmp	r1, r3
 8019a9c:	bfde      	ittt	le
 8019a9e:	2330      	movle	r3, #48	; 0x30
 8019aa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019aa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019aa8:	1b52      	subs	r2, r2, r5
 8019aaa:	6122      	str	r2, [r4, #16]
 8019aac:	f8cd a000 	str.w	sl, [sp]
 8019ab0:	464b      	mov	r3, r9
 8019ab2:	aa03      	add	r2, sp, #12
 8019ab4:	4621      	mov	r1, r4
 8019ab6:	4640      	mov	r0, r8
 8019ab8:	f7ff fee2 	bl	8019880 <_printf_common>
 8019abc:	3001      	adds	r0, #1
 8019abe:	d14c      	bne.n	8019b5a <_printf_i+0x1fe>
 8019ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ac4:	b004      	add	sp, #16
 8019ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aca:	4835      	ldr	r0, [pc, #212]	; (8019ba0 <_printf_i+0x244>)
 8019acc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019ad0:	6829      	ldr	r1, [r5, #0]
 8019ad2:	6823      	ldr	r3, [r4, #0]
 8019ad4:	f851 6b04 	ldr.w	r6, [r1], #4
 8019ad8:	6029      	str	r1, [r5, #0]
 8019ada:	061d      	lsls	r5, r3, #24
 8019adc:	d514      	bpl.n	8019b08 <_printf_i+0x1ac>
 8019ade:	07df      	lsls	r7, r3, #31
 8019ae0:	bf44      	itt	mi
 8019ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8019ae6:	6023      	strmi	r3, [r4, #0]
 8019ae8:	b91e      	cbnz	r6, 8019af2 <_printf_i+0x196>
 8019aea:	6823      	ldr	r3, [r4, #0]
 8019aec:	f023 0320 	bic.w	r3, r3, #32
 8019af0:	6023      	str	r3, [r4, #0]
 8019af2:	2310      	movs	r3, #16
 8019af4:	e7b0      	b.n	8019a58 <_printf_i+0xfc>
 8019af6:	6823      	ldr	r3, [r4, #0]
 8019af8:	f043 0320 	orr.w	r3, r3, #32
 8019afc:	6023      	str	r3, [r4, #0]
 8019afe:	2378      	movs	r3, #120	; 0x78
 8019b00:	4828      	ldr	r0, [pc, #160]	; (8019ba4 <_printf_i+0x248>)
 8019b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b06:	e7e3      	b.n	8019ad0 <_printf_i+0x174>
 8019b08:	0659      	lsls	r1, r3, #25
 8019b0a:	bf48      	it	mi
 8019b0c:	b2b6      	uxthmi	r6, r6
 8019b0e:	e7e6      	b.n	8019ade <_printf_i+0x182>
 8019b10:	4615      	mov	r5, r2
 8019b12:	e7bb      	b.n	8019a8c <_printf_i+0x130>
 8019b14:	682b      	ldr	r3, [r5, #0]
 8019b16:	6826      	ldr	r6, [r4, #0]
 8019b18:	6961      	ldr	r1, [r4, #20]
 8019b1a:	1d18      	adds	r0, r3, #4
 8019b1c:	6028      	str	r0, [r5, #0]
 8019b1e:	0635      	lsls	r5, r6, #24
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	d501      	bpl.n	8019b28 <_printf_i+0x1cc>
 8019b24:	6019      	str	r1, [r3, #0]
 8019b26:	e002      	b.n	8019b2e <_printf_i+0x1d2>
 8019b28:	0670      	lsls	r0, r6, #25
 8019b2a:	d5fb      	bpl.n	8019b24 <_printf_i+0x1c8>
 8019b2c:	8019      	strh	r1, [r3, #0]
 8019b2e:	2300      	movs	r3, #0
 8019b30:	6123      	str	r3, [r4, #16]
 8019b32:	4615      	mov	r5, r2
 8019b34:	e7ba      	b.n	8019aac <_printf_i+0x150>
 8019b36:	682b      	ldr	r3, [r5, #0]
 8019b38:	1d1a      	adds	r2, r3, #4
 8019b3a:	602a      	str	r2, [r5, #0]
 8019b3c:	681d      	ldr	r5, [r3, #0]
 8019b3e:	6862      	ldr	r2, [r4, #4]
 8019b40:	2100      	movs	r1, #0
 8019b42:	4628      	mov	r0, r5
 8019b44:	f7e6 fb4c 	bl	80001e0 <memchr>
 8019b48:	b108      	cbz	r0, 8019b4e <_printf_i+0x1f2>
 8019b4a:	1b40      	subs	r0, r0, r5
 8019b4c:	6060      	str	r0, [r4, #4]
 8019b4e:	6863      	ldr	r3, [r4, #4]
 8019b50:	6123      	str	r3, [r4, #16]
 8019b52:	2300      	movs	r3, #0
 8019b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b58:	e7a8      	b.n	8019aac <_printf_i+0x150>
 8019b5a:	6923      	ldr	r3, [r4, #16]
 8019b5c:	462a      	mov	r2, r5
 8019b5e:	4649      	mov	r1, r9
 8019b60:	4640      	mov	r0, r8
 8019b62:	47d0      	blx	sl
 8019b64:	3001      	adds	r0, #1
 8019b66:	d0ab      	beq.n	8019ac0 <_printf_i+0x164>
 8019b68:	6823      	ldr	r3, [r4, #0]
 8019b6a:	079b      	lsls	r3, r3, #30
 8019b6c:	d413      	bmi.n	8019b96 <_printf_i+0x23a>
 8019b6e:	68e0      	ldr	r0, [r4, #12]
 8019b70:	9b03      	ldr	r3, [sp, #12]
 8019b72:	4298      	cmp	r0, r3
 8019b74:	bfb8      	it	lt
 8019b76:	4618      	movlt	r0, r3
 8019b78:	e7a4      	b.n	8019ac4 <_printf_i+0x168>
 8019b7a:	2301      	movs	r3, #1
 8019b7c:	4632      	mov	r2, r6
 8019b7e:	4649      	mov	r1, r9
 8019b80:	4640      	mov	r0, r8
 8019b82:	47d0      	blx	sl
 8019b84:	3001      	adds	r0, #1
 8019b86:	d09b      	beq.n	8019ac0 <_printf_i+0x164>
 8019b88:	3501      	adds	r5, #1
 8019b8a:	68e3      	ldr	r3, [r4, #12]
 8019b8c:	9903      	ldr	r1, [sp, #12]
 8019b8e:	1a5b      	subs	r3, r3, r1
 8019b90:	42ab      	cmp	r3, r5
 8019b92:	dcf2      	bgt.n	8019b7a <_printf_i+0x21e>
 8019b94:	e7eb      	b.n	8019b6e <_printf_i+0x212>
 8019b96:	2500      	movs	r5, #0
 8019b98:	f104 0619 	add.w	r6, r4, #25
 8019b9c:	e7f5      	b.n	8019b8a <_printf_i+0x22e>
 8019b9e:	bf00      	nop
 8019ba0:	0801bd91 	.word	0x0801bd91
 8019ba4:	0801bda2 	.word	0x0801bda2

08019ba8 <_read_r>:
 8019ba8:	b538      	push	{r3, r4, r5, lr}
 8019baa:	4d07      	ldr	r5, [pc, #28]	; (8019bc8 <_read_r+0x20>)
 8019bac:	4604      	mov	r4, r0
 8019bae:	4608      	mov	r0, r1
 8019bb0:	4611      	mov	r1, r2
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	602a      	str	r2, [r5, #0]
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	f7e8 fec2 	bl	8002940 <_read>
 8019bbc:	1c43      	adds	r3, r0, #1
 8019bbe:	d102      	bne.n	8019bc6 <_read_r+0x1e>
 8019bc0:	682b      	ldr	r3, [r5, #0]
 8019bc2:	b103      	cbz	r3, 8019bc6 <_read_r+0x1e>
 8019bc4:	6023      	str	r3, [r4, #0]
 8019bc6:	bd38      	pop	{r3, r4, r5, pc}
 8019bc8:	20003a08 	.word	0x20003a08

08019bcc <memmove>:
 8019bcc:	4288      	cmp	r0, r1
 8019bce:	b510      	push	{r4, lr}
 8019bd0:	eb01 0402 	add.w	r4, r1, r2
 8019bd4:	d902      	bls.n	8019bdc <memmove+0x10>
 8019bd6:	4284      	cmp	r4, r0
 8019bd8:	4623      	mov	r3, r4
 8019bda:	d807      	bhi.n	8019bec <memmove+0x20>
 8019bdc:	1e43      	subs	r3, r0, #1
 8019bde:	42a1      	cmp	r1, r4
 8019be0:	d008      	beq.n	8019bf4 <memmove+0x28>
 8019be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bea:	e7f8      	b.n	8019bde <memmove+0x12>
 8019bec:	4402      	add	r2, r0
 8019bee:	4601      	mov	r1, r0
 8019bf0:	428a      	cmp	r2, r1
 8019bf2:	d100      	bne.n	8019bf6 <memmove+0x2a>
 8019bf4:	bd10      	pop	{r4, pc}
 8019bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019bfe:	e7f7      	b.n	8019bf0 <memmove+0x24>

08019c00 <_realloc_r>:
 8019c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c04:	4680      	mov	r8, r0
 8019c06:	4614      	mov	r4, r2
 8019c08:	460e      	mov	r6, r1
 8019c0a:	b921      	cbnz	r1, 8019c16 <_realloc_r+0x16>
 8019c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c10:	4611      	mov	r1, r2
 8019c12:	f7ff b81b 	b.w	8018c4c <_malloc_r>
 8019c16:	b92a      	cbnz	r2, 8019c24 <_realloc_r+0x24>
 8019c18:	f7fe ffac 	bl	8018b74 <_free_r>
 8019c1c:	4625      	mov	r5, r4
 8019c1e:	4628      	mov	r0, r5
 8019c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c24:	f000 f81b 	bl	8019c5e <_malloc_usable_size_r>
 8019c28:	4284      	cmp	r4, r0
 8019c2a:	4607      	mov	r7, r0
 8019c2c:	d802      	bhi.n	8019c34 <_realloc_r+0x34>
 8019c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019c32:	d812      	bhi.n	8019c5a <_realloc_r+0x5a>
 8019c34:	4621      	mov	r1, r4
 8019c36:	4640      	mov	r0, r8
 8019c38:	f7ff f808 	bl	8018c4c <_malloc_r>
 8019c3c:	4605      	mov	r5, r0
 8019c3e:	2800      	cmp	r0, #0
 8019c40:	d0ed      	beq.n	8019c1e <_realloc_r+0x1e>
 8019c42:	42bc      	cmp	r4, r7
 8019c44:	4622      	mov	r2, r4
 8019c46:	4631      	mov	r1, r6
 8019c48:	bf28      	it	cs
 8019c4a:	463a      	movcs	r2, r7
 8019c4c:	f7fe ff7c 	bl	8018b48 <memcpy>
 8019c50:	4631      	mov	r1, r6
 8019c52:	4640      	mov	r0, r8
 8019c54:	f7fe ff8e 	bl	8018b74 <_free_r>
 8019c58:	e7e1      	b.n	8019c1e <_realloc_r+0x1e>
 8019c5a:	4635      	mov	r5, r6
 8019c5c:	e7df      	b.n	8019c1e <_realloc_r+0x1e>

08019c5e <_malloc_usable_size_r>:
 8019c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c62:	1f18      	subs	r0, r3, #4
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	bfbc      	itt	lt
 8019c68:	580b      	ldrlt	r3, [r1, r0]
 8019c6a:	18c0      	addlt	r0, r0, r3
 8019c6c:	4770      	bx	lr
	...

08019c70 <cos>:
 8019c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c72:	ec53 2b10 	vmov	r2, r3, d0
 8019c76:	4826      	ldr	r0, [pc, #152]	; (8019d10 <cos+0xa0>)
 8019c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019c7c:	4281      	cmp	r1, r0
 8019c7e:	dc06      	bgt.n	8019c8e <cos+0x1e>
 8019c80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019d08 <cos+0x98>
 8019c84:	b005      	add	sp, #20
 8019c86:	f85d eb04 	ldr.w	lr, [sp], #4
 8019c8a:	f000 baa9 	b.w	801a1e0 <__kernel_cos>
 8019c8e:	4821      	ldr	r0, [pc, #132]	; (8019d14 <cos+0xa4>)
 8019c90:	4281      	cmp	r1, r0
 8019c92:	dd09      	ble.n	8019ca8 <cos+0x38>
 8019c94:	ee10 0a10 	vmov	r0, s0
 8019c98:	4619      	mov	r1, r3
 8019c9a:	f7e6 fb07 	bl	80002ac <__aeabi_dsub>
 8019c9e:	ec41 0b10 	vmov	d0, r0, r1
 8019ca2:	b005      	add	sp, #20
 8019ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ca8:	4668      	mov	r0, sp
 8019caa:	f000 f88d 	bl	8019dc8 <__ieee754_rem_pio2>
 8019cae:	f000 0003 	and.w	r0, r0, #3
 8019cb2:	2801      	cmp	r0, #1
 8019cb4:	d00b      	beq.n	8019cce <cos+0x5e>
 8019cb6:	2802      	cmp	r0, #2
 8019cb8:	d016      	beq.n	8019ce8 <cos+0x78>
 8019cba:	b9e0      	cbnz	r0, 8019cf6 <cos+0x86>
 8019cbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019cc0:	ed9d 0b00 	vldr	d0, [sp]
 8019cc4:	f000 fa8c 	bl	801a1e0 <__kernel_cos>
 8019cc8:	ec51 0b10 	vmov	r0, r1, d0
 8019ccc:	e7e7      	b.n	8019c9e <cos+0x2e>
 8019cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019cd2:	ed9d 0b00 	vldr	d0, [sp]
 8019cd6:	f000 fe9b 	bl	801aa10 <__kernel_sin>
 8019cda:	ec53 2b10 	vmov	r2, r3, d0
 8019cde:	ee10 0a10 	vmov	r0, s0
 8019ce2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019ce6:	e7da      	b.n	8019c9e <cos+0x2e>
 8019ce8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019cec:	ed9d 0b00 	vldr	d0, [sp]
 8019cf0:	f000 fa76 	bl	801a1e0 <__kernel_cos>
 8019cf4:	e7f1      	b.n	8019cda <cos+0x6a>
 8019cf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019cfa:	ed9d 0b00 	vldr	d0, [sp]
 8019cfe:	2001      	movs	r0, #1
 8019d00:	f000 fe86 	bl	801aa10 <__kernel_sin>
 8019d04:	e7e0      	b.n	8019cc8 <cos+0x58>
 8019d06:	bf00      	nop
	...
 8019d10:	3fe921fb 	.word	0x3fe921fb
 8019d14:	7fefffff 	.word	0x7fefffff

08019d18 <sin>:
 8019d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d1a:	ec53 2b10 	vmov	r2, r3, d0
 8019d1e:	4828      	ldr	r0, [pc, #160]	; (8019dc0 <sin+0xa8>)
 8019d20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019d24:	4281      	cmp	r1, r0
 8019d26:	dc07      	bgt.n	8019d38 <sin+0x20>
 8019d28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019db8 <sin+0xa0>
 8019d2c:	2000      	movs	r0, #0
 8019d2e:	b005      	add	sp, #20
 8019d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d34:	f000 be6c 	b.w	801aa10 <__kernel_sin>
 8019d38:	4822      	ldr	r0, [pc, #136]	; (8019dc4 <sin+0xac>)
 8019d3a:	4281      	cmp	r1, r0
 8019d3c:	dd09      	ble.n	8019d52 <sin+0x3a>
 8019d3e:	ee10 0a10 	vmov	r0, s0
 8019d42:	4619      	mov	r1, r3
 8019d44:	f7e6 fab2 	bl	80002ac <__aeabi_dsub>
 8019d48:	ec41 0b10 	vmov	d0, r0, r1
 8019d4c:	b005      	add	sp, #20
 8019d4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d52:	4668      	mov	r0, sp
 8019d54:	f000 f838 	bl	8019dc8 <__ieee754_rem_pio2>
 8019d58:	f000 0003 	and.w	r0, r0, #3
 8019d5c:	2801      	cmp	r0, #1
 8019d5e:	d00c      	beq.n	8019d7a <sin+0x62>
 8019d60:	2802      	cmp	r0, #2
 8019d62:	d011      	beq.n	8019d88 <sin+0x70>
 8019d64:	b9f0      	cbnz	r0, 8019da4 <sin+0x8c>
 8019d66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d6a:	ed9d 0b00 	vldr	d0, [sp]
 8019d6e:	2001      	movs	r0, #1
 8019d70:	f000 fe4e 	bl	801aa10 <__kernel_sin>
 8019d74:	ec51 0b10 	vmov	r0, r1, d0
 8019d78:	e7e6      	b.n	8019d48 <sin+0x30>
 8019d7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d7e:	ed9d 0b00 	vldr	d0, [sp]
 8019d82:	f000 fa2d 	bl	801a1e0 <__kernel_cos>
 8019d86:	e7f5      	b.n	8019d74 <sin+0x5c>
 8019d88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d8c:	ed9d 0b00 	vldr	d0, [sp]
 8019d90:	2001      	movs	r0, #1
 8019d92:	f000 fe3d 	bl	801aa10 <__kernel_sin>
 8019d96:	ec53 2b10 	vmov	r2, r3, d0
 8019d9a:	ee10 0a10 	vmov	r0, s0
 8019d9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019da2:	e7d1      	b.n	8019d48 <sin+0x30>
 8019da4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019da8:	ed9d 0b00 	vldr	d0, [sp]
 8019dac:	f000 fa18 	bl	801a1e0 <__kernel_cos>
 8019db0:	e7f1      	b.n	8019d96 <sin+0x7e>
 8019db2:	bf00      	nop
 8019db4:	f3af 8000 	nop.w
	...
 8019dc0:	3fe921fb 	.word	0x3fe921fb
 8019dc4:	7fefffff 	.word	0x7fefffff

08019dc8 <__ieee754_rem_pio2>:
 8019dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dcc:	ed2d 8b02 	vpush	{d8}
 8019dd0:	ec55 4b10 	vmov	r4, r5, d0
 8019dd4:	4bca      	ldr	r3, [pc, #808]	; (801a100 <__ieee754_rem_pio2+0x338>)
 8019dd6:	b08b      	sub	sp, #44	; 0x2c
 8019dd8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8019ddc:	4598      	cmp	r8, r3
 8019dde:	4682      	mov	sl, r0
 8019de0:	9502      	str	r5, [sp, #8]
 8019de2:	dc08      	bgt.n	8019df6 <__ieee754_rem_pio2+0x2e>
 8019de4:	2200      	movs	r2, #0
 8019de6:	2300      	movs	r3, #0
 8019de8:	ed80 0b00 	vstr	d0, [r0]
 8019dec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019df0:	f04f 0b00 	mov.w	fp, #0
 8019df4:	e028      	b.n	8019e48 <__ieee754_rem_pio2+0x80>
 8019df6:	4bc3      	ldr	r3, [pc, #780]	; (801a104 <__ieee754_rem_pio2+0x33c>)
 8019df8:	4598      	cmp	r8, r3
 8019dfa:	dc78      	bgt.n	8019eee <__ieee754_rem_pio2+0x126>
 8019dfc:	9b02      	ldr	r3, [sp, #8]
 8019dfe:	4ec2      	ldr	r6, [pc, #776]	; (801a108 <__ieee754_rem_pio2+0x340>)
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	ee10 0a10 	vmov	r0, s0
 8019e06:	a3b0      	add	r3, pc, #704	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x300>)
 8019e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e0c:	4629      	mov	r1, r5
 8019e0e:	dd39      	ble.n	8019e84 <__ieee754_rem_pio2+0xbc>
 8019e10:	f7e6 fa4c 	bl	80002ac <__aeabi_dsub>
 8019e14:	45b0      	cmp	r8, r6
 8019e16:	4604      	mov	r4, r0
 8019e18:	460d      	mov	r5, r1
 8019e1a:	d01b      	beq.n	8019e54 <__ieee754_rem_pio2+0x8c>
 8019e1c:	a3ac      	add	r3, pc, #688	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x308>)
 8019e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e22:	f7e6 fa43 	bl	80002ac <__aeabi_dsub>
 8019e26:	4602      	mov	r2, r0
 8019e28:	460b      	mov	r3, r1
 8019e2a:	e9ca 2300 	strd	r2, r3, [sl]
 8019e2e:	4620      	mov	r0, r4
 8019e30:	4629      	mov	r1, r5
 8019e32:	f7e6 fa3b 	bl	80002ac <__aeabi_dsub>
 8019e36:	a3a6      	add	r3, pc, #664	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x308>)
 8019e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e3c:	f7e6 fa36 	bl	80002ac <__aeabi_dsub>
 8019e40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019e44:	f04f 0b01 	mov.w	fp, #1
 8019e48:	4658      	mov	r0, fp
 8019e4a:	b00b      	add	sp, #44	; 0x2c
 8019e4c:	ecbd 8b02 	vpop	{d8}
 8019e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e54:	a3a0      	add	r3, pc, #640	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x310>)
 8019e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e5a:	f7e6 fa27 	bl	80002ac <__aeabi_dsub>
 8019e5e:	a3a0      	add	r3, pc, #640	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x318>)
 8019e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e64:	4604      	mov	r4, r0
 8019e66:	460d      	mov	r5, r1
 8019e68:	f7e6 fa20 	bl	80002ac <__aeabi_dsub>
 8019e6c:	4602      	mov	r2, r0
 8019e6e:	460b      	mov	r3, r1
 8019e70:	e9ca 2300 	strd	r2, r3, [sl]
 8019e74:	4620      	mov	r0, r4
 8019e76:	4629      	mov	r1, r5
 8019e78:	f7e6 fa18 	bl	80002ac <__aeabi_dsub>
 8019e7c:	a398      	add	r3, pc, #608	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x318>)
 8019e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e82:	e7db      	b.n	8019e3c <__ieee754_rem_pio2+0x74>
 8019e84:	f7e6 fa14 	bl	80002b0 <__adddf3>
 8019e88:	45b0      	cmp	r8, r6
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	460d      	mov	r5, r1
 8019e8e:	d016      	beq.n	8019ebe <__ieee754_rem_pio2+0xf6>
 8019e90:	a38f      	add	r3, pc, #572	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x308>)
 8019e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e96:	f7e6 fa0b 	bl	80002b0 <__adddf3>
 8019e9a:	4602      	mov	r2, r0
 8019e9c:	460b      	mov	r3, r1
 8019e9e:	e9ca 2300 	strd	r2, r3, [sl]
 8019ea2:	4620      	mov	r0, r4
 8019ea4:	4629      	mov	r1, r5
 8019ea6:	f7e6 fa01 	bl	80002ac <__aeabi_dsub>
 8019eaa:	a389      	add	r3, pc, #548	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x308>)
 8019eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb0:	f7e6 f9fe 	bl	80002b0 <__adddf3>
 8019eb4:	f04f 3bff 	mov.w	fp, #4294967295
 8019eb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019ebc:	e7c4      	b.n	8019e48 <__ieee754_rem_pio2+0x80>
 8019ebe:	a386      	add	r3, pc, #536	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x310>)
 8019ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec4:	f7e6 f9f4 	bl	80002b0 <__adddf3>
 8019ec8:	a385      	add	r3, pc, #532	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x318>)
 8019eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ece:	4604      	mov	r4, r0
 8019ed0:	460d      	mov	r5, r1
 8019ed2:	f7e6 f9ed 	bl	80002b0 <__adddf3>
 8019ed6:	4602      	mov	r2, r0
 8019ed8:	460b      	mov	r3, r1
 8019eda:	e9ca 2300 	strd	r2, r3, [sl]
 8019ede:	4620      	mov	r0, r4
 8019ee0:	4629      	mov	r1, r5
 8019ee2:	f7e6 f9e3 	bl	80002ac <__aeabi_dsub>
 8019ee6:	a37e      	add	r3, pc, #504	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x318>)
 8019ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eec:	e7e0      	b.n	8019eb0 <__ieee754_rem_pio2+0xe8>
 8019eee:	4b87      	ldr	r3, [pc, #540]	; (801a10c <__ieee754_rem_pio2+0x344>)
 8019ef0:	4598      	cmp	r8, r3
 8019ef2:	f300 80d9 	bgt.w	801a0a8 <__ieee754_rem_pio2+0x2e0>
 8019ef6:	f000 fe49 	bl	801ab8c <fabs>
 8019efa:	ec55 4b10 	vmov	r4, r5, d0
 8019efe:	ee10 0a10 	vmov	r0, s0
 8019f02:	a379      	add	r3, pc, #484	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x320>)
 8019f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f08:	4629      	mov	r1, r5
 8019f0a:	f7e6 fb87 	bl	800061c <__aeabi_dmul>
 8019f0e:	4b80      	ldr	r3, [pc, #512]	; (801a110 <__ieee754_rem_pio2+0x348>)
 8019f10:	2200      	movs	r2, #0
 8019f12:	f7e6 f9cd 	bl	80002b0 <__adddf3>
 8019f16:	f7e6 fe1b 	bl	8000b50 <__aeabi_d2iz>
 8019f1a:	4683      	mov	fp, r0
 8019f1c:	f7e6 fb14 	bl	8000548 <__aeabi_i2d>
 8019f20:	4602      	mov	r2, r0
 8019f22:	460b      	mov	r3, r1
 8019f24:	ec43 2b18 	vmov	d8, r2, r3
 8019f28:	a367      	add	r3, pc, #412	; (adr r3, 801a0c8 <__ieee754_rem_pio2+0x300>)
 8019f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f2e:	f7e6 fb75 	bl	800061c <__aeabi_dmul>
 8019f32:	4602      	mov	r2, r0
 8019f34:	460b      	mov	r3, r1
 8019f36:	4620      	mov	r0, r4
 8019f38:	4629      	mov	r1, r5
 8019f3a:	f7e6 f9b7 	bl	80002ac <__aeabi_dsub>
 8019f3e:	a364      	add	r3, pc, #400	; (adr r3, 801a0d0 <__ieee754_rem_pio2+0x308>)
 8019f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f44:	4606      	mov	r6, r0
 8019f46:	460f      	mov	r7, r1
 8019f48:	ec51 0b18 	vmov	r0, r1, d8
 8019f4c:	f7e6 fb66 	bl	800061c <__aeabi_dmul>
 8019f50:	f1bb 0f1f 	cmp.w	fp, #31
 8019f54:	4604      	mov	r4, r0
 8019f56:	460d      	mov	r5, r1
 8019f58:	dc0d      	bgt.n	8019f76 <__ieee754_rem_pio2+0x1ae>
 8019f5a:	4b6e      	ldr	r3, [pc, #440]	; (801a114 <__ieee754_rem_pio2+0x34c>)
 8019f5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f64:	4543      	cmp	r3, r8
 8019f66:	d006      	beq.n	8019f76 <__ieee754_rem_pio2+0x1ae>
 8019f68:	4622      	mov	r2, r4
 8019f6a:	462b      	mov	r3, r5
 8019f6c:	4630      	mov	r0, r6
 8019f6e:	4639      	mov	r1, r7
 8019f70:	f7e6 f99c 	bl	80002ac <__aeabi_dsub>
 8019f74:	e00f      	b.n	8019f96 <__ieee754_rem_pio2+0x1ce>
 8019f76:	462b      	mov	r3, r5
 8019f78:	4622      	mov	r2, r4
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	4639      	mov	r1, r7
 8019f7e:	f7e6 f995 	bl	80002ac <__aeabi_dsub>
 8019f82:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019f86:	9303      	str	r3, [sp, #12]
 8019f88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019f8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019f90:	f1b8 0f10 	cmp.w	r8, #16
 8019f94:	dc02      	bgt.n	8019f9c <__ieee754_rem_pio2+0x1d4>
 8019f96:	e9ca 0100 	strd	r0, r1, [sl]
 8019f9a:	e039      	b.n	801a010 <__ieee754_rem_pio2+0x248>
 8019f9c:	a34e      	add	r3, pc, #312	; (adr r3, 801a0d8 <__ieee754_rem_pio2+0x310>)
 8019f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa2:	ec51 0b18 	vmov	r0, r1, d8
 8019fa6:	f7e6 fb39 	bl	800061c <__aeabi_dmul>
 8019faa:	4604      	mov	r4, r0
 8019fac:	460d      	mov	r5, r1
 8019fae:	4602      	mov	r2, r0
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	4630      	mov	r0, r6
 8019fb4:	4639      	mov	r1, r7
 8019fb6:	f7e6 f979 	bl	80002ac <__aeabi_dsub>
 8019fba:	4602      	mov	r2, r0
 8019fbc:	460b      	mov	r3, r1
 8019fbe:	4680      	mov	r8, r0
 8019fc0:	4689      	mov	r9, r1
 8019fc2:	4630      	mov	r0, r6
 8019fc4:	4639      	mov	r1, r7
 8019fc6:	f7e6 f971 	bl	80002ac <__aeabi_dsub>
 8019fca:	4622      	mov	r2, r4
 8019fcc:	462b      	mov	r3, r5
 8019fce:	f7e6 f96d 	bl	80002ac <__aeabi_dsub>
 8019fd2:	a343      	add	r3, pc, #268	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x318>)
 8019fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fd8:	4604      	mov	r4, r0
 8019fda:	460d      	mov	r5, r1
 8019fdc:	ec51 0b18 	vmov	r0, r1, d8
 8019fe0:	f7e6 fb1c 	bl	800061c <__aeabi_dmul>
 8019fe4:	4622      	mov	r2, r4
 8019fe6:	462b      	mov	r3, r5
 8019fe8:	f7e6 f960 	bl	80002ac <__aeabi_dsub>
 8019fec:	4602      	mov	r2, r0
 8019fee:	460b      	mov	r3, r1
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	460d      	mov	r5, r1
 8019ff4:	4640      	mov	r0, r8
 8019ff6:	4649      	mov	r1, r9
 8019ff8:	f7e6 f958 	bl	80002ac <__aeabi_dsub>
 8019ffc:	9a03      	ldr	r2, [sp, #12]
 8019ffe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a002:	1ad3      	subs	r3, r2, r3
 801a004:	2b31      	cmp	r3, #49	; 0x31
 801a006:	dc24      	bgt.n	801a052 <__ieee754_rem_pio2+0x28a>
 801a008:	e9ca 0100 	strd	r0, r1, [sl]
 801a00c:	4646      	mov	r6, r8
 801a00e:	464f      	mov	r7, r9
 801a010:	e9da 8900 	ldrd	r8, r9, [sl]
 801a014:	4630      	mov	r0, r6
 801a016:	4642      	mov	r2, r8
 801a018:	464b      	mov	r3, r9
 801a01a:	4639      	mov	r1, r7
 801a01c:	f7e6 f946 	bl	80002ac <__aeabi_dsub>
 801a020:	462b      	mov	r3, r5
 801a022:	4622      	mov	r2, r4
 801a024:	f7e6 f942 	bl	80002ac <__aeabi_dsub>
 801a028:	9b02      	ldr	r3, [sp, #8]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a030:	f6bf af0a 	bge.w	8019e48 <__ieee754_rem_pio2+0x80>
 801a034:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a038:	f8ca 3004 	str.w	r3, [sl, #4]
 801a03c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a040:	f8ca 8000 	str.w	r8, [sl]
 801a044:	f8ca 0008 	str.w	r0, [sl, #8]
 801a048:	f8ca 300c 	str.w	r3, [sl, #12]
 801a04c:	f1cb 0b00 	rsb	fp, fp, #0
 801a050:	e6fa      	b.n	8019e48 <__ieee754_rem_pio2+0x80>
 801a052:	a327      	add	r3, pc, #156	; (adr r3, 801a0f0 <__ieee754_rem_pio2+0x328>)
 801a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a058:	ec51 0b18 	vmov	r0, r1, d8
 801a05c:	f7e6 fade 	bl	800061c <__aeabi_dmul>
 801a060:	4604      	mov	r4, r0
 801a062:	460d      	mov	r5, r1
 801a064:	4602      	mov	r2, r0
 801a066:	460b      	mov	r3, r1
 801a068:	4640      	mov	r0, r8
 801a06a:	4649      	mov	r1, r9
 801a06c:	f7e6 f91e 	bl	80002ac <__aeabi_dsub>
 801a070:	4602      	mov	r2, r0
 801a072:	460b      	mov	r3, r1
 801a074:	4606      	mov	r6, r0
 801a076:	460f      	mov	r7, r1
 801a078:	4640      	mov	r0, r8
 801a07a:	4649      	mov	r1, r9
 801a07c:	f7e6 f916 	bl	80002ac <__aeabi_dsub>
 801a080:	4622      	mov	r2, r4
 801a082:	462b      	mov	r3, r5
 801a084:	f7e6 f912 	bl	80002ac <__aeabi_dsub>
 801a088:	a31b      	add	r3, pc, #108	; (adr r3, 801a0f8 <__ieee754_rem_pio2+0x330>)
 801a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a08e:	4604      	mov	r4, r0
 801a090:	460d      	mov	r5, r1
 801a092:	ec51 0b18 	vmov	r0, r1, d8
 801a096:	f7e6 fac1 	bl	800061c <__aeabi_dmul>
 801a09a:	4622      	mov	r2, r4
 801a09c:	462b      	mov	r3, r5
 801a09e:	f7e6 f905 	bl	80002ac <__aeabi_dsub>
 801a0a2:	4604      	mov	r4, r0
 801a0a4:	460d      	mov	r5, r1
 801a0a6:	e75f      	b.n	8019f68 <__ieee754_rem_pio2+0x1a0>
 801a0a8:	4b1b      	ldr	r3, [pc, #108]	; (801a118 <__ieee754_rem_pio2+0x350>)
 801a0aa:	4598      	cmp	r8, r3
 801a0ac:	dd36      	ble.n	801a11c <__ieee754_rem_pio2+0x354>
 801a0ae:	ee10 2a10 	vmov	r2, s0
 801a0b2:	462b      	mov	r3, r5
 801a0b4:	4620      	mov	r0, r4
 801a0b6:	4629      	mov	r1, r5
 801a0b8:	f7e6 f8f8 	bl	80002ac <__aeabi_dsub>
 801a0bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a0c0:	e9ca 0100 	strd	r0, r1, [sl]
 801a0c4:	e694      	b.n	8019df0 <__ieee754_rem_pio2+0x28>
 801a0c6:	bf00      	nop
 801a0c8:	54400000 	.word	0x54400000
 801a0cc:	3ff921fb 	.word	0x3ff921fb
 801a0d0:	1a626331 	.word	0x1a626331
 801a0d4:	3dd0b461 	.word	0x3dd0b461
 801a0d8:	1a600000 	.word	0x1a600000
 801a0dc:	3dd0b461 	.word	0x3dd0b461
 801a0e0:	2e037073 	.word	0x2e037073
 801a0e4:	3ba3198a 	.word	0x3ba3198a
 801a0e8:	6dc9c883 	.word	0x6dc9c883
 801a0ec:	3fe45f30 	.word	0x3fe45f30
 801a0f0:	2e000000 	.word	0x2e000000
 801a0f4:	3ba3198a 	.word	0x3ba3198a
 801a0f8:	252049c1 	.word	0x252049c1
 801a0fc:	397b839a 	.word	0x397b839a
 801a100:	3fe921fb 	.word	0x3fe921fb
 801a104:	4002d97b 	.word	0x4002d97b
 801a108:	3ff921fb 	.word	0x3ff921fb
 801a10c:	413921fb 	.word	0x413921fb
 801a110:	3fe00000 	.word	0x3fe00000
 801a114:	0801bdb4 	.word	0x0801bdb4
 801a118:	7fefffff 	.word	0x7fefffff
 801a11c:	ea4f 5428 	mov.w	r4, r8, asr #20
 801a120:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801a124:	ee10 0a10 	vmov	r0, s0
 801a128:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801a12c:	ee10 6a10 	vmov	r6, s0
 801a130:	460f      	mov	r7, r1
 801a132:	f7e6 fd0d 	bl	8000b50 <__aeabi_d2iz>
 801a136:	f7e6 fa07 	bl	8000548 <__aeabi_i2d>
 801a13a:	4602      	mov	r2, r0
 801a13c:	460b      	mov	r3, r1
 801a13e:	4630      	mov	r0, r6
 801a140:	4639      	mov	r1, r7
 801a142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a146:	f7e6 f8b1 	bl	80002ac <__aeabi_dsub>
 801a14a:	4b23      	ldr	r3, [pc, #140]	; (801a1d8 <__ieee754_rem_pio2+0x410>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	f7e6 fa65 	bl	800061c <__aeabi_dmul>
 801a152:	460f      	mov	r7, r1
 801a154:	4606      	mov	r6, r0
 801a156:	f7e6 fcfb 	bl	8000b50 <__aeabi_d2iz>
 801a15a:	f7e6 f9f5 	bl	8000548 <__aeabi_i2d>
 801a15e:	4602      	mov	r2, r0
 801a160:	460b      	mov	r3, r1
 801a162:	4630      	mov	r0, r6
 801a164:	4639      	mov	r1, r7
 801a166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a16a:	f7e6 f89f 	bl	80002ac <__aeabi_dsub>
 801a16e:	4b1a      	ldr	r3, [pc, #104]	; (801a1d8 <__ieee754_rem_pio2+0x410>)
 801a170:	2200      	movs	r2, #0
 801a172:	f7e6 fa53 	bl	800061c <__aeabi_dmul>
 801a176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a17a:	ad04      	add	r5, sp, #16
 801a17c:	f04f 0803 	mov.w	r8, #3
 801a180:	46a9      	mov	r9, r5
 801a182:	2600      	movs	r6, #0
 801a184:	2700      	movs	r7, #0
 801a186:	4632      	mov	r2, r6
 801a188:	463b      	mov	r3, r7
 801a18a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801a18e:	46c3      	mov	fp, r8
 801a190:	3d08      	subs	r5, #8
 801a192:	f108 38ff 	add.w	r8, r8, #4294967295
 801a196:	f7e6 fca9 	bl	8000aec <__aeabi_dcmpeq>
 801a19a:	2800      	cmp	r0, #0
 801a19c:	d1f3      	bne.n	801a186 <__ieee754_rem_pio2+0x3be>
 801a19e:	4b0f      	ldr	r3, [pc, #60]	; (801a1dc <__ieee754_rem_pio2+0x414>)
 801a1a0:	9301      	str	r3, [sp, #4]
 801a1a2:	2302      	movs	r3, #2
 801a1a4:	9300      	str	r3, [sp, #0]
 801a1a6:	4622      	mov	r2, r4
 801a1a8:	465b      	mov	r3, fp
 801a1aa:	4651      	mov	r1, sl
 801a1ac:	4648      	mov	r0, r9
 801a1ae:	f000 f8df 	bl	801a370 <__kernel_rem_pio2>
 801a1b2:	9b02      	ldr	r3, [sp, #8]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	4683      	mov	fp, r0
 801a1b8:	f6bf ae46 	bge.w	8019e48 <__ieee754_rem_pio2+0x80>
 801a1bc:	e9da 2100 	ldrd	r2, r1, [sl]
 801a1c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a1c4:	e9ca 2300 	strd	r2, r3, [sl]
 801a1c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801a1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a1d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801a1d4:	e73a      	b.n	801a04c <__ieee754_rem_pio2+0x284>
 801a1d6:	bf00      	nop
 801a1d8:	41700000 	.word	0x41700000
 801a1dc:	0801be34 	.word	0x0801be34

0801a1e0 <__kernel_cos>:
 801a1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1e4:	ec57 6b10 	vmov	r6, r7, d0
 801a1e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a1ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a1f0:	ed8d 1b00 	vstr	d1, [sp]
 801a1f4:	da07      	bge.n	801a206 <__kernel_cos+0x26>
 801a1f6:	ee10 0a10 	vmov	r0, s0
 801a1fa:	4639      	mov	r1, r7
 801a1fc:	f7e6 fca8 	bl	8000b50 <__aeabi_d2iz>
 801a200:	2800      	cmp	r0, #0
 801a202:	f000 8088 	beq.w	801a316 <__kernel_cos+0x136>
 801a206:	4632      	mov	r2, r6
 801a208:	463b      	mov	r3, r7
 801a20a:	4630      	mov	r0, r6
 801a20c:	4639      	mov	r1, r7
 801a20e:	f7e6 fa05 	bl	800061c <__aeabi_dmul>
 801a212:	4b51      	ldr	r3, [pc, #324]	; (801a358 <__kernel_cos+0x178>)
 801a214:	2200      	movs	r2, #0
 801a216:	4604      	mov	r4, r0
 801a218:	460d      	mov	r5, r1
 801a21a:	f7e6 f9ff 	bl	800061c <__aeabi_dmul>
 801a21e:	a340      	add	r3, pc, #256	; (adr r3, 801a320 <__kernel_cos+0x140>)
 801a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a224:	4682      	mov	sl, r0
 801a226:	468b      	mov	fp, r1
 801a228:	4620      	mov	r0, r4
 801a22a:	4629      	mov	r1, r5
 801a22c:	f7e6 f9f6 	bl	800061c <__aeabi_dmul>
 801a230:	a33d      	add	r3, pc, #244	; (adr r3, 801a328 <__kernel_cos+0x148>)
 801a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a236:	f7e6 f83b 	bl	80002b0 <__adddf3>
 801a23a:	4622      	mov	r2, r4
 801a23c:	462b      	mov	r3, r5
 801a23e:	f7e6 f9ed 	bl	800061c <__aeabi_dmul>
 801a242:	a33b      	add	r3, pc, #236	; (adr r3, 801a330 <__kernel_cos+0x150>)
 801a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a248:	f7e6 f830 	bl	80002ac <__aeabi_dsub>
 801a24c:	4622      	mov	r2, r4
 801a24e:	462b      	mov	r3, r5
 801a250:	f7e6 f9e4 	bl	800061c <__aeabi_dmul>
 801a254:	a338      	add	r3, pc, #224	; (adr r3, 801a338 <__kernel_cos+0x158>)
 801a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25a:	f7e6 f829 	bl	80002b0 <__adddf3>
 801a25e:	4622      	mov	r2, r4
 801a260:	462b      	mov	r3, r5
 801a262:	f7e6 f9db 	bl	800061c <__aeabi_dmul>
 801a266:	a336      	add	r3, pc, #216	; (adr r3, 801a340 <__kernel_cos+0x160>)
 801a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26c:	f7e6 f81e 	bl	80002ac <__aeabi_dsub>
 801a270:	4622      	mov	r2, r4
 801a272:	462b      	mov	r3, r5
 801a274:	f7e6 f9d2 	bl	800061c <__aeabi_dmul>
 801a278:	a333      	add	r3, pc, #204	; (adr r3, 801a348 <__kernel_cos+0x168>)
 801a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27e:	f7e6 f817 	bl	80002b0 <__adddf3>
 801a282:	4622      	mov	r2, r4
 801a284:	462b      	mov	r3, r5
 801a286:	f7e6 f9c9 	bl	800061c <__aeabi_dmul>
 801a28a:	4622      	mov	r2, r4
 801a28c:	462b      	mov	r3, r5
 801a28e:	f7e6 f9c5 	bl	800061c <__aeabi_dmul>
 801a292:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a296:	4604      	mov	r4, r0
 801a298:	460d      	mov	r5, r1
 801a29a:	4630      	mov	r0, r6
 801a29c:	4639      	mov	r1, r7
 801a29e:	f7e6 f9bd 	bl	800061c <__aeabi_dmul>
 801a2a2:	460b      	mov	r3, r1
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	4629      	mov	r1, r5
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	f7e5 ffff 	bl	80002ac <__aeabi_dsub>
 801a2ae:	4b2b      	ldr	r3, [pc, #172]	; (801a35c <__kernel_cos+0x17c>)
 801a2b0:	4598      	cmp	r8, r3
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	460f      	mov	r7, r1
 801a2b6:	dc10      	bgt.n	801a2da <__kernel_cos+0xfa>
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	4650      	mov	r0, sl
 801a2be:	4659      	mov	r1, fp
 801a2c0:	f7e5 fff4 	bl	80002ac <__aeabi_dsub>
 801a2c4:	460b      	mov	r3, r1
 801a2c6:	4926      	ldr	r1, [pc, #152]	; (801a360 <__kernel_cos+0x180>)
 801a2c8:	4602      	mov	r2, r0
 801a2ca:	2000      	movs	r0, #0
 801a2cc:	f7e5 ffee 	bl	80002ac <__aeabi_dsub>
 801a2d0:	ec41 0b10 	vmov	d0, r0, r1
 801a2d4:	b003      	add	sp, #12
 801a2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2da:	4b22      	ldr	r3, [pc, #136]	; (801a364 <__kernel_cos+0x184>)
 801a2dc:	4920      	ldr	r1, [pc, #128]	; (801a360 <__kernel_cos+0x180>)
 801a2de:	4598      	cmp	r8, r3
 801a2e0:	bfcc      	ite	gt
 801a2e2:	4d21      	ldrgt	r5, [pc, #132]	; (801a368 <__kernel_cos+0x188>)
 801a2e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a2e8:	2400      	movs	r4, #0
 801a2ea:	4622      	mov	r2, r4
 801a2ec:	462b      	mov	r3, r5
 801a2ee:	2000      	movs	r0, #0
 801a2f0:	f7e5 ffdc 	bl	80002ac <__aeabi_dsub>
 801a2f4:	4622      	mov	r2, r4
 801a2f6:	4680      	mov	r8, r0
 801a2f8:	4689      	mov	r9, r1
 801a2fa:	462b      	mov	r3, r5
 801a2fc:	4650      	mov	r0, sl
 801a2fe:	4659      	mov	r1, fp
 801a300:	f7e5 ffd4 	bl	80002ac <__aeabi_dsub>
 801a304:	4632      	mov	r2, r6
 801a306:	463b      	mov	r3, r7
 801a308:	f7e5 ffd0 	bl	80002ac <__aeabi_dsub>
 801a30c:	4602      	mov	r2, r0
 801a30e:	460b      	mov	r3, r1
 801a310:	4640      	mov	r0, r8
 801a312:	4649      	mov	r1, r9
 801a314:	e7da      	b.n	801a2cc <__kernel_cos+0xec>
 801a316:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801a350 <__kernel_cos+0x170>
 801a31a:	e7db      	b.n	801a2d4 <__kernel_cos+0xf4>
 801a31c:	f3af 8000 	nop.w
 801a320:	be8838d4 	.word	0xbe8838d4
 801a324:	bda8fae9 	.word	0xbda8fae9
 801a328:	bdb4b1c4 	.word	0xbdb4b1c4
 801a32c:	3e21ee9e 	.word	0x3e21ee9e
 801a330:	809c52ad 	.word	0x809c52ad
 801a334:	3e927e4f 	.word	0x3e927e4f
 801a338:	19cb1590 	.word	0x19cb1590
 801a33c:	3efa01a0 	.word	0x3efa01a0
 801a340:	16c15177 	.word	0x16c15177
 801a344:	3f56c16c 	.word	0x3f56c16c
 801a348:	5555554c 	.word	0x5555554c
 801a34c:	3fa55555 	.word	0x3fa55555
 801a350:	00000000 	.word	0x00000000
 801a354:	3ff00000 	.word	0x3ff00000
 801a358:	3fe00000 	.word	0x3fe00000
 801a35c:	3fd33332 	.word	0x3fd33332
 801a360:	3ff00000 	.word	0x3ff00000
 801a364:	3fe90000 	.word	0x3fe90000
 801a368:	3fd20000 	.word	0x3fd20000
 801a36c:	00000000 	.word	0x00000000

0801a370 <__kernel_rem_pio2>:
 801a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a374:	ed2d 8b02 	vpush	{d8}
 801a378:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a37c:	f112 0f14 	cmn.w	r2, #20
 801a380:	9308      	str	r3, [sp, #32]
 801a382:	9101      	str	r1, [sp, #4]
 801a384:	4bc4      	ldr	r3, [pc, #784]	; (801a698 <__kernel_rem_pio2+0x328>)
 801a386:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a388:	900b      	str	r0, [sp, #44]	; 0x2c
 801a38a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a38e:	9302      	str	r3, [sp, #8]
 801a390:	9b08      	ldr	r3, [sp, #32]
 801a392:	f103 33ff 	add.w	r3, r3, #4294967295
 801a396:	bfa8      	it	ge
 801a398:	1ed4      	subge	r4, r2, #3
 801a39a:	9306      	str	r3, [sp, #24]
 801a39c:	bfb2      	itee	lt
 801a39e:	2400      	movlt	r4, #0
 801a3a0:	2318      	movge	r3, #24
 801a3a2:	fb94 f4f3 	sdivge	r4, r4, r3
 801a3a6:	f06f 0317 	mvn.w	r3, #23
 801a3aa:	fb04 3303 	mla	r3, r4, r3, r3
 801a3ae:	eb03 0a02 	add.w	sl, r3, r2
 801a3b2:	9b02      	ldr	r3, [sp, #8]
 801a3b4:	9a06      	ldr	r2, [sp, #24]
 801a3b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801a688 <__kernel_rem_pio2+0x318>
 801a3ba:	eb03 0802 	add.w	r8, r3, r2
 801a3be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a3c0:	1aa7      	subs	r7, r4, r2
 801a3c2:	ae22      	add	r6, sp, #136	; 0x88
 801a3c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a3c8:	2500      	movs	r5, #0
 801a3ca:	4545      	cmp	r5, r8
 801a3cc:	dd13      	ble.n	801a3f6 <__kernel_rem_pio2+0x86>
 801a3ce:	9b08      	ldr	r3, [sp, #32]
 801a3d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801a688 <__kernel_rem_pio2+0x318>
 801a3d4:	aa22      	add	r2, sp, #136	; 0x88
 801a3d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a3da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a3de:	f04f 0800 	mov.w	r8, #0
 801a3e2:	9b02      	ldr	r3, [sp, #8]
 801a3e4:	4598      	cmp	r8, r3
 801a3e6:	dc2f      	bgt.n	801a448 <__kernel_rem_pio2+0xd8>
 801a3e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a3ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801a3f0:	462f      	mov	r7, r5
 801a3f2:	2600      	movs	r6, #0
 801a3f4:	e01b      	b.n	801a42e <__kernel_rem_pio2+0xbe>
 801a3f6:	42ef      	cmn	r7, r5
 801a3f8:	d407      	bmi.n	801a40a <__kernel_rem_pio2+0x9a>
 801a3fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a3fe:	f7e6 f8a3 	bl	8000548 <__aeabi_i2d>
 801a402:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a406:	3501      	adds	r5, #1
 801a408:	e7df      	b.n	801a3ca <__kernel_rem_pio2+0x5a>
 801a40a:	ec51 0b18 	vmov	r0, r1, d8
 801a40e:	e7f8      	b.n	801a402 <__kernel_rem_pio2+0x92>
 801a410:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a414:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a418:	f7e6 f900 	bl	800061c <__aeabi_dmul>
 801a41c:	4602      	mov	r2, r0
 801a41e:	460b      	mov	r3, r1
 801a420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a424:	f7e5 ff44 	bl	80002b0 <__adddf3>
 801a428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a42c:	3601      	adds	r6, #1
 801a42e:	9b06      	ldr	r3, [sp, #24]
 801a430:	429e      	cmp	r6, r3
 801a432:	f1a7 0708 	sub.w	r7, r7, #8
 801a436:	ddeb      	ble.n	801a410 <__kernel_rem_pio2+0xa0>
 801a438:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a43c:	f108 0801 	add.w	r8, r8, #1
 801a440:	ecab 7b02 	vstmia	fp!, {d7}
 801a444:	3508      	adds	r5, #8
 801a446:	e7cc      	b.n	801a3e2 <__kernel_rem_pio2+0x72>
 801a448:	9b02      	ldr	r3, [sp, #8]
 801a44a:	aa0e      	add	r2, sp, #56	; 0x38
 801a44c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a450:	930d      	str	r3, [sp, #52]	; 0x34
 801a452:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a454:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a458:	9c02      	ldr	r4, [sp, #8]
 801a45a:	930c      	str	r3, [sp, #48]	; 0x30
 801a45c:	00e3      	lsls	r3, r4, #3
 801a45e:	930a      	str	r3, [sp, #40]	; 0x28
 801a460:	ab9a      	add	r3, sp, #616	; 0x268
 801a462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a466:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801a46a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801a46e:	ab72      	add	r3, sp, #456	; 0x1c8
 801a470:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801a474:	46c3      	mov	fp, r8
 801a476:	46a1      	mov	r9, r4
 801a478:	f1b9 0f00 	cmp.w	r9, #0
 801a47c:	f1a5 0508 	sub.w	r5, r5, #8
 801a480:	dc77      	bgt.n	801a572 <__kernel_rem_pio2+0x202>
 801a482:	ec47 6b10 	vmov	d0, r6, r7
 801a486:	4650      	mov	r0, sl
 801a488:	f000 fc0a 	bl	801aca0 <scalbn>
 801a48c:	ec57 6b10 	vmov	r6, r7, d0
 801a490:	2200      	movs	r2, #0
 801a492:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a496:	ee10 0a10 	vmov	r0, s0
 801a49a:	4639      	mov	r1, r7
 801a49c:	f7e6 f8be 	bl	800061c <__aeabi_dmul>
 801a4a0:	ec41 0b10 	vmov	d0, r0, r1
 801a4a4:	f000 fb7c 	bl	801aba0 <floor>
 801a4a8:	4b7c      	ldr	r3, [pc, #496]	; (801a69c <__kernel_rem_pio2+0x32c>)
 801a4aa:	ec51 0b10 	vmov	r0, r1, d0
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	f7e6 f8b4 	bl	800061c <__aeabi_dmul>
 801a4b4:	4602      	mov	r2, r0
 801a4b6:	460b      	mov	r3, r1
 801a4b8:	4630      	mov	r0, r6
 801a4ba:	4639      	mov	r1, r7
 801a4bc:	f7e5 fef6 	bl	80002ac <__aeabi_dsub>
 801a4c0:	460f      	mov	r7, r1
 801a4c2:	4606      	mov	r6, r0
 801a4c4:	f7e6 fb44 	bl	8000b50 <__aeabi_d2iz>
 801a4c8:	9004      	str	r0, [sp, #16]
 801a4ca:	f7e6 f83d 	bl	8000548 <__aeabi_i2d>
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	460b      	mov	r3, r1
 801a4d2:	4630      	mov	r0, r6
 801a4d4:	4639      	mov	r1, r7
 801a4d6:	f7e5 fee9 	bl	80002ac <__aeabi_dsub>
 801a4da:	f1ba 0f00 	cmp.w	sl, #0
 801a4de:	4606      	mov	r6, r0
 801a4e0:	460f      	mov	r7, r1
 801a4e2:	dd6d      	ble.n	801a5c0 <__kernel_rem_pio2+0x250>
 801a4e4:	1e62      	subs	r2, r4, #1
 801a4e6:	ab0e      	add	r3, sp, #56	; 0x38
 801a4e8:	9d04      	ldr	r5, [sp, #16]
 801a4ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a4ee:	f1ca 0118 	rsb	r1, sl, #24
 801a4f2:	fa40 f301 	asr.w	r3, r0, r1
 801a4f6:	441d      	add	r5, r3
 801a4f8:	408b      	lsls	r3, r1
 801a4fa:	1ac0      	subs	r0, r0, r3
 801a4fc:	ab0e      	add	r3, sp, #56	; 0x38
 801a4fe:	9504      	str	r5, [sp, #16]
 801a500:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a504:	f1ca 0317 	rsb	r3, sl, #23
 801a508:	fa40 fb03 	asr.w	fp, r0, r3
 801a50c:	f1bb 0f00 	cmp.w	fp, #0
 801a510:	dd65      	ble.n	801a5de <__kernel_rem_pio2+0x26e>
 801a512:	9b04      	ldr	r3, [sp, #16]
 801a514:	2200      	movs	r2, #0
 801a516:	3301      	adds	r3, #1
 801a518:	9304      	str	r3, [sp, #16]
 801a51a:	4615      	mov	r5, r2
 801a51c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a520:	4294      	cmp	r4, r2
 801a522:	f300 809c 	bgt.w	801a65e <__kernel_rem_pio2+0x2ee>
 801a526:	f1ba 0f00 	cmp.w	sl, #0
 801a52a:	dd07      	ble.n	801a53c <__kernel_rem_pio2+0x1cc>
 801a52c:	f1ba 0f01 	cmp.w	sl, #1
 801a530:	f000 80c0 	beq.w	801a6b4 <__kernel_rem_pio2+0x344>
 801a534:	f1ba 0f02 	cmp.w	sl, #2
 801a538:	f000 80c6 	beq.w	801a6c8 <__kernel_rem_pio2+0x358>
 801a53c:	f1bb 0f02 	cmp.w	fp, #2
 801a540:	d14d      	bne.n	801a5de <__kernel_rem_pio2+0x26e>
 801a542:	4632      	mov	r2, r6
 801a544:	463b      	mov	r3, r7
 801a546:	4956      	ldr	r1, [pc, #344]	; (801a6a0 <__kernel_rem_pio2+0x330>)
 801a548:	2000      	movs	r0, #0
 801a54a:	f7e5 feaf 	bl	80002ac <__aeabi_dsub>
 801a54e:	4606      	mov	r6, r0
 801a550:	460f      	mov	r7, r1
 801a552:	2d00      	cmp	r5, #0
 801a554:	d043      	beq.n	801a5de <__kernel_rem_pio2+0x26e>
 801a556:	4650      	mov	r0, sl
 801a558:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801a690 <__kernel_rem_pio2+0x320>
 801a55c:	f000 fba0 	bl	801aca0 <scalbn>
 801a560:	4630      	mov	r0, r6
 801a562:	4639      	mov	r1, r7
 801a564:	ec53 2b10 	vmov	r2, r3, d0
 801a568:	f7e5 fea0 	bl	80002ac <__aeabi_dsub>
 801a56c:	4606      	mov	r6, r0
 801a56e:	460f      	mov	r7, r1
 801a570:	e035      	b.n	801a5de <__kernel_rem_pio2+0x26e>
 801a572:	4b4c      	ldr	r3, [pc, #304]	; (801a6a4 <__kernel_rem_pio2+0x334>)
 801a574:	2200      	movs	r2, #0
 801a576:	4630      	mov	r0, r6
 801a578:	4639      	mov	r1, r7
 801a57a:	f7e6 f84f 	bl	800061c <__aeabi_dmul>
 801a57e:	f7e6 fae7 	bl	8000b50 <__aeabi_d2iz>
 801a582:	f7e5 ffe1 	bl	8000548 <__aeabi_i2d>
 801a586:	4602      	mov	r2, r0
 801a588:	460b      	mov	r3, r1
 801a58a:	ec43 2b18 	vmov	d8, r2, r3
 801a58e:	4b46      	ldr	r3, [pc, #280]	; (801a6a8 <__kernel_rem_pio2+0x338>)
 801a590:	2200      	movs	r2, #0
 801a592:	f7e6 f843 	bl	800061c <__aeabi_dmul>
 801a596:	4602      	mov	r2, r0
 801a598:	460b      	mov	r3, r1
 801a59a:	4630      	mov	r0, r6
 801a59c:	4639      	mov	r1, r7
 801a59e:	f7e5 fe85 	bl	80002ac <__aeabi_dsub>
 801a5a2:	f7e6 fad5 	bl	8000b50 <__aeabi_d2iz>
 801a5a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a5aa:	f84b 0b04 	str.w	r0, [fp], #4
 801a5ae:	ec51 0b18 	vmov	r0, r1, d8
 801a5b2:	f7e5 fe7d 	bl	80002b0 <__adddf3>
 801a5b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801a5ba:	4606      	mov	r6, r0
 801a5bc:	460f      	mov	r7, r1
 801a5be:	e75b      	b.n	801a478 <__kernel_rem_pio2+0x108>
 801a5c0:	d106      	bne.n	801a5d0 <__kernel_rem_pio2+0x260>
 801a5c2:	1e63      	subs	r3, r4, #1
 801a5c4:	aa0e      	add	r2, sp, #56	; 0x38
 801a5c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a5ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801a5ce:	e79d      	b.n	801a50c <__kernel_rem_pio2+0x19c>
 801a5d0:	4b36      	ldr	r3, [pc, #216]	; (801a6ac <__kernel_rem_pio2+0x33c>)
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	f7e6 faa8 	bl	8000b28 <__aeabi_dcmpge>
 801a5d8:	2800      	cmp	r0, #0
 801a5da:	d13d      	bne.n	801a658 <__kernel_rem_pio2+0x2e8>
 801a5dc:	4683      	mov	fp, r0
 801a5de:	2200      	movs	r2, #0
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	4630      	mov	r0, r6
 801a5e4:	4639      	mov	r1, r7
 801a5e6:	f7e6 fa81 	bl	8000aec <__aeabi_dcmpeq>
 801a5ea:	2800      	cmp	r0, #0
 801a5ec:	f000 80c0 	beq.w	801a770 <__kernel_rem_pio2+0x400>
 801a5f0:	1e65      	subs	r5, r4, #1
 801a5f2:	462b      	mov	r3, r5
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	9902      	ldr	r1, [sp, #8]
 801a5f8:	428b      	cmp	r3, r1
 801a5fa:	da6c      	bge.n	801a6d6 <__kernel_rem_pio2+0x366>
 801a5fc:	2a00      	cmp	r2, #0
 801a5fe:	f000 8089 	beq.w	801a714 <__kernel_rem_pio2+0x3a4>
 801a602:	ab0e      	add	r3, sp, #56	; 0x38
 801a604:	f1aa 0a18 	sub.w	sl, sl, #24
 801a608:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	f000 80ad 	beq.w	801a76c <__kernel_rem_pio2+0x3fc>
 801a612:	4650      	mov	r0, sl
 801a614:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801a690 <__kernel_rem_pio2+0x320>
 801a618:	f000 fb42 	bl	801aca0 <scalbn>
 801a61c:	ab9a      	add	r3, sp, #616	; 0x268
 801a61e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a622:	ec57 6b10 	vmov	r6, r7, d0
 801a626:	00ec      	lsls	r4, r5, #3
 801a628:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801a62c:	46aa      	mov	sl, r5
 801a62e:	f1ba 0f00 	cmp.w	sl, #0
 801a632:	f280 80d6 	bge.w	801a7e2 <__kernel_rem_pio2+0x472>
 801a636:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801a688 <__kernel_rem_pio2+0x318>
 801a63a:	462e      	mov	r6, r5
 801a63c:	2e00      	cmp	r6, #0
 801a63e:	f2c0 8104 	blt.w	801a84a <__kernel_rem_pio2+0x4da>
 801a642:	ab72      	add	r3, sp, #456	; 0x1c8
 801a644:	ed8d 8b06 	vstr	d8, [sp, #24]
 801a648:	f8df a064 	ldr.w	sl, [pc, #100]	; 801a6b0 <__kernel_rem_pio2+0x340>
 801a64c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801a650:	f04f 0800 	mov.w	r8, #0
 801a654:	1baf      	subs	r7, r5, r6
 801a656:	e0ea      	b.n	801a82e <__kernel_rem_pio2+0x4be>
 801a658:	f04f 0b02 	mov.w	fp, #2
 801a65c:	e759      	b.n	801a512 <__kernel_rem_pio2+0x1a2>
 801a65e:	f8d8 3000 	ldr.w	r3, [r8]
 801a662:	b955      	cbnz	r5, 801a67a <__kernel_rem_pio2+0x30a>
 801a664:	b123      	cbz	r3, 801a670 <__kernel_rem_pio2+0x300>
 801a666:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a66a:	f8c8 3000 	str.w	r3, [r8]
 801a66e:	2301      	movs	r3, #1
 801a670:	3201      	adds	r2, #1
 801a672:	f108 0804 	add.w	r8, r8, #4
 801a676:	461d      	mov	r5, r3
 801a678:	e752      	b.n	801a520 <__kernel_rem_pio2+0x1b0>
 801a67a:	1acb      	subs	r3, r1, r3
 801a67c:	f8c8 3000 	str.w	r3, [r8]
 801a680:	462b      	mov	r3, r5
 801a682:	e7f5      	b.n	801a670 <__kernel_rem_pio2+0x300>
 801a684:	f3af 8000 	nop.w
	...
 801a694:	3ff00000 	.word	0x3ff00000
 801a698:	0801bf80 	.word	0x0801bf80
 801a69c:	40200000 	.word	0x40200000
 801a6a0:	3ff00000 	.word	0x3ff00000
 801a6a4:	3e700000 	.word	0x3e700000
 801a6a8:	41700000 	.word	0x41700000
 801a6ac:	3fe00000 	.word	0x3fe00000
 801a6b0:	0801bf40 	.word	0x0801bf40
 801a6b4:	1e62      	subs	r2, r4, #1
 801a6b6:	ab0e      	add	r3, sp, #56	; 0x38
 801a6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a6c0:	a90e      	add	r1, sp, #56	; 0x38
 801a6c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a6c6:	e739      	b.n	801a53c <__kernel_rem_pio2+0x1cc>
 801a6c8:	1e62      	subs	r2, r4, #1
 801a6ca:	ab0e      	add	r3, sp, #56	; 0x38
 801a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a6d4:	e7f4      	b.n	801a6c0 <__kernel_rem_pio2+0x350>
 801a6d6:	a90e      	add	r1, sp, #56	; 0x38
 801a6d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	430a      	orrs	r2, r1
 801a6e0:	e789      	b.n	801a5f6 <__kernel_rem_pio2+0x286>
 801a6e2:	3301      	adds	r3, #1
 801a6e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a6e8:	2900      	cmp	r1, #0
 801a6ea:	d0fa      	beq.n	801a6e2 <__kernel_rem_pio2+0x372>
 801a6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801a6f2:	446a      	add	r2, sp
 801a6f4:	3a98      	subs	r2, #152	; 0x98
 801a6f6:	920a      	str	r2, [sp, #40]	; 0x28
 801a6f8:	9a08      	ldr	r2, [sp, #32]
 801a6fa:	18e3      	adds	r3, r4, r3
 801a6fc:	18a5      	adds	r5, r4, r2
 801a6fe:	aa22      	add	r2, sp, #136	; 0x88
 801a700:	f104 0801 	add.w	r8, r4, #1
 801a704:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801a708:	9304      	str	r3, [sp, #16]
 801a70a:	9b04      	ldr	r3, [sp, #16]
 801a70c:	4543      	cmp	r3, r8
 801a70e:	da04      	bge.n	801a71a <__kernel_rem_pio2+0x3aa>
 801a710:	461c      	mov	r4, r3
 801a712:	e6a3      	b.n	801a45c <__kernel_rem_pio2+0xec>
 801a714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a716:	2301      	movs	r3, #1
 801a718:	e7e4      	b.n	801a6e4 <__kernel_rem_pio2+0x374>
 801a71a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a71c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a720:	f7e5 ff12 	bl	8000548 <__aeabi_i2d>
 801a724:	e8e5 0102 	strd	r0, r1, [r5], #8
 801a728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a72a:	46ab      	mov	fp, r5
 801a72c:	461c      	mov	r4, r3
 801a72e:	f04f 0900 	mov.w	r9, #0
 801a732:	2600      	movs	r6, #0
 801a734:	2700      	movs	r7, #0
 801a736:	9b06      	ldr	r3, [sp, #24]
 801a738:	4599      	cmp	r9, r3
 801a73a:	dd06      	ble.n	801a74a <__kernel_rem_pio2+0x3da>
 801a73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a73e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801a742:	f108 0801 	add.w	r8, r8, #1
 801a746:	930a      	str	r3, [sp, #40]	; 0x28
 801a748:	e7df      	b.n	801a70a <__kernel_rem_pio2+0x39a>
 801a74a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a74e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a752:	f7e5 ff63 	bl	800061c <__aeabi_dmul>
 801a756:	4602      	mov	r2, r0
 801a758:	460b      	mov	r3, r1
 801a75a:	4630      	mov	r0, r6
 801a75c:	4639      	mov	r1, r7
 801a75e:	f7e5 fda7 	bl	80002b0 <__adddf3>
 801a762:	f109 0901 	add.w	r9, r9, #1
 801a766:	4606      	mov	r6, r0
 801a768:	460f      	mov	r7, r1
 801a76a:	e7e4      	b.n	801a736 <__kernel_rem_pio2+0x3c6>
 801a76c:	3d01      	subs	r5, #1
 801a76e:	e748      	b.n	801a602 <__kernel_rem_pio2+0x292>
 801a770:	ec47 6b10 	vmov	d0, r6, r7
 801a774:	f1ca 0000 	rsb	r0, sl, #0
 801a778:	f000 fa92 	bl	801aca0 <scalbn>
 801a77c:	ec57 6b10 	vmov	r6, r7, d0
 801a780:	4ba0      	ldr	r3, [pc, #640]	; (801aa04 <__kernel_rem_pio2+0x694>)
 801a782:	ee10 0a10 	vmov	r0, s0
 801a786:	2200      	movs	r2, #0
 801a788:	4639      	mov	r1, r7
 801a78a:	f7e6 f9cd 	bl	8000b28 <__aeabi_dcmpge>
 801a78e:	b1f8      	cbz	r0, 801a7d0 <__kernel_rem_pio2+0x460>
 801a790:	4b9d      	ldr	r3, [pc, #628]	; (801aa08 <__kernel_rem_pio2+0x698>)
 801a792:	2200      	movs	r2, #0
 801a794:	4630      	mov	r0, r6
 801a796:	4639      	mov	r1, r7
 801a798:	f7e5 ff40 	bl	800061c <__aeabi_dmul>
 801a79c:	f7e6 f9d8 	bl	8000b50 <__aeabi_d2iz>
 801a7a0:	4680      	mov	r8, r0
 801a7a2:	f7e5 fed1 	bl	8000548 <__aeabi_i2d>
 801a7a6:	4b97      	ldr	r3, [pc, #604]	; (801aa04 <__kernel_rem_pio2+0x694>)
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	f7e5 ff37 	bl	800061c <__aeabi_dmul>
 801a7ae:	460b      	mov	r3, r1
 801a7b0:	4602      	mov	r2, r0
 801a7b2:	4639      	mov	r1, r7
 801a7b4:	4630      	mov	r0, r6
 801a7b6:	f7e5 fd79 	bl	80002ac <__aeabi_dsub>
 801a7ba:	f7e6 f9c9 	bl	8000b50 <__aeabi_d2iz>
 801a7be:	1c65      	adds	r5, r4, #1
 801a7c0:	ab0e      	add	r3, sp, #56	; 0x38
 801a7c2:	f10a 0a18 	add.w	sl, sl, #24
 801a7c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a7ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a7ce:	e720      	b.n	801a612 <__kernel_rem_pio2+0x2a2>
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	4639      	mov	r1, r7
 801a7d4:	f7e6 f9bc 	bl	8000b50 <__aeabi_d2iz>
 801a7d8:	ab0e      	add	r3, sp, #56	; 0x38
 801a7da:	4625      	mov	r5, r4
 801a7dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a7e0:	e717      	b.n	801a612 <__kernel_rem_pio2+0x2a2>
 801a7e2:	ab0e      	add	r3, sp, #56	; 0x38
 801a7e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801a7e8:	f7e5 feae 	bl	8000548 <__aeabi_i2d>
 801a7ec:	4632      	mov	r2, r6
 801a7ee:	463b      	mov	r3, r7
 801a7f0:	f7e5 ff14 	bl	800061c <__aeabi_dmul>
 801a7f4:	4b84      	ldr	r3, [pc, #528]	; (801aa08 <__kernel_rem_pio2+0x698>)
 801a7f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	4630      	mov	r0, r6
 801a7fe:	4639      	mov	r1, r7
 801a800:	f7e5 ff0c 	bl	800061c <__aeabi_dmul>
 801a804:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a808:	4606      	mov	r6, r0
 801a80a:	460f      	mov	r7, r1
 801a80c:	e70f      	b.n	801a62e <__kernel_rem_pio2+0x2be>
 801a80e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801a812:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801a816:	f7e5 ff01 	bl	800061c <__aeabi_dmul>
 801a81a:	4602      	mov	r2, r0
 801a81c:	460b      	mov	r3, r1
 801a81e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a822:	f7e5 fd45 	bl	80002b0 <__adddf3>
 801a826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a82a:	f108 0801 	add.w	r8, r8, #1
 801a82e:	9b02      	ldr	r3, [sp, #8]
 801a830:	4598      	cmp	r8, r3
 801a832:	dc01      	bgt.n	801a838 <__kernel_rem_pio2+0x4c8>
 801a834:	45b8      	cmp	r8, r7
 801a836:	ddea      	ble.n	801a80e <__kernel_rem_pio2+0x49e>
 801a838:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a83c:	ab4a      	add	r3, sp, #296	; 0x128
 801a83e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801a842:	ed87 7b00 	vstr	d7, [r7]
 801a846:	3e01      	subs	r6, #1
 801a848:	e6f8      	b.n	801a63c <__kernel_rem_pio2+0x2cc>
 801a84a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a84c:	2b02      	cmp	r3, #2
 801a84e:	dc0b      	bgt.n	801a868 <__kernel_rem_pio2+0x4f8>
 801a850:	2b00      	cmp	r3, #0
 801a852:	dc35      	bgt.n	801a8c0 <__kernel_rem_pio2+0x550>
 801a854:	d059      	beq.n	801a90a <__kernel_rem_pio2+0x59a>
 801a856:	9b04      	ldr	r3, [sp, #16]
 801a858:	f003 0007 	and.w	r0, r3, #7
 801a85c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a860:	ecbd 8b02 	vpop	{d8}
 801a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a868:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a86a:	2b03      	cmp	r3, #3
 801a86c:	d1f3      	bne.n	801a856 <__kernel_rem_pio2+0x4e6>
 801a86e:	ab4a      	add	r3, sp, #296	; 0x128
 801a870:	4423      	add	r3, r4
 801a872:	9306      	str	r3, [sp, #24]
 801a874:	461c      	mov	r4, r3
 801a876:	469a      	mov	sl, r3
 801a878:	9502      	str	r5, [sp, #8]
 801a87a:	9b02      	ldr	r3, [sp, #8]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	f1aa 0a08 	sub.w	sl, sl, #8
 801a882:	dc6b      	bgt.n	801a95c <__kernel_rem_pio2+0x5ec>
 801a884:	46aa      	mov	sl, r5
 801a886:	f1ba 0f01 	cmp.w	sl, #1
 801a88a:	f1a4 0408 	sub.w	r4, r4, #8
 801a88e:	f300 8085 	bgt.w	801a99c <__kernel_rem_pio2+0x62c>
 801a892:	9c06      	ldr	r4, [sp, #24]
 801a894:	2000      	movs	r0, #0
 801a896:	3408      	adds	r4, #8
 801a898:	2100      	movs	r1, #0
 801a89a:	2d01      	cmp	r5, #1
 801a89c:	f300 809d 	bgt.w	801a9da <__kernel_rem_pio2+0x66a>
 801a8a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801a8a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801a8a8:	f1bb 0f00 	cmp.w	fp, #0
 801a8ac:	f040 809b 	bne.w	801a9e6 <__kernel_rem_pio2+0x676>
 801a8b0:	9b01      	ldr	r3, [sp, #4]
 801a8b2:	e9c3 5600 	strd	r5, r6, [r3]
 801a8b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801a8ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a8be:	e7ca      	b.n	801a856 <__kernel_rem_pio2+0x4e6>
 801a8c0:	3408      	adds	r4, #8
 801a8c2:	ab4a      	add	r3, sp, #296	; 0x128
 801a8c4:	441c      	add	r4, r3
 801a8c6:	462e      	mov	r6, r5
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	2100      	movs	r1, #0
 801a8cc:	2e00      	cmp	r6, #0
 801a8ce:	da36      	bge.n	801a93e <__kernel_rem_pio2+0x5ce>
 801a8d0:	f1bb 0f00 	cmp.w	fp, #0
 801a8d4:	d039      	beq.n	801a94a <__kernel_rem_pio2+0x5da>
 801a8d6:	4602      	mov	r2, r0
 801a8d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8dc:	9c01      	ldr	r4, [sp, #4]
 801a8de:	e9c4 2300 	strd	r2, r3, [r4]
 801a8e2:	4602      	mov	r2, r0
 801a8e4:	460b      	mov	r3, r1
 801a8e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a8ea:	f7e5 fcdf 	bl	80002ac <__aeabi_dsub>
 801a8ee:	ae4c      	add	r6, sp, #304	; 0x130
 801a8f0:	2401      	movs	r4, #1
 801a8f2:	42a5      	cmp	r5, r4
 801a8f4:	da2c      	bge.n	801a950 <__kernel_rem_pio2+0x5e0>
 801a8f6:	f1bb 0f00 	cmp.w	fp, #0
 801a8fa:	d002      	beq.n	801a902 <__kernel_rem_pio2+0x592>
 801a8fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a900:	4619      	mov	r1, r3
 801a902:	9b01      	ldr	r3, [sp, #4]
 801a904:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a908:	e7a5      	b.n	801a856 <__kernel_rem_pio2+0x4e6>
 801a90a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801a90e:	eb0d 0403 	add.w	r4, sp, r3
 801a912:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a916:	2000      	movs	r0, #0
 801a918:	2100      	movs	r1, #0
 801a91a:	2d00      	cmp	r5, #0
 801a91c:	da09      	bge.n	801a932 <__kernel_rem_pio2+0x5c2>
 801a91e:	f1bb 0f00 	cmp.w	fp, #0
 801a922:	d002      	beq.n	801a92a <__kernel_rem_pio2+0x5ba>
 801a924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a928:	4619      	mov	r1, r3
 801a92a:	9b01      	ldr	r3, [sp, #4]
 801a92c:	e9c3 0100 	strd	r0, r1, [r3]
 801a930:	e791      	b.n	801a856 <__kernel_rem_pio2+0x4e6>
 801a932:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a936:	f7e5 fcbb 	bl	80002b0 <__adddf3>
 801a93a:	3d01      	subs	r5, #1
 801a93c:	e7ed      	b.n	801a91a <__kernel_rem_pio2+0x5aa>
 801a93e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a942:	f7e5 fcb5 	bl	80002b0 <__adddf3>
 801a946:	3e01      	subs	r6, #1
 801a948:	e7c0      	b.n	801a8cc <__kernel_rem_pio2+0x55c>
 801a94a:	4602      	mov	r2, r0
 801a94c:	460b      	mov	r3, r1
 801a94e:	e7c5      	b.n	801a8dc <__kernel_rem_pio2+0x56c>
 801a950:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a954:	f7e5 fcac 	bl	80002b0 <__adddf3>
 801a958:	3401      	adds	r4, #1
 801a95a:	e7ca      	b.n	801a8f2 <__kernel_rem_pio2+0x582>
 801a95c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a960:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a964:	9b02      	ldr	r3, [sp, #8]
 801a966:	3b01      	subs	r3, #1
 801a968:	9302      	str	r3, [sp, #8]
 801a96a:	4632      	mov	r2, r6
 801a96c:	463b      	mov	r3, r7
 801a96e:	4640      	mov	r0, r8
 801a970:	4649      	mov	r1, r9
 801a972:	f7e5 fc9d 	bl	80002b0 <__adddf3>
 801a976:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a97a:	4602      	mov	r2, r0
 801a97c:	460b      	mov	r3, r1
 801a97e:	4640      	mov	r0, r8
 801a980:	4649      	mov	r1, r9
 801a982:	f7e5 fc93 	bl	80002ac <__aeabi_dsub>
 801a986:	4632      	mov	r2, r6
 801a988:	463b      	mov	r3, r7
 801a98a:	f7e5 fc91 	bl	80002b0 <__adddf3>
 801a98e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801a992:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a996:	ed8a 7b00 	vstr	d7, [sl]
 801a99a:	e76e      	b.n	801a87a <__kernel_rem_pio2+0x50a>
 801a99c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a9a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a9a4:	4640      	mov	r0, r8
 801a9a6:	4632      	mov	r2, r6
 801a9a8:	463b      	mov	r3, r7
 801a9aa:	4649      	mov	r1, r9
 801a9ac:	f7e5 fc80 	bl	80002b0 <__adddf3>
 801a9b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9b4:	4602      	mov	r2, r0
 801a9b6:	460b      	mov	r3, r1
 801a9b8:	4640      	mov	r0, r8
 801a9ba:	4649      	mov	r1, r9
 801a9bc:	f7e5 fc76 	bl	80002ac <__aeabi_dsub>
 801a9c0:	4632      	mov	r2, r6
 801a9c2:	463b      	mov	r3, r7
 801a9c4:	f7e5 fc74 	bl	80002b0 <__adddf3>
 801a9c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a9d0:	ed84 7b00 	vstr	d7, [r4]
 801a9d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a9d8:	e755      	b.n	801a886 <__kernel_rem_pio2+0x516>
 801a9da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a9de:	f7e5 fc67 	bl	80002b0 <__adddf3>
 801a9e2:	3d01      	subs	r5, #1
 801a9e4:	e759      	b.n	801a89a <__kernel_rem_pio2+0x52a>
 801a9e6:	9b01      	ldr	r3, [sp, #4]
 801a9e8:	9a01      	ldr	r2, [sp, #4]
 801a9ea:	601d      	str	r5, [r3, #0]
 801a9ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a9f0:	605c      	str	r4, [r3, #4]
 801a9f2:	609f      	str	r7, [r3, #8]
 801a9f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a9f8:	60d3      	str	r3, [r2, #12]
 801a9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9fe:	6110      	str	r0, [r2, #16]
 801aa00:	6153      	str	r3, [r2, #20]
 801aa02:	e728      	b.n	801a856 <__kernel_rem_pio2+0x4e6>
 801aa04:	41700000 	.word	0x41700000
 801aa08:	3e700000 	.word	0x3e700000
 801aa0c:	00000000 	.word	0x00000000

0801aa10 <__kernel_sin>:
 801aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa14:	ed2d 8b04 	vpush	{d8-d9}
 801aa18:	eeb0 8a41 	vmov.f32	s16, s2
 801aa1c:	eef0 8a61 	vmov.f32	s17, s3
 801aa20:	ec55 4b10 	vmov	r4, r5, d0
 801aa24:	b083      	sub	sp, #12
 801aa26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aa2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801aa2e:	9001      	str	r0, [sp, #4]
 801aa30:	da06      	bge.n	801aa40 <__kernel_sin+0x30>
 801aa32:	ee10 0a10 	vmov	r0, s0
 801aa36:	4629      	mov	r1, r5
 801aa38:	f7e6 f88a 	bl	8000b50 <__aeabi_d2iz>
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	d051      	beq.n	801aae4 <__kernel_sin+0xd4>
 801aa40:	4622      	mov	r2, r4
 801aa42:	462b      	mov	r3, r5
 801aa44:	4620      	mov	r0, r4
 801aa46:	4629      	mov	r1, r5
 801aa48:	f7e5 fde8 	bl	800061c <__aeabi_dmul>
 801aa4c:	4682      	mov	sl, r0
 801aa4e:	468b      	mov	fp, r1
 801aa50:	4602      	mov	r2, r0
 801aa52:	460b      	mov	r3, r1
 801aa54:	4620      	mov	r0, r4
 801aa56:	4629      	mov	r1, r5
 801aa58:	f7e5 fde0 	bl	800061c <__aeabi_dmul>
 801aa5c:	a341      	add	r3, pc, #260	; (adr r3, 801ab64 <__kernel_sin+0x154>)
 801aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa62:	4680      	mov	r8, r0
 801aa64:	4689      	mov	r9, r1
 801aa66:	4650      	mov	r0, sl
 801aa68:	4659      	mov	r1, fp
 801aa6a:	f7e5 fdd7 	bl	800061c <__aeabi_dmul>
 801aa6e:	a33f      	add	r3, pc, #252	; (adr r3, 801ab6c <__kernel_sin+0x15c>)
 801aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa74:	f7e5 fc1a 	bl	80002ac <__aeabi_dsub>
 801aa78:	4652      	mov	r2, sl
 801aa7a:	465b      	mov	r3, fp
 801aa7c:	f7e5 fdce 	bl	800061c <__aeabi_dmul>
 801aa80:	a33c      	add	r3, pc, #240	; (adr r3, 801ab74 <__kernel_sin+0x164>)
 801aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa86:	f7e5 fc13 	bl	80002b0 <__adddf3>
 801aa8a:	4652      	mov	r2, sl
 801aa8c:	465b      	mov	r3, fp
 801aa8e:	f7e5 fdc5 	bl	800061c <__aeabi_dmul>
 801aa92:	a33a      	add	r3, pc, #232	; (adr r3, 801ab7c <__kernel_sin+0x16c>)
 801aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa98:	f7e5 fc08 	bl	80002ac <__aeabi_dsub>
 801aa9c:	4652      	mov	r2, sl
 801aa9e:	465b      	mov	r3, fp
 801aaa0:	f7e5 fdbc 	bl	800061c <__aeabi_dmul>
 801aaa4:	a337      	add	r3, pc, #220	; (adr r3, 801ab84 <__kernel_sin+0x174>)
 801aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaaa:	f7e5 fc01 	bl	80002b0 <__adddf3>
 801aaae:	9b01      	ldr	r3, [sp, #4]
 801aab0:	4606      	mov	r6, r0
 801aab2:	460f      	mov	r7, r1
 801aab4:	b9eb      	cbnz	r3, 801aaf2 <__kernel_sin+0xe2>
 801aab6:	4602      	mov	r2, r0
 801aab8:	460b      	mov	r3, r1
 801aaba:	4650      	mov	r0, sl
 801aabc:	4659      	mov	r1, fp
 801aabe:	f7e5 fdad 	bl	800061c <__aeabi_dmul>
 801aac2:	a325      	add	r3, pc, #148	; (adr r3, 801ab58 <__kernel_sin+0x148>)
 801aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac8:	f7e5 fbf0 	bl	80002ac <__aeabi_dsub>
 801aacc:	4642      	mov	r2, r8
 801aace:	464b      	mov	r3, r9
 801aad0:	f7e5 fda4 	bl	800061c <__aeabi_dmul>
 801aad4:	4602      	mov	r2, r0
 801aad6:	460b      	mov	r3, r1
 801aad8:	4620      	mov	r0, r4
 801aada:	4629      	mov	r1, r5
 801aadc:	f7e5 fbe8 	bl	80002b0 <__adddf3>
 801aae0:	4604      	mov	r4, r0
 801aae2:	460d      	mov	r5, r1
 801aae4:	ec45 4b10 	vmov	d0, r4, r5
 801aae8:	b003      	add	sp, #12
 801aaea:	ecbd 8b04 	vpop	{d8-d9}
 801aaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf2:	4b1b      	ldr	r3, [pc, #108]	; (801ab60 <__kernel_sin+0x150>)
 801aaf4:	ec51 0b18 	vmov	r0, r1, d8
 801aaf8:	2200      	movs	r2, #0
 801aafa:	f7e5 fd8f 	bl	800061c <__aeabi_dmul>
 801aafe:	4632      	mov	r2, r6
 801ab00:	ec41 0b19 	vmov	d9, r0, r1
 801ab04:	463b      	mov	r3, r7
 801ab06:	4640      	mov	r0, r8
 801ab08:	4649      	mov	r1, r9
 801ab0a:	f7e5 fd87 	bl	800061c <__aeabi_dmul>
 801ab0e:	4602      	mov	r2, r0
 801ab10:	460b      	mov	r3, r1
 801ab12:	ec51 0b19 	vmov	r0, r1, d9
 801ab16:	f7e5 fbc9 	bl	80002ac <__aeabi_dsub>
 801ab1a:	4652      	mov	r2, sl
 801ab1c:	465b      	mov	r3, fp
 801ab1e:	f7e5 fd7d 	bl	800061c <__aeabi_dmul>
 801ab22:	ec53 2b18 	vmov	r2, r3, d8
 801ab26:	f7e5 fbc1 	bl	80002ac <__aeabi_dsub>
 801ab2a:	a30b      	add	r3, pc, #44	; (adr r3, 801ab58 <__kernel_sin+0x148>)
 801ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab30:	4606      	mov	r6, r0
 801ab32:	460f      	mov	r7, r1
 801ab34:	4640      	mov	r0, r8
 801ab36:	4649      	mov	r1, r9
 801ab38:	f7e5 fd70 	bl	800061c <__aeabi_dmul>
 801ab3c:	4602      	mov	r2, r0
 801ab3e:	460b      	mov	r3, r1
 801ab40:	4630      	mov	r0, r6
 801ab42:	4639      	mov	r1, r7
 801ab44:	f7e5 fbb4 	bl	80002b0 <__adddf3>
 801ab48:	4602      	mov	r2, r0
 801ab4a:	460b      	mov	r3, r1
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	4629      	mov	r1, r5
 801ab50:	f7e5 fbac 	bl	80002ac <__aeabi_dsub>
 801ab54:	e7c4      	b.n	801aae0 <__kernel_sin+0xd0>
 801ab56:	bf00      	nop
 801ab58:	55555549 	.word	0x55555549
 801ab5c:	3fc55555 	.word	0x3fc55555
 801ab60:	3fe00000 	.word	0x3fe00000
 801ab64:	5acfd57c 	.word	0x5acfd57c
 801ab68:	3de5d93a 	.word	0x3de5d93a
 801ab6c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ab70:	3e5ae5e6 	.word	0x3e5ae5e6
 801ab74:	57b1fe7d 	.word	0x57b1fe7d
 801ab78:	3ec71de3 	.word	0x3ec71de3
 801ab7c:	19c161d5 	.word	0x19c161d5
 801ab80:	3f2a01a0 	.word	0x3f2a01a0
 801ab84:	1110f8a6 	.word	0x1110f8a6
 801ab88:	3f811111 	.word	0x3f811111

0801ab8c <fabs>:
 801ab8c:	ec51 0b10 	vmov	r0, r1, d0
 801ab90:	ee10 2a10 	vmov	r2, s0
 801ab94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ab98:	ec43 2b10 	vmov	d0, r2, r3
 801ab9c:	4770      	bx	lr
	...

0801aba0 <floor>:
 801aba0:	ec51 0b10 	vmov	r0, r1, d0
 801aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aba8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801abac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801abb0:	2e13      	cmp	r6, #19
 801abb2:	ee10 5a10 	vmov	r5, s0
 801abb6:	ee10 8a10 	vmov	r8, s0
 801abba:	460c      	mov	r4, r1
 801abbc:	dc32      	bgt.n	801ac24 <floor+0x84>
 801abbe:	2e00      	cmp	r6, #0
 801abc0:	da14      	bge.n	801abec <floor+0x4c>
 801abc2:	a333      	add	r3, pc, #204	; (adr r3, 801ac90 <floor+0xf0>)
 801abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc8:	f7e5 fb72 	bl	80002b0 <__adddf3>
 801abcc:	2200      	movs	r2, #0
 801abce:	2300      	movs	r3, #0
 801abd0:	f7e5 ffb4 	bl	8000b3c <__aeabi_dcmpgt>
 801abd4:	b138      	cbz	r0, 801abe6 <floor+0x46>
 801abd6:	2c00      	cmp	r4, #0
 801abd8:	da57      	bge.n	801ac8a <floor+0xea>
 801abda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801abde:	431d      	orrs	r5, r3
 801abe0:	d001      	beq.n	801abe6 <floor+0x46>
 801abe2:	4c2d      	ldr	r4, [pc, #180]	; (801ac98 <floor+0xf8>)
 801abe4:	2500      	movs	r5, #0
 801abe6:	4621      	mov	r1, r4
 801abe8:	4628      	mov	r0, r5
 801abea:	e025      	b.n	801ac38 <floor+0x98>
 801abec:	4f2b      	ldr	r7, [pc, #172]	; (801ac9c <floor+0xfc>)
 801abee:	4137      	asrs	r7, r6
 801abf0:	ea01 0307 	and.w	r3, r1, r7
 801abf4:	4303      	orrs	r3, r0
 801abf6:	d01f      	beq.n	801ac38 <floor+0x98>
 801abf8:	a325      	add	r3, pc, #148	; (adr r3, 801ac90 <floor+0xf0>)
 801abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfe:	f7e5 fb57 	bl	80002b0 <__adddf3>
 801ac02:	2200      	movs	r2, #0
 801ac04:	2300      	movs	r3, #0
 801ac06:	f7e5 ff99 	bl	8000b3c <__aeabi_dcmpgt>
 801ac0a:	2800      	cmp	r0, #0
 801ac0c:	d0eb      	beq.n	801abe6 <floor+0x46>
 801ac0e:	2c00      	cmp	r4, #0
 801ac10:	bfbe      	ittt	lt
 801ac12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ac16:	fa43 f606 	asrlt.w	r6, r3, r6
 801ac1a:	19a4      	addlt	r4, r4, r6
 801ac1c:	ea24 0407 	bic.w	r4, r4, r7
 801ac20:	2500      	movs	r5, #0
 801ac22:	e7e0      	b.n	801abe6 <floor+0x46>
 801ac24:	2e33      	cmp	r6, #51	; 0x33
 801ac26:	dd0b      	ble.n	801ac40 <floor+0xa0>
 801ac28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ac2c:	d104      	bne.n	801ac38 <floor+0x98>
 801ac2e:	ee10 2a10 	vmov	r2, s0
 801ac32:	460b      	mov	r3, r1
 801ac34:	f7e5 fb3c 	bl	80002b0 <__adddf3>
 801ac38:	ec41 0b10 	vmov	d0, r0, r1
 801ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ac44:	f04f 33ff 	mov.w	r3, #4294967295
 801ac48:	fa23 f707 	lsr.w	r7, r3, r7
 801ac4c:	4207      	tst	r7, r0
 801ac4e:	d0f3      	beq.n	801ac38 <floor+0x98>
 801ac50:	a30f      	add	r3, pc, #60	; (adr r3, 801ac90 <floor+0xf0>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	f7e5 fb2b 	bl	80002b0 <__adddf3>
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	f7e5 ff6d 	bl	8000b3c <__aeabi_dcmpgt>
 801ac62:	2800      	cmp	r0, #0
 801ac64:	d0bf      	beq.n	801abe6 <floor+0x46>
 801ac66:	2c00      	cmp	r4, #0
 801ac68:	da02      	bge.n	801ac70 <floor+0xd0>
 801ac6a:	2e14      	cmp	r6, #20
 801ac6c:	d103      	bne.n	801ac76 <floor+0xd6>
 801ac6e:	3401      	adds	r4, #1
 801ac70:	ea25 0507 	bic.w	r5, r5, r7
 801ac74:	e7b7      	b.n	801abe6 <floor+0x46>
 801ac76:	2301      	movs	r3, #1
 801ac78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ac7c:	fa03 f606 	lsl.w	r6, r3, r6
 801ac80:	4435      	add	r5, r6
 801ac82:	4545      	cmp	r5, r8
 801ac84:	bf38      	it	cc
 801ac86:	18e4      	addcc	r4, r4, r3
 801ac88:	e7f2      	b.n	801ac70 <floor+0xd0>
 801ac8a:	2500      	movs	r5, #0
 801ac8c:	462c      	mov	r4, r5
 801ac8e:	e7aa      	b.n	801abe6 <floor+0x46>
 801ac90:	8800759c 	.word	0x8800759c
 801ac94:	7e37e43c 	.word	0x7e37e43c
 801ac98:	bff00000 	.word	0xbff00000
 801ac9c:	000fffff 	.word	0x000fffff

0801aca0 <scalbn>:
 801aca0:	b570      	push	{r4, r5, r6, lr}
 801aca2:	ec55 4b10 	vmov	r4, r5, d0
 801aca6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801acaa:	4606      	mov	r6, r0
 801acac:	462b      	mov	r3, r5
 801acae:	b99a      	cbnz	r2, 801acd8 <scalbn+0x38>
 801acb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801acb4:	4323      	orrs	r3, r4
 801acb6:	d036      	beq.n	801ad26 <scalbn+0x86>
 801acb8:	4b39      	ldr	r3, [pc, #228]	; (801ada0 <scalbn+0x100>)
 801acba:	4629      	mov	r1, r5
 801acbc:	ee10 0a10 	vmov	r0, s0
 801acc0:	2200      	movs	r2, #0
 801acc2:	f7e5 fcab 	bl	800061c <__aeabi_dmul>
 801acc6:	4b37      	ldr	r3, [pc, #220]	; (801ada4 <scalbn+0x104>)
 801acc8:	429e      	cmp	r6, r3
 801acca:	4604      	mov	r4, r0
 801accc:	460d      	mov	r5, r1
 801acce:	da10      	bge.n	801acf2 <scalbn+0x52>
 801acd0:	a32b      	add	r3, pc, #172	; (adr r3, 801ad80 <scalbn+0xe0>)
 801acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd6:	e03a      	b.n	801ad4e <scalbn+0xae>
 801acd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801acdc:	428a      	cmp	r2, r1
 801acde:	d10c      	bne.n	801acfa <scalbn+0x5a>
 801ace0:	ee10 2a10 	vmov	r2, s0
 801ace4:	4620      	mov	r0, r4
 801ace6:	4629      	mov	r1, r5
 801ace8:	f7e5 fae2 	bl	80002b0 <__adddf3>
 801acec:	4604      	mov	r4, r0
 801acee:	460d      	mov	r5, r1
 801acf0:	e019      	b.n	801ad26 <scalbn+0x86>
 801acf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801acf6:	460b      	mov	r3, r1
 801acf8:	3a36      	subs	r2, #54	; 0x36
 801acfa:	4432      	add	r2, r6
 801acfc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ad00:	428a      	cmp	r2, r1
 801ad02:	dd08      	ble.n	801ad16 <scalbn+0x76>
 801ad04:	2d00      	cmp	r5, #0
 801ad06:	a120      	add	r1, pc, #128	; (adr r1, 801ad88 <scalbn+0xe8>)
 801ad08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad0c:	da1c      	bge.n	801ad48 <scalbn+0xa8>
 801ad0e:	a120      	add	r1, pc, #128	; (adr r1, 801ad90 <scalbn+0xf0>)
 801ad10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad14:	e018      	b.n	801ad48 <scalbn+0xa8>
 801ad16:	2a00      	cmp	r2, #0
 801ad18:	dd08      	ble.n	801ad2c <scalbn+0x8c>
 801ad1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ad1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ad22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ad26:	ec45 4b10 	vmov	d0, r4, r5
 801ad2a:	bd70      	pop	{r4, r5, r6, pc}
 801ad2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ad30:	da19      	bge.n	801ad66 <scalbn+0xc6>
 801ad32:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ad36:	429e      	cmp	r6, r3
 801ad38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ad3c:	dd0a      	ble.n	801ad54 <scalbn+0xb4>
 801ad3e:	a112      	add	r1, pc, #72	; (adr r1, 801ad88 <scalbn+0xe8>)
 801ad40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d1e2      	bne.n	801ad0e <scalbn+0x6e>
 801ad48:	a30f      	add	r3, pc, #60	; (adr r3, 801ad88 <scalbn+0xe8>)
 801ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad4e:	f7e5 fc65 	bl	800061c <__aeabi_dmul>
 801ad52:	e7cb      	b.n	801acec <scalbn+0x4c>
 801ad54:	a10a      	add	r1, pc, #40	; (adr r1, 801ad80 <scalbn+0xe0>)
 801ad56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d0b8      	beq.n	801acd0 <scalbn+0x30>
 801ad5e:	a10e      	add	r1, pc, #56	; (adr r1, 801ad98 <scalbn+0xf8>)
 801ad60:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad64:	e7b4      	b.n	801acd0 <scalbn+0x30>
 801ad66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ad6a:	3236      	adds	r2, #54	; 0x36
 801ad6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ad70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ad74:	4620      	mov	r0, r4
 801ad76:	4b0c      	ldr	r3, [pc, #48]	; (801ada8 <scalbn+0x108>)
 801ad78:	2200      	movs	r2, #0
 801ad7a:	e7e8      	b.n	801ad4e <scalbn+0xae>
 801ad7c:	f3af 8000 	nop.w
 801ad80:	c2f8f359 	.word	0xc2f8f359
 801ad84:	01a56e1f 	.word	0x01a56e1f
 801ad88:	8800759c 	.word	0x8800759c
 801ad8c:	7e37e43c 	.word	0x7e37e43c
 801ad90:	8800759c 	.word	0x8800759c
 801ad94:	fe37e43c 	.word	0xfe37e43c
 801ad98:	c2f8f359 	.word	0xc2f8f359
 801ad9c:	81a56e1f 	.word	0x81a56e1f
 801ada0:	43500000 	.word	0x43500000
 801ada4:	ffff3cb0 	.word	0xffff3cb0
 801ada8:	3c900000 	.word	0x3c900000

0801adac <_init>:
 801adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adae:	bf00      	nop
 801adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adb2:	bc08      	pop	{r3}
 801adb4:	469e      	mov	lr, r3
 801adb6:	4770      	bx	lr

0801adb8 <_fini>:
 801adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adba:	bf00      	nop
 801adbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adbe:	bc08      	pop	{r3}
 801adc0:	469e      	mov	lr, r3
 801adc2:	4770      	bx	lr
